
freertos2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08006c80  08006c80  00007c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dd4  08006dd4  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006dd4  08006dd4  00007dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ddc  08006ddc  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ddc  08006ddc  00007ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006de4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fd8  20000060  08006e44  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002038  08006e44  00009038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af68  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039ad  00000000  00000000  00022ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c8  00000000  00000000  000269a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ab  00000000  00000000  00028070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d99  00000000  00000000  0002921b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000197c5  00000000  00000000  00051fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc7dc  00000000  00000000  0006b779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167f55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000623c  00000000  00000000  00167f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0016e1d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c68 	.word	0x08006c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08006c68 	.word	0x08006c68

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0

  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  blinkBlock = xSemaphoreCreateMutex();
 80004c4:	2001      	movs	r0, #1
 80004c6:	f003 fd38 	bl	8003f3a <xQueueCreateMutex>
 80004ca:	4603      	mov	r3, r0
 80004cc:	4a15      	ldr	r2, [pc, #84]	@ (8000524 <MX_FREERTOS_Init+0x64>)
 80004ce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004d0:	4a15      	ldr	r2, [pc, #84]	@ (8000528 <MX_FREERTOS_Init+0x68>)
 80004d2:	2100      	movs	r1, #0
 80004d4:	4815      	ldr	r0, [pc, #84]	@ (800052c <MX_FREERTOS_Init+0x6c>)
 80004d6:	f003 fa3b 	bl	8003950 <osThreadNew>
 80004da:	4603      	mov	r3, r0
 80004dc:	4a14      	ldr	r2, [pc, #80]	@ (8000530 <MX_FREERTOS_Init+0x70>)
 80004de:	6013      	str	r3, [r2, #0]

  /* creation of Blink1Task */
  Blink1TaskHandle = osThreadNew(Blink1, NULL, &Blink1Task_attributes);
 80004e0:	4a14      	ldr	r2, [pc, #80]	@ (8000534 <MX_FREERTOS_Init+0x74>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4814      	ldr	r0, [pc, #80]	@ (8000538 <MX_FREERTOS_Init+0x78>)
 80004e6:	f003 fa33 	bl	8003950 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a13      	ldr	r2, [pc, #76]	@ (800053c <MX_FREERTOS_Init+0x7c>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of Blink2Task */
  Blink2TaskHandle = osThreadNew(Blink2, NULL, &Blink2Task_attributes);
 80004f0:	4a13      	ldr	r2, [pc, #76]	@ (8000540 <MX_FREERTOS_Init+0x80>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4813      	ldr	r0, [pc, #76]	@ (8000544 <MX_FREERTOS_Init+0x84>)
 80004f6:	f003 fa2b 	bl	8003950 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <MX_FREERTOS_Init+0x88>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* creation of TriggTask */
  TriggTaskHandle = osThreadNew(Trigg, NULL, &TriggTask_attributes);
 8000500:	4a12      	ldr	r2, [pc, #72]	@ (800054c <MX_FREERTOS_Init+0x8c>)
 8000502:	2100      	movs	r1, #0
 8000504:	4812      	ldr	r0, [pc, #72]	@ (8000550 <MX_FREERTOS_Init+0x90>)
 8000506:	f003 fa23 	bl	8003950 <osThreadNew>
 800050a:	4603      	mov	r3, r0
 800050c:	4a11      	ldr	r2, [pc, #68]	@ (8000554 <MX_FREERTOS_Init+0x94>)
 800050e:	6013      	str	r3, [r2, #0]

  /* creation of UserbuttonTask */
  UserbuttonTaskHandle = osThreadNew(Userbutton, NULL, &UserbuttonTask_attributes);
 8000510:	4a11      	ldr	r2, [pc, #68]	@ (8000558 <MX_FREERTOS_Init+0x98>)
 8000512:	2100      	movs	r1, #0
 8000514:	4811      	ldr	r0, [pc, #68]	@ (800055c <MX_FREERTOS_Init+0x9c>)
 8000516:	f003 fa1b 	bl	8003950 <osThreadNew>
 800051a:	4603      	mov	r3, r0
 800051c:	4a10      	ldr	r2, [pc, #64]	@ (8000560 <MX_FREERTOS_Init+0xa0>)
 800051e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000520:	bf00      	nop
 8000522:	bd80      	pop	{r7, pc}
 8000524:	20000080 	.word	0x20000080
 8000528:	08006cd8 	.word	0x08006cd8
 800052c:	08000565 	.word	0x08000565
 8000530:	20000084 	.word	0x20000084
 8000534:	08006cfc 	.word	0x08006cfc
 8000538:	08000575 	.word	0x08000575
 800053c:	20000088 	.word	0x20000088
 8000540:	08006d20 	.word	0x08006d20
 8000544:	080005c5 	.word	0x080005c5
 8000548:	2000008c 	.word	0x2000008c
 800054c:	08006d44 	.word	0x08006d44
 8000550:	08000601 	.word	0x08000601
 8000554:	20000090 	.word	0x20000090
 8000558:	08006d68 	.word	0x08006d68
 800055c:	0800062d 	.word	0x0800062d
 8000560:	20000094 	.word	0x20000094

08000564 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800056c:	2001      	movs	r0, #1
 800056e:	f003 fa81 	bl	8003a74 <osDelay>
 8000572:	e7fb      	b.n	800056c <StartDefaultTask+0x8>

08000574 <Blink1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink1 */
void Blink1(void *argument)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
//		vTaskDelayUntil( &xLastWakeTime, xPeriod );
//	}

	/*task2*/
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(100);
 800057c:	2364      	movs	r3, #100	@ 0x64
 800057e:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000580:	f004 fdb4 	bl	80050ec <xTaskGetTickCount>
 8000584:	4603      	mov	r3, r0
 8000586:	60bb      	str	r3, [r7, #8]

	for(;;){
		if(xSemaphoreTake(blinkBlock, (TickType_t) 10 ) == pdTRUE ){ //if mutex can be obtained, toggle led
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <Blink1+0x4c>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	210a      	movs	r1, #10
 800058e:	4618      	mov	r0, r3
 8000590:	f003 ff86 	bl	80044a0 <xQueueSemaphoreTake>
 8000594:	4603      	mov	r3, r0
 8000596:	2b01      	cmp	r3, #1
 8000598:	d1f6      	bne.n	8000588 <Blink1+0x14>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800059a:	2120      	movs	r1, #32
 800059c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005a0:	f000 fdf4 	bl	800118c <HAL_GPIO_TogglePin>
			vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80005a4:	f107 0308 	add.w	r3, r7, #8
 80005a8:	68f9      	ldr	r1, [r7, #12]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f004 fbcc 	bl	8004d48 <vTaskDelayUntil>
			xSemaphoreGive(blinkBlock); //release lock
 80005b0:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <Blink1+0x4c>)
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	2300      	movs	r3, #0
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	f003 fcef 	bl	8003f9c <xQueueGenericSend>
		if(xSemaphoreTake(blinkBlock, (TickType_t) 10 ) == pdTRUE ){ //if mutex can be obtained, toggle led
 80005be:	e7e3      	b.n	8000588 <Blink1+0x14>
 80005c0:	20000080 	.word	0x20000080

080005c4 <Blink2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink2 */
void Blink2(void *argument)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink2 */

	/*task1*/
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20) ; // ms to ticks
 80005cc:	2314      	movs	r3, #20
 80005ce:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80005d0:	f004 fd8c 	bl	80050ec <xTaskGetTickCount>
 80005d4:	4603      	mov	r3, r0
 80005d6:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		varBlink2 = 1;
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <Blink2+0x38>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
		wait_cycles(1);
 80005de:	2001      	movs	r0, #1
 80005e0:	f000 f85c 	bl	800069c <wait_cycles>
		varBlink2 = 0;
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <Blink2+0x38>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80005ea:	f107 0308 	add.w	r3, r7, #8
 80005ee:	68f9      	ldr	r1, [r7, #12]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f004 fba9 	bl	8004d48 <vTaskDelayUntil>
		varBlink2 = 1;
 80005f6:	bf00      	nop
 80005f8:	e7ee      	b.n	80005d8 <Blink2+0x14>
 80005fa:	bf00      	nop
 80005fc:	2000007c 	.word	0x2000007c

08000600 <Trigg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Trigg */
void Trigg(void *argument)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Trigg */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(200) ; // ms to ticks
 8000608:	23c8      	movs	r3, #200	@ 0xc8
 800060a:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 800060c:	f004 fd6e 	bl	80050ec <xTaskGetTickCount>
 8000610:	4603      	mov	r3, r0
 8000612:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000614:	f107 0308 	add.w	r3, r7, #8
 8000618:	68f9      	ldr	r1, [r7, #12]
 800061a:	4618      	mov	r0, r3
 800061c:	f004 fb94 	bl	8004d48 <vTaskDelayUntil>
		wait_cycles(10); //add a breakpoint in this line
 8000620:	200a      	movs	r0, #10
 8000622:	f000 f83b 	bl	800069c <wait_cycles>
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 8000626:	bf00      	nop
 8000628:	e7f4      	b.n	8000614 <Trigg+0x14>
	...

0800062c <Userbutton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Userbutton */
void Userbutton(void *argument)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
//		vTaskDelayUntil( &xLastWakeTime, xPeriod );
//	}

	/*task2*/
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(10);
 8000634:	230a      	movs	r3, #10
 8000636:	617b      	str	r3, [r7, #20]
	xLastWakeTime = xTaskGetTickCount();
 8000638:	f004 fd58 	bl	80050ec <xTaskGetTickCount>
 800063c:	4603      	mov	r3, r0
 800063e:	60fb      	str	r3, [r7, #12]

	TaskHandle_t thisTask = xTaskGetCurrentTaskHandle();
 8000640:	f005 f89c 	bl	800577c <xTaskGetCurrentTaskHandle>
 8000644:	6138      	str	r0, [r7, #16]

	for(;;){
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET){
 8000646:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800064a:	4812      	ldr	r0, [pc, #72]	@ (8000694 <Userbutton+0x68>)
 800064c:	f000 fd6e 	bl	800112c <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d106      	bne.n	8000664 <Userbutton+0x38>
			xSemaphoreTake(blinkBlock, 10);	//is this ok? doesn't seem to block execution but maybe not good practice
 8000656:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <Userbutton+0x6c>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	210a      	movs	r1, #10
 800065c:	4618      	mov	r0, r3
 800065e:	f003 ff1f 	bl	80044a0 <xQueueSemaphoreTake>
 8000662:	e00f      	b.n	8000684 <Userbutton+0x58>
		}
		else if( xSemaphoreGetMutexHolder(blinkBlock) == thisTask ){
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <Userbutton+0x6c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f003 fc7e 	bl	8003f6a <xQueueGetMutexHolder>
 800066e:	4602      	mov	r2, r0
 8000670:	693b      	ldr	r3, [r7, #16]
 8000672:	4293      	cmp	r3, r2
 8000674:	d106      	bne.n	8000684 <Userbutton+0x58>
			xSemaphoreGive(blinkBlock);
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <Userbutton+0x6c>)
 8000678:	6818      	ldr	r0, [r3, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2200      	movs	r2, #0
 800067e:	2100      	movs	r1, #0
 8000680:	f003 fc8c 	bl	8003f9c <xQueueGenericSend>
		}
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000684:	f107 030c 	add.w	r3, r7, #12
 8000688:	6979      	ldr	r1, [r7, #20]
 800068a:	4618      	mov	r0, r3
 800068c:	f004 fb5c 	bl	8004d48 <vTaskDelayUntil>
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)==GPIO_PIN_RESET){
 8000690:	e7d9      	b.n	8000646 <Userbutton+0x1a>
 8000692:	bf00      	nop
 8000694:	48000800 	.word	0x48000800
 8000698:	20000080 	.word	0x20000080

0800069c <wait_cycles>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void wait_cycles( uint32_t n ) {
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint32_t l = n/3; //cycles per loop is 3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a07      	ldr	r2, [pc, #28]	@ (80006c4 <wait_cycles+0x28>)
 80006a8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ac:	085b      	lsrs	r3, r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
	asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3b01      	subs	r3, #1
 80006b4:	d1fd      	bne.n	80006b2 <wait_cycles+0x16>
 80006b6:	60fb      	str	r3, [r7, #12]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	aaaaaaab 	.word	0xaaaaaaab

080006c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08a      	sub	sp, #40	@ 0x28
 80006cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006de:	4b2b      	ldr	r3, [pc, #172]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e2:	4a2a      	ldr	r2, [pc, #168]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006e4:	f043 0304 	orr.w	r3, r3, #4
 80006e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ea:	4b28      	ldr	r3, [pc, #160]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ee:	f003 0304 	and.w	r3, r3, #4
 80006f2:	613b      	str	r3, [r7, #16]
 80006f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	4b25      	ldr	r3, [pc, #148]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006fa:	4a24      	ldr	r2, [pc, #144]	@ (800078c <MX_GPIO_Init+0xc4>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	4a1e      	ldr	r2, [pc, #120]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800071a:	4b1c      	ldr	r3, [pc, #112]	@ (800078c <MX_GPIO_Init+0xc4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800072a:	4a18      	ldr	r2, [pc, #96]	@ (800078c <MX_GPIO_Init+0xc4>)
 800072c:	f043 0302 	orr.w	r3, r3, #2
 8000730:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000732:	4b16      	ldr	r3, [pc, #88]	@ (800078c <MX_GPIO_Init+0xc4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	2120      	movs	r1, #32
 8000742:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000746:	f000 fd09 	bl	800115c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800074a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800074e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000750:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	4619      	mov	r1, r3
 8000760:	480b      	ldr	r0, [pc, #44]	@ (8000790 <MX_GPIO_Init+0xc8>)
 8000762:	f000 fb39 	bl	8000dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000766:	2320      	movs	r3, #32
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	4619      	mov	r1, r3
 800077c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000780:	f000 fb2a 	bl	8000dd8 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3728      	adds	r7, #40	@ 0x28
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000
 8000790:	48000800 	.word	0x48000800

08000794 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000798:	f000 f9fc 	bl	8000b94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079c:	f000 f80c 	bl	80007b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a0:	f7ff ff92 	bl	80006c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a4:	f000 f940 	bl	8000a28 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80007a8:	f003 f888 	bl	80038bc <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80007ac:	f7ff fe88 	bl	80004c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007b0:	f003 f8a8 	bl	8003904 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b4:	bf00      	nop
 80007b6:	e7fd      	b.n	80007b4 <main+0x20>

080007b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b096      	sub	sp, #88	@ 0x58
 80007bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	2244      	movs	r2, #68	@ 0x44
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f006 f966 	bl	8006a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007cc:	463b      	mov	r3, r7
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007da:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007de:	f000 fcfd 	bl	80011dc <HAL_PWREx_ControlVoltageScaling>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007e8:	f000 f84a 	bl	8000880 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f6:	2310      	movs	r3, #16
 80007f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007fa:	2302      	movs	r3, #2
 80007fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fe:	2302      	movs	r3, #2
 8000800:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000806:	230a      	movs	r3, #10
 8000808:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800080a:	2307      	movs	r3, #7
 800080c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800080e:	2302      	movs	r3, #2
 8000810:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fd34 	bl	8001288 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000826:	f000 f82b 	bl	8000880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2303      	movs	r3, #3
 8000830:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2104      	movs	r1, #4
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f8fc 	bl	8001a40 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800084e:	f000 f817 	bl	8000880 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3758      	adds	r7, #88	@ 0x58
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
	...

0800085c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a04      	ldr	r2, [pc, #16]	@ (800087c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d101      	bne.n	8000872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800086e:	f000 f9b1 	bl	8000bd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000872:	bf00      	nop
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40012c00 	.word	0x40012c00

08000880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000884:	b672      	cpsid	i
}
 8000886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <Error_Handler+0x8>

0800088c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000892:	4b11      	ldr	r3, [pc, #68]	@ (80008d8 <HAL_MspInit+0x4c>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	4a10      	ldr	r2, [pc, #64]	@ (80008d8 <HAL_MspInit+0x4c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6613      	str	r3, [r2, #96]	@ 0x60
 800089e:	4b0e      	ldr	r3, [pc, #56]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008aa:	4b0b      	ldr	r3, [pc, #44]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b6:	4b08      	ldr	r3, [pc, #32]	@ (80008d8 <HAL_MspInit+0x4c>)
 80008b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	210f      	movs	r1, #15
 80008c6:	f06f 0001 	mvn.w	r0, #1
 80008ca:	f000 fa5b 	bl	8000d84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000

080008dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08c      	sub	sp, #48	@ 0x30
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80008ea:	4b2e      	ldr	r3, [pc, #184]	@ (80009a4 <HAL_InitTick+0xc8>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ee:	4a2d      	ldr	r2, [pc, #180]	@ (80009a4 <HAL_InitTick+0xc8>)
 80008f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f6:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <HAL_InitTick+0xc8>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008fe:	60bb      	str	r3, [r7, #8]
 8000900:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000902:	f107 020c 	add.w	r2, r7, #12
 8000906:	f107 0310 	add.w	r3, r7, #16
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f001 fa5b 	bl	8001dc8 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000912:	f001 fa43 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8000916:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800091a:	4a23      	ldr	r2, [pc, #140]	@ (80009a8 <HAL_InitTick+0xcc>)
 800091c:	fba2 2303 	umull	r2, r3, r2, r3
 8000920:	0c9b      	lsrs	r3, r3, #18
 8000922:	3b01      	subs	r3, #1
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000926:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <HAL_InitTick+0xd0>)
 8000928:	4a21      	ldr	r2, [pc, #132]	@ (80009b0 <HAL_InitTick+0xd4>)
 800092a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800092c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ac <HAL_InitTick+0xd0>)
 800092e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000932:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000934:	4a1d      	ldr	r2, [pc, #116]	@ (80009ac <HAL_InitTick+0xd0>)
 8000936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000938:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800093a:	4b1c      	ldr	r3, [pc, #112]	@ (80009ac <HAL_InitTick+0xd0>)
 800093c:	2200      	movs	r2, #0
 800093e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <HAL_InitTick+0xd0>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <HAL_InitTick+0xd0>)
 8000948:	2200      	movs	r2, #0
 800094a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800094c:	4817      	ldr	r0, [pc, #92]	@ (80009ac <HAL_InitTick+0xd0>)
 800094e:	f001 ff89 	bl	8002864 <HAL_TIM_Base_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000958:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800095c:	2b00      	cmp	r3, #0
 800095e:	d11b      	bne.n	8000998 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000960:	4812      	ldr	r0, [pc, #72]	@ (80009ac <HAL_InitTick+0xd0>)
 8000962:	f001 ffe1 	bl	8002928 <HAL_TIM_Base_Start_IT>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800096c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000970:	2b00      	cmp	r3, #0
 8000972:	d111      	bne.n	8000998 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000974:	2019      	movs	r0, #25
 8000976:	f000 fa21 	bl	8000dbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2b0f      	cmp	r3, #15
 800097e:	d808      	bhi.n	8000992 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000980:	2200      	movs	r2, #0
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	2019      	movs	r0, #25
 8000986:	f000 f9fd 	bl	8000d84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800098a:	4a0a      	ldr	r2, [pc, #40]	@ (80009b4 <HAL_InitTick+0xd8>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6013      	str	r3, [r2, #0]
 8000990:	e002      	b.n	8000998 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000992:	2301      	movs	r3, #1
 8000994:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000998:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800099c:	4618      	mov	r0, r3
 800099e:	3730      	adds	r7, #48	@ 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	431bde83 	.word	0x431bde83
 80009ac:	20000098 	.word	0x20000098
 80009b0:	40012c00 	.word	0x40012c00
 80009b4:	20000004 	.word	0x20000004

080009b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <NMI_Handler+0x4>

080009c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <HardFault_Handler+0x4>

080009c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <MemManage_Handler+0x4>

080009d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <UsageFault_Handler+0x4>

080009e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009f4:	4802      	ldr	r0, [pc, #8]	@ (8000a00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80009f6:	f002 f807 	bl	8002a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000098 	.word	0x20000098

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a08:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <SystemInit+0x20>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a0e:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <SystemInit+0x20>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	@ (8000a84 <MX_USART2_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f002 f9c0 	bl	8002df0 <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f7ff ff03 	bl	8000880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	200000e4 	.word	0x200000e4
 8000a84:	40004400 	.word	0x40004400

08000a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2288      	movs	r2, #136	@ 0x88
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f005 fff5 	bl	8006a98 <memset>
  if(uartHandle->Instance==USART2)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a21      	ldr	r2, [pc, #132]	@ (8000b38 <HAL_UART_MspInit+0xb0>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d13b      	bne.n	8000b30 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac0:	f107 0314 	add.w	r3, r7, #20
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 fa11 	bl	8001eec <HAL_RCCEx_PeriphCLKConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad0:	f7ff fed6 	bl	8000880 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad4:	4b19      	ldr	r3, [pc, #100]	@ (8000b3c <HAL_UART_MspInit+0xb4>)
 8000ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ad8:	4a18      	ldr	r2, [pc, #96]	@ (8000b3c <HAL_UART_MspInit+0xb4>)
 8000ada:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ade:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ae0:	4b16      	ldr	r3, [pc, #88]	@ (8000b3c <HAL_UART_MspInit+0xb4>)
 8000ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ae4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aec:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <HAL_UART_MspInit+0xb4>)
 8000aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af0:	4a12      	ldr	r2, [pc, #72]	@ (8000b3c <HAL_UART_MspInit+0xb4>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af8:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <HAL_UART_MspInit+0xb4>)
 8000afa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afc:	f003 0301 	and.w	r3, r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b04:	230c      	movs	r3, #12
 8000b06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b16:	2303      	movs	r3, #3
 8000b18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b1c:	2307      	movs	r3, #7
 8000b1e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b22:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000b26:	4619      	mov	r1, r3
 8000b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2c:	f000 f954 	bl	8000dd8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b30:	bf00      	nop
 8000b32:	37b0      	adds	r7, #176	@ 0xb0
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40004400 	.word	0x40004400
 8000b3c:	40021000 	.word	0x40021000

08000b40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b44:	f7ff ff5e 	bl	8000a04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b48:	480c      	ldr	r0, [pc, #48]	@ (8000b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b4a:	490d      	ldr	r1, [pc, #52]	@ (8000b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b84 <LoopForever+0xe>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b50:	e002      	b.n	8000b58 <LoopCopyDataInit>

08000b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b56:	3304      	adds	r3, #4

08000b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b5c:	d3f9      	bcc.n	8000b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b60:	4c0a      	ldr	r4, [pc, #40]	@ (8000b8c <LoopForever+0x16>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b64:	e001      	b.n	8000b6a <LoopFillZerobss>

08000b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b68:	3204      	adds	r2, #4

08000b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b6c:	d3fb      	bcc.n	8000b66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b6e:	f005 fff1 	bl	8006b54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b72:	f7ff fe0f 	bl	8000794 <main>

08000b76 <LoopForever>:

LoopForever:
    b LoopForever
 8000b76:	e7fe      	b.n	8000b76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b78:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b80:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000b84:	08006de4 	.word	0x08006de4
  ldr r2, =_sbss
 8000b88:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b8c:	20002038 	.word	0x20002038

08000b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b90:	e7fe      	b.n	8000b90 <ADC1_2_IRQHandler>
	...

08000b94 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_Init+0x3c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <HAL_Init+0x3c>)
 8000ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ba8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000baa:	2003      	movs	r0, #3
 8000bac:	f000 f8df 	bl	8000d6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bb0:	200f      	movs	r0, #15
 8000bb2:	f7ff fe93 	bl	80008dc <HAL_InitTick>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	71fb      	strb	r3, [r7, #7]
 8000bc0:	e001      	b.n	8000bc6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bc2:	f7ff fe63 	bl	800088c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40022000 	.word	0x40022000

08000bd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x20>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	461a      	mov	r2, r3
 8000bde:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4413      	add	r3, r2
 8000be4:	4a04      	ldr	r2, [pc, #16]	@ (8000bf8 <HAL_IncTick+0x24>)
 8000be6:	6013      	str	r3, [r2, #0]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000008 	.word	0x20000008
 8000bf8:	2000016c 	.word	0x2000016c

08000bfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return uwTick;
 8000c00:	4b03      	ldr	r3, [pc, #12]	@ (8000c10 <HAL_GetTick+0x14>)
 8000c02:	681b      	ldr	r3, [r3, #0]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	2000016c 	.word	0x2000016c

08000c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c24:	4b0c      	ldr	r3, [pc, #48]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c2a:	68ba      	ldr	r2, [r7, #8]
 8000c2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c30:	4013      	ands	r3, r2
 8000c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c46:	4a04      	ldr	r2, [pc, #16]	@ (8000c58 <__NVIC_SetPriorityGrouping+0x44>)
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	60d3      	str	r3, [r2, #12]
}
 8000c4c:	bf00      	nop
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c60:	4b04      	ldr	r3, [pc, #16]	@ (8000c74 <__NVIC_GetPriorityGrouping+0x18>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	0a1b      	lsrs	r3, r3, #8
 8000c66:	f003 0307 	and.w	r3, r3, #7
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db0b      	blt.n	8000ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	f003 021f 	and.w	r2, r3, #31
 8000c90:	4907      	ldr	r1, [pc, #28]	@ (8000cb0 <__NVIC_EnableIRQ+0x38>)
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	095b      	lsrs	r3, r3, #5
 8000c98:	2001      	movs	r0, #1
 8000c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100

08000cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	db0a      	blt.n	8000cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	490c      	ldr	r1, [pc, #48]	@ (8000d00 <__NVIC_SetPriority+0x4c>)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	0112      	lsls	r2, r2, #4
 8000cd4:	b2d2      	uxtb	r2, r2
 8000cd6:	440b      	add	r3, r1
 8000cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cdc:	e00a      	b.n	8000cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4908      	ldr	r1, [pc, #32]	@ (8000d04 <__NVIC_SetPriority+0x50>)
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	f003 030f 	and.w	r3, r3, #15
 8000cea:	3b04      	subs	r3, #4
 8000cec:	0112      	lsls	r2, r2, #4
 8000cee:	b2d2      	uxtb	r2, r2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	761a      	strb	r2, [r3, #24]
}
 8000cf4:	bf00      	nop
 8000cf6:	370c      	adds	r7, #12
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000e100 	.word	0xe000e100
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b089      	sub	sp, #36	@ 0x24
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f1c3 0307 	rsb	r3, r3, #7
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	bf28      	it	cs
 8000d26:	2304      	movcs	r3, #4
 8000d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	3304      	adds	r3, #4
 8000d2e:	2b06      	cmp	r3, #6
 8000d30:	d902      	bls.n	8000d38 <NVIC_EncodePriority+0x30>
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	3b03      	subs	r3, #3
 8000d36:	e000      	b.n	8000d3a <NVIC_EncodePriority+0x32>
 8000d38:	2300      	movs	r3, #0
 8000d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	43da      	mvns	r2, r3
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	401a      	ands	r2, r3
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d50:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43d9      	mvns	r1, r3
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	4313      	orrs	r3, r2
         );
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3724      	adds	r7, #36	@ 0x24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6e:	b580      	push	{r7, lr}
 8000d70:	b082      	sub	sp, #8
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff ff4c 	bl	8000c14 <__NVIC_SetPriorityGrouping>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d96:	f7ff ff61 	bl	8000c5c <__NVIC_GetPriorityGrouping>
 8000d9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	6978      	ldr	r0, [r7, #20]
 8000da2:	f7ff ffb1 	bl	8000d08 <NVIC_EncodePriority>
 8000da6:	4602      	mov	r2, r0
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	4611      	mov	r1, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff80 	bl	8000cb4 <__NVIC_SetPriority>
}
 8000db4:	bf00      	nop
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff ff54 	bl	8000c78 <__NVIC_EnableIRQ>
}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b087      	sub	sp, #28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000de6:	e17f      	b.n	80010e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8171 	beq.w	80010e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d005      	beq.n	8000e18 <HAL_GPIO_Init+0x40>
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d130      	bne.n	8000e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	005b      	lsls	r3, r3, #1
 8000e22:	2203      	movs	r2, #3
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	68da      	ldr	r2, [r3, #12]
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e4e:	2201      	movs	r2, #1
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	091b      	lsrs	r3, r3, #4
 8000e64:	f003 0201 	and.w	r2, r3, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d118      	bne.n	8000eb8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	f003 0201 	and.w	r2, r3, #1
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
 8000ec0:	2b03      	cmp	r3, #3
 8000ec2:	d017      	beq.n	8000ef4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0303 	and.w	r3, r3, #3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d123      	bne.n	8000f48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	08da      	lsrs	r2, r3, #3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3208      	adds	r2, #8
 8000f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f003 0307 	and.w	r3, r3, #7
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	08da      	lsrs	r2, r3, #3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	3208      	adds	r2, #8
 8000f42:	6939      	ldr	r1, [r7, #16]
 8000f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	2203      	movs	r2, #3
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f003 0203 	and.w	r2, r3, #3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	693a      	ldr	r2, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80ac 	beq.w	80010e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001108 <HAL_GPIO_Init+0x330>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001108 <HAL_GPIO_Init+0x330>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f96:	4b5c      	ldr	r3, [pc, #368]	@ (8001108 <HAL_GPIO_Init+0x330>)
 8000f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800110c <HAL_GPIO_Init+0x334>)
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	089b      	lsrs	r3, r3, #2
 8000fa8:	3302      	adds	r3, #2
 8000faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	220f      	movs	r2, #15
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000fcc:	d025      	beq.n	800101a <HAL_GPIO_Init+0x242>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001110 <HAL_GPIO_Init+0x338>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d01f      	beq.n	8001016 <HAL_GPIO_Init+0x23e>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4e      	ldr	r2, [pc, #312]	@ (8001114 <HAL_GPIO_Init+0x33c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d019      	beq.n	8001012 <HAL_GPIO_Init+0x23a>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8001118 <HAL_GPIO_Init+0x340>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d013      	beq.n	800100e <HAL_GPIO_Init+0x236>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4c      	ldr	r2, [pc, #304]	@ (800111c <HAL_GPIO_Init+0x344>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d00d      	beq.n	800100a <HAL_GPIO_Init+0x232>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8001120 <HAL_GPIO_Init+0x348>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d007      	beq.n	8001006 <HAL_GPIO_Init+0x22e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a4a      	ldr	r2, [pc, #296]	@ (8001124 <HAL_GPIO_Init+0x34c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d101      	bne.n	8001002 <HAL_GPIO_Init+0x22a>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e00c      	b.n	800101c <HAL_GPIO_Init+0x244>
 8001002:	2307      	movs	r3, #7
 8001004:	e00a      	b.n	800101c <HAL_GPIO_Init+0x244>
 8001006:	2305      	movs	r3, #5
 8001008:	e008      	b.n	800101c <HAL_GPIO_Init+0x244>
 800100a:	2304      	movs	r3, #4
 800100c:	e006      	b.n	800101c <HAL_GPIO_Init+0x244>
 800100e:	2303      	movs	r3, #3
 8001010:	e004      	b.n	800101c <HAL_GPIO_Init+0x244>
 8001012:	2302      	movs	r3, #2
 8001014:	e002      	b.n	800101c <HAL_GPIO_Init+0x244>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_GPIO_Init+0x244>
 800101a:	2300      	movs	r3, #0
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	f002 0203 	and.w	r2, r2, #3
 8001022:	0092      	lsls	r2, r2, #2
 8001024:	4093      	lsls	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800102c:	4937      	ldr	r1, [pc, #220]	@ (800110c <HAL_GPIO_Init+0x334>)
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	089b      	lsrs	r3, r3, #2
 8001032:	3302      	adds	r3, #2
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800103a:	4b3b      	ldr	r3, [pc, #236]	@ (8001128 <HAL_GPIO_Init+0x350>)
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43db      	mvns	r3, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800105e:	4a32      	ldr	r2, [pc, #200]	@ (8001128 <HAL_GPIO_Init+0x350>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001064:	4b30      	ldr	r3, [pc, #192]	@ (8001128 <HAL_GPIO_Init+0x350>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001088:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <HAL_GPIO_Init+0x350>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800108e:	4b26      	ldr	r3, [pc, #152]	@ (8001128 <HAL_GPIO_Init+0x350>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001128 <HAL_GPIO_Init+0x350>)
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <HAL_GPIO_Init+0x350>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010dc:	4a12      	ldr	r2, [pc, #72]	@ (8001128 <HAL_GPIO_Init+0x350>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	fa22 f303 	lsr.w	r3, r2, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	f47f ae78 	bne.w	8000de8 <HAL_GPIO_Init+0x10>
  }
}
 80010f8:	bf00      	nop
 80010fa:	bf00      	nop
 80010fc:	371c      	adds	r7, #28
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	40010000 	.word	0x40010000
 8001110:	48000400 	.word	0x48000400
 8001114:	48000800 	.word	0x48000800
 8001118:	48000c00 	.word	0x48000c00
 800111c:	48001000 	.word	0x48001000
 8001120:	48001400 	.word	0x48001400
 8001124:	48001800 	.word	0x48001800
 8001128:	40010400 	.word	0x40010400

0800112c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	887b      	ldrh	r3, [r7, #2]
 800113e:	4013      	ands	r3, r2
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001144:	2301      	movs	r3, #1
 8001146:	73fb      	strb	r3, [r7, #15]
 8001148:	e001      	b.n	800114e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	460b      	mov	r3, r1
 8001166:	807b      	strh	r3, [r7, #2]
 8001168:	4613      	mov	r3, r2
 800116a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800116c:	787b      	ldrb	r3, [r7, #1]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d003      	beq.n	800117a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001172:	887a      	ldrh	r2, [r7, #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001178:	e002      	b.n	8001180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117a:	887a      	ldrh	r2, [r7, #2]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4013      	ands	r3, r2
 80011a4:	041a      	lsls	r2, r3, #16
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43d9      	mvns	r1, r3
 80011aa:	887b      	ldrh	r3, [r7, #2]
 80011ac:	400b      	ands	r3, r1
 80011ae:	431a      	orrs	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	619a      	str	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011c4:	4b04      	ldr	r3, [pc, #16]	@ (80011d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40007000 	.word	0x40007000

080011dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011ea:	d130      	bne.n	800124e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80011f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80011f8:	d038      	beq.n	800126c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011fa:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001204:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001208:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800120a:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2232      	movs	r2, #50	@ 0x32
 8001210:	fb02 f303 	mul.w	r3, r2, r3
 8001214:	4a1b      	ldr	r2, [pc, #108]	@ (8001284 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001216:	fba2 2303 	umull	r2, r3, r2, r3
 800121a:	0c9b      	lsrs	r3, r3, #18
 800121c:	3301      	adds	r3, #1
 800121e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001220:	e002      	b.n	8001228 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3b01      	subs	r3, #1
 8001226:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001228:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800122a:	695b      	ldr	r3, [r3, #20]
 800122c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001234:	d102      	bne.n	800123c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d1f2      	bne.n	8001222 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800123c:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001248:	d110      	bne.n	800126c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	e00f      	b.n	800126e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800125a:	d007      	beq.n	800126c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800125c:	4b07      	ldr	r3, [pc, #28]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001264:	4a05      	ldr	r2, [pc, #20]	@ (800127c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001266:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800126a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40007000 	.word	0x40007000
 8001280:	20000000 	.word	0x20000000
 8001284:	431bde83 	.word	0x431bde83

08001288 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b088      	sub	sp, #32
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e3ca      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800129a:	4b97      	ldr	r3, [pc, #604]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012a4:	4b94      	ldr	r3, [pc, #592]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80e4 	beq.w	8001484 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d007      	beq.n	80012d2 <HAL_RCC_OscConfig+0x4a>
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	2b0c      	cmp	r3, #12
 80012c6:	f040 808b 	bne.w	80013e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	f040 8087 	bne.w	80013e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d2:	4b89      	ldr	r3, [pc, #548]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x62>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e3a2      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	4b82      	ldr	r3, [pc, #520]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d004      	beq.n	8001304 <HAL_RCC_OscConfig+0x7c>
 80012fa:	4b7f      	ldr	r3, [pc, #508]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001302:	e005      	b.n	8001310 <HAL_RCC_OscConfig+0x88>
 8001304:	4b7c      	ldr	r3, [pc, #496]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001310:	4293      	cmp	r3, r2
 8001312:	d223      	bcs.n	800135c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1b      	ldr	r3, [r3, #32]
 8001318:	4618      	mov	r0, r3
 800131a:	f000 fd87 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e383      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001328:	4b73      	ldr	r3, [pc, #460]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a72      	ldr	r2, [pc, #456]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	496d      	ldr	r1, [pc, #436]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001342:	4313      	orrs	r3, r2
 8001344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001346:	4b6c      	ldr	r3, [pc, #432]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	4968      	ldr	r1, [pc, #416]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001356:	4313      	orrs	r3, r2
 8001358:	604b      	str	r3, [r1, #4]
 800135a:	e025      	b.n	80013a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800135c:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a65      	ldr	r2, [pc, #404]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b63      	ldr	r3, [pc, #396]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6a1b      	ldr	r3, [r3, #32]
 8001374:	4960      	ldr	r1, [pc, #384]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137a:	4b5f      	ldr	r3, [pc, #380]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69db      	ldr	r3, [r3, #28]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	495b      	ldr	r1, [pc, #364]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d109      	bne.n	80013a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fd47 	bl	8001e2c <RCC_SetFlashLatencyFromMSIRange>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e343      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013a8:	f000 fc4a 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b52      	ldr	r3, [pc, #328]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	4950      	ldr	r1, [pc, #320]	@ (80014fc <HAL_RCC_OscConfig+0x274>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001500 <HAL_RCC_OscConfig+0x278>)
 80013c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001504 <HAL_RCC_OscConfig+0x27c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fa85 	bl	80008dc <HAL_InitTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d052      	beq.n	8001482 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	e327      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d032      	beq.n	800144e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013e8:	4b43      	ldr	r3, [pc, #268]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a42      	ldr	r2, [pc, #264]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fc02 	bl	8000bfc <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013fc:	f7ff fbfe 	bl	8000bfc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e310      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800140e:	4b3a      	ldr	r3, [pc, #232]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d0f0      	beq.n	80013fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141a:	4b37      	ldr	r3, [pc, #220]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a36      	ldr	r2, [pc, #216]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001420:	f043 0308 	orr.w	r3, r3, #8
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	4b34      	ldr	r3, [pc, #208]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a1b      	ldr	r3, [r3, #32]
 8001432:	4931      	ldr	r1, [pc, #196]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001438:	4b2f      	ldr	r3, [pc, #188]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	492c      	ldr	r1, [pc, #176]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
 800144c:	e01a      	b.n	8001484 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a29      	ldr	r2, [pc, #164]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001454:	f023 0301 	bic.w	r3, r3, #1
 8001458:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800145a:	f7ff fbcf 	bl	8000bfc <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001462:	f7ff fbcb 	bl	8000bfc <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e2dd      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001474:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0302 	and.w	r3, r3, #2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x1da>
 8001480:	e000      	b.n	8001484 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001482:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	d074      	beq.n	800157a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b08      	cmp	r3, #8
 8001494:	d005      	beq.n	80014a2 <HAL_RCC_OscConfig+0x21a>
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b0c      	cmp	r3, #12
 800149a:	d10e      	bne.n	80014ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d10b      	bne.n	80014ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d064      	beq.n	8001578 <HAL_RCC_OscConfig+0x2f0>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d160      	bne.n	8001578 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e2ba      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014c2:	d106      	bne.n	80014d2 <HAL_RCC_OscConfig+0x24a>
 80014c4:	4b0c      	ldr	r3, [pc, #48]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a0b      	ldr	r2, [pc, #44]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80014ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e026      	b.n	8001520 <HAL_RCC_OscConfig+0x298>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014da:	d115      	bne.n	8001508 <HAL_RCC_OscConfig+0x280>
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a05      	ldr	r2, [pc, #20]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80014e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a02      	ldr	r2, [pc, #8]	@ (80014f8 <HAL_RCC_OscConfig+0x270>)
 80014ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	e014      	b.n	8001520 <HAL_RCC_OscConfig+0x298>
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08006d8c 	.word	0x08006d8c
 8001500:	20000000 	.word	0x20000000
 8001504:	20000004 	.word	0x20000004
 8001508:	4ba0      	ldr	r3, [pc, #640]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a9f      	ldr	r2, [pc, #636]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800150e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b9d      	ldr	r3, [pc, #628]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a9c      	ldr	r2, [pc, #624]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800151a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800151e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d013      	beq.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001528:	f7ff fb68 	bl	8000bfc <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fb64 	bl	8000bfc <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	@ 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e276      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001542:	4b92      	ldr	r3, [pc, #584]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d0f0      	beq.n	8001530 <HAL_RCC_OscConfig+0x2a8>
 800154e:	e014      	b.n	800157a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fb54 	bl	8000bfc <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fb50 	bl	8000bfc <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e262      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	4b88      	ldr	r3, [pc, #544]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1f0      	bne.n	8001558 <HAL_RCC_OscConfig+0x2d0>
 8001576:	e000      	b.n	800157a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d060      	beq.n	8001648 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	2b04      	cmp	r3, #4
 800158a:	d005      	beq.n	8001598 <HAL_RCC_OscConfig+0x310>
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	2b0c      	cmp	r3, #12
 8001590:	d119      	bne.n	80015c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d116      	bne.n	80015c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001598:	4b7c      	ldr	r3, [pc, #496]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_OscConfig+0x328>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d101      	bne.n	80015b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e23f      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b0:	4b76      	ldr	r3, [pc, #472]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	691b      	ldr	r3, [r3, #16]
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	4973      	ldr	r1, [pc, #460]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015c4:	e040      	b.n	8001648 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d023      	beq.n	8001616 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ce:	4b6f      	ldr	r3, [pc, #444]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6e      	ldr	r2, [pc, #440]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80015d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015da:	f7ff fb0f 	bl	8000bfc <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e2:	f7ff fb0b 	bl	8000bfc <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e21d      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	4b65      	ldr	r3, [pc, #404]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001600:	4b62      	ldr	r3, [pc, #392]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	061b      	lsls	r3, r3, #24
 800160e:	495f      	ldr	r1, [pc, #380]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
 8001614:	e018      	b.n	8001648 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001616:	4b5d      	ldr	r3, [pc, #372]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a5c      	ldr	r2, [pc, #368]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800161c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001622:	f7ff faeb 	bl	8000bfc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fae7 	bl	8000bfc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e1f9      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163c:	4b53      	ldr	r3, [pc, #332]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0308 	and.w	r3, r3, #8
 8001650:	2b00      	cmp	r3, #0
 8001652:	d03c      	beq.n	80016ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01c      	beq.n	8001696 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800165c:	4b4b      	ldr	r3, [pc, #300]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001662:	4a4a      	ldr	r2, [pc, #296]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001664:	f043 0301 	orr.w	r3, r3, #1
 8001668:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff fac6 	bl	8000bfc <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001674:	f7ff fac2 	bl	8000bfc <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e1d4      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001686:	4b41      	ldr	r3, [pc, #260]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001688:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ef      	beq.n	8001674 <HAL_RCC_OscConfig+0x3ec>
 8001694:	e01b      	b.n	80016ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001696:	4b3d      	ldr	r3, [pc, #244]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001698:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800169c:	4a3b      	ldr	r2, [pc, #236]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a6:	f7ff faa9 	bl	8000bfc <HAL_GetTick>
 80016aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ae:	f7ff faa5 	bl	8000bfc <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e1b7      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	4b32      	ldr	r3, [pc, #200]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80016c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ef      	bne.n	80016ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0304 	and.w	r3, r3, #4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80a6 	beq.w	8001828 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016e0:	4b2a      	ldr	r3, [pc, #168]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10d      	bne.n	8001708 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	4b27      	ldr	r3, [pc, #156]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f0:	4a26      	ldr	r2, [pc, #152]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80016f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016f8:	4b24      	ldr	r3, [pc, #144]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001700:	60bb      	str	r3, [r7, #8]
 8001702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001704:	2301      	movs	r3, #1
 8001706:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001708:	4b21      	ldr	r3, [pc, #132]	@ (8001790 <HAL_RCC_OscConfig+0x508>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001710:	2b00      	cmp	r3, #0
 8001712:	d118      	bne.n	8001746 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001714:	4b1e      	ldr	r3, [pc, #120]	@ (8001790 <HAL_RCC_OscConfig+0x508>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a1d      	ldr	r2, [pc, #116]	@ (8001790 <HAL_RCC_OscConfig+0x508>)
 800171a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800171e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001720:	f7ff fa6c 	bl	8000bfc <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001728:	f7ff fa68 	bl	8000bfc <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b02      	cmp	r3, #2
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e17a      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_RCC_OscConfig+0x508>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d108      	bne.n	8001760 <HAL_RCC_OscConfig+0x4d8>
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001754:	4a0d      	ldr	r2, [pc, #52]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800175e:	e029      	b.n	80017b4 <HAL_RCC_OscConfig+0x52c>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d115      	bne.n	8001794 <HAL_RCC_OscConfig+0x50c>
 8001768:	4b08      	ldr	r3, [pc, #32]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800176e:	4a07      	ldr	r2, [pc, #28]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 800177a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800177e:	4a03      	ldr	r2, [pc, #12]	@ (800178c <HAL_RCC_OscConfig+0x504>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001788:	e014      	b.n	80017b4 <HAL_RCC_OscConfig+0x52c>
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	40007000 	.word	0x40007000
 8001794:	4b9c      	ldr	r3, [pc, #624]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 8001796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179a:	4a9b      	ldr	r2, [pc, #620]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80017a4:	4b98      	ldr	r3, [pc, #608]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017aa:	4a97      	ldr	r2, [pc, #604]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80017ac:	f023 0304 	bic.w	r3, r3, #4
 80017b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d016      	beq.n	80017ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fa1e 	bl	8000bfc <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017c2:	e00a      	b.n	80017da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017c4:	f7ff fa1a 	bl	8000bfc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e12a      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017da:	4b8b      	ldr	r3, [pc, #556]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0ed      	beq.n	80017c4 <HAL_RCC_OscConfig+0x53c>
 80017e8:	e015      	b.n	8001816 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ea:	f7ff fa07 	bl	8000bfc <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017f0:	e00a      	b.n	8001808 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff fa03 	bl	8000bfc <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e113      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001808:	4b7f      	ldr	r3, [pc, #508]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800180a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ed      	bne.n	80017f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001816:	7ffb      	ldrb	r3, [r7, #31]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001820:	4a79      	ldr	r2, [pc, #484]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 8001822:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001826:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182c:	2b00      	cmp	r3, #0
 800182e:	f000 80fe 	beq.w	8001a2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001836:	2b02      	cmp	r3, #2
 8001838:	f040 80d0 	bne.w	80019dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800183c:	4b72      	ldr	r3, [pc, #456]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800184c:	429a      	cmp	r2, r3
 800184e:	d130      	bne.n	80018b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	3b01      	subs	r3, #1
 800185c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d127      	bne.n	80018b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800186c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d11f      	bne.n	80018b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800187c:	2a07      	cmp	r2, #7
 800187e:	bf14      	ite	ne
 8001880:	2201      	movne	r2, #1
 8001882:	2200      	moveq	r2, #0
 8001884:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001886:	4293      	cmp	r3, r2
 8001888:	d113      	bne.n	80018b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001894:	085b      	lsrs	r3, r3, #1
 8001896:	3b01      	subs	r3, #1
 8001898:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800189a:	429a      	cmp	r2, r3
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a8:	085b      	lsrs	r3, r3, #1
 80018aa:	3b01      	subs	r3, #1
 80018ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d06e      	beq.n	8001990 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	2b0c      	cmp	r3, #12
 80018b6:	d069      	beq.n	800198c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018b8:	4b53      	ldr	r3, [pc, #332]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018c4:	4b50      	ldr	r3, [pc, #320]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0ad      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80018da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018e0:	f7ff f98c 	bl	8000bfc <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f988 	bl	8000bfc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e09a      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fa:	4b43      	ldr	r3, [pc, #268]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001906:	4b40      	ldr	r3, [pc, #256]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 8001908:	68da      	ldr	r2, [r3, #12]
 800190a:	4b40      	ldr	r3, [pc, #256]	@ (8001a0c <HAL_RCC_OscConfig+0x784>)
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001916:	3a01      	subs	r2, #1
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	4311      	orrs	r1, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001920:	0212      	lsls	r2, r2, #8
 8001922:	4311      	orrs	r1, r2
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001928:	0852      	lsrs	r2, r2, #1
 800192a:	3a01      	subs	r2, #1
 800192c:	0552      	lsls	r2, r2, #21
 800192e:	4311      	orrs	r1, r2
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001934:	0852      	lsrs	r2, r2, #1
 8001936:	3a01      	subs	r2, #1
 8001938:	0652      	lsls	r2, r2, #25
 800193a:	4311      	orrs	r1, r2
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001940:	0912      	lsrs	r2, r2, #4
 8001942:	0452      	lsls	r2, r2, #17
 8001944:	430a      	orrs	r2, r1
 8001946:	4930      	ldr	r1, [pc, #192]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 8001948:	4313      	orrs	r3, r2
 800194a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800194c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2d      	ldr	r2, [pc, #180]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 8001952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001964:	f7ff f94a 	bl	8000bfc <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196c:	f7ff f946 	bl	8000bfc <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e058      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800198a:	e050      	b.n	8001a2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e04f      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001990:	4b1d      	ldr	r3, [pc, #116]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d148      	bne.n	8001a2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800199c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a19      	ldr	r2, [pc, #100]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80019a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019a8:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a16      	ldr	r2, [pc, #88]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80019ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019b4:	f7ff f922 	bl	8000bfc <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff f91e 	bl	8000bfc <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e030      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x734>
 80019da:	e028      	b.n	8001a2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	2b0c      	cmp	r3, #12
 80019e0:	d023      	beq.n	8001a2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a08      	ldr	r2, [pc, #32]	@ (8001a08 <HAL_RCC_OscConfig+0x780>)
 80019e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80019ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff f905 	bl	8000bfc <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019f4:	e00c      	b.n	8001a10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f6:	f7ff f901 	bl	8000bfc <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d905      	bls.n	8001a10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e013      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a10:	4b09      	ldr	r3, [pc, #36]	@ (8001a38 <HAL_RCC_OscConfig+0x7b0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d1ec      	bne.n	80019f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a1c:	4b06      	ldr	r3, [pc, #24]	@ (8001a38 <HAL_RCC_OscConfig+0x7b0>)
 8001a1e:	68da      	ldr	r2, [r3, #12]
 8001a20:	4905      	ldr	r1, [pc, #20]	@ (8001a38 <HAL_RCC_OscConfig+0x7b0>)
 8001a22:	4b06      	ldr	r3, [pc, #24]	@ (8001a3c <HAL_RCC_OscConfig+0x7b4>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	60cb      	str	r3, [r1, #12]
 8001a28:	e001      	b.n	8001a2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	feeefffc 	.word	0xfeeefffc

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0e7      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b75      	ldr	r3, [pc, #468]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d910      	bls.n	8001a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b72      	ldr	r3, [pc, #456]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 0207 	bic.w	r2, r3, #7
 8001a6a:	4970      	ldr	r1, [pc, #448]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a72:	4b6e      	ldr	r3, [pc, #440]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d001      	beq.n	8001a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0cf      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0302 	and.w	r3, r3, #2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	4b66      	ldr	r3, [pc, #408]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d908      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aa0:	4b63      	ldr	r3, [pc, #396]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	4960      	ldr	r1, [pc, #384]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d04c      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d107      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d121      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e0a6      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b02      	cmp	r3, #2
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ade:	4b54      	ldr	r3, [pc, #336]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d115      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e09a      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d107      	bne.n	8001b06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001af6:	4b4e      	ldr	r3, [pc, #312]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e08e      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b06:	4b4a      	ldr	r3, [pc, #296]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e086      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	4b46      	ldr	r3, [pc, #280]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 0203 	bic.w	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4943      	ldr	r1, [pc, #268]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b28:	f7ff f868 	bl	8000bfc <HAL_GetTick>
 8001b2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2e:	e00a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b30:	f7ff f864 	bl	8000bfc <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e06e      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	4b3a      	ldr	r3, [pc, #232]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f003 020c 	and.w	r2, r3, #12
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d1eb      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d010      	beq.n	8001b86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	4b31      	ldr	r3, [pc, #196]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d208      	bcs.n	8001b86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b74:	4b2e      	ldr	r3, [pc, #184]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	492b      	ldr	r1, [pc, #172]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b86:	4b29      	ldr	r3, [pc, #164]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d210      	bcs.n	8001bb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b94:	4b25      	ldr	r3, [pc, #148]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 0207 	bic.w	r2, r3, #7
 8001b9c:	4923      	ldr	r1, [pc, #140]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba4:	4b21      	ldr	r3, [pc, #132]	@ (8001c2c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e036      	b.n	8001c24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0304 	and.w	r3, r3, #4
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4918      	ldr	r1, [pc, #96]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d009      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be0:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4910      	ldr	r1, [pc, #64]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bf4:	f000 f824 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	091b      	lsrs	r3, r3, #4
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	490b      	ldr	r1, [pc, #44]	@ (8001c34 <HAL_RCC_ClockConfig+0x1f4>)
 8001c06:	5ccb      	ldrb	r3, [r1, r3]
 8001c08:	f003 031f 	and.w	r3, r3, #31
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	4a09      	ldr	r2, [pc, #36]	@ (8001c38 <HAL_RCC_ClockConfig+0x1f8>)
 8001c12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c14:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <HAL_RCC_ClockConfig+0x1fc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7fe fe5f 	bl	80008dc <HAL_InitTick>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c22:	7afb      	ldrb	r3, [r7, #11]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3710      	adds	r7, #16
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40022000 	.word	0x40022000
 8001c30:	40021000 	.word	0x40021000
 8001c34:	08006d8c 	.word	0x08006d8c
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c58:	4b3b      	ldr	r3, [pc, #236]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x34>
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	2b0c      	cmp	r3, #12
 8001c6c:	d121      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d11e      	bne.n	8001cb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c74:	4b34      	ldr	r3, [pc, #208]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d107      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c80:	4b31      	ldr	r3, [pc, #196]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c86:	0a1b      	lsrs	r3, r3, #8
 8001c88:	f003 030f 	and.w	r3, r3, #15
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	e005      	b.n	8001c9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c90:	4b2d      	ldr	r3, [pc, #180]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10d      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b04      	cmp	r3, #4
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cb8:	4b25      	ldr	r3, [pc, #148]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cba:	61bb      	str	r3, [r7, #24]
 8001cbc:	e004      	b.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d101      	bne.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cc4:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d134      	bne.n	8001d38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cce:	4b1e      	ldr	r3, [pc, #120]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d003      	beq.n	8001cec <HAL_RCC_GetSysClockFreq+0xac>
 8001ce4:	e005      	b.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ce8:	617b      	str	r3, [r7, #20]
      break;
 8001cea:	e005      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cec:	4b19      	ldr	r3, [pc, #100]	@ (8001d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cee:	617b      	str	r3, [r7, #20]
      break;
 8001cf0:	e002      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	617b      	str	r3, [r7, #20]
      break;
 8001cf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cf8:	4b13      	ldr	r3, [pc, #76]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	091b      	lsrs	r3, r3, #4
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	3301      	adds	r3, #1
 8001d04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d06:	4b10      	ldr	r3, [pc, #64]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	fb03 f202 	mul.w	r2, r3, r2
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	0e5b      	lsrs	r3, r3, #25
 8001d24:	f003 0303 	and.w	r3, r3, #3
 8001d28:	3301      	adds	r3, #1
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d38:	69bb      	ldr	r3, [r7, #24]
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	08006da4 	.word	0x08006da4
 8001d50:	00f42400 	.word	0x00f42400
 8001d54:	007a1200 	.word	0x007a1200

08001d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	@ (8001d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000000 	.word	0x20000000

08001d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d74:	f7ff fff0 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	0a1b      	lsrs	r3, r3, #8
 8001d80:	f003 0307 	and.w	r3, r3, #7
 8001d84:	4904      	ldr	r1, [pc, #16]	@ (8001d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d86:	5ccb      	ldrb	r3, [r1, r3]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	40021000 	.word	0x40021000
 8001d98:	08006d9c 	.word	0x08006d9c

08001d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001da0:	f7ff ffda 	bl	8001d58 <HAL_RCC_GetHCLKFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	0adb      	lsrs	r3, r3, #11
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	4904      	ldr	r1, [pc, #16]	@ (8001dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	08006d9c 	.word	0x08006d9c

08001dc8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001dd8:	4b12      	ldr	r3, [pc, #72]	@ (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001de4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001df0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001dfc:	4b09      	ldr	r3, [pc, #36]	@ (8001e24 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	08db      	lsrs	r3, r3, #3
 8001e02:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e0a:	4b07      	ldr	r3, [pc, #28]	@ (8001e28 <HAL_RCC_GetClockConfig+0x60>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0207 	and.w	r2, r3, #7
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	601a      	str	r2, [r3, #0]
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40022000 	.word	0x40022000

08001e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e34:	2300      	movs	r3, #0
 8001e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f9bc 	bl	80011c0 <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
 8001e4a:	e014      	b.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e50:	4a24      	ldr	r2, [pc, #144]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e58:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e64:	f7ff f9ac 	bl	80011c0 <HAL_PWREx_GetVoltageRange>
 8001e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e74:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e7c:	d10b      	bne.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b80      	cmp	r3, #128	@ 0x80
 8001e82:	d919      	bls.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e88:	d902      	bls.n	8001e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	613b      	str	r3, [r7, #16]
 8001e8e:	e013      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e90:	2301      	movs	r3, #1
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	e010      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b80      	cmp	r3, #128	@ 0x80
 8001e9a:	d902      	bls.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e00a      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	@ 0x80
 8001ea6:	d102      	bne.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e004      	b.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b70      	cmp	r3, #112	@ 0x70
 8001eb2:	d101      	bne.n	8001eb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f023 0207 	bic.w	r2, r3, #7
 8001ec0:	4909      	ldr	r1, [pc, #36]	@ (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ec8:	4b07      	ldr	r3, [pc, #28]	@ (8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40022000 	.word	0x40022000

08001eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ef8:	2300      	movs	r3, #0
 8001efa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d041      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f10:	d02a      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001f12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f16:	d824      	bhi.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f1c:	d008      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f22:	d81e      	bhi.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f2c:	d010      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f2e:	e018      	b.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f30:	4b86      	ldr	r3, [pc, #536]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a85      	ldr	r2, [pc, #532]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f3c:	e015      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2100      	movs	r1, #0
 8001f44:	4618      	mov	r0, r3
 8001f46:	f000 fabb 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4e:	e00c      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3320      	adds	r3, #32
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f000 fba6 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f60:	e003      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	74fb      	strb	r3, [r7, #19]
      break;
 8001f66:	e000      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f6a:	7cfb      	ldrb	r3, [r7, #19]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10b      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f70:	4b76      	ldr	r3, [pc, #472]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f76:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f7e:	4973      	ldr	r1, [pc, #460]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f86:	e001      	b.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d041      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f9c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fa0:	d02a      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001fa2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001fa6:	d824      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fa8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fac:	d008      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001fae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001fb2:	d81e      	bhi.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00a      	beq.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fbc:	d010      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fc0:	4b62      	ldr	r3, [pc, #392]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	4a61      	ldr	r2, [pc, #388]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fcc:	e015      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f000 fa73 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fde:	e00c      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3320      	adds	r3, #32
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 fb5e 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 8001fec:	4603      	mov	r3, r0
 8001fee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ff0:	e003      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8001ff6:	e000      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ffa:	7cfb      	ldrb	r3, [r7, #19]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10b      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002000:	4b52      	ldr	r3, [pc, #328]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002006:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800200e:	494f      	ldr	r1, [pc, #316]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002016:	e001      	b.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80a0 	beq.w	800216a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800202e:	4b47      	ldr	r3, [pc, #284]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800203e:	2300      	movs	r3, #0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00d      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	4b41      	ldr	r3, [pc, #260]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002048:	4a40      	ldr	r2, [pc, #256]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800204e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002050:	4b3e      	ldr	r3, [pc, #248]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002054:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002058:	60bb      	str	r3, [r7, #8]
 800205a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800205c:	2301      	movs	r3, #1
 800205e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002060:	4b3b      	ldr	r3, [pc, #236]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3a      	ldr	r2, [pc, #232]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002066:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800206a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800206c:	f7fe fdc6 	bl	8000bfc <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002072:	e009      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002074:	f7fe fdc2 	bl	8000bfc <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d902      	bls.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	74fb      	strb	r3, [r7, #19]
        break;
 8002086:	e005      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002088:	4b31      	ldr	r3, [pc, #196]	@ (8002150 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002090:	2b00      	cmp	r3, #0
 8002092:	d0ef      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d15c      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800209a:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80020a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01f      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x200>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d019      	beq.n	80020ec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020b8:	4b24      	ldr	r3, [pc, #144]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020c4:	4b21      	ldr	r3, [pc, #132]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ca:	4a20      	ldr	r2, [pc, #128]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020d4:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020da:	4a1c      	ldr	r2, [pc, #112]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020e4:	4a19      	ldr	r2, [pc, #100]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d016      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f6:	f7fe fd81 	bl	8000bfc <HAL_GetTick>
 80020fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fc:	e00b      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fd7d 	bl	8000bfc <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d902      	bls.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	74fb      	strb	r3, [r7, #19]
            break;
 8002114:	e006      	b.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0ec      	beq.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800212a:	4b08      	ldr	r3, [pc, #32]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800212c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800213a:	4904      	ldr	r1, [pc, #16]	@ (800214c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213c:	4313      	orrs	r3, r2
 800213e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002142:	e009      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002144:	7cfb      	ldrb	r3, [r7, #19]
 8002146:	74bb      	strb	r3, [r7, #18]
 8002148:	e006      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002154:	7cfb      	ldrb	r3, [r7, #19]
 8002156:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002158:	7c7b      	ldrb	r3, [r7, #17]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d105      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800215e:	4b9e      	ldr	r3, [pc, #632]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002162:	4a9d      	ldr	r2, [pc, #628]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002176:	4b98      	ldr	r3, [pc, #608]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217c:	f023 0203 	bic.w	r2, r3, #3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002184:	4994      	ldr	r1, [pc, #592]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00a      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002198:	4b8f      	ldr	r3, [pc, #572]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	f023 020c 	bic.w	r2, r3, #12
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	498c      	ldr	r1, [pc, #560]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0304 	and.w	r3, r3, #4
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021ba:	4b87      	ldr	r3, [pc, #540]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4983      	ldr	r1, [pc, #524]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0308 	and.w	r3, r3, #8
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021dc:	4b7e      	ldr	r3, [pc, #504]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ea:	497b      	ldr	r1, [pc, #492]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021fe:	4b76      	ldr	r3, [pc, #472]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002204:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800220c:	4972      	ldr	r1, [pc, #456]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0320 	and.w	r3, r3, #32
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002220:	4b6d      	ldr	r3, [pc, #436]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002226:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222e:	496a      	ldr	r1, [pc, #424]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002242:	4b65      	ldr	r3, [pc, #404]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002248:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002250:	4961      	ldr	r1, [pc, #388]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002264:	4b5c      	ldr	r3, [pc, #368]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800226a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	4959      	ldr	r1, [pc, #356]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002286:	4b54      	ldr	r3, [pc, #336]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800228c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002294:	4950      	ldr	r1, [pc, #320]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80022a8:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ae:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b6:	4948      	ldr	r1, [pc, #288]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00a      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022ca:	4b43      	ldr	r3, [pc, #268]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022d8:	493f      	ldr	r1, [pc, #252]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d028      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80022fa:	4937      	ldr	r1, [pc, #220]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002306:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800230a:	d106      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800230c:	4b32      	ldr	r3, [pc, #200]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	4a31      	ldr	r2, [pc, #196]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002316:	60d3      	str	r3, [r2, #12]
 8002318:	e011      	b.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800231e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002322:	d10c      	bne.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	2101      	movs	r1, #1
 800232a:	4618      	mov	r0, r3
 800232c:	f000 f8c8 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8002330:	4603      	mov	r3, r0
 8002332:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800233a:	7cfb      	ldrb	r3, [r7, #19]
 800233c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d028      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800234a:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002350:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002358:	491f      	ldr	r1, [pc, #124]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235a:	4313      	orrs	r3, r2
 800235c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002364:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002368:	d106      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800236a:	4b1b      	ldr	r3, [pc, #108]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	4a1a      	ldr	r2, [pc, #104]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002370:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002374:	60d3      	str	r3, [r2, #12]
 8002376:	e011      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002380:	d10c      	bne.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3304      	adds	r3, #4
 8002386:	2101      	movs	r1, #1
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f899 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 800238e:	4603      	mov	r3, r0
 8002390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d02b      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023a8:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023b6:	4908      	ldr	r1, [pc, #32]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80023c6:	d109      	bne.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023c8:	4b03      	ldr	r3, [pc, #12]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4a02      	ldr	r2, [pc, #8]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80023d2:	60d3      	str	r3, [r2, #12]
 80023d4:	e014      	b.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023d6:	bf00      	nop
 80023d8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80023e4:	d10c      	bne.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2101      	movs	r1, #1
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 f867 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 80023f2:	4603      	mov	r3, r0
 80023f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023f6:	7cfb      	ldrb	r3, [r7, #19]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023fc:	7cfb      	ldrb	r3, [r7, #19]
 80023fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800240c:	4b2b      	ldr	r3, [pc, #172]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800241a:	4928      	ldr	r1, [pc, #160]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002426:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800242a:	d10d      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3304      	adds	r3, #4
 8002430:	2102      	movs	r1, #2
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f844 	bl	80024c0 <RCCEx_PLLSAI1_Config>
 8002438:	4603      	mov	r3, r0
 800243a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800243c:	7cfb      	ldrb	r3, [r7, #19]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d014      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	74bb      	strb	r3, [r7, #18]
 8002446:	e011      	b.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800244c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002450:	d10c      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3320      	adds	r3, #32
 8002456:	2102      	movs	r1, #2
 8002458:	4618      	mov	r0, r3
 800245a:	f000 f925 	bl	80026a8 <RCCEx_PLLSAI2_Config>
 800245e:	4603      	mov	r3, r0
 8002460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002462:	7cfb      	ldrb	r3, [r7, #19]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002468:	7cfb      	ldrb	r3, [r7, #19]
 800246a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002478:	4b10      	ldr	r3, [pc, #64]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800247e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002486:	490d      	ldr	r1, [pc, #52]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00b      	beq.n	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800249a:	4b08      	ldr	r3, [pc, #32]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80024aa:	4904      	ldr	r1, [pc, #16]	@ (80024bc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80024b2:	7cbb      	ldrb	r3, [r7, #18]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000

080024c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024ca:	2300      	movs	r3, #0
 80024cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ce:	4b75      	ldr	r3, [pc, #468]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d018      	beq.n	800250c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024da:	4b72      	ldr	r3, [pc, #456]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0203 	and.w	r2, r3, #3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10d      	bne.n	8002506 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
       ||
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d009      	beq.n	8002506 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024f2:	4b6c      	ldr	r3, [pc, #432]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
       ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d047      	beq.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e044      	b.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d018      	beq.n	8002546 <RCCEx_PLLSAI1_Config+0x86>
 8002514:	2b03      	cmp	r3, #3
 8002516:	d825      	bhi.n	8002564 <RCCEx_PLLSAI1_Config+0xa4>
 8002518:	2b01      	cmp	r3, #1
 800251a:	d002      	beq.n	8002522 <RCCEx_PLLSAI1_Config+0x62>
 800251c:	2b02      	cmp	r3, #2
 800251e:	d009      	beq.n	8002534 <RCCEx_PLLSAI1_Config+0x74>
 8002520:	e020      	b.n	8002564 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002522:	4b60      	ldr	r3, [pc, #384]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d11d      	bne.n	800256a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002532:	e01a      	b.n	800256a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002534:	4b5b      	ldr	r3, [pc, #364]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800253c:	2b00      	cmp	r3, #0
 800253e:	d116      	bne.n	800256e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002544:	e013      	b.n	800256e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002546:	4b57      	ldr	r3, [pc, #348]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002552:	4b54      	ldr	r3, [pc, #336]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002562:	e006      	b.n	8002572 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      break;
 8002568:	e004      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256a:	bf00      	nop
 800256c:	e002      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800256e:	bf00      	nop
 8002570:	e000      	b.n	8002574 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002572:	bf00      	nop
    }

    if(status == HAL_OK)
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d10d      	bne.n	8002596 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800257a:	4b4a      	ldr	r3, [pc, #296]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	3b01      	subs	r3, #1
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	430b      	orrs	r3, r1
 8002590:	4944      	ldr	r1, [pc, #272]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002592:	4313      	orrs	r3, r2
 8002594:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d17d      	bne.n	8002698 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800259c:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a40      	ldr	r2, [pc, #256]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80025a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025a8:	f7fe fb28 	bl	8000bfc <HAL_GetTick>
 80025ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025ae:	e009      	b.n	80025c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025b0:	f7fe fb24 	bl	8000bfc <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	73fb      	strb	r3, [r7, #15]
        break;
 80025c2:	e005      	b.n	80025d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025c4:	4b37      	ldr	r3, [pc, #220]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1ef      	bne.n	80025b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d160      	bne.n	8002698 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d111      	bne.n	8002600 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025dc:	4b31      	ldr	r3, [pc, #196]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80025e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6892      	ldr	r2, [r2, #8]
 80025ec:	0211      	lsls	r1, r2, #8
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68d2      	ldr	r2, [r2, #12]
 80025f2:	0912      	lsrs	r2, r2, #4
 80025f4:	0452      	lsls	r2, r2, #17
 80025f6:	430a      	orrs	r2, r1
 80025f8:	492a      	ldr	r1, [pc, #168]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	610b      	str	r3, [r1, #16]
 80025fe:	e027      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d112      	bne.n	800262c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002606:	4b27      	ldr	r3, [pc, #156]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800260e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6892      	ldr	r2, [r2, #8]
 8002616:	0211      	lsls	r1, r2, #8
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6912      	ldr	r2, [r2, #16]
 800261c:	0852      	lsrs	r2, r2, #1
 800261e:	3a01      	subs	r2, #1
 8002620:	0552      	lsls	r2, r2, #21
 8002622:	430a      	orrs	r2, r1
 8002624:	491f      	ldr	r1, [pc, #124]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	610b      	str	r3, [r1, #16]
 800262a:	e011      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800262c:	4b1d      	ldr	r3, [pc, #116]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002634:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	6892      	ldr	r2, [r2, #8]
 800263c:	0211      	lsls	r1, r2, #8
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6952      	ldr	r2, [r2, #20]
 8002642:	0852      	lsrs	r2, r2, #1
 8002644:	3a01      	subs	r2, #1
 8002646:	0652      	lsls	r2, r2, #25
 8002648:	430a      	orrs	r2, r1
 800264a:	4916      	ldr	r1, [pc, #88]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002650:	4b14      	ldr	r3, [pc, #80]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a13      	ldr	r2, [pc, #76]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002656:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800265a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265c:	f7fe face 	bl	8000bfc <HAL_GetTick>
 8002660:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002662:	e009      	b.n	8002678 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002664:	f7fe faca 	bl	8000bfc <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d902      	bls.n	8002678 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	73fb      	strb	r3, [r7, #15]
          break;
 8002676:	e005      	b.n	8002684 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002678:	4b0a      	ldr	r3, [pc, #40]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ef      	beq.n	8002664 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800268c:	691a      	ldr	r2, [r3, #16]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	4904      	ldr	r1, [pc, #16]	@ (80026a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	4313      	orrs	r3, r2
 8002696:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	40021000 	.word	0x40021000

080026a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d018      	beq.n	80026f4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026c2:	4b67      	ldr	r3, [pc, #412]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f003 0203 	and.w	r2, r3, #3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d10d      	bne.n	80026ee <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
       ||
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d009      	beq.n	80026ee <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026da:	4b61      	ldr	r3, [pc, #388]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	091b      	lsrs	r3, r3, #4
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d047      	beq.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	73fb      	strb	r3, [r7, #15]
 80026f2:	e044      	b.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d018      	beq.n	800272e <RCCEx_PLLSAI2_Config+0x86>
 80026fc:	2b03      	cmp	r3, #3
 80026fe:	d825      	bhi.n	800274c <RCCEx_PLLSAI2_Config+0xa4>
 8002700:	2b01      	cmp	r3, #1
 8002702:	d002      	beq.n	800270a <RCCEx_PLLSAI2_Config+0x62>
 8002704:	2b02      	cmp	r3, #2
 8002706:	d009      	beq.n	800271c <RCCEx_PLLSAI2_Config+0x74>
 8002708:	e020      	b.n	800274c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800270a:	4b55      	ldr	r3, [pc, #340]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11d      	bne.n	8002752 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800271a:	e01a      	b.n	8002752 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800271c:	4b50      	ldr	r3, [pc, #320]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002724:	2b00      	cmp	r3, #0
 8002726:	d116      	bne.n	8002756 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800272c:	e013      	b.n	8002756 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800272e:	4b4c      	ldr	r3, [pc, #304]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800273a:	4b49      	ldr	r3, [pc, #292]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800274a:	e006      	b.n	800275a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	73fb      	strb	r3, [r7, #15]
      break;
 8002750:	e004      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002752:	bf00      	nop
 8002754:	e002      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002756:	bf00      	nop
 8002758:	e000      	b.n	800275c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800275a:	bf00      	nop
    }

    if(status == HAL_OK)
 800275c:	7bfb      	ldrb	r3, [r7, #15]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002762:	4b3f      	ldr	r3, [pc, #252]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6819      	ldr	r1, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	3b01      	subs	r3, #1
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	430b      	orrs	r3, r1
 8002778:	4939      	ldr	r1, [pc, #228]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800277e:	7bfb      	ldrb	r3, [r7, #15]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d167      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002784:	4b36      	ldr	r3, [pc, #216]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a35      	ldr	r2, [pc, #212]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002790:	f7fe fa34 	bl	8000bfc <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002796:	e009      	b.n	80027ac <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002798:	f7fe fa30 	bl	8000bfc <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d902      	bls.n	80027ac <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	73fb      	strb	r3, [r7, #15]
        break;
 80027aa:	e005      	b.n	80027b8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80027ac:	4b2c      	ldr	r3, [pc, #176]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1ef      	bne.n	8002798 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d14a      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d111      	bne.n	80027e8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c4:	4b26      	ldr	r3, [pc, #152]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80027cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6892      	ldr	r2, [r2, #8]
 80027d4:	0211      	lsls	r1, r2, #8
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	68d2      	ldr	r2, [r2, #12]
 80027da:	0912      	lsrs	r2, r2, #4
 80027dc:	0452      	lsls	r2, r2, #17
 80027de:	430a      	orrs	r2, r1
 80027e0:	491f      	ldr	r1, [pc, #124]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	614b      	str	r3, [r1, #20]
 80027e6:	e011      	b.n	800280c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80027f0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6892      	ldr	r2, [r2, #8]
 80027f8:	0211      	lsls	r1, r2, #8
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6912      	ldr	r2, [r2, #16]
 80027fe:	0852      	lsrs	r2, r2, #1
 8002800:	3a01      	subs	r2, #1
 8002802:	0652      	lsls	r2, r2, #25
 8002804:	430a      	orrs	r2, r1
 8002806:	4916      	ldr	r1, [pc, #88]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002808:	4313      	orrs	r3, r2
 800280a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800280c:	4b14      	ldr	r3, [pc, #80]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a13      	ldr	r2, [pc, #76]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe f9f0 	bl	8000bfc <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800281e:	e009      	b.n	8002834 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002820:	f7fe f9ec 	bl	8000bfc <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d902      	bls.n	8002834 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	73fb      	strb	r3, [r7, #15]
          break;
 8002832:	e005      	b.n	8002840 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002834:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ef      	beq.n	8002820 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002840:	7bfb      	ldrb	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002846:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	4904      	ldr	r1, [pc, #16]	@ (8002860 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002850:	4313      	orrs	r3, r2
 8002852:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002854:	7bfb      	ldrb	r3, [r7, #15]
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000

08002864 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e049      	b.n	800290a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d106      	bne.n	8002890 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2200      	movs	r2, #0
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f841 	bl	8002912 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	3304      	adds	r3, #4
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f000 f9e0 	bl	8002c68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002936:	b2db      	uxtb	r3, r3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d001      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e04f      	b.n	80029e0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a23      	ldr	r2, [pc, #140]	@ (80029ec <HAL_TIM_Base_Start_IT+0xc4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d01d      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800296a:	d018      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a1f      	ldr	r2, [pc, #124]	@ (80029f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1e      	ldr	r2, [pc, #120]	@ (80029f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d00e      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1c      	ldr	r2, [pc, #112]	@ (80029f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d009      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a1b      	ldr	r2, [pc, #108]	@ (80029fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d004      	beq.n	800299e <HAL_TIM_Base_Start_IT+0x76>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a19      	ldr	r2, [pc, #100]	@ (8002a00 <HAL_TIM_Base_Start_IT+0xd8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d115      	bne.n	80029ca <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_TIM_Base_Start_IT+0xdc>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b06      	cmp	r3, #6
 80029ae:	d015      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0xb4>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029b6:	d011      	beq.n	80029dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c8:	e008      	b.n	80029dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
 80029da:	e000      	b.n	80029de <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3714      	adds	r7, #20
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr
 80029ec:	40012c00 	.word	0x40012c00
 80029f0:	40000400 	.word	0x40000400
 80029f4:	40000800 	.word	0x40000800
 80029f8:	40000c00 	.word	0x40000c00
 80029fc:	40013400 	.word	0x40013400
 8002a00:	40014000 	.word	0x40014000
 8002a04:	00010007 	.word	0x00010007

08002a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d020      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d01b      	beq.n	8002a6c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0202 	mvn.w	r2, #2
 8002a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f8e9 	bl	8002c2a <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8db 	bl	8002c16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f8ec 	bl	8002c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d020      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	f003 0304 	and.w	r3, r3, #4
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0204 	mvn.w	r2, #4
 8002a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d003      	beq.n	8002aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8c3 	bl	8002c2a <HAL_TIM_IC_CaptureCallback>
 8002aa4:	e005      	b.n	8002ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8b5 	bl	8002c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8c6 	bl	8002c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d020      	beq.n	8002b04 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01b      	beq.n	8002b04 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0208 	mvn.w	r2, #8
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2204      	movs	r2, #4
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f89d 	bl	8002c2a <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f88f 	bl	8002c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f8a0 	bl	8002c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	f003 0310 	and.w	r3, r3, #16
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d020      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01b      	beq.n	8002b50 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0210 	mvn.w	r2, #16
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2208      	movs	r2, #8
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f877 	bl	8002c2a <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f869 	bl	8002c16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f87a 	bl	8002c3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00c      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d007      	beq.n	8002b74 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f06f 0201 	mvn.w	r2, #1
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd fe74 	bl	800085c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00c      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f913 	bl	8002dc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00c      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d007      	beq.n	8002bc6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f000 f90b 	bl	8002ddc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00c      	beq.n	8002bea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f000 f834 	bl	8002c52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00c      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d007      	beq.n	8002c0e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f06f 0220 	mvn.w	r2, #32
 8002c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8d3 	bl	8002db4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c16:	b480      	push	{r7}
 8002c18:	b083      	sub	sp, #12
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c46:	bf00      	nop
 8002c48:	370c      	adds	r7, #12
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr

08002c52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
	...

08002c68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a46      	ldr	r2, [pc, #280]	@ (8002d94 <TIM_Base_SetConfig+0x12c>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d013      	beq.n	8002ca8 <TIM_Base_SetConfig+0x40>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c86:	d00f      	beq.n	8002ca8 <TIM_Base_SetConfig+0x40>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a43      	ldr	r2, [pc, #268]	@ (8002d98 <TIM_Base_SetConfig+0x130>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d00b      	beq.n	8002ca8 <TIM_Base_SetConfig+0x40>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a42      	ldr	r2, [pc, #264]	@ (8002d9c <TIM_Base_SetConfig+0x134>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d007      	beq.n	8002ca8 <TIM_Base_SetConfig+0x40>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a41      	ldr	r2, [pc, #260]	@ (8002da0 <TIM_Base_SetConfig+0x138>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d003      	beq.n	8002ca8 <TIM_Base_SetConfig+0x40>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a40      	ldr	r2, [pc, #256]	@ (8002da4 <TIM_Base_SetConfig+0x13c>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d108      	bne.n	8002cba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002cae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a35      	ldr	r2, [pc, #212]	@ (8002d94 <TIM_Base_SetConfig+0x12c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d01f      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cc8:	d01b      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a32      	ldr	r2, [pc, #200]	@ (8002d98 <TIM_Base_SetConfig+0x130>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d017      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a31      	ldr	r2, [pc, #196]	@ (8002d9c <TIM_Base_SetConfig+0x134>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a30      	ldr	r2, [pc, #192]	@ (8002da0 <TIM_Base_SetConfig+0x138>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00f      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a2f      	ldr	r2, [pc, #188]	@ (8002da4 <TIM_Base_SetConfig+0x13c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d00b      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2e      	ldr	r2, [pc, #184]	@ (8002da8 <TIM_Base_SetConfig+0x140>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d007      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	@ (8002dac <TIM_Base_SetConfig+0x144>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d003      	beq.n	8002d02 <TIM_Base_SetConfig+0x9a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2c      	ldr	r2, [pc, #176]	@ (8002db0 <TIM_Base_SetConfig+0x148>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d108      	bne.n	8002d14 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68fa      	ldr	r2, [r7, #12]
 8002d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a16      	ldr	r2, [pc, #88]	@ (8002d94 <TIM_Base_SetConfig+0x12c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00f      	beq.n	8002d60 <TIM_Base_SetConfig+0xf8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a18      	ldr	r2, [pc, #96]	@ (8002da4 <TIM_Base_SetConfig+0x13c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00b      	beq.n	8002d60 <TIM_Base_SetConfig+0xf8>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a17      	ldr	r2, [pc, #92]	@ (8002da8 <TIM_Base_SetConfig+0x140>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d007      	beq.n	8002d60 <TIM_Base_SetConfig+0xf8>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a16      	ldr	r2, [pc, #88]	@ (8002dac <TIM_Base_SetConfig+0x144>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d003      	beq.n	8002d60 <TIM_Base_SetConfig+0xf8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	4a15      	ldr	r2, [pc, #84]	@ (8002db0 <TIM_Base_SetConfig+0x148>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d103      	bne.n	8002d68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d105      	bne.n	8002d86 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	f023 0201 	bic.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	611a      	str	r2, [r3, #16]
  }
}
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40012c00 	.word	0x40012c00
 8002d98:	40000400 	.word	0x40000400
 8002d9c:	40000800 	.word	0x40000800
 8002da0:	40000c00 	.word	0x40000c00
 8002da4:	40013400 	.word	0x40013400
 8002da8:	40014000 	.word	0x40014000
 8002dac:	40014400 	.word	0x40014400
 8002db0:	40014800 	.word	0x40014800

08002db4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e040      	b.n	8002e84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fe38 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	@ 0x24
 8002e1c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f000 fae0 	bl	80033fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f825 	bl	8002e8c <UART_SetConfig>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d101      	bne.n	8002e4c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e01b      	b.n	8002e84 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f042 0201 	orr.w	r2, r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fb5f 	bl	8003540 <UART_CheckIdleState>
 8002e82:	4603      	mov	r3, r0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b08a      	sub	sp, #40	@ 0x28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4ba4      	ldr	r3, [pc, #656]	@ (800314c <UART_SetConfig+0x2c0>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a99      	ldr	r2, [pc, #612]	@ (8003150 <UART_SetConfig+0x2c4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a90      	ldr	r2, [pc, #576]	@ (8003154 <UART_SetConfig+0x2c8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d126      	bne.n	8002f64 <UART_SetConfig+0xd8>
 8002f16:	4b90      	ldr	r3, [pc, #576]	@ (8003158 <UART_SetConfig+0x2cc>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d81b      	bhi.n	8002f5c <UART_SetConfig+0xd0>
 8002f24:	a201      	add	r2, pc, #4	@ (adr r2, 8002f2c <UART_SetConfig+0xa0>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4d 	.word	0x08002f4d
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f55 	.word	0x08002f55
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f42:	e116      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002f44:	2302      	movs	r3, #2
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4a:	e112      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f52:	e10e      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002f54:	2308      	movs	r3, #8
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5a:	e10a      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f62:	e106      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7c      	ldr	r2, [pc, #496]	@ (800315c <UART_SetConfig+0x2d0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d138      	bne.n	8002fe0 <UART_SetConfig+0x154>
 8002f6e:	4b7a      	ldr	r3, [pc, #488]	@ (8003158 <UART_SetConfig+0x2cc>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d82d      	bhi.n	8002fd8 <UART_SetConfig+0x14c>
 8002f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f84 <UART_SetConfig+0xf8>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	08002fd9 	.word	0x08002fd9
 8002f90:	08002fd9 	.word	0x08002fd9
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	08002fd9 	.word	0x08002fd9
 8002f9c:	08002fd9 	.word	0x08002fd9
 8002fa0:	08002fd9 	.word	0x08002fd9
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	08002fd9 	.word	0x08002fd9
 8002fac:	08002fd9 	.word	0x08002fd9
 8002fb0:	08002fd9 	.word	0x08002fd9
 8002fb4:	08002fd1 	.word	0x08002fd1
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e0d8      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e0d4      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e0d0      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd6:	e0cc      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fde:	e0c8      	b.n	8003172 <UART_SetConfig+0x2e6>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a5e      	ldr	r2, [pc, #376]	@ (8003160 <UART_SetConfig+0x2d4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d125      	bne.n	8003036 <UART_SetConfig+0x1aa>
 8002fea:	4b5b      	ldr	r3, [pc, #364]	@ (8003158 <UART_SetConfig+0x2cc>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ff4:	2b30      	cmp	r3, #48	@ 0x30
 8002ff6:	d016      	beq.n	8003026 <UART_SetConfig+0x19a>
 8002ff8:	2b30      	cmp	r3, #48	@ 0x30
 8002ffa:	d818      	bhi.n	800302e <UART_SetConfig+0x1a2>
 8002ffc:	2b20      	cmp	r3, #32
 8002ffe:	d00a      	beq.n	8003016 <UART_SetConfig+0x18a>
 8003000:	2b20      	cmp	r3, #32
 8003002:	d814      	bhi.n	800302e <UART_SetConfig+0x1a2>
 8003004:	2b00      	cmp	r3, #0
 8003006:	d002      	beq.n	800300e <UART_SetConfig+0x182>
 8003008:	2b10      	cmp	r3, #16
 800300a:	d008      	beq.n	800301e <UART_SetConfig+0x192>
 800300c:	e00f      	b.n	800302e <UART_SetConfig+0x1a2>
 800300e:	2300      	movs	r3, #0
 8003010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003014:	e0ad      	b.n	8003172 <UART_SetConfig+0x2e6>
 8003016:	2302      	movs	r3, #2
 8003018:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301c:	e0a9      	b.n	8003172 <UART_SetConfig+0x2e6>
 800301e:	2304      	movs	r3, #4
 8003020:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003024:	e0a5      	b.n	8003172 <UART_SetConfig+0x2e6>
 8003026:	2308      	movs	r3, #8
 8003028:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302c:	e0a1      	b.n	8003172 <UART_SetConfig+0x2e6>
 800302e:	2310      	movs	r3, #16
 8003030:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003034:	e09d      	b.n	8003172 <UART_SetConfig+0x2e6>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a4a      	ldr	r2, [pc, #296]	@ (8003164 <UART_SetConfig+0x2d8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d125      	bne.n	800308c <UART_SetConfig+0x200>
 8003040:	4b45      	ldr	r3, [pc, #276]	@ (8003158 <UART_SetConfig+0x2cc>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800304a:	2bc0      	cmp	r3, #192	@ 0xc0
 800304c:	d016      	beq.n	800307c <UART_SetConfig+0x1f0>
 800304e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003050:	d818      	bhi.n	8003084 <UART_SetConfig+0x1f8>
 8003052:	2b80      	cmp	r3, #128	@ 0x80
 8003054:	d00a      	beq.n	800306c <UART_SetConfig+0x1e0>
 8003056:	2b80      	cmp	r3, #128	@ 0x80
 8003058:	d814      	bhi.n	8003084 <UART_SetConfig+0x1f8>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <UART_SetConfig+0x1d8>
 800305e:	2b40      	cmp	r3, #64	@ 0x40
 8003060:	d008      	beq.n	8003074 <UART_SetConfig+0x1e8>
 8003062:	e00f      	b.n	8003084 <UART_SetConfig+0x1f8>
 8003064:	2300      	movs	r3, #0
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306a:	e082      	b.n	8003172 <UART_SetConfig+0x2e6>
 800306c:	2302      	movs	r3, #2
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003072:	e07e      	b.n	8003172 <UART_SetConfig+0x2e6>
 8003074:	2304      	movs	r3, #4
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307a:	e07a      	b.n	8003172 <UART_SetConfig+0x2e6>
 800307c:	2308      	movs	r3, #8
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003082:	e076      	b.n	8003172 <UART_SetConfig+0x2e6>
 8003084:	2310      	movs	r3, #16
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308a:	e072      	b.n	8003172 <UART_SetConfig+0x2e6>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a35      	ldr	r2, [pc, #212]	@ (8003168 <UART_SetConfig+0x2dc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d12a      	bne.n	80030ec <UART_SetConfig+0x260>
 8003096:	4b30      	ldr	r3, [pc, #192]	@ (8003158 <UART_SetConfig+0x2cc>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030a4:	d01a      	beq.n	80030dc <UART_SetConfig+0x250>
 80030a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80030aa:	d81b      	bhi.n	80030e4 <UART_SetConfig+0x258>
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b0:	d00c      	beq.n	80030cc <UART_SetConfig+0x240>
 80030b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b6:	d815      	bhi.n	80030e4 <UART_SetConfig+0x258>
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d003      	beq.n	80030c4 <UART_SetConfig+0x238>
 80030bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c0:	d008      	beq.n	80030d4 <UART_SetConfig+0x248>
 80030c2:	e00f      	b.n	80030e4 <UART_SetConfig+0x258>
 80030c4:	2300      	movs	r3, #0
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ca:	e052      	b.n	8003172 <UART_SetConfig+0x2e6>
 80030cc:	2302      	movs	r3, #2
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d2:	e04e      	b.n	8003172 <UART_SetConfig+0x2e6>
 80030d4:	2304      	movs	r3, #4
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030da:	e04a      	b.n	8003172 <UART_SetConfig+0x2e6>
 80030dc:	2308      	movs	r3, #8
 80030de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e2:	e046      	b.n	8003172 <UART_SetConfig+0x2e6>
 80030e4:	2310      	movs	r3, #16
 80030e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ea:	e042      	b.n	8003172 <UART_SetConfig+0x2e6>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a17      	ldr	r2, [pc, #92]	@ (8003150 <UART_SetConfig+0x2c4>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d13a      	bne.n	800316c <UART_SetConfig+0x2e0>
 80030f6:	4b18      	ldr	r3, [pc, #96]	@ (8003158 <UART_SetConfig+0x2cc>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003100:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003104:	d01a      	beq.n	800313c <UART_SetConfig+0x2b0>
 8003106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800310a:	d81b      	bhi.n	8003144 <UART_SetConfig+0x2b8>
 800310c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003110:	d00c      	beq.n	800312c <UART_SetConfig+0x2a0>
 8003112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003116:	d815      	bhi.n	8003144 <UART_SetConfig+0x2b8>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d003      	beq.n	8003124 <UART_SetConfig+0x298>
 800311c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003120:	d008      	beq.n	8003134 <UART_SetConfig+0x2a8>
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x2b8>
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312a:	e022      	b.n	8003172 <UART_SetConfig+0x2e6>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003132:	e01e      	b.n	8003172 <UART_SetConfig+0x2e6>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e01a      	b.n	8003172 <UART_SetConfig+0x2e6>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003142:	e016      	b.n	8003172 <UART_SetConfig+0x2e6>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314a:	e012      	b.n	8003172 <UART_SetConfig+0x2e6>
 800314c:	efff69f3 	.word	0xefff69f3
 8003150:	40008000 	.word	0x40008000
 8003154:	40013800 	.word	0x40013800
 8003158:	40021000 	.word	0x40021000
 800315c:	40004400 	.word	0x40004400
 8003160:	40004800 	.word	0x40004800
 8003164:	40004c00 	.word	0x40004c00
 8003168:	40005000 	.word	0x40005000
 800316c:	2310      	movs	r3, #16
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a9f      	ldr	r2, [pc, #636]	@ (80033f4 <UART_SetConfig+0x568>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d17a      	bne.n	8003272 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800317c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003180:	2b08      	cmp	r3, #8
 8003182:	d824      	bhi.n	80031ce <UART_SetConfig+0x342>
 8003184:	a201      	add	r2, pc, #4	@ (adr r2, 800318c <UART_SetConfig+0x300>)
 8003186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318a:	bf00      	nop
 800318c:	080031b1 	.word	0x080031b1
 8003190:	080031cf 	.word	0x080031cf
 8003194:	080031b9 	.word	0x080031b9
 8003198:	080031cf 	.word	0x080031cf
 800319c:	080031bf 	.word	0x080031bf
 80031a0:	080031cf 	.word	0x080031cf
 80031a4:	080031cf 	.word	0x080031cf
 80031a8:	080031cf 	.word	0x080031cf
 80031ac:	080031c7 	.word	0x080031c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7fe fdde 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 80031b4:	61f8      	str	r0, [r7, #28]
        break;
 80031b6:	e010      	b.n	80031da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b8:	4b8f      	ldr	r3, [pc, #572]	@ (80033f8 <UART_SetConfig+0x56c>)
 80031ba:	61fb      	str	r3, [r7, #28]
        break;
 80031bc:	e00d      	b.n	80031da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031be:	f7fe fd3f 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 80031c2:	61f8      	str	r0, [r7, #28]
        break;
 80031c4:	e009      	b.n	80031da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ca:	61fb      	str	r3, [r7, #28]
        break;
 80031cc:	e005      	b.n	80031da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80fb 	beq.w	80033d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4413      	add	r3, r2
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d305      	bcc.n	80031fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d903      	bls.n	8003206 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003204:	e0e8      	b.n	80033d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2200      	movs	r2, #0
 800320a:	461c      	mov	r4, r3
 800320c:	4615      	mov	r5, r2
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	f04f 0300 	mov.w	r3, #0
 8003216:	022b      	lsls	r3, r5, #8
 8003218:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800321c:	0222      	lsls	r2, r4, #8
 800321e:	68f9      	ldr	r1, [r7, #12]
 8003220:	6849      	ldr	r1, [r1, #4]
 8003222:	0849      	lsrs	r1, r1, #1
 8003224:	2000      	movs	r0, #0
 8003226:	4688      	mov	r8, r1
 8003228:	4681      	mov	r9, r0
 800322a:	eb12 0a08 	adds.w	sl, r2, r8
 800322e:	eb43 0b09 	adc.w	fp, r3, r9
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	603b      	str	r3, [r7, #0]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003240:	4650      	mov	r0, sl
 8003242:	4659      	mov	r1, fp
 8003244:	f7fc ffc4 	bl	80001d0 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003256:	d308      	bcc.n	800326a <UART_SetConfig+0x3de>
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325e:	d204      	bcs.n	800326a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	60da      	str	r2, [r3, #12]
 8003268:	e0b6      	b.n	80033d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003270:	e0b2      	b.n	80033d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800327a:	d15e      	bne.n	800333a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800327c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003280:	2b08      	cmp	r3, #8
 8003282:	d828      	bhi.n	80032d6 <UART_SetConfig+0x44a>
 8003284:	a201      	add	r2, pc, #4	@ (adr r2, 800328c <UART_SetConfig+0x400>)
 8003286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328a:	bf00      	nop
 800328c:	080032b1 	.word	0x080032b1
 8003290:	080032b9 	.word	0x080032b9
 8003294:	080032c1 	.word	0x080032c1
 8003298:	080032d7 	.word	0x080032d7
 800329c:	080032c7 	.word	0x080032c7
 80032a0:	080032d7 	.word	0x080032d7
 80032a4:	080032d7 	.word	0x080032d7
 80032a8:	080032d7 	.word	0x080032d7
 80032ac:	080032cf 	.word	0x080032cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b0:	f7fe fd5e 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 80032b4:	61f8      	str	r0, [r7, #28]
        break;
 80032b6:	e014      	b.n	80032e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032b8:	f7fe fd70 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 80032bc:	61f8      	str	r0, [r7, #28]
        break;
 80032be:	e010      	b.n	80032e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032c0:	4b4d      	ldr	r3, [pc, #308]	@ (80033f8 <UART_SetConfig+0x56c>)
 80032c2:	61fb      	str	r3, [r7, #28]
        break;
 80032c4:	e00d      	b.n	80032e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032c6:	f7fe fcbb 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 80032ca:	61f8      	str	r0, [r7, #28]
        break;
 80032cc:	e009      	b.n	80032e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032d2:	61fb      	str	r3, [r7, #28]
        break;
 80032d4:	e005      	b.n	80032e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d077      	beq.n	80033d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	005a      	lsls	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	085b      	lsrs	r3, r3, #1
 80032f2:	441a      	add	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2b0f      	cmp	r3, #15
 8003302:	d916      	bls.n	8003332 <UART_SetConfig+0x4a6>
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800330a:	d212      	bcs.n	8003332 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	b29b      	uxth	r3, r3
 8003310:	f023 030f 	bic.w	r3, r3, #15
 8003314:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	085b      	lsrs	r3, r3, #1
 800331a:	b29b      	uxth	r3, r3
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	b29a      	uxth	r2, r3
 8003322:	8afb      	ldrh	r3, [r7, #22]
 8003324:	4313      	orrs	r3, r2
 8003326:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	8afa      	ldrh	r2, [r7, #22]
 800332e:	60da      	str	r2, [r3, #12]
 8003330:	e052      	b.n	80033d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003338:	e04e      	b.n	80033d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800333a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800333e:	2b08      	cmp	r3, #8
 8003340:	d827      	bhi.n	8003392 <UART_SetConfig+0x506>
 8003342:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <UART_SetConfig+0x4bc>)
 8003344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003348:	0800336d 	.word	0x0800336d
 800334c:	08003375 	.word	0x08003375
 8003350:	0800337d 	.word	0x0800337d
 8003354:	08003393 	.word	0x08003393
 8003358:	08003383 	.word	0x08003383
 800335c:	08003393 	.word	0x08003393
 8003360:	08003393 	.word	0x08003393
 8003364:	08003393 	.word	0x08003393
 8003368:	0800338b 	.word	0x0800338b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800336c:	f7fe fd00 	bl	8001d70 <HAL_RCC_GetPCLK1Freq>
 8003370:	61f8      	str	r0, [r7, #28]
        break;
 8003372:	e014      	b.n	800339e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003374:	f7fe fd12 	bl	8001d9c <HAL_RCC_GetPCLK2Freq>
 8003378:	61f8      	str	r0, [r7, #28]
        break;
 800337a:	e010      	b.n	800339e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800337c:	4b1e      	ldr	r3, [pc, #120]	@ (80033f8 <UART_SetConfig+0x56c>)
 800337e:	61fb      	str	r3, [r7, #28]
        break;
 8003380:	e00d      	b.n	800339e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003382:	f7fe fc5d 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8003386:	61f8      	str	r0, [r7, #28]
        break;
 8003388:	e009      	b.n	800339e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800338e:	61fb      	str	r3, [r7, #28]
        break;
 8003390:	e005      	b.n	800339e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800339c:	bf00      	nop
    }

    if (pclk != 0U)
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d019      	beq.n	80033d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	085a      	lsrs	r2, r3, #1
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	441a      	add	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	d909      	bls.n	80033d2 <UART_SetConfig+0x546>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033c4:	d205      	bcs.n	80033d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60da      	str	r2, [r3, #12]
 80033d0:	e002      	b.n	80033d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80033e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3728      	adds	r7, #40	@ 0x28
 80033ec:	46bd      	mov	sp, r7
 80033ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f2:	bf00      	nop
 80033f4:	40008000 	.word	0x40008000
 80033f8:	00f42400 	.word	0x00f42400

080033fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f003 0308 	and.w	r3, r3, #8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00a      	beq.n	8003426 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d00a      	beq.n	800346a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	430a      	orrs	r2, r1
 8003468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00a      	beq.n	800348c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	f003 0310 	and.w	r3, r3, #16
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b2:	f003 0320 	and.w	r3, r3, #32
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d01a      	beq.n	8003512 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034fa:	d10a      	bne.n	8003512 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00a      	beq.n	8003534 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	430a      	orrs	r2, r1
 8003532:	605a      	str	r2, [r3, #4]
  }
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b098      	sub	sp, #96	@ 0x60
 8003544:	af02      	add	r7, sp, #8
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003550:	f7fd fb54 	bl	8000bfc <HAL_GetTick>
 8003554:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d12e      	bne.n	80035c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003564:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800356c:	2200      	movs	r2, #0
 800356e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f88c 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d021      	beq.n	80035c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800358c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003592:	653b      	str	r3, [r7, #80]	@ 0x50
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	461a      	mov	r2, r3
 800359a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359c:	647b      	str	r3, [r7, #68]	@ 0x44
 800359e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035a2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e6      	bne.n	800357e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e062      	b.n	8003688 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d149      	bne.n	8003664 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035d4:	9300      	str	r3, [sp, #0]
 80035d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d8:	2200      	movs	r2, #0
 80035da:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f856 	bl	8003690 <UART_WaitOnFlagUntilTimeout>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d03c      	beq.n	8003664 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f2:	e853 3f00 	ldrex	r3, [r3]
 80035f6:	623b      	str	r3, [r7, #32]
   return(result);
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	461a      	mov	r2, r3
 8003606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003608:	633b      	str	r3, [r7, #48]	@ 0x30
 800360a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800360c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800360e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003610:	e841 2300 	strex	r3, r2, [r1]
 8003614:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1e6      	bne.n	80035ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	3308      	adds	r3, #8
 8003622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	e853 3f00 	ldrex	r3, [r3]
 800362a:	60fb      	str	r3, [r7, #12]
   return(result);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0301 	bic.w	r3, r3, #1
 8003632:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3308      	adds	r3, #8
 800363a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800363c:	61fa      	str	r2, [r7, #28]
 800363e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003640:	69b9      	ldr	r1, [r7, #24]
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	e841 2300 	strex	r3, r2, [r1]
 8003648:	617b      	str	r3, [r7, #20]
   return(result);
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1e5      	bne.n	800361c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2220      	movs	r2, #32
 8003654:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e011      	b.n	8003688 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2220      	movs	r2, #32
 8003668:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3758      	adds	r7, #88	@ 0x58
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036a0:	e04f      	b.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036a8:	d04b      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fd faa7 	bl	8000bfc <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e04e      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d037      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	2b80      	cmp	r3, #128	@ 0x80
 80036d6:	d034      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	2b40      	cmp	r3, #64	@ 0x40
 80036dc:	d031      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d110      	bne.n	800370e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2208      	movs	r2, #8
 80036f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f838 	bl	800376a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2208      	movs	r2, #8
 80036fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e029      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003718:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800371c:	d111      	bne.n	8003742 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003726:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 f81e 	bl	800376a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2220      	movs	r2, #32
 8003732:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e00f      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	69da      	ldr	r2, [r3, #28]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4013      	ands	r3, r2
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	429a      	cmp	r2, r3
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	429a      	cmp	r2, r3
 800375e:	d0a0      	beq.n	80036a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800376a:	b480      	push	{r7}
 800376c:	b095      	sub	sp, #84	@ 0x54
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003780:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003782:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003790:	643b      	str	r3, [r7, #64]	@ 0x40
 8003792:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003796:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800379e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e6      	bne.n	8003772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3308      	adds	r3, #8
 80037c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d118      	bne.n	8003812 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f023 0310 	bic.w	r3, r3, #16
 80037f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	613b      	str	r3, [r7, #16]
   return(result);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e6      	bne.n	80037e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003826:	bf00      	nop
 8003828:	3754      	adds	r7, #84	@ 0x54
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <__NVIC_SetPriority>:
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	4603      	mov	r3, r0
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003844:	2b00      	cmp	r3, #0
 8003846:	db0a      	blt.n	800385e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	b2da      	uxtb	r2, r3
 800384c:	490c      	ldr	r1, [pc, #48]	@ (8003880 <__NVIC_SetPriority+0x4c>)
 800384e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	440b      	add	r3, r1
 8003858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800385c:	e00a      	b.n	8003874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4908      	ldr	r1, [pc, #32]	@ (8003884 <__NVIC_SetPriority+0x50>)
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	f003 030f 	and.w	r3, r3, #15
 800386a:	3b04      	subs	r3, #4
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	440b      	add	r3, r1
 8003872:	761a      	strb	r2, [r3, #24]
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr
 8003880:	e000e100 	.word	0xe000e100
 8003884:	e000ed00 	.word	0xe000ed00

08003888 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <SysTick_Handler+0x1c>)
 800388e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003890:	f001 ff84 	bl	800579c <xTaskGetSchedulerState>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d001      	beq.n	800389e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800389a:	f002 fe7d 	bl	8006598 <xPortSysTickHandler>
  }
}
 800389e:	bf00      	nop
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038ac:	2100      	movs	r1, #0
 80038ae:	f06f 0004 	mvn.w	r0, #4
 80038b2:	f7ff ffbf 	bl	8003834 <__NVIC_SetPriority>
#endif
}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
	...

080038bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038c2:	f3ef 8305 	mrs	r3, IPSR
 80038c6:	603b      	str	r3, [r7, #0]
  return(result);
 80038c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80038ce:	f06f 0305 	mvn.w	r3, #5
 80038d2:	607b      	str	r3, [r7, #4]
 80038d4:	e00c      	b.n	80038f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003900 <osKernelInitialize+0x44>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d105      	bne.n	80038ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038de:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <osKernelInitialize+0x44>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038e4:	2300      	movs	r3, #0
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	e002      	b.n	80038f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80038ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038f0:	687b      	ldr	r3, [r7, #4]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000170 	.word	0x20000170

08003904 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800390a:	f3ef 8305 	mrs	r3, IPSR
 800390e:	603b      	str	r3, [r7, #0]
  return(result);
 8003910:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003916:	f06f 0305 	mvn.w	r3, #5
 800391a:	607b      	str	r3, [r7, #4]
 800391c:	e010      	b.n	8003940 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800391e:	4b0b      	ldr	r3, [pc, #44]	@ (800394c <osKernelStart+0x48>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d109      	bne.n	800393a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003926:	f7ff ffbf 	bl	80038a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800392a:	4b08      	ldr	r3, [pc, #32]	@ (800394c <osKernelStart+0x48>)
 800392c:	2202      	movs	r2, #2
 800392e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003930:	f001 fac0 	bl	8004eb4 <vTaskStartScheduler>
      stat = osOK;
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
 8003938:	e002      	b.n	8003940 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800393a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800393e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003940:	687b      	ldr	r3, [r7, #4]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	20000170 	.word	0x20000170

08003950 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003950:	b580      	push	{r7, lr}
 8003952:	b08e      	sub	sp, #56	@ 0x38
 8003954:	af04      	add	r7, sp, #16
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800395c:	2300      	movs	r3, #0
 800395e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003960:	f3ef 8305 	mrs	r3, IPSR
 8003964:	617b      	str	r3, [r7, #20]
  return(result);
 8003966:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003968:	2b00      	cmp	r3, #0
 800396a:	d17e      	bne.n	8003a6a <osThreadNew+0x11a>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d07b      	beq.n	8003a6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003972:	2380      	movs	r3, #128	@ 0x80
 8003974:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003976:	2318      	movs	r3, #24
 8003978:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800397e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003982:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d045      	beq.n	8003a16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <osThreadNew+0x48>
        name = attr->name;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d008      	beq.n	80039be <osThreadNew+0x6e>
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	2b38      	cmp	r3, #56	@ 0x38
 80039b0:	d805      	bhi.n	80039be <osThreadNew+0x6e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <osThreadNew+0x72>
        return (NULL);
 80039be:	2300      	movs	r3, #0
 80039c0:	e054      	b.n	8003a6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	089b      	lsrs	r3, r3, #2
 80039d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <osThreadNew+0xa8>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	2ba7      	cmp	r3, #167	@ 0xa7
 80039e0:	d90a      	bls.n	80039f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d006      	beq.n	80039f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d002      	beq.n	80039f8 <osThreadNew+0xa8>
        mem = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	61bb      	str	r3, [r7, #24]
 80039f6:	e010      	b.n	8003a1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10c      	bne.n	8003a1a <osThreadNew+0xca>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d108      	bne.n	8003a1a <osThreadNew+0xca>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <osThreadNew+0xca>
          mem = 0;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	e001      	b.n	8003a1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a16:	2300      	movs	r3, #0
 8003a18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d110      	bne.n	8003a42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a28:	9202      	str	r2, [sp, #8]
 8003a2a:	9301      	str	r3, [sp, #4]
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	6a3a      	ldr	r2, [r7, #32]
 8003a34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 ffc8 	bl	80049cc <xTaskCreateStatic>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	e013      	b.n	8003a6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d110      	bne.n	8003a6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	f107 0310 	add.w	r3, r7, #16
 8003a50:	9301      	str	r3, [sp, #4]
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f001 f816 	bl	8004a8c <xTaskCreate>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d001      	beq.n	8003a6a <osThreadNew+0x11a>
            hTask = NULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a6a:	693b      	ldr	r3, [r7, #16]
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	3728      	adds	r7, #40	@ 0x28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	bd80      	pop	{r7, pc}

08003a74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a7c:	f3ef 8305 	mrs	r3, IPSR
 8003a80:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d003      	beq.n	8003a90 <osDelay+0x1c>
    stat = osErrorISR;
 8003a88:	f06f 0305 	mvn.w	r3, #5
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e007      	b.n	8003aa0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d002      	beq.n	8003aa0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f001 f9d4 	bl	8004e48 <vTaskDelay>
    }
  }

  return (stat);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4a07      	ldr	r2, [pc, #28]	@ (8003ad8 <vApplicationGetIdleTaskMemory+0x2c>)
 8003abc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	4a06      	ldr	r2, [pc, #24]	@ (8003adc <vApplicationGetIdleTaskMemory+0x30>)
 8003ac2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2280      	movs	r2, #128	@ 0x80
 8003ac8:	601a      	str	r2, [r3, #0]
}
 8003aca:	bf00      	nop
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	20000174 	.word	0x20000174
 8003adc:	2000021c 	.word	0x2000021c

08003ae0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4a07      	ldr	r2, [pc, #28]	@ (8003b0c <vApplicationGetTimerTaskMemory+0x2c>)
 8003af0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	4a06      	ldr	r2, [pc, #24]	@ (8003b10 <vApplicationGetTimerTaskMemory+0x30>)
 8003af6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003afe:	601a      	str	r2, [r3, #0]
}
 8003b00:	bf00      	nop
 8003b02:	3714      	adds	r7, #20
 8003b04:	46bd      	mov	sp, r7
 8003b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0a:	4770      	bx	lr
 8003b0c:	2000041c 	.word	0x2000041c
 8003b10:	200004c4 	.word	0x200004c4

08003b14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f103 0208 	add.w	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f103 0208 	add.w	r2, r3, #8
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f103 0208 	add.w	r2, r3, #8
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bcc:	d103      	bne.n	8003bd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	e00c      	b.n	8003bf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3308      	adds	r3, #8
 8003bda:	60fb      	str	r3, [r7, #12]
 8003bdc:	e002      	b.n	8003be4 <vListInsert+0x2e>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d2f6      	bcs.n	8003bde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	1c5a      	adds	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	601a      	str	r2, [r3, #0]
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6892      	ldr	r2, [r2, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	687a      	ldr	r2, [r7, #4]
 8003c46:	6852      	ldr	r2, [r2, #4]
 8003c48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d103      	bne.n	8003c5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	1e5a      	subs	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3714      	adds	r7, #20
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10b      	bne.n	8003ca8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003ca2:	bf00      	nop
 8003ca4:	bf00      	nop
 8003ca6:	e7fd      	b.n	8003ca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003ca8:	f002 fbe6 	bl	8006478 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cb4:	68f9      	ldr	r1, [r7, #12]
 8003cb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	441a      	add	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	68f9      	ldr	r1, [r7, #12]
 8003cdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	441a      	add	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	22ff      	movs	r2, #255	@ 0xff
 8003cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	22ff      	movs	r2, #255	@ 0xff
 8003cf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d114      	bne.n	8003d28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d01a      	beq.n	8003d3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3310      	adds	r3, #16
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f001 fb70 	bl	80053f0 <xTaskRemoveFromEventList>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d012      	beq.n	8003d3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d16:	4b0d      	ldr	r3, [pc, #52]	@ (8003d4c <xQueueGenericReset+0xd0>)
 8003d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d1c:	601a      	str	r2, [r3, #0]
 8003d1e:	f3bf 8f4f 	dsb	sy
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	e009      	b.n	8003d3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	3310      	adds	r3, #16
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff fef1 	bl	8003b14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3324      	adds	r3, #36	@ 0x24
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff feec 	bl	8003b14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d3c:	f002 fbce 	bl	80064dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d40:	2301      	movs	r3, #1
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	e000ed04 	.word	0xe000ed04

08003d50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08e      	sub	sp, #56	@ 0x38
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d10b      	bne.n	8003d7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	e7fd      	b.n	8003d78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10b      	bne.n	8003d9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	e7fd      	b.n	8003d96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <xQueueGenericCreateStatic+0x56>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <xQueueGenericCreateStatic+0x5a>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueGenericCreateStatic+0x5c>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	623b      	str	r3, [r7, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d102      	bne.n	8003dd4 <xQueueGenericCreateStatic+0x84>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <xQueueGenericCreateStatic+0x88>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <xQueueGenericCreateStatic+0x8a>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10b      	bne.n	8003df6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de2:	f383 8811 	msr	BASEPRI, r3
 8003de6:	f3bf 8f6f 	isb	sy
 8003dea:	f3bf 8f4f 	dsb	sy
 8003dee:	61fb      	str	r3, [r7, #28]
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop
 8003df4:	e7fd      	b.n	8003df2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003df6:	2350      	movs	r3, #80	@ 0x50
 8003df8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b50      	cmp	r3, #80	@ 0x50
 8003dfe:	d00b      	beq.n	8003e18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	61bb      	str	r3, [r7, #24]
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003e1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d00d      	beq.n	8003e40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	4613      	mov	r3, r2
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68b9      	ldr	r1, [r7, #8]
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f840 	bl	8003ec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3730      	adds	r7, #48	@ 0x30
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b08a      	sub	sp, #40	@ 0x28
 8003e4e:	af02      	add	r7, sp, #8
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	4613      	mov	r3, r2
 8003e56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <xQueueGenericCreate+0x2c>
	__asm volatile
 8003e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e62:	f383 8811 	msr	BASEPRI, r3
 8003e66:	f3bf 8f6f 	isb	sy
 8003e6a:	f3bf 8f4f 	dsb	sy
 8003e6e:	613b      	str	r3, [r7, #16]
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	e7fd      	b.n	8003e72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	fb02 f303 	mul.w	r3, r2, r3
 8003e7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	3350      	adds	r3, #80	@ 0x50
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 fc19 	bl	80066bc <pvPortMalloc>
 8003e8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d011      	beq.n	8003eb6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	3350      	adds	r3, #80	@ 0x50
 8003e9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ea4:	79fa      	ldrb	r2, [r7, #7]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	68b9      	ldr	r1, [r7, #8]
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f000 f805 	bl	8003ec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003eb6:	69bb      	ldr	r3, [r7, #24]
	}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3720      	adds	r7, #32
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d103      	bne.n	8003edc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	e002      	b.n	8003ee2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003eee:	2101      	movs	r1, #1
 8003ef0:	69b8      	ldr	r0, [r7, #24]
 8003ef2:	f7ff fec3 	bl	8003c7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003efe:	bf00      	nop
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003f26:	2300      	movs	r3, #0
 8003f28:	2200      	movs	r2, #0
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	6878      	ldr	r0, [r7, #4]
 8003f2e:	f000 f835 	bl	8003f9c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b086      	sub	sp, #24
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	4603      	mov	r3, r0
 8003f42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003f44:	2301      	movs	r3, #1
 8003f46:	617b      	str	r3, [r7, #20]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	461a      	mov	r2, r3
 8003f50:	6939      	ldr	r1, [r7, #16]
 8003f52:	6978      	ldr	r0, [r7, #20]
 8003f54:	f7ff ff79 	bl	8003e4a <xQueueGenericCreate>
 8003f58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f7ff ffd3 	bl	8003f06 <prvInitialiseMutex>

		return xNewQueue;
 8003f60:	68fb      	ldr	r3, [r7, #12]
	}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <xQueueGetMutexHolder>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( INCLUDE_xSemaphoreGetMutexHolder == 1 ) )

	TaskHandle_t xQueueGetMutexHolder( QueueHandle_t xSemaphore )
	{
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
	TaskHandle_t pxReturn;
	Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60bb      	str	r3, [r7, #8]
		/* This function is called by xSemaphoreGetMutexHolder(), and should not
		be called directly.  Note:  This is a good way of determining if the
		calling task is the mutex holder, but not a good way of determining the
		identity of the mutex holder, as the holder may change between the
		following critical section exiting and the function returning. */
		taskENTER_CRITICAL();
 8003f76:	f002 fa7f 	bl	8006478 <vPortEnterCritical>
		{
			if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d103      	bne.n	8003f8a <xQueueGetMutexHolder+0x20>
			{
				pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e001      	b.n	8003f8e <xQueueGetMutexHolder+0x24>
			}
			else
			{
				pxReturn = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8003f8e:	f002 faa5 	bl	80064dc <vPortExitCritical>

		return pxReturn;
 8003f92:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08e      	sub	sp, #56	@ 0x38
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003faa:	2300      	movs	r3, #0
 8003fac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <xQueueGenericSend+0x34>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
 8003fce:	e7fd      	b.n	8003fcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d103      	bne.n	8003fde <xQueueGenericSend+0x42>
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <xQueueGenericSend+0x46>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e000      	b.n	8003fe4 <xQueueGenericSend+0x48>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <xQueueGenericSend+0x64>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ffa:	bf00      	nop
 8003ffc:	bf00      	nop
 8003ffe:	e7fd      	b.n	8003ffc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	2b02      	cmp	r3, #2
 8004004:	d103      	bne.n	800400e <xQueueGenericSend+0x72>
 8004006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <xQueueGenericSend+0x76>
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <xQueueGenericSend+0x78>
 8004012:	2300      	movs	r3, #0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10b      	bne.n	8004030 <xQueueGenericSend+0x94>
	__asm volatile
 8004018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401c:	f383 8811 	msr	BASEPRI, r3
 8004020:	f3bf 8f6f 	isb	sy
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	623b      	str	r3, [r7, #32]
}
 800402a:	bf00      	nop
 800402c:	bf00      	nop
 800402e:	e7fd      	b.n	800402c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004030:	f001 fbb4 	bl	800579c <xTaskGetSchedulerState>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d102      	bne.n	8004040 <xQueueGenericSend+0xa4>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <xQueueGenericSend+0xa8>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <xQueueGenericSend+0xaa>
 8004044:	2300      	movs	r3, #0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10b      	bne.n	8004062 <xQueueGenericSend+0xc6>
	__asm volatile
 800404a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404e:	f383 8811 	msr	BASEPRI, r3
 8004052:	f3bf 8f6f 	isb	sy
 8004056:	f3bf 8f4f 	dsb	sy
 800405a:	61fb      	str	r3, [r7, #28]
}
 800405c:	bf00      	nop
 800405e:	bf00      	nop
 8004060:	e7fd      	b.n	800405e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004062:	f002 fa09 	bl	8006478 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800406a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800406c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406e:	429a      	cmp	r2, r3
 8004070:	d302      	bcc.n	8004078 <xQueueGenericSend+0xdc>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d129      	bne.n	80040cc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800407e:	f000 fb37 	bl	80046f0 <prvCopyDataToQueue>
 8004082:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004088:	2b00      	cmp	r3, #0
 800408a:	d010      	beq.n	80040ae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800408c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800408e:	3324      	adds	r3, #36	@ 0x24
 8004090:	4618      	mov	r0, r3
 8004092:	f001 f9ad 	bl	80053f0 <xTaskRemoveFromEventList>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d013      	beq.n	80040c4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800409c:	4b3f      	ldr	r3, [pc, #252]	@ (800419c <xQueueGenericSend+0x200>)
 800409e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f3bf 8f4f 	dsb	sy
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	e00a      	b.n	80040c4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80040ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80040b4:	4b39      	ldr	r3, [pc, #228]	@ (800419c <xQueueGenericSend+0x200>)
 80040b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80040c4:	f002 fa0a 	bl	80064dc <vPortExitCritical>
				return pdPASS;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e063      	b.n	8004194 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d103      	bne.n	80040da <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80040d2:	f002 fa03 	bl	80064dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	e05c      	b.n	8004194 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80040da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d106      	bne.n	80040ee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80040e0:	f107 0314 	add.w	r3, r7, #20
 80040e4:	4618      	mov	r0, r3
 80040e6:	f001 f9e7 	bl	80054b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80040ea:	2301      	movs	r3, #1
 80040ec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80040ee:	f002 f9f5 	bl	80064dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80040f2:	f000 ff4f 	bl	8004f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80040f6:	f002 f9bf 	bl	8006478 <vPortEnterCritical>
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004100:	b25b      	sxtb	r3, r3
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004106:	d103      	bne.n	8004110 <xQueueGenericSend+0x174>
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004112:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004116:	b25b      	sxtb	r3, r3
 8004118:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800411c:	d103      	bne.n	8004126 <xQueueGenericSend+0x18a>
 800411e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004120:	2200      	movs	r2, #0
 8004122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004126:	f002 f9d9 	bl	80064dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800412a:	1d3a      	adds	r2, r7, #4
 800412c:	f107 0314 	add.w	r3, r7, #20
 8004130:	4611      	mov	r1, r2
 8004132:	4618      	mov	r0, r3
 8004134:	f001 f9d6 	bl	80054e4 <xTaskCheckForTimeOut>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d124      	bne.n	8004188 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800413e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004140:	f000 fbce 	bl	80048e0 <prvIsQueueFull>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d018      	beq.n	800417c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800414a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414c:	3310      	adds	r3, #16
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 f8fa 	bl	800534c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004158:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800415a:	f000 fb59 	bl	8004810 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800415e:	f000 ff27 	bl	8004fb0 <xTaskResumeAll>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	f47f af7c 	bne.w	8004062 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800416a:	4b0c      	ldr	r3, [pc, #48]	@ (800419c <xQueueGenericSend+0x200>)
 800416c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	e772      	b.n	8004062 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800417c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800417e:	f000 fb47 	bl	8004810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004182:	f000 ff15 	bl	8004fb0 <xTaskResumeAll>
 8004186:	e76c      	b.n	8004062 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004188:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800418a:	f000 fb41 	bl	8004810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800418e:	f000 ff0f 	bl	8004fb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004192:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004194:	4618      	mov	r0, r3
 8004196:	3738      	adds	r7, #56	@ 0x38
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b090      	sub	sp, #64	@ 0x40
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
 80041ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80041b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10b      	bne.n	80041d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80041b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041bc:	f383 8811 	msr	BASEPRI, r3
 80041c0:	f3bf 8f6f 	isb	sy
 80041c4:	f3bf 8f4f 	dsb	sy
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80041ca:	bf00      	nop
 80041cc:	bf00      	nop
 80041ce:	e7fd      	b.n	80041cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d103      	bne.n	80041de <xQueueGenericSendFromISR+0x3e>
 80041d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <xQueueGenericSendFromISR+0x42>
 80041de:	2301      	movs	r3, #1
 80041e0:	e000      	b.n	80041e4 <xQueueGenericSendFromISR+0x44>
 80041e2:	2300      	movs	r3, #0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80041e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80041fa:	bf00      	nop
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d103      	bne.n	800420e <xQueueGenericSendFromISR+0x6e>
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800420a:	2b01      	cmp	r3, #1
 800420c:	d101      	bne.n	8004212 <xQueueGenericSendFromISR+0x72>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <xQueueGenericSendFromISR+0x74>
 8004212:	2300      	movs	r3, #0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800421c:	f383 8811 	msr	BASEPRI, r3
 8004220:	f3bf 8f6f 	isb	sy
 8004224:	f3bf 8f4f 	dsb	sy
 8004228:	623b      	str	r3, [r7, #32]
}
 800422a:	bf00      	nop
 800422c:	bf00      	nop
 800422e:	e7fd      	b.n	800422c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004230:	f002 fa02 	bl	8006638 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004234:	f3ef 8211 	mrs	r2, BASEPRI
 8004238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800423c:	f383 8811 	msr	BASEPRI, r3
 8004240:	f3bf 8f6f 	isb	sy
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	61fa      	str	r2, [r7, #28]
 800424a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800424c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800424e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004252:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004258:	429a      	cmp	r2, r3
 800425a:	d302      	bcc.n	8004262 <xQueueGenericSendFromISR+0xc2>
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b02      	cmp	r3, #2
 8004260:	d12f      	bne.n	80042c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004264:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004268:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004270:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004278:	f000 fa3a 	bl	80046f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800427c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004284:	d112      	bne.n	80042ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d016      	beq.n	80042bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800428e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004290:	3324      	adds	r3, #36	@ 0x24
 8004292:	4618      	mov	r0, r3
 8004294:	f001 f8ac 	bl	80053f0 <xTaskRemoveFromEventList>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00e      	beq.n	80042bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00b      	beq.n	80042bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	e007      	b.n	80042bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80042ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80042b0:	3301      	adds	r3, #1
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	b25a      	sxtb	r2, r3
 80042b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80042bc:	2301      	movs	r3, #1
 80042be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80042c0:	e001      	b.n	80042c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80042c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80042d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3740      	adds	r7, #64	@ 0x40
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08c      	sub	sp, #48	@ 0x30
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10b      	bne.n	800430e <xQueueReceive+0x32>
	__asm volatile
 80042f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	623b      	str	r3, [r7, #32]
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	e7fd      	b.n	800430a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d103      	bne.n	800431c <xQueueReceive+0x40>
 8004314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <xQueueReceive+0x44>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <xQueueReceive+0x46>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d10b      	bne.n	800433e <xQueueReceive+0x62>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	61fb      	str	r3, [r7, #28]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800433e:	f001 fa2d 	bl	800579c <xTaskGetSchedulerState>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d102      	bne.n	800434e <xQueueReceive+0x72>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <xQueueReceive+0x76>
 800434e:	2301      	movs	r3, #1
 8004350:	e000      	b.n	8004354 <xQueueReceive+0x78>
 8004352:	2300      	movs	r3, #0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10b      	bne.n	8004370 <xQueueReceive+0x94>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	61bb      	str	r3, [r7, #24]
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	e7fd      	b.n	800436c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004370:	f002 f882 	bl	8006478 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004378:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800437a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437c:	2b00      	cmp	r3, #0
 800437e:	d01f      	beq.n	80043c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004380:	68b9      	ldr	r1, [r7, #8]
 8004382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004384:	f000 fa1e 	bl	80047c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	1e5a      	subs	r2, r3, #1
 800438c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800438e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00f      	beq.n	80043b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800439a:	3310      	adds	r3, #16
 800439c:	4618      	mov	r0, r3
 800439e:	f001 f827 	bl	80053f0 <xTaskRemoveFromEventList>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d007      	beq.n	80043b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80043a8:	4b3c      	ldr	r3, [pc, #240]	@ (800449c <xQueueReceive+0x1c0>)
 80043aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	f3bf 8f4f 	dsb	sy
 80043b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80043b8:	f002 f890 	bl	80064dc <vPortExitCritical>
				return pdPASS;
 80043bc:	2301      	movs	r3, #1
 80043be:	e069      	b.n	8004494 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80043c6:	f002 f889 	bl	80064dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80043ca:	2300      	movs	r3, #0
 80043cc:	e062      	b.n	8004494 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80043ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d106      	bne.n	80043e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80043d4:	f107 0310 	add.w	r3, r7, #16
 80043d8:	4618      	mov	r0, r3
 80043da:	f001 f86d 	bl	80054b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80043e2:	f002 f87b 	bl	80064dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80043e6:	f000 fdd5 	bl	8004f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80043ea:	f002 f845 	bl	8006478 <vPortEnterCritical>
 80043ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043f4:	b25b      	sxtb	r3, r3
 80043f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043fa:	d103      	bne.n	8004404 <xQueueReceive+0x128>
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800440a:	b25b      	sxtb	r3, r3
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004410:	d103      	bne.n	800441a <xQueueReceive+0x13e>
 8004412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800441a:	f002 f85f 	bl	80064dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800441e:	1d3a      	adds	r2, r7, #4
 8004420:	f107 0310 	add.w	r3, r7, #16
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f001 f85c 	bl	80054e4 <xTaskCheckForTimeOut>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d123      	bne.n	800447a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004434:	f000 fa3e 	bl	80048b4 <prvIsQueueEmpty>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800443e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004440:	3324      	adds	r3, #36	@ 0x24
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f000 ff80 	bl	800534c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800444c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800444e:	f000 f9df 	bl	8004810 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004452:	f000 fdad 	bl	8004fb0 <xTaskResumeAll>
 8004456:	4603      	mov	r3, r0
 8004458:	2b00      	cmp	r3, #0
 800445a:	d189      	bne.n	8004370 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800445c:	4b0f      	ldr	r3, [pc, #60]	@ (800449c <xQueueReceive+0x1c0>)
 800445e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	f3bf 8f4f 	dsb	sy
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	e780      	b.n	8004370 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800446e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004470:	f000 f9ce 	bl	8004810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004474:	f000 fd9c 	bl	8004fb0 <xTaskResumeAll>
 8004478:	e77a      	b.n	8004370 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800447a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800447c:	f000 f9c8 	bl	8004810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004480:	f000 fd96 	bl	8004fb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004484:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004486:	f000 fa15 	bl	80048b4 <prvIsQueueEmpty>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	f43f af6f 	beq.w	8004370 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004492:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004494:	4618      	mov	r0, r3
 8004496:	3730      	adds	r7, #48	@ 0x30
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	e000ed04 	.word	0xe000ed04

080044a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08e      	sub	sp, #56	@ 0x38
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80044aa:	2300      	movs	r3, #0
 80044ac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80044b2:	2300      	movs	r3, #0
 80044b4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	623b      	str	r3, [r7, #32]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80044d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	61fb      	str	r3, [r7, #28]
}
 80044ee:	bf00      	nop
 80044f0:	bf00      	nop
 80044f2:	e7fd      	b.n	80044f0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044f4:	f001 f952 	bl	800579c <xTaskGetSchedulerState>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d102      	bne.n	8004504 <xQueueSemaphoreTake+0x64>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <xQueueSemaphoreTake+0x68>
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <xQueueSemaphoreTake+0x6a>
 8004508:	2300      	movs	r3, #0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	61bb      	str	r3, [r7, #24]
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004526:	f001 ffa7 	bl	8006478 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800452a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800452c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800452e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004532:	2b00      	cmp	r3, #0
 8004534:	d024      	beq.n	8004580 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004538:	1e5a      	subs	r2, r3, #1
 800453a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d104      	bne.n	8004550 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004546:	f001 faa3 	bl	8005a90 <pvTaskIncrementMutexHeldCount>
 800454a:	4602      	mov	r2, r0
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00f      	beq.n	8004578 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800455a:	3310      	adds	r3, #16
 800455c:	4618      	mov	r0, r3
 800455e:	f000 ff47 	bl	80053f0 <xTaskRemoveFromEventList>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d007      	beq.n	8004578 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004568:	4b54      	ldr	r3, [pc, #336]	@ (80046bc <xQueueSemaphoreTake+0x21c>)
 800456a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456e:	601a      	str	r2, [r3, #0]
 8004570:	f3bf 8f4f 	dsb	sy
 8004574:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004578:	f001 ffb0 	bl	80064dc <vPortExitCritical>
				return pdPASS;
 800457c:	2301      	movs	r3, #1
 800457e:	e098      	b.n	80046b2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d112      	bne.n	80045ac <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00b      	beq.n	80045a4 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	617b      	str	r3, [r7, #20]
}
 800459e:	bf00      	nop
 80045a0:	bf00      	nop
 80045a2:	e7fd      	b.n	80045a0 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80045a4:	f001 ff9a 	bl	80064dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e082      	b.n	80046b2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045b2:	f107 030c 	add.w	r3, r7, #12
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 ff7e 	bl	80054b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045bc:	2301      	movs	r3, #1
 80045be:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045c0:	f001 ff8c 	bl	80064dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045c4:	f000 fce6 	bl	8004f94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045c8:	f001 ff56 	bl	8006478 <vPortEnterCritical>
 80045cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045d2:	b25b      	sxtb	r3, r3
 80045d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045d8:	d103      	bne.n	80045e2 <xQueueSemaphoreTake+0x142>
 80045da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045e8:	b25b      	sxtb	r3, r3
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045ee:	d103      	bne.n	80045f8 <xQueueSemaphoreTake+0x158>
 80045f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045f8:	f001 ff70 	bl	80064dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045fc:	463a      	mov	r2, r7
 80045fe:	f107 030c 	add.w	r3, r7, #12
 8004602:	4611      	mov	r1, r2
 8004604:	4618      	mov	r0, r3
 8004606:	f000 ff6d 	bl	80054e4 <xTaskCheckForTimeOut>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d132      	bne.n	8004676 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004610:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004612:	f000 f94f 	bl	80048b4 <prvIsQueueEmpty>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d026      	beq.n	800466a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800461c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d109      	bne.n	8004638 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004624:	f001 ff28 	bl	8006478 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4618      	mov	r0, r3
 800462e:	f001 f8d3 	bl	80057d8 <xTaskPriorityInherit>
 8004632:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004634:	f001 ff52 	bl	80064dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463a:	3324      	adds	r3, #36	@ 0x24
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	4611      	mov	r1, r2
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fe83 	bl	800534c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004646:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004648:	f000 f8e2 	bl	8004810 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800464c:	f000 fcb0 	bl	8004fb0 <xTaskResumeAll>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	f47f af67 	bne.w	8004526 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004658:	4b18      	ldr	r3, [pc, #96]	@ (80046bc <xQueueSemaphoreTake+0x21c>)
 800465a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465e:	601a      	str	r2, [r3, #0]
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	f3bf 8f6f 	isb	sy
 8004668:	e75d      	b.n	8004526 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800466a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800466c:	f000 f8d0 	bl	8004810 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004670:	f000 fc9e 	bl	8004fb0 <xTaskResumeAll>
 8004674:	e757      	b.n	8004526 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004676:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004678:	f000 f8ca 	bl	8004810 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800467c:	f000 fc98 	bl	8004fb0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004680:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004682:	f000 f917 	bl	80048b4 <prvIsQueueEmpty>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	f43f af4c 	beq.w	8004526 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800468e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004690:	2b00      	cmp	r3, #0
 8004692:	d00d      	beq.n	80046b0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004694:	f001 fef0 	bl	8006478 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004698:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800469a:	f000 f811 	bl	80046c0 <prvGetDisinheritPriorityAfterTimeout>
 800469e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80046a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046a6:	4618      	mov	r0, r3
 80046a8:	f001 f96e 	bl	8005988 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80046ac:	f001 ff16 	bl	80064dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3738      	adds	r7, #56	@ 0x38
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d006      	beq.n	80046de <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	e001      	b.n	80046e2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80046de:	2300      	movs	r3, #0
 80046e0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80046e2:	68fb      	ldr	r3, [r7, #12]
	}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b086      	sub	sp, #24
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004704:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10d      	bne.n	800472a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d14d      	bne.n	80047b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	4618      	mov	r0, r3
 800471c:	f001 f8c4 	bl	80058a8 <xTaskPriorityDisinherit>
 8004720:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
 8004728:	e043      	b.n	80047b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d119      	bne.n	8004764 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6858      	ldr	r0, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004738:	461a      	mov	r2, r3
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	f002 fa30 	bl	8006ba0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004748:	441a      	add	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	429a      	cmp	r2, r3
 8004758:	d32b      	bcc.n	80047b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	605a      	str	r2, [r3, #4]
 8004762:	e026      	b.n	80047b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	68d8      	ldr	r0, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	461a      	mov	r2, r3
 800476e:	68b9      	ldr	r1, [r7, #8]
 8004770:	f002 fa16 	bl	8006ba0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68da      	ldr	r2, [r3, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	425b      	negs	r3, r3
 800477e:	441a      	add	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68da      	ldr	r2, [r3, #12]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d207      	bcs.n	80047a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004798:	425b      	negs	r3, r3
 800479a:	441a      	add	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d105      	bne.n	80047b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1c5a      	adds	r2, r3, #1
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80047ba:	697b      	ldr	r3, [r7, #20]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d018      	beq.n	8004808 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	441a      	add	r2, r3
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d303      	bcc.n	80047f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	68d9      	ldr	r1, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004800:	461a      	mov	r2, r3
 8004802:	6838      	ldr	r0, [r7, #0]
 8004804:	f002 f9cc 	bl	8006ba0 <memcpy>
	}
}
 8004808:	bf00      	nop
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004818:	f001 fe2e 	bl	8006478 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004822:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004824:	e011      	b.n	800484a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800482a:	2b00      	cmp	r3, #0
 800482c:	d012      	beq.n	8004854 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3324      	adds	r3, #36	@ 0x24
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fddc 	bl	80053f0 <xTaskRemoveFromEventList>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800483e:	f000 feb5 	bl	80055ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	3b01      	subs	r3, #1
 8004846:	b2db      	uxtb	r3, r3
 8004848:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800484a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800484e:	2b00      	cmp	r3, #0
 8004850:	dce9      	bgt.n	8004826 <prvUnlockQueue+0x16>
 8004852:	e000      	b.n	8004856 <prvUnlockQueue+0x46>
					break;
 8004854:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	22ff      	movs	r2, #255	@ 0xff
 800485a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800485e:	f001 fe3d 	bl	80064dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004862:	f001 fe09 	bl	8006478 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800486c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800486e:	e011      	b.n	8004894 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3310      	adds	r3, #16
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fdb7 	bl	80053f0 <xTaskRemoveFromEventList>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004888:	f000 fe90 	bl	80055ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800488c:	7bbb      	ldrb	r3, [r7, #14]
 800488e:	3b01      	subs	r3, #1
 8004890:	b2db      	uxtb	r3, r3
 8004892:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004894:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004898:	2b00      	cmp	r3, #0
 800489a:	dce9      	bgt.n	8004870 <prvUnlockQueue+0x60>
 800489c:	e000      	b.n	80048a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800489e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	22ff      	movs	r2, #255	@ 0xff
 80048a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80048a8:	f001 fe18 	bl	80064dc <vPortExitCritical>
}
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048bc:	f001 fddc 	bl	8006478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80048c8:	2301      	movs	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e001      	b.n	80048d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80048d2:	f001 fe03 	bl	80064dc <vPortExitCritical>

	return xReturn;
 80048d6:	68fb      	ldr	r3, [r7, #12]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80048e8:	f001 fdc6 	bl	8006478 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d102      	bne.n	80048fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	e001      	b.n	8004902 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004902:	f001 fdeb 	bl	80064dc <vPortExitCritical>

	return xReturn;
 8004906:	68fb      	ldr	r3, [r7, #12]
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800491a:	2300      	movs	r3, #0
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e014      	b.n	800494a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004920:	4a0f      	ldr	r2, [pc, #60]	@ (8004960 <vQueueAddToRegistry+0x50>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d10b      	bne.n	8004944 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800492c:	490c      	ldr	r1, [pc, #48]	@ (8004960 <vQueueAddToRegistry+0x50>)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004936:	4a0a      	ldr	r2, [pc, #40]	@ (8004960 <vQueueAddToRegistry+0x50>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	4413      	add	r3, r2
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004942:	e006      	b.n	8004952 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b07      	cmp	r3, #7
 800494e:	d9e7      	bls.n	8004920 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004950:	bf00      	nop
 8004952:	bf00      	nop
 8004954:	3714      	adds	r7, #20
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	200008c4 	.word	0x200008c4

08004964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004974:	f001 fd80 	bl	8006478 <vPortEnterCritical>
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800497e:	b25b      	sxtb	r3, r3
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004984:	d103      	bne.n	800498e <vQueueWaitForMessageRestricted+0x2a>
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004994:	b25b      	sxtb	r3, r3
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800499a:	d103      	bne.n	80049a4 <vQueueWaitForMessageRestricted+0x40>
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80049a4:	f001 fd9a 	bl	80064dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d106      	bne.n	80049be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	3324      	adds	r3, #36	@ 0x24
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	68b9      	ldr	r1, [r7, #8]
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fced 	bl	8005398 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80049be:	6978      	ldr	r0, [r7, #20]
 80049c0:	f7ff ff26 	bl	8004810 <prvUnlockQueue>
	}
 80049c4:	bf00      	nop
 80049c6:	3718      	adds	r7, #24
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	@ 0x38
 80049d0:	af04      	add	r7, sp, #16
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80049da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d10b      	bne.n	80049f8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80049e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e4:	f383 8811 	msr	BASEPRI, r3
 80049e8:	f3bf 8f6f 	isb	sy
 80049ec:	f3bf 8f4f 	dsb	sy
 80049f0:	623b      	str	r3, [r7, #32]
}
 80049f2:	bf00      	nop
 80049f4:	bf00      	nop
 80049f6:	e7fd      	b.n	80049f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80049f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d10b      	bne.n	8004a16 <xTaskCreateStatic+0x4a>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	61fb      	str	r3, [r7, #28]
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop
 8004a14:	e7fd      	b.n	8004a12 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a16:	23a8      	movs	r3, #168	@ 0xa8
 8004a18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2ba8      	cmp	r3, #168	@ 0xa8
 8004a1e:	d00b      	beq.n	8004a38 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	61bb      	str	r3, [r7, #24]
}
 8004a32:	bf00      	nop
 8004a34:	bf00      	nop
 8004a36:	e7fd      	b.n	8004a34 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a38:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01e      	beq.n	8004a7e <xTaskCreateStatic+0xb2>
 8004a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01b      	beq.n	8004a7e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9303      	str	r3, [sp, #12]
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	9302      	str	r3, [sp, #8]
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f000 f851 	bl	8004b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004a76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a78:	f000 f8f6 	bl	8004c68 <prvAddNewTaskToReadyList>
 8004a7c:	e001      	b.n	8004a82 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004a82:	697b      	ldr	r3, [r7, #20]
	}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3728      	adds	r7, #40	@ 0x28
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08c      	sub	sp, #48	@ 0x30
 8004a90:	af04      	add	r7, sp, #16
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	603b      	str	r3, [r7, #0]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004a9c:	88fb      	ldrh	r3, [r7, #6]
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f001 fe0b 	bl	80066bc <pvPortMalloc>
 8004aa6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00e      	beq.n	8004acc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004aae:	20a8      	movs	r0, #168	@ 0xa8
 8004ab0:	f001 fe04 	bl	80066bc <pvPortMalloc>
 8004ab4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d003      	beq.n	8004ac4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	631a      	str	r2, [r3, #48]	@ 0x30
 8004ac2:	e005      	b.n	8004ad0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ac4:	6978      	ldr	r0, [r7, #20]
 8004ac6:	f001 fec7 	bl	8006858 <vPortFree>
 8004aca:	e001      	b.n	8004ad0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004acc:	2300      	movs	r3, #0
 8004ace:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d017      	beq.n	8004b06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ade:	88fa      	ldrh	r2, [r7, #6]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	9303      	str	r3, [sp, #12]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	9302      	str	r3, [sp, #8]
 8004ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004aea:	9301      	str	r3, [sp, #4]
 8004aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f000 f80f 	bl	8004b18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004afa:	69f8      	ldr	r0, [r7, #28]
 8004afc:	f000 f8b4 	bl	8004c68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004b00:	2301      	movs	r3, #1
 8004b02:	61bb      	str	r3, [r7, #24]
 8004b04:	e002      	b.n	8004b0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004b0c:	69bb      	ldr	r3, [r7, #24]
	}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3720      	adds	r7, #32
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
	...

08004b18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
 8004b24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b28:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	461a      	mov	r2, r3
 8004b30:	21a5      	movs	r1, #165	@ 0xa5
 8004b32:	f001 ffb1 	bl	8006a98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b40:	3b01      	subs	r3, #1
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	4413      	add	r3, r2
 8004b46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00b      	beq.n	8004b72 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	617b      	str	r3, [r7, #20]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01f      	beq.n	8004bb8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61fb      	str	r3, [r7, #28]
 8004b7c:	e012      	b.n	8004ba4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	4413      	add	r3, r2
 8004b84:	7819      	ldrb	r1, [r3, #0]
 8004b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	3334      	adds	r3, #52	@ 0x34
 8004b8e:	460a      	mov	r2, r1
 8004b90:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b92:	68ba      	ldr	r2, [r7, #8]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	4413      	add	r3, r2
 8004b98:	781b      	ldrb	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d006      	beq.n	8004bac <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	61fb      	str	r3, [r7, #28]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b0f      	cmp	r3, #15
 8004ba8:	d9e9      	bls.n	8004b7e <prvInitialiseNewTask+0x66>
 8004baa:	e000      	b.n	8004bae <prvInitialiseNewTask+0x96>
			{
				break;
 8004bac:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bb6:	e003      	b.n	8004bc0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	2b37      	cmp	r3, #55	@ 0x37
 8004bc4:	d901      	bls.n	8004bca <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004bc6:	2337      	movs	r3, #55	@ 0x37
 8004bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bce:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bd8:	2200      	movs	r2, #0
 8004bda:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bde:	3304      	adds	r3, #4
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fe ffb7 	bl	8003b54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004be6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004be8:	3318      	adds	r3, #24
 8004bea:	4618      	mov	r0, r3
 8004bec:	f7fe ffb2 	bl	8003b54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bfe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c04:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	2200      	movs	r2, #0
 8004c12:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c18:	3354      	adds	r3, #84	@ 0x54
 8004c1a:	224c      	movs	r2, #76	@ 0x4c
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f001 ff3a 	bl	8006a98 <memset>
 8004c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c26:	4a0d      	ldr	r2, [pc, #52]	@ (8004c5c <prvInitialiseNewTask+0x144>)
 8004c28:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2c:	4a0c      	ldr	r2, [pc, #48]	@ (8004c60 <prvInitialiseNewTask+0x148>)
 8004c2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c32:	4a0c      	ldr	r2, [pc, #48]	@ (8004c64 <prvInitialiseNewTask+0x14c>)
 8004c34:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004c36:	683a      	ldr	r2, [r7, #0]
 8004c38:	68f9      	ldr	r1, [r7, #12]
 8004c3a:	69b8      	ldr	r0, [r7, #24]
 8004c3c:	f001 faea 	bl	8006214 <pxPortInitialiseStack>
 8004c40:	4602      	mov	r2, r0
 8004c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c44:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004c4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004c52:	bf00      	nop
 8004c54:	3720      	adds	r7, #32
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20001ef8 	.word	0x20001ef8
 8004c60:	20001f60 	.word	0x20001f60
 8004c64:	20001fc8 	.word	0x20001fc8

08004c68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c70:	f001 fc02 	bl	8006478 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c74:	4b2d      	ldr	r3, [pc, #180]	@ (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004c7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c7e:	4b2c      	ldr	r3, [pc, #176]	@ (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c86:	4a2a      	ldr	r2, [pc, #168]	@ (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c8c:	4b27      	ldr	r3, [pc, #156]	@ (8004d2c <prvAddNewTaskToReadyList+0xc4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d110      	bne.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c94:	f000 fcae 	bl	80055f4 <prvInitialiseTaskLists>
 8004c98:	e00d      	b.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c9a:	4b26      	ldr	r3, [pc, #152]	@ (8004d34 <prvAddNewTaskToReadyList+0xcc>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d109      	bne.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ca2:	4b23      	ldr	r3, [pc, #140]	@ (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d802      	bhi.n	8004cb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004cb6:	4b20      	ldr	r3, [pc, #128]	@ (8004d38 <prvAddNewTaskToReadyList+0xd0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <prvAddNewTaskToReadyList+0xd0>)
 8004cbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004d38 <prvAddNewTaskToReadyList+0xd0>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8004d3c <prvAddNewTaskToReadyList+0xd4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d903      	bls.n	8004cdc <prvAddNewTaskToReadyList+0x74>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd8:	4a18      	ldr	r2, [pc, #96]	@ (8004d3c <prvAddNewTaskToReadyList+0xd4>)
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4a15      	ldr	r2, [pc, #84]	@ (8004d40 <prvAddNewTaskToReadyList+0xd8>)
 8004cea:	441a      	add	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3304      	adds	r3, #4
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4610      	mov	r0, r2
 8004cf4:	f7fe ff3b 	bl	8003b6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004cf8:	f001 fbf0 	bl	80064dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004cfc:	4b0d      	ldr	r3, [pc, #52]	@ (8004d34 <prvAddNewTaskToReadyList+0xcc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00e      	beq.n	8004d22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004d04:	4b0a      	ldr	r3, [pc, #40]	@ (8004d30 <prvAddNewTaskToReadyList+0xc8>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d207      	bcs.n	8004d22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004d12:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <prvAddNewTaskToReadyList+0xdc>)
 8004d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000dd8 	.word	0x20000dd8
 8004d30:	20000904 	.word	0x20000904
 8004d34:	20000de4 	.word	0x20000de4
 8004d38:	20000df4 	.word	0x20000df4
 8004d3c:	20000de0 	.word	0x20000de0
 8004d40:	20000908 	.word	0x20000908
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	@ 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004d52:	2300      	movs	r3, #0
 8004d54:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10b      	bne.n	8004d74 <vTaskDelayUntil+0x2c>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	617b      	str	r3, [r7, #20]
}
 8004d6e:	bf00      	nop
 8004d70:	bf00      	nop
 8004d72:	e7fd      	b.n	8004d70 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10b      	bne.n	8004d92 <vTaskDelayUntil+0x4a>
	__asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	613b      	str	r3, [r7, #16]
}
 8004d8c:	bf00      	nop
 8004d8e:	bf00      	nop
 8004d90:	e7fd      	b.n	8004d8e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004d92:	4b2a      	ldr	r3, [pc, #168]	@ (8004e3c <vTaskDelayUntil+0xf4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00b      	beq.n	8004db2 <vTaskDelayUntil+0x6a>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	60fb      	str	r3, [r7, #12]
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	e7fd      	b.n	8004dae <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8004db2:	f000 f8ef 	bl	8004f94 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004db6:	4b22      	ldr	r3, [pc, #136]	@ (8004e40 <vTaskDelayUntil+0xf8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d20b      	bcs.n	8004de8 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d211      	bcs.n	8004dfe <vTaskDelayUntil+0xb6>
 8004dda:	69fa      	ldr	r2, [r7, #28]
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d90d      	bls.n	8004dfe <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004de2:	2301      	movs	r3, #1
 8004de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de6:	e00a      	b.n	8004dfe <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	69fa      	ldr	r2, [r7, #28]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d303      	bcc.n	8004dfa <vTaskDelayUntil+0xb2>
 8004df2:	69fa      	ldr	r2, [r7, #28]
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d901      	bls.n	8004dfe <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d006      	beq.n	8004e18 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	6a3b      	ldr	r3, [r7, #32]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2100      	movs	r1, #0
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 fe50 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004e18:	f000 f8ca 	bl	8004fb0 <xTaskResumeAll>
 8004e1c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d107      	bne.n	8004e34 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004e24:	4b07      	ldr	r3, [pc, #28]	@ (8004e44 <vTaskDelayUntil+0xfc>)
 8004e26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e2a:	601a      	str	r2, [r3, #0]
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e34:	bf00      	nop
 8004e36:	3728      	adds	r7, #40	@ 0x28
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	20000e00 	.word	0x20000e00
 8004e40:	20000ddc 	.word	0x20000ddc
 8004e44:	e000ed04 	.word	0xe000ed04

08004e48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e50:	2300      	movs	r3, #0
 8004e52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d018      	beq.n	8004e8c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e5a:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <vTaskDelay+0x64>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <vTaskDelay+0x32>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60bb      	str	r3, [r7, #8]
}
 8004e74:	bf00      	nop
 8004e76:	bf00      	nop
 8004e78:	e7fd      	b.n	8004e76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004e7a:	f000 f88b 	bl	8004f94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e7e:	2100      	movs	r1, #0
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fe19 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e86:	f000 f893 	bl	8004fb0 <xTaskResumeAll>
 8004e8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d107      	bne.n	8004ea2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004e92:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <vTaskDelay+0x68>)
 8004e94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000e00 	.word	0x20000e00
 8004eb0:	e000ed04 	.word	0xe000ed04

08004eb4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	@ 0x28
 8004eb8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ec2:	463a      	mov	r2, r7
 8004ec4:	1d39      	adds	r1, r7, #4
 8004ec6:	f107 0308 	add.w	r3, r7, #8
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe fdee 	bl	8003aac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ed0:	6839      	ldr	r1, [r7, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68ba      	ldr	r2, [r7, #8]
 8004ed6:	9202      	str	r2, [sp, #8]
 8004ed8:	9301      	str	r3, [sp, #4]
 8004eda:	2300      	movs	r3, #0
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	2300      	movs	r3, #0
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	4924      	ldr	r1, [pc, #144]	@ (8004f74 <vTaskStartScheduler+0xc0>)
 8004ee4:	4824      	ldr	r0, [pc, #144]	@ (8004f78 <vTaskStartScheduler+0xc4>)
 8004ee6:	f7ff fd71 	bl	80049cc <xTaskCreateStatic>
 8004eea:	4603      	mov	r3, r0
 8004eec:	4a23      	ldr	r2, [pc, #140]	@ (8004f7c <vTaskStartScheduler+0xc8>)
 8004eee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ef0:	4b22      	ldr	r3, [pc, #136]	@ (8004f7c <vTaskStartScheduler+0xc8>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d002      	beq.n	8004efe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e001      	b.n	8004f02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d102      	bne.n	8004f0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f08:	f000 fe2a 	bl	8005b60 <xTimerCreateTimerTask>
 8004f0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d11b      	bne.n	8004f4c <vTaskStartScheduler+0x98>
	__asm volatile
 8004f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f18:	f383 8811 	msr	BASEPRI, r3
 8004f1c:	f3bf 8f6f 	isb	sy
 8004f20:	f3bf 8f4f 	dsb	sy
 8004f24:	613b      	str	r3, [r7, #16]
}
 8004f26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f28:	4b15      	ldr	r3, [pc, #84]	@ (8004f80 <vTaskStartScheduler+0xcc>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	3354      	adds	r3, #84	@ 0x54
 8004f2e:	4a15      	ldr	r2, [pc, #84]	@ (8004f84 <vTaskStartScheduler+0xd0>)
 8004f30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004f32:	4b15      	ldr	r3, [pc, #84]	@ (8004f88 <vTaskStartScheduler+0xd4>)
 8004f34:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004f38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004f3a:	4b14      	ldr	r3, [pc, #80]	@ (8004f8c <vTaskStartScheduler+0xd8>)
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004f40:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <vTaskStartScheduler+0xdc>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004f46:	f001 f9f3 	bl	8006330 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004f4a:	e00f      	b.n	8004f6c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f52:	d10b      	bne.n	8004f6c <vTaskStartScheduler+0xb8>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	60fb      	str	r3, [r7, #12]
}
 8004f66:	bf00      	nop
 8004f68:	bf00      	nop
 8004f6a:	e7fd      	b.n	8004f68 <vTaskStartScheduler+0xb4>
}
 8004f6c:	bf00      	nop
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	08006cc0 	.word	0x08006cc0
 8004f78:	080055c5 	.word	0x080055c5
 8004f7c:	20000dfc 	.word	0x20000dfc
 8004f80:	20000904 	.word	0x20000904
 8004f84:	20000010 	.word	0x20000010
 8004f88:	20000df8 	.word	0x20000df8
 8004f8c:	20000de4 	.word	0x20000de4
 8004f90:	20000ddc 	.word	0x20000ddc

08004f94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004f98:	4b04      	ldr	r3, [pc, #16]	@ (8004fac <vTaskSuspendAll+0x18>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	4a03      	ldr	r2, [pc, #12]	@ (8004fac <vTaskSuspendAll+0x18>)
 8004fa0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004fa2:	bf00      	nop
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	20000e00 	.word	0x20000e00

08004fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004fbe:	4b42      	ldr	r3, [pc, #264]	@ (80050c8 <xTaskResumeAll+0x118>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10b      	bne.n	8004fde <xTaskResumeAll+0x2e>
	__asm volatile
 8004fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	603b      	str	r3, [r7, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	bf00      	nop
 8004fdc:	e7fd      	b.n	8004fda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004fde:	f001 fa4b 	bl	8006478 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004fe2:	4b39      	ldr	r3, [pc, #228]	@ (80050c8 <xTaskResumeAll+0x118>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	4a37      	ldr	r2, [pc, #220]	@ (80050c8 <xTaskResumeAll+0x118>)
 8004fea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fec:	4b36      	ldr	r3, [pc, #216]	@ (80050c8 <xTaskResumeAll+0x118>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d162      	bne.n	80050ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ff4:	4b35      	ldr	r3, [pc, #212]	@ (80050cc <xTaskResumeAll+0x11c>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05e      	beq.n	80050ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ffc:	e02f      	b.n	800505e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ffe:	4b34      	ldr	r3, [pc, #208]	@ (80050d0 <xTaskResumeAll+0x120>)
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	3318      	adds	r3, #24
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fe0c 	bl	8003c28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	3304      	adds	r3, #4
 8005014:	4618      	mov	r0, r3
 8005016:	f7fe fe07 	bl	8003c28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800501e:	4b2d      	ldr	r3, [pc, #180]	@ (80050d4 <xTaskResumeAll+0x124>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	429a      	cmp	r2, r3
 8005024:	d903      	bls.n	800502e <xTaskResumeAll+0x7e>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502a:	4a2a      	ldr	r2, [pc, #168]	@ (80050d4 <xTaskResumeAll+0x124>)
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4a27      	ldr	r2, [pc, #156]	@ (80050d8 <xTaskResumeAll+0x128>)
 800503c:	441a      	add	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	3304      	adds	r3, #4
 8005042:	4619      	mov	r1, r3
 8005044:	4610      	mov	r0, r2
 8005046:	f7fe fd92 	bl	8003b6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504e:	4b23      	ldr	r3, [pc, #140]	@ (80050dc <xTaskResumeAll+0x12c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	429a      	cmp	r2, r3
 8005056:	d302      	bcc.n	800505e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005058:	4b21      	ldr	r3, [pc, #132]	@ (80050e0 <xTaskResumeAll+0x130>)
 800505a:	2201      	movs	r2, #1
 800505c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800505e:	4b1c      	ldr	r3, [pc, #112]	@ (80050d0 <xTaskResumeAll+0x120>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1cb      	bne.n	8004ffe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d001      	beq.n	8005070 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800506c:	f000 fb66 	bl	800573c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005070:	4b1c      	ldr	r3, [pc, #112]	@ (80050e4 <xTaskResumeAll+0x134>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d010      	beq.n	800509e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800507c:	f000 f846 	bl	800510c <xTaskIncrementTick>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005086:	4b16      	ldr	r3, [pc, #88]	@ (80050e0 <xTaskResumeAll+0x130>)
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3b01      	subs	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1f1      	bne.n	800507c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005098:	4b12      	ldr	r3, [pc, #72]	@ (80050e4 <xTaskResumeAll+0x134>)
 800509a:	2200      	movs	r2, #0
 800509c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800509e:	4b10      	ldr	r3, [pc, #64]	@ (80050e0 <xTaskResumeAll+0x130>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d009      	beq.n	80050ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80050a6:	2301      	movs	r3, #1
 80050a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80050aa:	4b0f      	ldr	r3, [pc, #60]	@ (80050e8 <xTaskResumeAll+0x138>)
 80050ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	f3bf 8f4f 	dsb	sy
 80050b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80050ba:	f001 fa0f 	bl	80064dc <vPortExitCritical>

	return xAlreadyYielded;
 80050be:	68bb      	ldr	r3, [r7, #8]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3710      	adds	r7, #16
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000e00 	.word	0x20000e00
 80050cc:	20000dd8 	.word	0x20000dd8
 80050d0:	20000d98 	.word	0x20000d98
 80050d4:	20000de0 	.word	0x20000de0
 80050d8:	20000908 	.word	0x20000908
 80050dc:	20000904 	.word	0x20000904
 80050e0:	20000dec 	.word	0x20000dec
 80050e4:	20000de8 	.word	0x20000de8
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80050f2:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <xTaskGetTickCount+0x1c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80050f8:	687b      	ldr	r3, [r7, #4]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	20000ddc 	.word	0x20000ddc

0800510c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005116:	4b4f      	ldr	r3, [pc, #316]	@ (8005254 <xTaskIncrementTick+0x148>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f040 8090 	bne.w	8005240 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005120:	4b4d      	ldr	r3, [pc, #308]	@ (8005258 <xTaskIncrementTick+0x14c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005128:	4a4b      	ldr	r2, [pc, #300]	@ (8005258 <xTaskIncrementTick+0x14c>)
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d121      	bne.n	8005178 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005134:	4b49      	ldr	r3, [pc, #292]	@ (800525c <xTaskIncrementTick+0x150>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <xTaskIncrementTick+0x4a>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	603b      	str	r3, [r7, #0]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <xTaskIncrementTick+0x46>
 8005156:	4b41      	ldr	r3, [pc, #260]	@ (800525c <xTaskIncrementTick+0x150>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	4b40      	ldr	r3, [pc, #256]	@ (8005260 <xTaskIncrementTick+0x154>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a3e      	ldr	r2, [pc, #248]	@ (800525c <xTaskIncrementTick+0x150>)
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4a3e      	ldr	r2, [pc, #248]	@ (8005260 <xTaskIncrementTick+0x154>)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	4b3e      	ldr	r3, [pc, #248]	@ (8005264 <xTaskIncrementTick+0x158>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3301      	adds	r3, #1
 8005170:	4a3c      	ldr	r2, [pc, #240]	@ (8005264 <xTaskIncrementTick+0x158>)
 8005172:	6013      	str	r3, [r2, #0]
 8005174:	f000 fae2 	bl	800573c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005178:	4b3b      	ldr	r3, [pc, #236]	@ (8005268 <xTaskIncrementTick+0x15c>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	429a      	cmp	r2, r3
 8005180:	d349      	bcc.n	8005216 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005182:	4b36      	ldr	r3, [pc, #216]	@ (800525c <xTaskIncrementTick+0x150>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d104      	bne.n	8005196 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518c:	4b36      	ldr	r3, [pc, #216]	@ (8005268 <xTaskIncrementTick+0x15c>)
 800518e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005192:	601a      	str	r2, [r3, #0]
					break;
 8005194:	e03f      	b.n	8005216 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005196:	4b31      	ldr	r3, [pc, #196]	@ (800525c <xTaskIncrementTick+0x150>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	429a      	cmp	r2, r3
 80051ac:	d203      	bcs.n	80051b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80051ae:	4a2e      	ldr	r2, [pc, #184]	@ (8005268 <xTaskIncrementTick+0x15c>)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80051b4:	e02f      	b.n	8005216 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	3304      	adds	r3, #4
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe fd34 	bl	8003c28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	3318      	adds	r3, #24
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7fe fd2b 	bl	8003c28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051d6:	4b25      	ldr	r3, [pc, #148]	@ (800526c <xTaskIncrementTick+0x160>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d903      	bls.n	80051e6 <xTaskIncrementTick+0xda>
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051e2:	4a22      	ldr	r2, [pc, #136]	@ (800526c <xTaskIncrementTick+0x160>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ea:	4613      	mov	r3, r2
 80051ec:	009b      	lsls	r3, r3, #2
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005270 <xTaskIncrementTick+0x164>)
 80051f4:	441a      	add	r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	3304      	adds	r3, #4
 80051fa:	4619      	mov	r1, r3
 80051fc:	4610      	mov	r0, r2
 80051fe:	f7fe fcb6 	bl	8003b6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005206:	4b1b      	ldr	r3, [pc, #108]	@ (8005274 <xTaskIncrementTick+0x168>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520c:	429a      	cmp	r2, r3
 800520e:	d3b8      	bcc.n	8005182 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005210:	2301      	movs	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005214:	e7b5      	b.n	8005182 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005216:	4b17      	ldr	r3, [pc, #92]	@ (8005274 <xTaskIncrementTick+0x168>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521c:	4914      	ldr	r1, [pc, #80]	@ (8005270 <xTaskIncrementTick+0x164>)
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	440b      	add	r3, r1
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d901      	bls.n	8005232 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800522e:	2301      	movs	r3, #1
 8005230:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005232:	4b11      	ldr	r3, [pc, #68]	@ (8005278 <xTaskIncrementTick+0x16c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800523a:	2301      	movs	r3, #1
 800523c:	617b      	str	r3, [r7, #20]
 800523e:	e004      	b.n	800524a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005240:	4b0e      	ldr	r3, [pc, #56]	@ (800527c <xTaskIncrementTick+0x170>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	3301      	adds	r3, #1
 8005246:	4a0d      	ldr	r2, [pc, #52]	@ (800527c <xTaskIncrementTick+0x170>)
 8005248:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800524a:	697b      	ldr	r3, [r7, #20]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}
 8005254:	20000e00 	.word	0x20000e00
 8005258:	20000ddc 	.word	0x20000ddc
 800525c:	20000d90 	.word	0x20000d90
 8005260:	20000d94 	.word	0x20000d94
 8005264:	20000df0 	.word	0x20000df0
 8005268:	20000df8 	.word	0x20000df8
 800526c:	20000de0 	.word	0x20000de0
 8005270:	20000908 	.word	0x20000908
 8005274:	20000904 	.word	0x20000904
 8005278:	20000dec 	.word	0x20000dec
 800527c:	20000de8 	.word	0x20000de8

08005280 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005280:	b480      	push	{r7}
 8005282:	b085      	sub	sp, #20
 8005284:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005286:	4b2b      	ldr	r3, [pc, #172]	@ (8005334 <vTaskSwitchContext+0xb4>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800528e:	4b2a      	ldr	r3, [pc, #168]	@ (8005338 <vTaskSwitchContext+0xb8>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005294:	e047      	b.n	8005326 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8005296:	4b28      	ldr	r3, [pc, #160]	@ (8005338 <vTaskSwitchContext+0xb8>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529c:	4b27      	ldr	r3, [pc, #156]	@ (800533c <vTaskSwitchContext+0xbc>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	e011      	b.n	80052c8 <vTaskSwitchContext+0x48>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d10b      	bne.n	80052c2 <vTaskSwitchContext+0x42>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	607b      	str	r3, [r7, #4]
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <vTaskSwitchContext+0x3e>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3b01      	subs	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	491d      	ldr	r1, [pc, #116]	@ (8005340 <vTaskSwitchContext+0xc0>)
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4613      	mov	r3, r2
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	4413      	add	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0e3      	beq.n	80052a4 <vTaskSwitchContext+0x24>
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	4a16      	ldr	r2, [pc, #88]	@ (8005340 <vTaskSwitchContext+0xc0>)
 80052e8:	4413      	add	r3, r2
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	685a      	ldr	r2, [r3, #4]
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	3308      	adds	r3, #8
 80052fe:	429a      	cmp	r2, r3
 8005300:	d104      	bne.n	800530c <vTaskSwitchContext+0x8c>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	605a      	str	r2, [r3, #4]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	4a0c      	ldr	r2, [pc, #48]	@ (8005344 <vTaskSwitchContext+0xc4>)
 8005314:	6013      	str	r3, [r2, #0]
 8005316:	4a09      	ldr	r2, [pc, #36]	@ (800533c <vTaskSwitchContext+0xbc>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800531c:	4b09      	ldr	r3, [pc, #36]	@ (8005344 <vTaskSwitchContext+0xc4>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	3354      	adds	r3, #84	@ 0x54
 8005322:	4a09      	ldr	r2, [pc, #36]	@ (8005348 <vTaskSwitchContext+0xc8>)
 8005324:	6013      	str	r3, [r2, #0]
}
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	20000e00 	.word	0x20000e00
 8005338:	20000dec 	.word	0x20000dec
 800533c:	20000de0 	.word	0x20000de0
 8005340:	20000908 	.word	0x20000908
 8005344:	20000904 	.word	0x20000904
 8005348:	20000010 	.word	0x20000010

0800534c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b084      	sub	sp, #16
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10b      	bne.n	8005374 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	60fb      	str	r3, [r7, #12]
}
 800536e:	bf00      	nop
 8005370:	bf00      	nop
 8005372:	e7fd      	b.n	8005370 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005374:	4b07      	ldr	r3, [pc, #28]	@ (8005394 <vTaskPlaceOnEventList+0x48>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3318      	adds	r3, #24
 800537a:	4619      	mov	r1, r3
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7fe fc1a 	bl	8003bb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005382:	2101      	movs	r1, #1
 8005384:	6838      	ldr	r0, [r7, #0]
 8005386:	f000 fb97 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
}
 800538a:	bf00      	nop
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000904 	.word	0x20000904

08005398 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10b      	bne.n	80053c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80053aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ae:	f383 8811 	msr	BASEPRI, r3
 80053b2:	f3bf 8f6f 	isb	sy
 80053b6:	f3bf 8f4f 	dsb	sy
 80053ba:	617b      	str	r3, [r7, #20]
}
 80053bc:	bf00      	nop
 80053be:	bf00      	nop
 80053c0:	e7fd      	b.n	80053be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053c2:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <vTaskPlaceOnEventListRestricted+0x54>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	3318      	adds	r3, #24
 80053c8:	4619      	mov	r1, r3
 80053ca:	68f8      	ldr	r0, [r7, #12]
 80053cc:	f7fe fbcf 	bl	8003b6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d002      	beq.n	80053dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80053d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80053da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80053dc:	6879      	ldr	r1, [r7, #4]
 80053de:	68b8      	ldr	r0, [r7, #8]
 80053e0:	f000 fb6a 	bl	8005ab8 <prvAddCurrentTaskToDelayedList>
	}
 80053e4:	bf00      	nop
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	20000904 	.word	0x20000904

080053f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	68db      	ldr	r3, [r3, #12]
 80053fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d10b      	bne.n	800541e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800540a:	f383 8811 	msr	BASEPRI, r3
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	60fb      	str	r3, [r7, #12]
}
 8005418:	bf00      	nop
 800541a:	bf00      	nop
 800541c:	e7fd      	b.n	800541a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	3318      	adds	r3, #24
 8005422:	4618      	mov	r0, r3
 8005424:	f7fe fc00 	bl	8003c28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005428:	4b1d      	ldr	r3, [pc, #116]	@ (80054a0 <xTaskRemoveFromEventList+0xb0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11d      	bne.n	800546c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	3304      	adds	r3, #4
 8005434:	4618      	mov	r0, r3
 8005436:	f7fe fbf7 	bl	8003c28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800543e:	4b19      	ldr	r3, [pc, #100]	@ (80054a4 <xTaskRemoveFromEventList+0xb4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d903      	bls.n	800544e <xTaskRemoveFromEventList+0x5e>
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800544a:	4a16      	ldr	r2, [pc, #88]	@ (80054a4 <xTaskRemoveFromEventList+0xb4>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005452:	4613      	mov	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	4413      	add	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4a13      	ldr	r2, [pc, #76]	@ (80054a8 <xTaskRemoveFromEventList+0xb8>)
 800545c:	441a      	add	r2, r3
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f7fe fb82 	bl	8003b6e <vListInsertEnd>
 800546a:	e005      	b.n	8005478 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	3318      	adds	r3, #24
 8005470:	4619      	mov	r1, r3
 8005472:	480e      	ldr	r0, [pc, #56]	@ (80054ac <xTaskRemoveFromEventList+0xbc>)
 8005474:	f7fe fb7b 	bl	8003b6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800547c:	4b0c      	ldr	r3, [pc, #48]	@ (80054b0 <xTaskRemoveFromEventList+0xc0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	429a      	cmp	r2, r3
 8005484:	d905      	bls.n	8005492 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800548a:	4b0a      	ldr	r3, [pc, #40]	@ (80054b4 <xTaskRemoveFromEventList+0xc4>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]
 8005490:	e001      	b.n	8005496 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005496:	697b      	ldr	r3, [r7, #20]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3718      	adds	r7, #24
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}
 80054a0:	20000e00 	.word	0x20000e00
 80054a4:	20000de0 	.word	0x20000de0
 80054a8:	20000908 	.word	0x20000908
 80054ac:	20000d98 	.word	0x20000d98
 80054b0:	20000904 	.word	0x20000904
 80054b4:	20000dec 	.word	0x20000dec

080054b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80054c0:	4b06      	ldr	r3, [pc, #24]	@ (80054dc <vTaskInternalSetTimeOutState+0x24>)
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80054c8:	4b05      	ldr	r3, [pc, #20]	@ (80054e0 <vTaskInternalSetTimeOutState+0x28>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	605a      	str	r2, [r3, #4]
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000df0 	.word	0x20000df0
 80054e0:	20000ddc 	.word	0x20000ddc

080054e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	613b      	str	r3, [r7, #16]
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	60fb      	str	r3, [r7, #12]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800552a:	f000 ffa5 	bl	8006478 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800552e:	4b1d      	ldr	r3, [pc, #116]	@ (80055a4 <xTaskCheckForTimeOut+0xc0>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005546:	d102      	bne.n	800554e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005548:	2300      	movs	r3, #0
 800554a:	61fb      	str	r3, [r7, #28]
 800554c:	e023      	b.n	8005596 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b15      	ldr	r3, [pc, #84]	@ (80055a8 <xTaskCheckForTimeOut+0xc4>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	429a      	cmp	r2, r3
 8005558:	d007      	beq.n	800556a <xTaskCheckForTimeOut+0x86>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	429a      	cmp	r2, r3
 8005562:	d302      	bcc.n	800556a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	61fb      	str	r3, [r7, #28]
 8005568:	e015      	b.n	8005596 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	d20b      	bcs.n	800558c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	1ad2      	subs	r2, r2, r3
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f7ff ff99 	bl	80054b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005586:	2300      	movs	r3, #0
 8005588:	61fb      	str	r3, [r7, #28]
 800558a:	e004      	b.n	8005596 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2200      	movs	r2, #0
 8005590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005592:	2301      	movs	r3, #1
 8005594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005596:	f000 ffa1 	bl	80064dc <vPortExitCritical>

	return xReturn;
 800559a:	69fb      	ldr	r3, [r7, #28]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3720      	adds	r7, #32
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000ddc 	.word	0x20000ddc
 80055a8:	20000df0 	.word	0x20000df0

080055ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80055b0:	4b03      	ldr	r3, [pc, #12]	@ (80055c0 <vTaskMissedYield+0x14>)
 80055b2:	2201      	movs	r2, #1
 80055b4:	601a      	str	r2, [r3, #0]
}
 80055b6:	bf00      	nop
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20000dec 	.word	0x20000dec

080055c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80055cc:	f000 f852 	bl	8005674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80055d0:	4b06      	ldr	r3, [pc, #24]	@ (80055ec <prvIdleTask+0x28>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d9f9      	bls.n	80055cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80055d8:	4b05      	ldr	r3, [pc, #20]	@ (80055f0 <prvIdleTask+0x2c>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80055e8:	e7f0      	b.n	80055cc <prvIdleTask+0x8>
 80055ea:	bf00      	nop
 80055ec:	20000908 	.word	0x20000908
 80055f0:	e000ed04 	.word	0xe000ed04

080055f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80055fa:	2300      	movs	r3, #0
 80055fc:	607b      	str	r3, [r7, #4]
 80055fe:	e00c      	b.n	800561a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	4a12      	ldr	r2, [pc, #72]	@ (8005654 <prvInitialiseTaskLists+0x60>)
 800560c:	4413      	add	r3, r2
 800560e:	4618      	mov	r0, r3
 8005610:	f7fe fa80 	bl	8003b14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3301      	adds	r3, #1
 8005618:	607b      	str	r3, [r7, #4]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b37      	cmp	r3, #55	@ 0x37
 800561e:	d9ef      	bls.n	8005600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005620:	480d      	ldr	r0, [pc, #52]	@ (8005658 <prvInitialiseTaskLists+0x64>)
 8005622:	f7fe fa77 	bl	8003b14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005626:	480d      	ldr	r0, [pc, #52]	@ (800565c <prvInitialiseTaskLists+0x68>)
 8005628:	f7fe fa74 	bl	8003b14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800562c:	480c      	ldr	r0, [pc, #48]	@ (8005660 <prvInitialiseTaskLists+0x6c>)
 800562e:	f7fe fa71 	bl	8003b14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005632:	480c      	ldr	r0, [pc, #48]	@ (8005664 <prvInitialiseTaskLists+0x70>)
 8005634:	f7fe fa6e 	bl	8003b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005638:	480b      	ldr	r0, [pc, #44]	@ (8005668 <prvInitialiseTaskLists+0x74>)
 800563a:	f7fe fa6b 	bl	8003b14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800563e:	4b0b      	ldr	r3, [pc, #44]	@ (800566c <prvInitialiseTaskLists+0x78>)
 8005640:	4a05      	ldr	r2, [pc, #20]	@ (8005658 <prvInitialiseTaskLists+0x64>)
 8005642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005644:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <prvInitialiseTaskLists+0x7c>)
 8005646:	4a05      	ldr	r2, [pc, #20]	@ (800565c <prvInitialiseTaskLists+0x68>)
 8005648:	601a      	str	r2, [r3, #0]
}
 800564a:	bf00      	nop
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000908 	.word	0x20000908
 8005658:	20000d68 	.word	0x20000d68
 800565c:	20000d7c 	.word	0x20000d7c
 8005660:	20000d98 	.word	0x20000d98
 8005664:	20000dac 	.word	0x20000dac
 8005668:	20000dc4 	.word	0x20000dc4
 800566c:	20000d90 	.word	0x20000d90
 8005670:	20000d94 	.word	0x20000d94

08005674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800567a:	e019      	b.n	80056b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800567c:	f000 fefc 	bl	8006478 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005680:	4b10      	ldr	r3, [pc, #64]	@ (80056c4 <prvCheckTasksWaitingTermination+0x50>)
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3304      	adds	r3, #4
 800568c:	4618      	mov	r0, r3
 800568e:	f7fe facb 	bl	8003c28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005692:	4b0d      	ldr	r3, [pc, #52]	@ (80056c8 <prvCheckTasksWaitingTermination+0x54>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3b01      	subs	r3, #1
 8005698:	4a0b      	ldr	r2, [pc, #44]	@ (80056c8 <prvCheckTasksWaitingTermination+0x54>)
 800569a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800569c:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <prvCheckTasksWaitingTermination+0x58>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4a0a      	ldr	r2, [pc, #40]	@ (80056cc <prvCheckTasksWaitingTermination+0x58>)
 80056a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80056a6:	f000 ff19 	bl	80064dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f810 	bl	80056d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056b0:	4b06      	ldr	r3, [pc, #24]	@ (80056cc <prvCheckTasksWaitingTermination+0x58>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1e1      	bne.n	800567c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	20000dac 	.word	0x20000dac
 80056c8:	20000dd8 	.word	0x20000dd8
 80056cc:	20000dc0 	.word	0x20000dc0

080056d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3354      	adds	r3, #84	@ 0x54
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 f9e3 	bl	8006aa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d108      	bne.n	80056fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	4618      	mov	r0, r3
 80056f2:	f001 f8b1 	bl	8006858 <vPortFree>
				vPortFree( pxTCB );
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f001 f8ae 	bl	8006858 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80056fc:	e019      	b.n	8005732 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005704:	2b01      	cmp	r3, #1
 8005706:	d103      	bne.n	8005710 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 f8a5 	bl	8006858 <vPortFree>
	}
 800570e:	e010      	b.n	8005732 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005716:	2b02      	cmp	r3, #2
 8005718:	d00b      	beq.n	8005732 <prvDeleteTCB+0x62>
	__asm volatile
 800571a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571e:	f383 8811 	msr	BASEPRI, r3
 8005722:	f3bf 8f6f 	isb	sy
 8005726:	f3bf 8f4f 	dsb	sy
 800572a:	60fb      	str	r3, [r7, #12]
}
 800572c:	bf00      	nop
 800572e:	bf00      	nop
 8005730:	e7fd      	b.n	800572e <prvDeleteTCB+0x5e>
	}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005742:	4b0c      	ldr	r3, [pc, #48]	@ (8005774 <prvResetNextTaskUnblockTime+0x38>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d104      	bne.n	8005756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800574c:	4b0a      	ldr	r3, [pc, #40]	@ (8005778 <prvResetNextTaskUnblockTime+0x3c>)
 800574e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005754:	e008      	b.n	8005768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005756:	4b07      	ldr	r3, [pc, #28]	@ (8005774 <prvResetNextTaskUnblockTime+0x38>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a04      	ldr	r2, [pc, #16]	@ (8005778 <prvResetNextTaskUnblockTime+0x3c>)
 8005766:	6013      	str	r3, [r2, #0]
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	20000d90 	.word	0x20000d90
 8005778:	20000df8 	.word	0x20000df8

0800577c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005782:	4b05      	ldr	r3, [pc, #20]	@ (8005798 <xTaskGetCurrentTaskHandle+0x1c>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005788:	687b      	ldr	r3, [r7, #4]
	}
 800578a:	4618      	mov	r0, r3
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	20000904 	.word	0x20000904

0800579c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800579c:	b480      	push	{r7}
 800579e:	b083      	sub	sp, #12
 80057a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057a2:	4b0b      	ldr	r3, [pc, #44]	@ (80057d0 <xTaskGetSchedulerState+0x34>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d102      	bne.n	80057b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057aa:	2301      	movs	r3, #1
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	e008      	b.n	80057c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057b0:	4b08      	ldr	r3, [pc, #32]	@ (80057d4 <xTaskGetSchedulerState+0x38>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d102      	bne.n	80057be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057b8:	2302      	movs	r3, #2
 80057ba:	607b      	str	r3, [r7, #4]
 80057bc:	e001      	b.n	80057c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057be:	2300      	movs	r3, #0
 80057c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057c2:	687b      	ldr	r3, [r7, #4]
	}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr
 80057d0:	20000de4 	.word	0x20000de4
 80057d4:	20000e00 	.word	0x20000e00

080057d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d051      	beq.n	8005892 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057f2:	4b2a      	ldr	r3, [pc, #168]	@ (800589c <xTaskPriorityInherit+0xc4>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d241      	bcs.n	8005880 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	2b00      	cmp	r3, #0
 8005802:	db06      	blt.n	8005812 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005804:	4b25      	ldr	r3, [pc, #148]	@ (800589c <xTaskPriorityInherit+0xc4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800580a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	6959      	ldr	r1, [r3, #20]
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800581a:	4613      	mov	r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	4413      	add	r3, r2
 8005820:	009b      	lsls	r3, r3, #2
 8005822:	4a1f      	ldr	r2, [pc, #124]	@ (80058a0 <xTaskPriorityInherit+0xc8>)
 8005824:	4413      	add	r3, r2
 8005826:	4299      	cmp	r1, r3
 8005828:	d122      	bne.n	8005870 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	3304      	adds	r3, #4
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe f9fa 	bl	8003c28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005834:	4b19      	ldr	r3, [pc, #100]	@ (800589c <xTaskPriorityInherit+0xc4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005842:	4b18      	ldr	r3, [pc, #96]	@ (80058a4 <xTaskPriorityInherit+0xcc>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d903      	bls.n	8005852 <xTaskPriorityInherit+0x7a>
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800584e:	4a15      	ldr	r2, [pc, #84]	@ (80058a4 <xTaskPriorityInherit+0xcc>)
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4a10      	ldr	r2, [pc, #64]	@ (80058a0 <xTaskPriorityInherit+0xc8>)
 8005860:	441a      	add	r2, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3304      	adds	r3, #4
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f7fe f980 	bl	8003b6e <vListInsertEnd>
 800586e:	e004      	b.n	800587a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005870:	4b0a      	ldr	r3, [pc, #40]	@ (800589c <xTaskPriorityInherit+0xc4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800587a:	2301      	movs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e008      	b.n	8005892 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005884:	4b05      	ldr	r3, [pc, #20]	@ (800589c <xTaskPriorityInherit+0xc4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800588a:	429a      	cmp	r2, r3
 800588c:	d201      	bcs.n	8005892 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800588e:	2301      	movs	r3, #1
 8005890:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005892:	68fb      	ldr	r3, [r7, #12]
	}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	20000904 	.word	0x20000904
 80058a0:	20000908 	.word	0x20000908
 80058a4:	20000de0 	.word	0x20000de0

080058a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b086      	sub	sp, #24
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d058      	beq.n	8005970 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058be:	4b2f      	ldr	r3, [pc, #188]	@ (800597c <xTaskPriorityDisinherit+0xd4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	693a      	ldr	r2, [r7, #16]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d00b      	beq.n	80058e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60fb      	str	r3, [r7, #12]
}
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	e7fd      	b.n	80058dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d10b      	bne.n	8005900 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80058e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ec:	f383 8811 	msr	BASEPRI, r3
 80058f0:	f3bf 8f6f 	isb	sy
 80058f4:	f3bf 8f4f 	dsb	sy
 80058f8:	60bb      	str	r3, [r7, #8]
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	e7fd      	b.n	80058fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005904:	1e5a      	subs	r2, r3, #1
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005912:	429a      	cmp	r2, r3
 8005914:	d02c      	beq.n	8005970 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800591a:	2b00      	cmp	r3, #0
 800591c:	d128      	bne.n	8005970 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	3304      	adds	r3, #4
 8005922:	4618      	mov	r0, r3
 8005924:	f7fe f980 	bl	8003c28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005934:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005940:	4b0f      	ldr	r3, [pc, #60]	@ (8005980 <xTaskPriorityDisinherit+0xd8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d903      	bls.n	8005950 <xTaskPriorityDisinherit+0xa8>
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594c:	4a0c      	ldr	r2, [pc, #48]	@ (8005980 <xTaskPriorityDisinherit+0xd8>)
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	4a09      	ldr	r2, [pc, #36]	@ (8005984 <xTaskPriorityDisinherit+0xdc>)
 800595e:	441a      	add	r2, r3
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	3304      	adds	r3, #4
 8005964:	4619      	mov	r1, r3
 8005966:	4610      	mov	r0, r2
 8005968:	f7fe f901 	bl	8003b6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800596c:	2301      	movs	r3, #1
 800596e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005970:	697b      	ldr	r3, [r7, #20]
	}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
 800597a:	bf00      	nop
 800597c:	20000904 	.word	0x20000904
 8005980:	20000de0 	.word	0x20000de0
 8005984:	20000908 	.word	0x20000908

08005988 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005996:	2301      	movs	r3, #1
 8005998:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d06c      	beq.n	8005a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60fb      	str	r3, [r7, #12]
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d902      	bls.n	80059d0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e002      	b.n	80059d6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059d4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	69fa      	ldr	r2, [r7, #28]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d04c      	beq.n	8005a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d147      	bne.n	8005a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80059ea:	4b26      	ldr	r3, [pc, #152]	@ (8005a84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d10b      	bne.n	8005a0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80059f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	60bb      	str	r3, [r7, #8]
}
 8005a06:	bf00      	nop
 8005a08:	bf00      	nop
 8005a0a:	e7fd      	b.n	8005a08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	db04      	blt.n	8005a2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	6959      	ldr	r1, [r3, #20]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4a13      	ldr	r2, [pc, #76]	@ (8005a88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a3a:	4413      	add	r3, r2
 8005a3c:	4299      	cmp	r1, r3
 8005a3e:	d11c      	bne.n	8005a7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fe f8ef 	bl	8003c28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d903      	bls.n	8005a5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	4a0c      	ldr	r2, [pc, #48]	@ (8005a8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005a5c:	6013      	str	r3, [r2, #0]
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4a07      	ldr	r2, [pc, #28]	@ (8005a88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a6c:	441a      	add	r2, r3
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	3304      	adds	r3, #4
 8005a72:	4619      	mov	r1, r3
 8005a74:	4610      	mov	r0, r2
 8005a76:	f7fe f87a 	bl	8003b6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005a7a:	bf00      	nop
 8005a7c:	3720      	adds	r7, #32
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000904 	.word	0x20000904
 8005a88:	20000908 	.word	0x20000908
 8005a8c:	20000de0 	.word	0x20000de0

08005a90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005a94:	4b07      	ldr	r3, [pc, #28]	@ (8005ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005a9c:	4b05      	ldr	r3, [pc, #20]	@ (8005ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005aa2:	3201      	adds	r2, #1
 8005aa4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8005aa6:	4b03      	ldr	r3, [pc, #12]	@ (8005ab4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
	}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	20000904 	.word	0x20000904

08005ab8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005ac2:	4b21      	ldr	r3, [pc, #132]	@ (8005b48 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ac8:	4b20      	ldr	r3, [pc, #128]	@ (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3304      	adds	r3, #4
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7fe f8aa 	bl	8003c28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ada:	d10a      	bne.n	8005af2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	4619      	mov	r1, r3
 8005aea:	4819      	ldr	r0, [pc, #100]	@ (8005b50 <prvAddCurrentTaskToDelayedList+0x98>)
 8005aec:	f7fe f83f 	bl	8003b6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005af0:	e026      	b.n	8005b40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005afa:	4b14      	ldr	r3, [pc, #80]	@ (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d209      	bcs.n	8005b1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b0a:	4b12      	ldr	r3, [pc, #72]	@ (8005b54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fe f84d 	bl	8003bb6 <vListInsert>
}
 8005b1c:	e010      	b.n	8005b40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	4b0a      	ldr	r3, [pc, #40]	@ (8005b4c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7fe f843 	bl	8003bb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b30:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d202      	bcs.n	8005b40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b3a:	4a08      	ldr	r2, [pc, #32]	@ (8005b5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000ddc 	.word	0x20000ddc
 8005b4c:	20000904 	.word	0x20000904
 8005b50:	20000dc4 	.word	0x20000dc4
 8005b54:	20000d94 	.word	0x20000d94
 8005b58:	20000d90 	.word	0x20000d90
 8005b5c:	20000df8 	.word	0x20000df8

08005b60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	@ 0x28
 8005b64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b6a:	f000 fb13 	bl	8006194 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8005be4 <xTimerCreateTimerTask+0x84>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d021      	beq.n	8005bba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005b7e:	1d3a      	adds	r2, r7, #4
 8005b80:	f107 0108 	add.w	r1, r7, #8
 8005b84:	f107 030c 	add.w	r3, r7, #12
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fd ffa9 	bl	8003ae0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005b8e:	6879      	ldr	r1, [r7, #4]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	9202      	str	r2, [sp, #8]
 8005b96:	9301      	str	r3, [sp, #4]
 8005b98:	2302      	movs	r3, #2
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	460a      	mov	r2, r1
 8005ba0:	4911      	ldr	r1, [pc, #68]	@ (8005be8 <xTimerCreateTimerTask+0x88>)
 8005ba2:	4812      	ldr	r0, [pc, #72]	@ (8005bec <xTimerCreateTimerTask+0x8c>)
 8005ba4:	f7fe ff12 	bl	80049cc <xTaskCreateStatic>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	4a11      	ldr	r2, [pc, #68]	@ (8005bf0 <xTimerCreateTimerTask+0x90>)
 8005bac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bae:	4b10      	ldr	r3, [pc, #64]	@ (8005bf0 <xTimerCreateTimerTask+0x90>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	613b      	str	r3, [r7, #16]
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005bd8:	697b      	ldr	r3, [r7, #20]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3718      	adds	r7, #24
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}
 8005be2:	bf00      	nop
 8005be4:	20000e34 	.word	0x20000e34
 8005be8:	08006cc8 	.word	0x08006cc8
 8005bec:	08005d2d 	.word	0x08005d2d
 8005bf0:	20000e38 	.word	0x20000e38

08005bf4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b08a      	sub	sp, #40	@ 0x28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005c02:	2300      	movs	r3, #0
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xTimerGenericCommand+0x30>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	623b      	str	r3, [r7, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005c24:	4b19      	ldr	r3, [pc, #100]	@ (8005c8c <xTimerGenericCommand+0x98>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d02a      	beq.n	8005c82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	dc18      	bgt.n	8005c70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005c3e:	f7ff fdad 	bl	800579c <xTaskGetSchedulerState>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d109      	bne.n	8005c5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005c48:	4b10      	ldr	r3, [pc, #64]	@ (8005c8c <xTimerGenericCommand+0x98>)
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	f107 0110 	add.w	r1, r7, #16
 8005c50:	2300      	movs	r3, #0
 8005c52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c54:	f7fe f9a2 	bl	8003f9c <xQueueGenericSend>
 8005c58:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c5a:	e012      	b.n	8005c82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005c8c <xTimerGenericCommand+0x98>)
 8005c5e:	6818      	ldr	r0, [r3, #0]
 8005c60:	f107 0110 	add.w	r1, r7, #16
 8005c64:	2300      	movs	r3, #0
 8005c66:	2200      	movs	r2, #0
 8005c68:	f7fe f998 	bl	8003f9c <xQueueGenericSend>
 8005c6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c6e:	e008      	b.n	8005c82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005c70:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <xTimerGenericCommand+0x98>)
 8005c72:	6818      	ldr	r0, [r3, #0]
 8005c74:	f107 0110 	add.w	r1, r7, #16
 8005c78:	2300      	movs	r3, #0
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	f7fe fa90 	bl	80041a0 <xQueueGenericSendFromISR>
 8005c80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3728      	adds	r7, #40	@ 0x28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20000e34 	.word	0x20000e34

08005c90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c9a:	4b23      	ldr	r3, [pc, #140]	@ (8005d28 <prvProcessExpiredTimer+0x98>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7fd ffbd 	bl	8003c28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d023      	beq.n	8005d04 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	699a      	ldr	r2, [r3, #24]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	18d1      	adds	r1, r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	6978      	ldr	r0, [r7, #20]
 8005cca:	f000 f8d5 	bl	8005e78 <prvInsertTimerInActiveList>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	2300      	movs	r3, #0
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	2100      	movs	r1, #0
 8005cde:	6978      	ldr	r0, [r7, #20]
 8005ce0:	f7ff ff88 	bl	8005bf4 <xTimerGenericCommand>
 8005ce4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d114      	bne.n	8005d16 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	60fb      	str	r3, [r7, #12]
}
 8005cfe:	bf00      	nop
 8005d00:	bf00      	nop
 8005d02:	e7fd      	b.n	8005d00 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	6978      	ldr	r0, [r7, #20]
 8005d1c:	4798      	blx	r3
}
 8005d1e:	bf00      	nop
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20000e2c 	.word	0x20000e2c

08005d2c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d34:	f107 0308 	add.w	r3, r7, #8
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f000 f859 	bl	8005df0 <prvGetNextExpireTime>
 8005d3e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4619      	mov	r1, r3
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f805 	bl	8005d54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005d4a:	f000 f8d7 	bl	8005efc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005d4e:	bf00      	nop
 8005d50:	e7f0      	b.n	8005d34 <prvTimerTask+0x8>
	...

08005d54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005d5e:	f7ff f919 	bl	8004f94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005d62:	f107 0308 	add.w	r3, r7, #8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 f866 	bl	8005e38 <prvSampleTimeNow>
 8005d6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d130      	bne.n	8005dd6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10a      	bne.n	8005d90 <prvProcessTimerOrBlockTask+0x3c>
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d806      	bhi.n	8005d90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005d82:	f7ff f915 	bl	8004fb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005d86:	68f9      	ldr	r1, [r7, #12]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff ff81 	bl	8005c90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005d8e:	e024      	b.n	8005dda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d008      	beq.n	8005da8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <prvProcessTimerOrBlockTask+0x90>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <prvProcessTimerOrBlockTask+0x50>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <prvProcessTimerOrBlockTask+0x52>
 8005da4:	2300      	movs	r3, #0
 8005da6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005da8:	4b0f      	ldr	r3, [pc, #60]	@ (8005de8 <prvProcessTimerOrBlockTask+0x94>)
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	683a      	ldr	r2, [r7, #0]
 8005db4:	4619      	mov	r1, r3
 8005db6:	f7fe fdd5 	bl	8004964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005dba:	f7ff f8f9 	bl	8004fb0 <xTaskResumeAll>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005dc4:	4b09      	ldr	r3, [pc, #36]	@ (8005dec <prvProcessTimerOrBlockTask+0x98>)
 8005dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dca:	601a      	str	r2, [r3, #0]
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	f3bf 8f6f 	isb	sy
}
 8005dd4:	e001      	b.n	8005dda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005dd6:	f7ff f8eb 	bl	8004fb0 <xTaskResumeAll>
}
 8005dda:	bf00      	nop
 8005ddc:	3710      	adds	r7, #16
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000e30 	.word	0x20000e30
 8005de8:	20000e34 	.word	0x20000e34
 8005dec:	e000ed04 	.word	0xe000ed04

08005df0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005df8:	4b0e      	ldr	r3, [pc, #56]	@ (8005e34 <prvGetNextExpireTime+0x44>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <prvGetNextExpireTime+0x16>
 8005e02:	2201      	movs	r2, #1
 8005e04:	e000      	b.n	8005e08 <prvGetNextExpireTime+0x18>
 8005e06:	2200      	movs	r2, #0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d105      	bne.n	8005e20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e14:	4b07      	ldr	r3, [pc, #28]	@ (8005e34 <prvGetNextExpireTime+0x44>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	e001      	b.n	8005e24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005e24:	68fb      	ldr	r3, [r7, #12]
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	20000e2c 	.word	0x20000e2c

08005e38 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005e40:	f7ff f954 	bl	80050ec <xTaskGetTickCount>
 8005e44:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005e46:	4b0b      	ldr	r3, [pc, #44]	@ (8005e74 <prvSampleTimeNow+0x3c>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d205      	bcs.n	8005e5c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005e50:	f000 f93a 	bl	80060c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	e002      	b.n	8005e62 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005e62:	4a04      	ldr	r2, [pc, #16]	@ (8005e74 <prvSampleTimeNow+0x3c>)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005e68:	68fb      	ldr	r3, [r7, #12]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000e3c 	.word	0x20000e3c

08005e78 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d812      	bhi.n	8005ec4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	1ad2      	subs	r2, r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005eac:	2301      	movs	r3, #1
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e01b      	b.n	8005eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005eb2:	4b10      	ldr	r3, [pc, #64]	@ (8005ef4 <prvInsertTimerInActiveList+0x7c>)
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	4619      	mov	r1, r3
 8005ebc:	4610      	mov	r0, r2
 8005ebe:	f7fd fe7a 	bl	8003bb6 <vListInsert>
 8005ec2:	e012      	b.n	8005eea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d206      	bcs.n	8005eda <prvInsertTimerInActiveList+0x62>
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d302      	bcc.n	8005eda <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	617b      	str	r3, [r7, #20]
 8005ed8:	e007      	b.n	8005eea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eda:	4b07      	ldr	r3, [pc, #28]	@ (8005ef8 <prvInsertTimerInActiveList+0x80>)
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f7fd fe66 	bl	8003bb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005eea:	697b      	ldr	r3, [r7, #20]
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3718      	adds	r7, #24
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	20000e30 	.word	0x20000e30
 8005ef8:	20000e2c 	.word	0x20000e2c

08005efc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b08e      	sub	sp, #56	@ 0x38
 8005f00:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f02:	e0ce      	b.n	80060a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da19      	bge.n	8005f3e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005f0a:	1d3b      	adds	r3, r7, #4
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	61fb      	str	r3, [r7, #28]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f34:	6850      	ldr	r0, [r2, #4]
 8005f36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f38:	6892      	ldr	r2, [r2, #8]
 8005f3a:	4611      	mov	r1, r2
 8005f3c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f2c0 80ae 	blt.w	80060a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f54:	3304      	adds	r3, #4
 8005f56:	4618      	mov	r0, r3
 8005f58:	f7fd fe66 	bl	8003c28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff ff6a 	bl	8005e38 <prvSampleTimeNow>
 8005f64:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b09      	cmp	r3, #9
 8005f6a:	f200 8097 	bhi.w	800609c <prvProcessReceivedCommands+0x1a0>
 8005f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f74 <prvProcessReceivedCommands+0x78>)
 8005f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005f9d 	.word	0x08005f9d
 8005f7c:	08005f9d 	.word	0x08005f9d
 8005f80:	08006013 	.word	0x08006013
 8005f84:	08006027 	.word	0x08006027
 8005f88:	08006073 	.word	0x08006073
 8005f8c:	08005f9d 	.word	0x08005f9d
 8005f90:	08005f9d 	.word	0x08005f9d
 8005f94:	08006013 	.word	0x08006013
 8005f98:	08006027 	.word	0x08006027
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fa2:	f043 0301 	orr.w	r3, r3, #1
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005faa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb2:	699b      	ldr	r3, [r3, #24]
 8005fb4:	18d1      	adds	r1, r2, r3
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fbc:	f7ff ff5c 	bl	8005e78 <prvInsertTimerInActiveList>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d06c      	beq.n	80060a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fcc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d061      	beq.n	80060a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	441a      	add	r2, r3
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	2300      	movs	r3, #0
 8005fea:	2100      	movs	r1, #0
 8005fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fee:	f7ff fe01 	bl	8005bf4 <xTimerGenericCommand>
 8005ff2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d152      	bne.n	80060a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	61bb      	str	r3, [r7, #24]
}
 800600c:	bf00      	nop
 800600e:	bf00      	nop
 8006010:	e7fd      	b.n	800600e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006014:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006018:	f023 0301 	bic.w	r3, r3, #1
 800601c:	b2da      	uxtb	r2, r3
 800601e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006020:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006024:	e03d      	b.n	80060a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800602c:	f043 0301 	orr.w	r3, r3, #1
 8006030:	b2da      	uxtb	r2, r3
 8006032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	617b      	str	r3, [r7, #20]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800605e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006064:	18d1      	adds	r1, r2, r3
 8006066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800606a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800606c:	f7ff ff04 	bl	8005e78 <prvInsertTimerInActiveList>
					break;
 8006070:	e017      	b.n	80060a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d103      	bne.n	8006088 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006082:	f000 fbe9 	bl	8006858 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006086:	e00c      	b.n	80060a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	b2da      	uxtb	r2, r3
 8006094:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006096:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800609a:	e002      	b.n	80060a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800609c:	bf00      	nop
 800609e:	e000      	b.n	80060a2 <prvProcessReceivedCommands+0x1a6>
					break;
 80060a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80060a2:	4b08      	ldr	r3, [pc, #32]	@ (80060c4 <prvProcessReceivedCommands+0x1c8>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	1d39      	adds	r1, r7, #4
 80060a8:	2200      	movs	r2, #0
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe f916 	bl	80042dc <xQueueReceive>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	f47f af26 	bne.w	8005f04 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	3730      	adds	r7, #48	@ 0x30
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000e34 	.word	0x20000e34

080060c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80060ce:	e049      	b.n	8006164 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060d0:	4b2e      	ldr	r3, [pc, #184]	@ (800618c <prvSwitchTimerLists+0xc4>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060da:	4b2c      	ldr	r3, [pc, #176]	@ (800618c <prvSwitchTimerLists+0xc4>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3304      	adds	r3, #4
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fd fd9d 	bl	8003c28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d02f      	beq.n	8006164 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	699b      	ldr	r3, [r3, #24]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	4413      	add	r3, r2
 800610c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	429a      	cmp	r2, r3
 8006114:	d90e      	bls.n	8006134 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	68fa      	ldr	r2, [r7, #12]
 8006120:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006122:	4b1a      	ldr	r3, [pc, #104]	@ (800618c <prvSwitchTimerLists+0xc4>)
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3304      	adds	r3, #4
 800612a:	4619      	mov	r1, r3
 800612c:	4610      	mov	r0, r2
 800612e:	f7fd fd42 	bl	8003bb6 <vListInsert>
 8006132:	e017      	b.n	8006164 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006134:	2300      	movs	r3, #0
 8006136:	9300      	str	r3, [sp, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	2100      	movs	r1, #0
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff fd58 	bl	8005bf4 <xTimerGenericCommand>
 8006144:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10b      	bne.n	8006164 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800614c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	603b      	str	r3, [r7, #0]
}
 800615e:	bf00      	nop
 8006160:	bf00      	nop
 8006162:	e7fd      	b.n	8006160 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006164:	4b09      	ldr	r3, [pc, #36]	@ (800618c <prvSwitchTimerLists+0xc4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1b0      	bne.n	80060d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800616e:	4b07      	ldr	r3, [pc, #28]	@ (800618c <prvSwitchTimerLists+0xc4>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006174:	4b06      	ldr	r3, [pc, #24]	@ (8006190 <prvSwitchTimerLists+0xc8>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a04      	ldr	r2, [pc, #16]	@ (800618c <prvSwitchTimerLists+0xc4>)
 800617a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800617c:	4a04      	ldr	r2, [pc, #16]	@ (8006190 <prvSwitchTimerLists+0xc8>)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	6013      	str	r3, [r2, #0]
}
 8006182:	bf00      	nop
 8006184:	3718      	adds	r7, #24
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	20000e2c 	.word	0x20000e2c
 8006190:	20000e30 	.word	0x20000e30

08006194 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800619a:	f000 f96d 	bl	8006478 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800619e:	4b15      	ldr	r3, [pc, #84]	@ (80061f4 <prvCheckForValidListAndQueue+0x60>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d120      	bne.n	80061e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80061a6:	4814      	ldr	r0, [pc, #80]	@ (80061f8 <prvCheckForValidListAndQueue+0x64>)
 80061a8:	f7fd fcb4 	bl	8003b14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80061ac:	4813      	ldr	r0, [pc, #76]	@ (80061fc <prvCheckForValidListAndQueue+0x68>)
 80061ae:	f7fd fcb1 	bl	8003b14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80061b2:	4b13      	ldr	r3, [pc, #76]	@ (8006200 <prvCheckForValidListAndQueue+0x6c>)
 80061b4:	4a10      	ldr	r2, [pc, #64]	@ (80061f8 <prvCheckForValidListAndQueue+0x64>)
 80061b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80061b8:	4b12      	ldr	r3, [pc, #72]	@ (8006204 <prvCheckForValidListAndQueue+0x70>)
 80061ba:	4a10      	ldr	r2, [pc, #64]	@ (80061fc <prvCheckForValidListAndQueue+0x68>)
 80061bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80061be:	2300      	movs	r3, #0
 80061c0:	9300      	str	r3, [sp, #0]
 80061c2:	4b11      	ldr	r3, [pc, #68]	@ (8006208 <prvCheckForValidListAndQueue+0x74>)
 80061c4:	4a11      	ldr	r2, [pc, #68]	@ (800620c <prvCheckForValidListAndQueue+0x78>)
 80061c6:	2110      	movs	r1, #16
 80061c8:	200a      	movs	r0, #10
 80061ca:	f7fd fdc1 	bl	8003d50 <xQueueGenericCreateStatic>
 80061ce:	4603      	mov	r3, r0
 80061d0:	4a08      	ldr	r2, [pc, #32]	@ (80061f4 <prvCheckForValidListAndQueue+0x60>)
 80061d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80061d4:	4b07      	ldr	r3, [pc, #28]	@ (80061f4 <prvCheckForValidListAndQueue+0x60>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80061dc:	4b05      	ldr	r3, [pc, #20]	@ (80061f4 <prvCheckForValidListAndQueue+0x60>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	490b      	ldr	r1, [pc, #44]	@ (8006210 <prvCheckForValidListAndQueue+0x7c>)
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7fe fb94 	bl	8004910 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e8:	f000 f978 	bl	80064dc <vPortExitCritical>
}
 80061ec:	bf00      	nop
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000e34 	.word	0x20000e34
 80061f8:	20000e04 	.word	0x20000e04
 80061fc:	20000e18 	.word	0x20000e18
 8006200:	20000e2c 	.word	0x20000e2c
 8006204:	20000e30 	.word	0x20000e30
 8006208:	20000ee0 	.word	0x20000ee0
 800620c:	20000e40 	.word	0x20000e40
 8006210:	08006cd0 	.word	0x08006cd0

08006214 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3b04      	subs	r3, #4
 8006224:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800622c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3b04      	subs	r3, #4
 8006232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f023 0201 	bic.w	r2, r3, #1
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3b04      	subs	r3, #4
 8006242:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006244:	4a0c      	ldr	r2, [pc, #48]	@ (8006278 <pxPortInitialiseStack+0x64>)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	3b14      	subs	r3, #20
 800624e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	3b04      	subs	r3, #4
 800625a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f06f 0202 	mvn.w	r2, #2
 8006262:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	3b20      	subs	r3, #32
 8006268:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800626a:	68fb      	ldr	r3, [r7, #12]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	0800627d 	.word	0x0800627d

0800627c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006286:	4b13      	ldr	r3, [pc, #76]	@ (80062d4 <prvTaskExitError+0x58>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800628e:	d00b      	beq.n	80062a8 <prvTaskExitError+0x2c>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	60fb      	str	r3, [r7, #12]
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <prvTaskExitError+0x28>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60bb      	str	r3, [r7, #8]
}
 80062ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80062bc:	bf00      	nop
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d0fc      	beq.n	80062be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	2000000c 	.word	0x2000000c
	...

080062e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80062e0:	4b07      	ldr	r3, [pc, #28]	@ (8006300 <pxCurrentTCBConst2>)
 80062e2:	6819      	ldr	r1, [r3, #0]
 80062e4:	6808      	ldr	r0, [r1, #0]
 80062e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ea:	f380 8809 	msr	PSP, r0
 80062ee:	f3bf 8f6f 	isb	sy
 80062f2:	f04f 0000 	mov.w	r0, #0
 80062f6:	f380 8811 	msr	BASEPRI, r0
 80062fa:	4770      	bx	lr
 80062fc:	f3af 8000 	nop.w

08006300 <pxCurrentTCBConst2>:
 8006300:	20000904 	.word	0x20000904
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop

08006308 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006308:	4808      	ldr	r0, [pc, #32]	@ (800632c <prvPortStartFirstTask+0x24>)
 800630a:	6800      	ldr	r0, [r0, #0]
 800630c:	6800      	ldr	r0, [r0, #0]
 800630e:	f380 8808 	msr	MSP, r0
 8006312:	f04f 0000 	mov.w	r0, #0
 8006316:	f380 8814 	msr	CONTROL, r0
 800631a:	b662      	cpsie	i
 800631c:	b661      	cpsie	f
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	df00      	svc	0
 8006328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800632a:	bf00      	nop
 800632c:	e000ed08 	.word	0xe000ed08

08006330 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006336:	4b47      	ldr	r3, [pc, #284]	@ (8006454 <xPortStartScheduler+0x124>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a47      	ldr	r2, [pc, #284]	@ (8006458 <xPortStartScheduler+0x128>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d10b      	bne.n	8006358 <xPortStartScheduler+0x28>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	613b      	str	r3, [r7, #16]
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	e7fd      	b.n	8006354 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006358:	4b3e      	ldr	r3, [pc, #248]	@ (8006454 <xPortStartScheduler+0x124>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a3f      	ldr	r2, [pc, #252]	@ (800645c <xPortStartScheduler+0x12c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d10b      	bne.n	800637a <xPortStartScheduler+0x4a>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60fb      	str	r3, [r7, #12]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800637a:	4b39      	ldr	r3, [pc, #228]	@ (8006460 <xPortStartScheduler+0x130>)
 800637c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	22ff      	movs	r2, #255	@ 0xff
 800638a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	b2db      	uxtb	r3, r3
 8006392:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006394:	78fb      	ldrb	r3, [r7, #3]
 8006396:	b2db      	uxtb	r3, r3
 8006398:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800639c:	b2da      	uxtb	r2, r3
 800639e:	4b31      	ldr	r3, [pc, #196]	@ (8006464 <xPortStartScheduler+0x134>)
 80063a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80063a2:	4b31      	ldr	r3, [pc, #196]	@ (8006468 <xPortStartScheduler+0x138>)
 80063a4:	2207      	movs	r2, #7
 80063a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063a8:	e009      	b.n	80063be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80063aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006468 <xPortStartScheduler+0x138>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	3b01      	subs	r3, #1
 80063b0:	4a2d      	ldr	r2, [pc, #180]	@ (8006468 <xPortStartScheduler+0x138>)
 80063b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80063be:	78fb      	ldrb	r3, [r7, #3]
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063c6:	2b80      	cmp	r3, #128	@ 0x80
 80063c8:	d0ef      	beq.n	80063aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80063ca:	4b27      	ldr	r3, [pc, #156]	@ (8006468 <xPortStartScheduler+0x138>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1c3 0307 	rsb	r3, r3, #7
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d00b      	beq.n	80063ee <xPortStartScheduler+0xbe>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	60bb      	str	r3, [r7, #8]
}
 80063e8:	bf00      	nop
 80063ea:	bf00      	nop
 80063ec:	e7fd      	b.n	80063ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80063ee:	4b1e      	ldr	r3, [pc, #120]	@ (8006468 <xPortStartScheduler+0x138>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	021b      	lsls	r3, r3, #8
 80063f4:	4a1c      	ldr	r2, [pc, #112]	@ (8006468 <xPortStartScheduler+0x138>)
 80063f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80063f8:	4b1b      	ldr	r3, [pc, #108]	@ (8006468 <xPortStartScheduler+0x138>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006400:	4a19      	ldr	r2, [pc, #100]	@ (8006468 <xPortStartScheduler+0x138>)
 8006402:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	b2da      	uxtb	r2, r3
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800640c:	4b17      	ldr	r3, [pc, #92]	@ (800646c <xPortStartScheduler+0x13c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a16      	ldr	r2, [pc, #88]	@ (800646c <xPortStartScheduler+0x13c>)
 8006412:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006416:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006418:	4b14      	ldr	r3, [pc, #80]	@ (800646c <xPortStartScheduler+0x13c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a13      	ldr	r2, [pc, #76]	@ (800646c <xPortStartScheduler+0x13c>)
 800641e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006422:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006424:	f000 f8da 	bl	80065dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006428:	4b11      	ldr	r3, [pc, #68]	@ (8006470 <xPortStartScheduler+0x140>)
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800642e:	f000 f8f9 	bl	8006624 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006432:	4b10      	ldr	r3, [pc, #64]	@ (8006474 <xPortStartScheduler+0x144>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a0f      	ldr	r2, [pc, #60]	@ (8006474 <xPortStartScheduler+0x144>)
 8006438:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800643c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800643e:	f7ff ff63 	bl	8006308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006442:	f7fe ff1d 	bl	8005280 <vTaskSwitchContext>
	prvTaskExitError();
 8006446:	f7ff ff19 	bl	800627c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	e000ed00 	.word	0xe000ed00
 8006458:	410fc271 	.word	0x410fc271
 800645c:	410fc270 	.word	0x410fc270
 8006460:	e000e400 	.word	0xe000e400
 8006464:	20000f30 	.word	0x20000f30
 8006468:	20000f34 	.word	0x20000f34
 800646c:	e000ed20 	.word	0xe000ed20
 8006470:	2000000c 	.word	0x2000000c
 8006474:	e000ef34 	.word	0xe000ef34

08006478 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	607b      	str	r3, [r7, #4]
}
 8006490:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006492:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <vPortEnterCritical+0x5c>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	3301      	adds	r3, #1
 8006498:	4a0e      	ldr	r2, [pc, #56]	@ (80064d4 <vPortEnterCritical+0x5c>)
 800649a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800649c:	4b0d      	ldr	r3, [pc, #52]	@ (80064d4 <vPortEnterCritical+0x5c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d110      	bne.n	80064c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80064a4:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <vPortEnterCritical+0x60>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00b      	beq.n	80064c6 <vPortEnterCritical+0x4e>
	__asm volatile
 80064ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b2:	f383 8811 	msr	BASEPRI, r3
 80064b6:	f3bf 8f6f 	isb	sy
 80064ba:	f3bf 8f4f 	dsb	sy
 80064be:	603b      	str	r3, [r7, #0]
}
 80064c0:	bf00      	nop
 80064c2:	bf00      	nop
 80064c4:	e7fd      	b.n	80064c2 <vPortEnterCritical+0x4a>
	}
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	2000000c 	.word	0x2000000c
 80064d8:	e000ed04 	.word	0xe000ed04

080064dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80064e2:	4b12      	ldr	r3, [pc, #72]	@ (800652c <vPortExitCritical+0x50>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d10b      	bne.n	8006502 <vPortExitCritical+0x26>
	__asm volatile
 80064ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ee:	f383 8811 	msr	BASEPRI, r3
 80064f2:	f3bf 8f6f 	isb	sy
 80064f6:	f3bf 8f4f 	dsb	sy
 80064fa:	607b      	str	r3, [r7, #4]
}
 80064fc:	bf00      	nop
 80064fe:	bf00      	nop
 8006500:	e7fd      	b.n	80064fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006502:	4b0a      	ldr	r3, [pc, #40]	@ (800652c <vPortExitCritical+0x50>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	3b01      	subs	r3, #1
 8006508:	4a08      	ldr	r2, [pc, #32]	@ (800652c <vPortExitCritical+0x50>)
 800650a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800650c:	4b07      	ldr	r3, [pc, #28]	@ (800652c <vPortExitCritical+0x50>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d105      	bne.n	8006520 <vPortExitCritical+0x44>
 8006514:	2300      	movs	r3, #0
 8006516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f383 8811 	msr	BASEPRI, r3
}
 800651e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	2000000c 	.word	0x2000000c

08006530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006530:	f3ef 8009 	mrs	r0, PSP
 8006534:	f3bf 8f6f 	isb	sy
 8006538:	4b15      	ldr	r3, [pc, #84]	@ (8006590 <pxCurrentTCBConst>)
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	f01e 0f10 	tst.w	lr, #16
 8006540:	bf08      	it	eq
 8006542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	6010      	str	r0, [r2, #0]
 800654c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006550:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006554:	f380 8811 	msr	BASEPRI, r0
 8006558:	f3bf 8f4f 	dsb	sy
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f7fe fe8e 	bl	8005280 <vTaskSwitchContext>
 8006564:	f04f 0000 	mov.w	r0, #0
 8006568:	f380 8811 	msr	BASEPRI, r0
 800656c:	bc09      	pop	{r0, r3}
 800656e:	6819      	ldr	r1, [r3, #0]
 8006570:	6808      	ldr	r0, [r1, #0]
 8006572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006576:	f01e 0f10 	tst.w	lr, #16
 800657a:	bf08      	it	eq
 800657c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006580:	f380 8809 	msr	PSP, r0
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop
 800658c:	f3af 8000 	nop.w

08006590 <pxCurrentTCBConst>:
 8006590:	20000904 	.word	0x20000904
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006594:	bf00      	nop
 8006596:	bf00      	nop

08006598 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	607b      	str	r3, [r7, #4]
}
 80065b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80065b2:	f7fe fdab 	bl	800510c <xTaskIncrementTick>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d003      	beq.n	80065c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80065bc:	4b06      	ldr	r3, [pc, #24]	@ (80065d8 <xPortSysTickHandler+0x40>)
 80065be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	2300      	movs	r3, #0
 80065c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	f383 8811 	msr	BASEPRI, r3
}
 80065ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	e000ed04 	.word	0xe000ed04

080065dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80065dc:	b480      	push	{r7}
 80065de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80065e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <vPortSetupTimerInterrupt+0x34>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80065e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006614 <vPortSetupTimerInterrupt+0x38>)
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80065ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006618 <vPortSetupTimerInterrupt+0x3c>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a0a      	ldr	r2, [pc, #40]	@ (800661c <vPortSetupTimerInterrupt+0x40>)
 80065f2:	fba2 2303 	umull	r2, r3, r2, r3
 80065f6:	099b      	lsrs	r3, r3, #6
 80065f8:	4a09      	ldr	r2, [pc, #36]	@ (8006620 <vPortSetupTimerInterrupt+0x44>)
 80065fa:	3b01      	subs	r3, #1
 80065fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80065fe:	4b04      	ldr	r3, [pc, #16]	@ (8006610 <vPortSetupTimerInterrupt+0x34>)
 8006600:	2207      	movs	r2, #7
 8006602:	601a      	str	r2, [r3, #0]
}
 8006604:	bf00      	nop
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	e000e010 	.word	0xe000e010
 8006614:	e000e018 	.word	0xe000e018
 8006618:	20000000 	.word	0x20000000
 800661c:	10624dd3 	.word	0x10624dd3
 8006620:	e000e014 	.word	0xe000e014

08006624 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006624:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006634 <vPortEnableVFP+0x10>
 8006628:	6801      	ldr	r1, [r0, #0]
 800662a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800662e:	6001      	str	r1, [r0, #0]
 8006630:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006632:	bf00      	nop
 8006634:	e000ed88 	.word	0xe000ed88

08006638 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800663e:	f3ef 8305 	mrs	r3, IPSR
 8006642:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b0f      	cmp	r3, #15
 8006648:	d915      	bls.n	8006676 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800664a:	4a18      	ldr	r2, [pc, #96]	@ (80066ac <vPortValidateInterruptPriority+0x74>)
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4413      	add	r3, r2
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006654:	4b16      	ldr	r3, [pc, #88]	@ (80066b0 <vPortValidateInterruptPriority+0x78>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	7afa      	ldrb	r2, [r7, #11]
 800665a:	429a      	cmp	r2, r3
 800665c:	d20b      	bcs.n	8006676 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	607b      	str	r3, [r7, #4]
}
 8006670:	bf00      	nop
 8006672:	bf00      	nop
 8006674:	e7fd      	b.n	8006672 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006676:	4b0f      	ldr	r3, [pc, #60]	@ (80066b4 <vPortValidateInterruptPriority+0x7c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800667e:	4b0e      	ldr	r3, [pc, #56]	@ (80066b8 <vPortValidateInterruptPriority+0x80>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	429a      	cmp	r2, r3
 8006684:	d90b      	bls.n	800669e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668a:	f383 8811 	msr	BASEPRI, r3
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	603b      	str	r3, [r7, #0]
}
 8006698:	bf00      	nop
 800669a:	bf00      	nop
 800669c:	e7fd      	b.n	800669a <vPortValidateInterruptPriority+0x62>
	}
 800669e:	bf00      	nop
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	e000e3f0 	.word	0xe000e3f0
 80066b0:	20000f30 	.word	0x20000f30
 80066b4:	e000ed0c 	.word	0xe000ed0c
 80066b8:	20000f34 	.word	0x20000f34

080066bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b08a      	sub	sp, #40	@ 0x28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80066c8:	f7fe fc64 	bl	8004f94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80066cc:	4b5c      	ldr	r3, [pc, #368]	@ (8006840 <pvPortMalloc+0x184>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80066d4:	f000 f924 	bl	8006920 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80066d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006844 <pvPortMalloc+0x188>)
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4013      	ands	r3, r2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f040 8095 	bne.w	8006810 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01e      	beq.n	800672a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80066ec:	2208      	movs	r2, #8
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4413      	add	r3, r2
 80066f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d015      	beq.n	800672a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f023 0307 	bic.w	r3, r3, #7
 8006704:	3308      	adds	r3, #8
 8006706:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00b      	beq.n	800672a <pvPortMalloc+0x6e>
	__asm volatile
 8006712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006716:	f383 8811 	msr	BASEPRI, r3
 800671a:	f3bf 8f6f 	isb	sy
 800671e:	f3bf 8f4f 	dsb	sy
 8006722:	617b      	str	r3, [r7, #20]
}
 8006724:	bf00      	nop
 8006726:	bf00      	nop
 8006728:	e7fd      	b.n	8006726 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d06f      	beq.n	8006810 <pvPortMalloc+0x154>
 8006730:	4b45      	ldr	r3, [pc, #276]	@ (8006848 <pvPortMalloc+0x18c>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	429a      	cmp	r2, r3
 8006738:	d86a      	bhi.n	8006810 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800673a:	4b44      	ldr	r3, [pc, #272]	@ (800684c <pvPortMalloc+0x190>)
 800673c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800673e:	4b43      	ldr	r3, [pc, #268]	@ (800684c <pvPortMalloc+0x190>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006744:	e004      	b.n	8006750 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800674a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	429a      	cmp	r2, r3
 8006758:	d903      	bls.n	8006762 <pvPortMalloc+0xa6>
 800675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f1      	bne.n	8006746 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006762:	4b37      	ldr	r3, [pc, #220]	@ (8006840 <pvPortMalloc+0x184>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006768:	429a      	cmp	r2, r3
 800676a:	d051      	beq.n	8006810 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800676c:	6a3b      	ldr	r3, [r7, #32]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2208      	movs	r2, #8
 8006772:	4413      	add	r3, r2
 8006774:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	1ad2      	subs	r2, r2, r3
 8006786:	2308      	movs	r3, #8
 8006788:	005b      	lsls	r3, r3, #1
 800678a:	429a      	cmp	r2, r3
 800678c:	d920      	bls.n	80067d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800678e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4413      	add	r3, r2
 8006794:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f003 0307 	and.w	r3, r3, #7
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00b      	beq.n	80067b8 <pvPortMalloc+0xfc>
	__asm volatile
 80067a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a4:	f383 8811 	msr	BASEPRI, r3
 80067a8:	f3bf 8f6f 	isb	sy
 80067ac:	f3bf 8f4f 	dsb	sy
 80067b0:	613b      	str	r3, [r7, #16]
}
 80067b2:	bf00      	nop
 80067b4:	bf00      	nop
 80067b6:	e7fd      	b.n	80067b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80067b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80067c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80067ca:	69b8      	ldr	r0, [r7, #24]
 80067cc:	f000 f90a 	bl	80069e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80067d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006848 <pvPortMalloc+0x18c>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	1ad3      	subs	r3, r2, r3
 80067da:	4a1b      	ldr	r2, [pc, #108]	@ (8006848 <pvPortMalloc+0x18c>)
 80067dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80067de:	4b1a      	ldr	r3, [pc, #104]	@ (8006848 <pvPortMalloc+0x18c>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006850 <pvPortMalloc+0x194>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d203      	bcs.n	80067f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80067ea:	4b17      	ldr	r3, [pc, #92]	@ (8006848 <pvPortMalloc+0x18c>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a18      	ldr	r2, [pc, #96]	@ (8006850 <pvPortMalloc+0x194>)
 80067f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80067f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f4:	685a      	ldr	r2, [r3, #4]
 80067f6:	4b13      	ldr	r3, [pc, #76]	@ (8006844 <pvPortMalloc+0x188>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006806:	4b13      	ldr	r3, [pc, #76]	@ (8006854 <pvPortMalloc+0x198>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3301      	adds	r3, #1
 800680c:	4a11      	ldr	r2, [pc, #68]	@ (8006854 <pvPortMalloc+0x198>)
 800680e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006810:	f7fe fbce 	bl	8004fb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	f003 0307 	and.w	r3, r3, #7
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00b      	beq.n	8006836 <pvPortMalloc+0x17a>
	__asm volatile
 800681e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006822:	f383 8811 	msr	BASEPRI, r3
 8006826:	f3bf 8f6f 	isb	sy
 800682a:	f3bf 8f4f 	dsb	sy
 800682e:	60fb      	str	r3, [r7, #12]
}
 8006830:	bf00      	nop
 8006832:	bf00      	nop
 8006834:	e7fd      	b.n	8006832 <pvPortMalloc+0x176>
	return pvReturn;
 8006836:	69fb      	ldr	r3, [r7, #28]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3728      	adds	r7, #40	@ 0x28
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20001ee0 	.word	0x20001ee0
 8006844:	20001ef4 	.word	0x20001ef4
 8006848:	20001ee4 	.word	0x20001ee4
 800684c:	20001ed8 	.word	0x20001ed8
 8006850:	20001ee8 	.word	0x20001ee8
 8006854:	20001eec 	.word	0x20001eec

08006858 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d04f      	beq.n	800690a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800686a:	2308      	movs	r3, #8
 800686c:	425b      	negs	r3, r3
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	4413      	add	r3, r2
 8006872:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	685a      	ldr	r2, [r3, #4]
 800687c:	4b25      	ldr	r3, [pc, #148]	@ (8006914 <vPortFree+0xbc>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10b      	bne.n	800689e <vPortFree+0x46>
	__asm volatile
 8006886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688a:	f383 8811 	msr	BASEPRI, r3
 800688e:	f3bf 8f6f 	isb	sy
 8006892:	f3bf 8f4f 	dsb	sy
 8006896:	60fb      	str	r3, [r7, #12]
}
 8006898:	bf00      	nop
 800689a:	bf00      	nop
 800689c:	e7fd      	b.n	800689a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00b      	beq.n	80068be <vPortFree+0x66>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	60bb      	str	r3, [r7, #8]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	685a      	ldr	r2, [r3, #4]
 80068c2:	4b14      	ldr	r3, [pc, #80]	@ (8006914 <vPortFree+0xbc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4013      	ands	r3, r2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d01e      	beq.n	800690a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d11a      	bne.n	800690a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	4b0e      	ldr	r3, [pc, #56]	@ (8006914 <vPortFree+0xbc>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	43db      	mvns	r3, r3
 80068de:	401a      	ands	r2, r3
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80068e4:	f7fe fb56 	bl	8004f94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006918 <vPortFree+0xc0>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4413      	add	r3, r2
 80068f2:	4a09      	ldr	r2, [pc, #36]	@ (8006918 <vPortFree+0xc0>)
 80068f4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80068f6:	6938      	ldr	r0, [r7, #16]
 80068f8:	f000 f874 	bl	80069e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80068fc:	4b07      	ldr	r3, [pc, #28]	@ (800691c <vPortFree+0xc4>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	4a06      	ldr	r2, [pc, #24]	@ (800691c <vPortFree+0xc4>)
 8006904:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006906:	f7fe fb53 	bl	8004fb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800690a:	bf00      	nop
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	20001ef4 	.word	0x20001ef4
 8006918:	20001ee4 	.word	0x20001ee4
 800691c:	20001ef0 	.word	0x20001ef0

08006920 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006926:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 800692a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800692c:	4b27      	ldr	r3, [pc, #156]	@ (80069cc <prvHeapInit+0xac>)
 800692e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f003 0307 	and.w	r3, r3, #7
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3307      	adds	r3, #7
 800693e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f023 0307 	bic.w	r3, r3, #7
 8006946:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006948:	68ba      	ldr	r2, [r7, #8]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	4a1f      	ldr	r2, [pc, #124]	@ (80069cc <prvHeapInit+0xac>)
 8006950:	4413      	add	r3, r2
 8006952:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006958:	4a1d      	ldr	r2, [pc, #116]	@ (80069d0 <prvHeapInit+0xb0>)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800695e:	4b1c      	ldr	r3, [pc, #112]	@ (80069d0 <prvHeapInit+0xb0>)
 8006960:	2200      	movs	r2, #0
 8006962:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68ba      	ldr	r2, [r7, #8]
 8006968:	4413      	add	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800696c:	2208      	movs	r2, #8
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	1a9b      	subs	r3, r3, r2
 8006972:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	f023 0307 	bic.w	r3, r3, #7
 800697a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	4a15      	ldr	r2, [pc, #84]	@ (80069d4 <prvHeapInit+0xb4>)
 8006980:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006982:	4b14      	ldr	r3, [pc, #80]	@ (80069d4 <prvHeapInit+0xb4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2200      	movs	r2, #0
 8006988:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800698a:	4b12      	ldr	r3, [pc, #72]	@ (80069d4 <prvHeapInit+0xb4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	2200      	movs	r2, #0
 8006990:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	1ad2      	subs	r2, r2, r3
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80069a0:	4b0c      	ldr	r3, [pc, #48]	@ (80069d4 <prvHeapInit+0xb4>)
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	4a0a      	ldr	r2, [pc, #40]	@ (80069d8 <prvHeapInit+0xb8>)
 80069ae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	4a09      	ldr	r2, [pc, #36]	@ (80069dc <prvHeapInit+0xbc>)
 80069b6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80069b8:	4b09      	ldr	r3, [pc, #36]	@ (80069e0 <prvHeapInit+0xc0>)
 80069ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80069be:	601a      	str	r2, [r3, #0]
}
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	20000f38 	.word	0x20000f38
 80069d0:	20001ed8 	.word	0x20001ed8
 80069d4:	20001ee0 	.word	0x20001ee0
 80069d8:	20001ee8 	.word	0x20001ee8
 80069dc:	20001ee4 	.word	0x20001ee4
 80069e0:	20001ef4 	.word	0x20001ef4

080069e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80069ec:	4b28      	ldr	r3, [pc, #160]	@ (8006a90 <prvInsertBlockIntoFreeList+0xac>)
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e002      	b.n	80069f8 <prvInsertBlockIntoFreeList+0x14>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d8f7      	bhi.n	80069f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d108      	bne.n	8006a26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	441a      	add	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	441a      	add	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d118      	bne.n	8006a6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b15      	ldr	r3, [pc, #84]	@ (8006a94 <prvInsertBlockIntoFreeList+0xb0>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d00d      	beq.n	8006a62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685a      	ldr	r2, [r3, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	441a      	add	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	e008      	b.n	8006a74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006a62:	4b0c      	ldr	r3, [pc, #48]	@ (8006a94 <prvInsertBlockIntoFreeList+0xb0>)
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	e003      	b.n	8006a74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d002      	beq.n	8006a82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a82:	bf00      	nop
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	20001ed8 	.word	0x20001ed8
 8006a94:	20001ee0 	.word	0x20001ee0

08006a98 <memset>:
 8006a98:	4402      	add	r2, r0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d100      	bne.n	8006aa2 <memset+0xa>
 8006aa0:	4770      	bx	lr
 8006aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8006aa6:	e7f9      	b.n	8006a9c <memset+0x4>

08006aa8 <_reclaim_reent>:
 8006aa8:	4b29      	ldr	r3, [pc, #164]	@ (8006b50 <_reclaim_reent+0xa8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4283      	cmp	r3, r0
 8006aae:	b570      	push	{r4, r5, r6, lr}
 8006ab0:	4604      	mov	r4, r0
 8006ab2:	d04b      	beq.n	8006b4c <_reclaim_reent+0xa4>
 8006ab4:	69c3      	ldr	r3, [r0, #28]
 8006ab6:	b1ab      	cbz	r3, 8006ae4 <_reclaim_reent+0x3c>
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	b16b      	cbz	r3, 8006ad8 <_reclaim_reent+0x30>
 8006abc:	2500      	movs	r5, #0
 8006abe:	69e3      	ldr	r3, [r4, #28]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	5959      	ldr	r1, [r3, r5]
 8006ac4:	2900      	cmp	r1, #0
 8006ac6:	d13b      	bne.n	8006b40 <_reclaim_reent+0x98>
 8006ac8:	3504      	adds	r5, #4
 8006aca:	2d80      	cmp	r5, #128	@ 0x80
 8006acc:	d1f7      	bne.n	8006abe <_reclaim_reent+0x16>
 8006ace:	69e3      	ldr	r3, [r4, #28]
 8006ad0:	4620      	mov	r0, r4
 8006ad2:	68d9      	ldr	r1, [r3, #12]
 8006ad4:	f000 f872 	bl	8006bbc <_free_r>
 8006ad8:	69e3      	ldr	r3, [r4, #28]
 8006ada:	6819      	ldr	r1, [r3, #0]
 8006adc:	b111      	cbz	r1, 8006ae4 <_reclaim_reent+0x3c>
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f000 f86c 	bl	8006bbc <_free_r>
 8006ae4:	6961      	ldr	r1, [r4, #20]
 8006ae6:	b111      	cbz	r1, 8006aee <_reclaim_reent+0x46>
 8006ae8:	4620      	mov	r0, r4
 8006aea:	f000 f867 	bl	8006bbc <_free_r>
 8006aee:	69e1      	ldr	r1, [r4, #28]
 8006af0:	b111      	cbz	r1, 8006af8 <_reclaim_reent+0x50>
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f862 	bl	8006bbc <_free_r>
 8006af8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006afa:	b111      	cbz	r1, 8006b02 <_reclaim_reent+0x5a>
 8006afc:	4620      	mov	r0, r4
 8006afe:	f000 f85d 	bl	8006bbc <_free_r>
 8006b02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b04:	b111      	cbz	r1, 8006b0c <_reclaim_reent+0x64>
 8006b06:	4620      	mov	r0, r4
 8006b08:	f000 f858 	bl	8006bbc <_free_r>
 8006b0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8006b0e:	b111      	cbz	r1, 8006b16 <_reclaim_reent+0x6e>
 8006b10:	4620      	mov	r0, r4
 8006b12:	f000 f853 	bl	8006bbc <_free_r>
 8006b16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006b18:	b111      	cbz	r1, 8006b20 <_reclaim_reent+0x78>
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 f84e 	bl	8006bbc <_free_r>
 8006b20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006b22:	b111      	cbz	r1, 8006b2a <_reclaim_reent+0x82>
 8006b24:	4620      	mov	r0, r4
 8006b26:	f000 f849 	bl	8006bbc <_free_r>
 8006b2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006b2c:	b111      	cbz	r1, 8006b34 <_reclaim_reent+0x8c>
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f844 	bl	8006bbc <_free_r>
 8006b34:	6a23      	ldr	r3, [r4, #32]
 8006b36:	b14b      	cbz	r3, 8006b4c <_reclaim_reent+0xa4>
 8006b38:	4620      	mov	r0, r4
 8006b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006b3e:	4718      	bx	r3
 8006b40:	680e      	ldr	r6, [r1, #0]
 8006b42:	4620      	mov	r0, r4
 8006b44:	f000 f83a 	bl	8006bbc <_free_r>
 8006b48:	4631      	mov	r1, r6
 8006b4a:	e7bb      	b.n	8006ac4 <_reclaim_reent+0x1c>
 8006b4c:	bd70      	pop	{r4, r5, r6, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000010 	.word	0x20000010

08006b54 <__libc_init_array>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	4d0d      	ldr	r5, [pc, #52]	@ (8006b8c <__libc_init_array+0x38>)
 8006b58:	4c0d      	ldr	r4, [pc, #52]	@ (8006b90 <__libc_init_array+0x3c>)
 8006b5a:	1b64      	subs	r4, r4, r5
 8006b5c:	10a4      	asrs	r4, r4, #2
 8006b5e:	2600      	movs	r6, #0
 8006b60:	42a6      	cmp	r6, r4
 8006b62:	d109      	bne.n	8006b78 <__libc_init_array+0x24>
 8006b64:	4d0b      	ldr	r5, [pc, #44]	@ (8006b94 <__libc_init_array+0x40>)
 8006b66:	4c0c      	ldr	r4, [pc, #48]	@ (8006b98 <__libc_init_array+0x44>)
 8006b68:	f000 f87e 	bl	8006c68 <_init>
 8006b6c:	1b64      	subs	r4, r4, r5
 8006b6e:	10a4      	asrs	r4, r4, #2
 8006b70:	2600      	movs	r6, #0
 8006b72:	42a6      	cmp	r6, r4
 8006b74:	d105      	bne.n	8006b82 <__libc_init_array+0x2e>
 8006b76:	bd70      	pop	{r4, r5, r6, pc}
 8006b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b7c:	4798      	blx	r3
 8006b7e:	3601      	adds	r6, #1
 8006b80:	e7ee      	b.n	8006b60 <__libc_init_array+0xc>
 8006b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b86:	4798      	blx	r3
 8006b88:	3601      	adds	r6, #1
 8006b8a:	e7f2      	b.n	8006b72 <__libc_init_array+0x1e>
 8006b8c:	08006ddc 	.word	0x08006ddc
 8006b90:	08006ddc 	.word	0x08006ddc
 8006b94:	08006ddc 	.word	0x08006ddc
 8006b98:	08006de0 	.word	0x08006de0

08006b9c <__retarget_lock_acquire_recursive>:
 8006b9c:	4770      	bx	lr

08006b9e <__retarget_lock_release_recursive>:
 8006b9e:	4770      	bx	lr

08006ba0 <memcpy>:
 8006ba0:	440a      	add	r2, r1
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006ba8:	d100      	bne.n	8006bac <memcpy+0xc>
 8006baa:	4770      	bx	lr
 8006bac:	b510      	push	{r4, lr}
 8006bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bb6:	4291      	cmp	r1, r2
 8006bb8:	d1f9      	bne.n	8006bae <memcpy+0xe>
 8006bba:	bd10      	pop	{r4, pc}

08006bbc <_free_r>:
 8006bbc:	b538      	push	{r3, r4, r5, lr}
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	2900      	cmp	r1, #0
 8006bc2:	d041      	beq.n	8006c48 <_free_r+0x8c>
 8006bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bc8:	1f0c      	subs	r4, r1, #4
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	bfb8      	it	lt
 8006bce:	18e4      	addlt	r4, r4, r3
 8006bd0:	f000 f83e 	bl	8006c50 <__malloc_lock>
 8006bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c4c <_free_r+0x90>)
 8006bd6:	6813      	ldr	r3, [r2, #0]
 8006bd8:	b933      	cbnz	r3, 8006be8 <_free_r+0x2c>
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	6014      	str	r4, [r2, #0]
 8006bde:	4628      	mov	r0, r5
 8006be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006be4:	f000 b83a 	b.w	8006c5c <__malloc_unlock>
 8006be8:	42a3      	cmp	r3, r4
 8006bea:	d908      	bls.n	8006bfe <_free_r+0x42>
 8006bec:	6820      	ldr	r0, [r4, #0]
 8006bee:	1821      	adds	r1, r4, r0
 8006bf0:	428b      	cmp	r3, r1
 8006bf2:	bf01      	itttt	eq
 8006bf4:	6819      	ldreq	r1, [r3, #0]
 8006bf6:	685b      	ldreq	r3, [r3, #4]
 8006bf8:	1809      	addeq	r1, r1, r0
 8006bfa:	6021      	streq	r1, [r4, #0]
 8006bfc:	e7ed      	b.n	8006bda <_free_r+0x1e>
 8006bfe:	461a      	mov	r2, r3
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	b10b      	cbz	r3, 8006c08 <_free_r+0x4c>
 8006c04:	42a3      	cmp	r3, r4
 8006c06:	d9fa      	bls.n	8006bfe <_free_r+0x42>
 8006c08:	6811      	ldr	r1, [r2, #0]
 8006c0a:	1850      	adds	r0, r2, r1
 8006c0c:	42a0      	cmp	r0, r4
 8006c0e:	d10b      	bne.n	8006c28 <_free_r+0x6c>
 8006c10:	6820      	ldr	r0, [r4, #0]
 8006c12:	4401      	add	r1, r0
 8006c14:	1850      	adds	r0, r2, r1
 8006c16:	4283      	cmp	r3, r0
 8006c18:	6011      	str	r1, [r2, #0]
 8006c1a:	d1e0      	bne.n	8006bde <_free_r+0x22>
 8006c1c:	6818      	ldr	r0, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	6053      	str	r3, [r2, #4]
 8006c22:	4408      	add	r0, r1
 8006c24:	6010      	str	r0, [r2, #0]
 8006c26:	e7da      	b.n	8006bde <_free_r+0x22>
 8006c28:	d902      	bls.n	8006c30 <_free_r+0x74>
 8006c2a:	230c      	movs	r3, #12
 8006c2c:	602b      	str	r3, [r5, #0]
 8006c2e:	e7d6      	b.n	8006bde <_free_r+0x22>
 8006c30:	6820      	ldr	r0, [r4, #0]
 8006c32:	1821      	adds	r1, r4, r0
 8006c34:	428b      	cmp	r3, r1
 8006c36:	bf04      	itt	eq
 8006c38:	6819      	ldreq	r1, [r3, #0]
 8006c3a:	685b      	ldreq	r3, [r3, #4]
 8006c3c:	6063      	str	r3, [r4, #4]
 8006c3e:	bf04      	itt	eq
 8006c40:	1809      	addeq	r1, r1, r0
 8006c42:	6021      	streq	r1, [r4, #0]
 8006c44:	6054      	str	r4, [r2, #4]
 8006c46:	e7ca      	b.n	8006bde <_free_r+0x22>
 8006c48:	bd38      	pop	{r3, r4, r5, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20002034 	.word	0x20002034

08006c50 <__malloc_lock>:
 8006c50:	4801      	ldr	r0, [pc, #4]	@ (8006c58 <__malloc_lock+0x8>)
 8006c52:	f7ff bfa3 	b.w	8006b9c <__retarget_lock_acquire_recursive>
 8006c56:	bf00      	nop
 8006c58:	20002030 	.word	0x20002030

08006c5c <__malloc_unlock>:
 8006c5c:	4801      	ldr	r0, [pc, #4]	@ (8006c64 <__malloc_unlock+0x8>)
 8006c5e:	f7ff bf9e 	b.w	8006b9e <__retarget_lock_release_recursive>
 8006c62:	bf00      	nop
 8006c64:	20002030 	.word	0x20002030

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
