
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006460  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  080065f0  080065f0  000075f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006710  08006710  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006710  08006710  00007710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006718  08006718  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006718  08006718  00007718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800671c  0800671c  0000771c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08006720  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be8  20000060  08006780  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c48  08006780  00008c48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acbf  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003905  00000000  00000000  00022d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00026658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011a4  00000000  00000000  00027d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d77  00000000  00000000  00028ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001977b  00000000  00000000  00051c33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc783  00000000  00000000  0006b3ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00167b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000621c  00000000  00000000  00167b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0016dd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080065d8 	.word	0x080065d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080065d8 	.word	0x080065d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004c4:	4a10      	ldr	r2, [pc, #64]	@ (8000508 <MX_FREERTOS_Init+0x48>)
 80004c6:	2100      	movs	r1, #0
 80004c8:	4810      	ldr	r0, [pc, #64]	@ (800050c <MX_FREERTOS_Init+0x4c>)
 80004ca:	f003 f9bb 	bl	8003844 <osThreadNew>
 80004ce:	4603      	mov	r3, r0
 80004d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <MX_FREERTOS_Init+0x50>)
 80004d2:	6013      	str	r3, [r2, #0]

  /* creation of Blink1Task */
  Blink1TaskHandle = osThreadNew(Blink1, NULL, &Blink1Task_attributes);
 80004d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000514 <MX_FREERTOS_Init+0x54>)
 80004d6:	2100      	movs	r1, #0
 80004d8:	480f      	ldr	r0, [pc, #60]	@ (8000518 <MX_FREERTOS_Init+0x58>)
 80004da:	f003 f9b3 	bl	8003844 <osThreadNew>
 80004de:	4603      	mov	r3, r0
 80004e0:	4a0e      	ldr	r2, [pc, #56]	@ (800051c <MX_FREERTOS_Init+0x5c>)
 80004e2:	6013      	str	r3, [r2, #0]

  /* creation of Blink2Task */
  Blink2TaskHandle = osThreadNew(Blink2, NULL, &Blink2Task_attributes);
 80004e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <MX_FREERTOS_Init+0x60>)
 80004e6:	2100      	movs	r1, #0
 80004e8:	480e      	ldr	r0, [pc, #56]	@ (8000524 <MX_FREERTOS_Init+0x64>)
 80004ea:	f003 f9ab 	bl	8003844 <osThreadNew>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000528 <MX_FREERTOS_Init+0x68>)
 80004f2:	6013      	str	r3, [r2, #0]

  /* creation of TriggTask */
  TriggTaskHandle = osThreadNew(Trigg, NULL, &TriggTask_attributes);
 80004f4:	4a0d      	ldr	r2, [pc, #52]	@ (800052c <MX_FREERTOS_Init+0x6c>)
 80004f6:	2100      	movs	r1, #0
 80004f8:	480d      	ldr	r0, [pc, #52]	@ (8000530 <MX_FREERTOS_Init+0x70>)
 80004fa:	f003 f9a3 	bl	8003844 <osThreadNew>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0c      	ldr	r2, [pc, #48]	@ (8000534 <MX_FREERTOS_Init+0x74>)
 8000502:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000504:	bf00      	nop
 8000506:	bd80      	pop	{r7, pc}
 8000508:	08006638 	.word	0x08006638
 800050c:	08000539 	.word	0x08000539
 8000510:	20000080 	.word	0x20000080
 8000514:	0800665c 	.word	0x0800665c
 8000518:	08000549 	.word	0x08000549
 800051c:	20000084 	.word	0x20000084
 8000520:	08006680 	.word	0x08006680
 8000524:	08000589 	.word	0x08000589
 8000528:	20000088 	.word	0x20000088
 800052c:	080066a4 	.word	0x080066a4
 8000530:	080005c9 	.word	0x080005c9
 8000534:	2000008c 	.word	0x2000008c

08000538 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f003 fa11 	bl	8003968 <osDelay>
 8000546:	e7fb      	b.n	8000540 <StartDefaultTask+0x8>

08000548 <Blink1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink1 */
void Blink1(void *argument)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b084      	sub	sp, #16
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink1 */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(10) ; // ms to ticks
 8000550:	230a      	movs	r3, #10
 8000552:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000554:	f004 fb96 	bl	8004c84 <xTaskGetTickCount>
 8000558:	4603      	mov	r3, r0
 800055a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		varBlink1 = 1;
 800055c:	4b08      	ldr	r3, [pc, #32]	@ (8000580 <Blink1+0x38>)
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
		wait_cycles(200000);
 8000562:	4808      	ldr	r0, [pc, #32]	@ (8000584 <Blink1+0x3c>)
 8000564:	f000 f846 	bl	80005f4 <wait_cycles>
		varBlink1 = 0;
 8000568:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <Blink1+0x38>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 800056e:	f107 0308 	add.w	r3, r7, #8
 8000572:	68f9      	ldr	r1, [r7, #12]
 8000574:	4618      	mov	r0, r3
 8000576:	f004 f9b3 	bl	80048e0 <vTaskDelayUntil>
		varBlink1 = 1;
 800057a:	bf00      	nop
 800057c:	e7ee      	b.n	800055c <Blink1+0x14>
 800057e:	bf00      	nop
 8000580:	2000007c 	.word	0x2000007c
 8000584:	00030d40 	.word	0x00030d40

08000588 <Blink2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Blink2 */
void Blink2(void *argument)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Blink2 */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20) ; // ms to ticks
 8000590:	2314      	movs	r3, #20
 8000592:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 8000594:	f004 fb76 	bl	8004c84 <xTaskGetTickCount>
 8000598:	4603      	mov	r3, r0
 800059a:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		varBlink1 = 1;
 800059c:	4b08      	ldr	r3, [pc, #32]	@ (80005c0 <Blink2+0x38>)
 800059e:	2201      	movs	r2, #1
 80005a0:	701a      	strb	r2, [r3, #0]
		wait_cycles(400000);
 80005a2:	4808      	ldr	r0, [pc, #32]	@ (80005c4 <Blink2+0x3c>)
 80005a4:	f000 f826 	bl	80005f4 <wait_cycles>
		varBlink1 = 0;
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <Blink2+0x38>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	68f9      	ldr	r1, [r7, #12]
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 f993 	bl	80048e0 <vTaskDelayUntil>
		varBlink1 = 1;
 80005ba:	bf00      	nop
 80005bc:	e7ee      	b.n	800059c <Blink2+0x14>
 80005be:	bf00      	nop
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	00061a80 	.word	0x00061a80

080005c8 <Trigg>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Trigg */
void Trigg(void *argument)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Trigg */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(200) ; // ms to ticks
 80005d0:	23c8      	movs	r3, #200	@ 0xc8
 80005d2:	60fb      	str	r3, [r7, #12]
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
 80005d4:	f004 fb56 	bl	8004c84 <xTaskGetTickCount>
 80005d8:	4603      	mov	r3, r0
 80005da:	60bb      	str	r3, [r7, #8]
	/* Infinite loop */
	for(;;)
	{
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	68f9      	ldr	r1, [r7, #12]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 f97c 	bl	80048e0 <vTaskDelayUntil>
		wait_cycles(10); //add a breakpoint in this line
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 f803 	bl	80005f4 <wait_cycles>
		vTaskDelayUntil( &xLastWakeTime, xPeriod );
 80005ee:	bf00      	nop
 80005f0:	e7f4      	b.n	80005dc <Trigg+0x14>
	...

080005f4 <wait_cycles>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void wait_cycles(uint32_t n){
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	uint32_t l = n/3;	//cycles per loop is 3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	4a07      	ldr	r2, [pc, #28]	@ (800061c <wait_cycles+0x28>)
 8000600:	fba2 2303 	umull	r2, r3, r2, r3
 8000604:	085b      	lsrs	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
	asm volatile( "0:" "SUBS %[count], 1;" "BNE 0b;" :[count]"+r"(l) );
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	3b01      	subs	r3, #1
 800060c:	d1fd      	bne.n	800060a <wait_cycles+0x16>
 800060e:	60fb      	str	r3, [r7, #12]
}
 8000610:	bf00      	nop
 8000612:	3714      	adds	r7, #20
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	aaaaaaab 	.word	0xaaaaaaab

08000620 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	f107 0314 	add.w	r3, r7, #20
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
 8000634:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000636:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800063a:	4a2a      	ldr	r2, [pc, #168]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800063c:	f043 0304 	orr.w	r3, r3, #4
 8000640:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000642:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000646:	f003 0304 	and.w	r3, r3, #4
 800064a:	613b      	str	r3, [r7, #16]
 800064c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	4b25      	ldr	r3, [pc, #148]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000652:	4a24      	ldr	r2, [pc, #144]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000658:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800065a:	4b22      	ldr	r3, [pc, #136]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800065e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000662:	60fb      	str	r3, [r7, #12]
 8000664:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b1f      	ldr	r3, [pc, #124]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800066a:	4a1e      	ldr	r2, [pc, #120]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000672:	4b1c      	ldr	r3, [pc, #112]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b19      	ldr	r3, [pc, #100]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000682:	4a18      	ldr	r2, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800068a:	4b16      	ldr	r3, [pc, #88]	@ (80006e4 <MX_GPIO_Init+0xc4>)
 800068c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2120      	movs	r1, #32
 800069a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800069e:	f000 fcf1 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	480b      	ldr	r0, [pc, #44]	@ (80006e8 <MX_GPIO_Init+0xc8>)
 80006ba:	f000 fb39 	bl	8000d30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006be:	2320      	movs	r3, #32
 80006c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 0314 	add.w	r3, r7, #20
 80006d2:	4619      	mov	r1, r3
 80006d4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006d8:	f000 fb2a 	bl	8000d30 <HAL_GPIO_Init>

}
 80006dc:	bf00      	nop
 80006de:	3728      	adds	r7, #40	@ 0x28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	48000800 	.word	0x48000800

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f0:	f000 f9fc 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f4:	f000 f80c 	bl	8000710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f8:	f7ff ff92 	bl	8000620 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fc:	f000 f940 	bl	8000980 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000700:	f003 f856 	bl	80037b0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000704:	f7ff fedc 	bl	80004c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000708:	f003 f876 	bl	80037f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <main+0x20>

08000710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b096      	sub	sp, #88	@ 0x58
 8000714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 0314 	add.w	r3, r7, #20
 800071a:	2244      	movs	r2, #68	@ 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f005 fe72 	bl	8006408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000732:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000736:	f000 fccb 	bl	80010d0 <HAL_PWREx_ControlVoltageScaling>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000740:	f000 f84a 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800074c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000752:	2302      	movs	r3, #2
 8000754:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	2302      	movs	r3, #2
 8000758:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800075a:	2301      	movs	r3, #1
 800075c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800075e:	230a      	movs	r3, #10
 8000760:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000762:	2307      	movs	r3, #7
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800076a:	2302      	movs	r3, #2
 800076c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fd02 	bl	800117c <HAL_RCC_OscConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800077e:	f000 f82b 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	230f      	movs	r3, #15
 8000784:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000786:	2303      	movs	r3, #3
 8000788:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000796:	463b      	mov	r3, r7
 8000798:	2104      	movs	r1, #4
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f8ca 	bl	8001934 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007a6:	f000 f817 	bl	80007d8 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	@ 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
	...

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	@ (80007d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c6:	f000 f9b1 	bl	8000b2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40012c00 	.word	0x40012c00

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	bf00      	nop
 80007e2:	e7fd      	b.n	80007e0 <Error_Handler+0x8>

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <HAL_MspInit+0x4c>)
 80007ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ee:	4a10      	ldr	r2, [pc, #64]	@ (8000830 <HAL_MspInit+0x4c>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <HAL_MspInit+0x4c>)
 80007f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000802:	4b0b      	ldr	r3, [pc, #44]	@ (8000830 <HAL_MspInit+0x4c>)
 8000804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000806:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_MspInit+0x4c>)
 8000808:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800080c:	6593      	str	r3, [r2, #88]	@ 0x58
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <HAL_MspInit+0x4c>)
 8000810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000812:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	210f      	movs	r1, #15
 800081e:	f06f 0001 	mvn.w	r0, #1
 8000822:	f000 fa5b 	bl	8000cdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40021000 	.word	0x40021000

08000834 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	@ 0x30
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000842:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <HAL_InitTick+0xc8>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000846:	4a2d      	ldr	r2, [pc, #180]	@ (80008fc <HAL_InitTick+0xc8>)
 8000848:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800084c:	6613      	str	r3, [r2, #96]	@ 0x60
 800084e:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <HAL_InitTick+0xc8>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800085a:	f107 020c 	add.w	r2, r7, #12
 800085e:	f107 0310 	add.w	r3, r7, #16
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f001 fa29 	bl	8001cbc <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800086a:	f001 fa11 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 800086e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000872:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <HAL_InitTick+0xcc>)
 8000874:	fba2 2303 	umull	r2, r3, r2, r3
 8000878:	0c9b      	lsrs	r3, r3, #18
 800087a:	3b01      	subs	r3, #1
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800087e:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <HAL_InitTick+0xd0>)
 8000880:	4a21      	ldr	r2, [pc, #132]	@ (8000908 <HAL_InitTick+0xd4>)
 8000882:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <HAL_InitTick+0xd0>)
 8000886:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800088a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800088c:	4a1d      	ldr	r2, [pc, #116]	@ (8000904 <HAL_InitTick+0xd0>)
 800088e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000890:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000892:	4b1c      	ldr	r3, [pc, #112]	@ (8000904 <HAL_InitTick+0xd0>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <HAL_InitTick+0xd0>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800089e:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <HAL_InitTick+0xd0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80008a4:	4817      	ldr	r0, [pc, #92]	@ (8000904 <HAL_InitTick+0xd0>)
 80008a6:	f001 ff57 	bl	8002758 <HAL_TIM_Base_Init>
 80008aa:	4603      	mov	r3, r0
 80008ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80008b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d11b      	bne.n	80008f0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80008b8:	4812      	ldr	r0, [pc, #72]	@ (8000904 <HAL_InitTick+0xd0>)
 80008ba:	f001 ffaf 	bl	800281c <HAL_TIM_Base_Start_IT>
 80008be:	4603      	mov	r3, r0
 80008c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80008c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d111      	bne.n	80008f0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80008cc:	2019      	movs	r0, #25
 80008ce:	f000 fa21 	bl	8000d14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d808      	bhi.n	80008ea <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	2019      	movs	r0, #25
 80008de:	f000 f9fd 	bl	8000cdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <HAL_InitTick+0xd8>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6013      	str	r3, [r2, #0]
 80008e8:	e002      	b.n	80008f0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
 80008ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80008f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3730      	adds	r7, #48	@ 0x30
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40021000 	.word	0x40021000
 8000900:	431bde83 	.word	0x431bde83
 8000904:	20000090 	.word	0x20000090
 8000908:	40012c00 	.word	0x40012c00
 800090c:	20000004 	.word	0x20000004

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <NMI_Handler+0x4>

08000918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <MemManage_Handler+0x4>

08000928 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <UsageFault_Handler+0x4>

08000938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800094c:	4802      	ldr	r0, [pc, #8]	@ (8000958 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800094e:	f001 ffd5 	bl	80028fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000090 	.word	0x20000090

0800095c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b14      	ldr	r3, [pc, #80]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 8000986:	4a15      	ldr	r2, [pc, #84]	@ (80009dc <MX_USART2_UART_Init+0x5c>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 800098c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b0f      	ldr	r3, [pc, #60]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b0e      	ldr	r3, [pc, #56]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009a6:	220c      	movs	r2, #12
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b09      	ldr	r3, [pc, #36]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	@ (80009d8 <MX_USART2_UART_Init+0x58>)
 80009c4:	f002 f98e 	bl	8002ce4 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ce:	f7ff ff03 	bl	80007d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000dc 	.word	0x200000dc
 80009dc:	40004400 	.word	0x40004400

080009e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b0ac      	sub	sp, #176	@ 0xb0
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f8:	f107 0314 	add.w	r3, r7, #20
 80009fc:	2288      	movs	r2, #136	@ 0x88
 80009fe:	2100      	movs	r1, #0
 8000a00:	4618      	mov	r0, r3
 8000a02:	f005 fd01 	bl	8006408 <memset>
  if(uartHandle->Instance==USART2)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <HAL_UART_MspInit+0xb0>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d13b      	bne.n	8000a88 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a10:	2302      	movs	r3, #2
 8000a12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 f9df 	bl	8001de0 <HAL_RCCEx_PeriphCLKConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a28:	f7ff fed6 	bl	80007d8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a2c:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a30:	4a18      	ldr	r2, [pc, #96]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a36:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a38:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a44:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a48:	4a12      	ldr	r2, [pc, #72]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <HAL_UART_MspInit+0xb4>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a5c:	230c      	movs	r3, #12
 8000a5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a74:	2307      	movs	r3, #7
 8000a76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f000 f954 	bl	8000d30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a88:	bf00      	nop
 8000a8a:	37b0      	adds	r7, #176	@ 0xb0
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40004400 	.word	0x40004400
 8000a94:	40021000 	.word	0x40021000

08000a98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ad0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a9c:	f7ff ff5e 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aa0:	480c      	ldr	r0, [pc, #48]	@ (8000ad4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aa2:	490d      	ldr	r1, [pc, #52]	@ (8000ad8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000adc <LoopForever+0xe>)
  movs r3, #0
 8000aa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa8:	e002      	b.n	8000ab0 <LoopCopyDataInit>

08000aaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aae:	3304      	adds	r3, #4

08000ab0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ab0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ab2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ab4:	d3f9      	bcc.n	8000aaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ae4 <LoopForever+0x16>)
  movs r3, #0
 8000aba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000abc:	e001      	b.n	8000ac2 <LoopFillZerobss>

08000abe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000abe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ac0:	3204      	adds	r2, #4

08000ac2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ac2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ac4:	d3fb      	bcc.n	8000abe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ac6:	f005 fcfd 	bl	80064c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aca:	f7ff fe0f 	bl	80006ec <main>

08000ace <LoopForever>:

LoopForever:
    b LoopForever
 8000ace:	e7fe      	b.n	8000ace <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ad4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000adc:	08006720 	.word	0x08006720
  ldr r2, =_sbss
 8000ae0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000ae4:	20001c48 	.word	0x20001c48

08000ae8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ae8:	e7fe      	b.n	8000ae8 <ADC1_2_IRQHandler>
	...

08000aec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000af2:	2300      	movs	r3, #0
 8000af4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <HAL_Init+0x3c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <HAL_Init+0x3c>)
 8000afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b02:	2003      	movs	r0, #3
 8000b04:	f000 f8df 	bl	8000cc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b08:	200f      	movs	r0, #15
 8000b0a:	f7ff fe93 	bl	8000834 <HAL_InitTick>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d002      	beq.n	8000b1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000b14:	2301      	movs	r3, #1
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	e001      	b.n	8000b1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b1a:	f7ff fe63 	bl	80007e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <HAL_IncTick+0x20>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	461a      	mov	r2, r3
 8000b36:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <HAL_IncTick+0x24>)
 8000b3e:	6013      	str	r3, [r2, #0]
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20000008 	.word	0x20000008
 8000b50:	20000164 	.word	0x20000164

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b03      	ldr	r3, [pc, #12]	@ (8000b68 <HAL_GetTick+0x14>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000164 	.word	0x20000164

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	@ (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db0b      	blt.n	8000bfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000be2:	79fb      	ldrb	r3, [r7, #7]
 8000be4:	f003 021f 	and.w	r2, r3, #31
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__NVIC_EnableIRQ+0x38>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	095b      	lsrs	r3, r3, #5
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	db0a      	blt.n	8000c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	490c      	ldr	r1, [pc, #48]	@ (8000c58 <__NVIC_SetPriority+0x4c>)
 8000c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	440b      	add	r3, r1
 8000c30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c34:	e00a      	b.n	8000c4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	4908      	ldr	r1, [pc, #32]	@ (8000c5c <__NVIC_SetPriority+0x50>)
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	f003 030f 	and.w	r3, r3, #15
 8000c42:	3b04      	subs	r3, #4
 8000c44:	0112      	lsls	r2, r2, #4
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	440b      	add	r3, r1
 8000c4a:	761a      	strb	r2, [r3, #24]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	e000e100 	.word	0xe000e100
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b089      	sub	sp, #36	@ 0x24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	60b9      	str	r1, [r7, #8]
 8000c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f1c3 0307 	rsb	r3, r3, #7
 8000c7a:	2b04      	cmp	r3, #4
 8000c7c:	bf28      	it	cs
 8000c7e:	2304      	movcs	r3, #4
 8000c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	3304      	adds	r3, #4
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d902      	bls.n	8000c90 <NVIC_EncodePriority+0x30>
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	3b03      	subs	r3, #3
 8000c8e:	e000      	b.n	8000c92 <NVIC_EncodePriority+0x32>
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	43d9      	mvns	r1, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	4313      	orrs	r3, r2
         );
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3724      	adds	r7, #36	@ 0x24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b082      	sub	sp, #8
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff ff4c 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
 8000ce8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cee:	f7ff ff61 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cf2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68b9      	ldr	r1, [r7, #8]
 8000cf8:	6978      	ldr	r0, [r7, #20]
 8000cfa:	f7ff ffb1 	bl	8000c60 <NVIC_EncodePriority>
 8000cfe:	4602      	mov	r2, r0
 8000d00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d04:	4611      	mov	r1, r2
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff80 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff54 	bl	8000bd0 <__NVIC_EnableIRQ>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b087      	sub	sp, #28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d3e:	e17f      	b.n	8001040 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	2101      	movs	r1, #1
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 8171 	beq.w	800103a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0303 	and.w	r3, r3, #3
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d005      	beq.n	8000d70 <HAL_GPIO_Init+0x40>
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 0303 	and.w	r3, r3, #3
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d130      	bne.n	8000dd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	2203      	movs	r2, #3
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	43db      	mvns	r3, r3
 8000d82:	693a      	ldr	r2, [r7, #16]
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000da6:	2201      	movs	r2, #1
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	f003 0201 	and.w	r2, r3, #1
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d118      	bne.n	8000e10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000de4:	2201      	movs	r2, #1
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	f003 0201 	and.w	r2, r3, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f003 0303 	and.w	r3, r3, #3
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d017      	beq.n	8000e4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	2203      	movs	r2, #3
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	689a      	ldr	r2, [r3, #8]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d123      	bne.n	8000ea0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f003 0307 	and.w	r3, r3, #7
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	220f      	movs	r2, #15
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	691a      	ldr	r2, [r3, #16]
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	08da      	lsrs	r2, r3, #3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3208      	adds	r2, #8
 8000e9a:	6939      	ldr	r1, [r7, #16]
 8000e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0203 	and.w	r2, r3, #3
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	693a      	ldr	r2, [r7, #16]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80ac 	beq.w	800103a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	4b5f      	ldr	r3, [pc, #380]	@ (8001060 <HAL_GPIO_Init+0x330>)
 8000ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8001060 <HAL_GPIO_Init+0x330>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eee:	4b5c      	ldr	r3, [pc, #368]	@ (8001060 <HAL_GPIO_Init+0x330>)
 8000ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60bb      	str	r3, [r7, #8]
 8000ef8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000efa:	4a5a      	ldr	r2, [pc, #360]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x242>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4f      	ldr	r2, [pc, #316]	@ (8001068 <HAL_GPIO_Init+0x338>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x23e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4e      	ldr	r2, [pc, #312]	@ (800106c <HAL_GPIO_Init+0x33c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x23a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4d      	ldr	r2, [pc, #308]	@ (8001070 <HAL_GPIO_Init+0x340>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x236>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4c      	ldr	r2, [pc, #304]	@ (8001074 <HAL_GPIO_Init+0x344>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x232>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4b      	ldr	r2, [pc, #300]	@ (8001078 <HAL_GPIO_Init+0x348>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x22e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4a      	ldr	r2, [pc, #296]	@ (800107c <HAL_GPIO_Init+0x34c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x22a>
 8000f56:	2306      	movs	r3, #6
 8000f58:	e00c      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e00a      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e008      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f62:	2304      	movs	r3, #4
 8000f64:	e006      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f66:	2303      	movs	r3, #3
 8000f68:	e004      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	e002      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_GPIO_Init+0x244>
 8000f72:	2300      	movs	r3, #0
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	f002 0203 	and.w	r2, r2, #3
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	4093      	lsls	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	4313      	orrs	r3, r2
 8000f82:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f84:	4937      	ldr	r1, [pc, #220]	@ (8001064 <HAL_GPIO_Init+0x334>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f92:	4b3b      	ldr	r3, [pc, #236]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fb6:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fbc:	4b30      	ldr	r3, [pc, #192]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe0:	4a27      	ldr	r2, [pc, #156]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800100a:	4a1d      	ldr	r2, [pc, #116]	@ (8001080 <HAL_GPIO_Init+0x350>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	43db      	mvns	r3, r3
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	4013      	ands	r3, r2
 800101e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	4313      	orrs	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001034:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <HAL_GPIO_Init+0x350>)
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3301      	adds	r3, #1
 800103e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa22 f303 	lsr.w	r3, r2, r3
 800104a:	2b00      	cmp	r3, #0
 800104c:	f47f ae78 	bne.w	8000d40 <HAL_GPIO_Init+0x10>
  }
}
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40021000 	.word	0x40021000
 8001064:	40010000 	.word	0x40010000
 8001068:	48000400 	.word	0x48000400
 800106c:	48000800 	.word	0x48000800
 8001070:	48000c00 	.word	0x48000c00
 8001074:	48001000 	.word	0x48001000
 8001078:	48001400 	.word	0x48001400
 800107c:	48001800 	.word	0x48001800
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	4613      	mov	r3, r2
 8001092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001094:	787b      	ldrb	r3, [r7, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010b8:	4b04      	ldr	r3, [pc, #16]	@ (80010cc <HAL_PWREx_GetVoltageRange+0x18>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40007000 	.word	0x40007000

080010d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010de:	d130      	bne.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010ec:	d038      	beq.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ee:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2232      	movs	r2, #50	@ 0x32
 8001104:	fb02 f303 	mul.w	r3, r2, r3
 8001108:	4a1b      	ldr	r2, [pc, #108]	@ (8001178 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800110a:	fba2 2303 	umull	r2, r3, r2, r3
 800110e:	0c9b      	lsrs	r3, r3, #18
 8001110:	3301      	adds	r3, #1
 8001112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001114:	e002      	b.n	800111c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3b01      	subs	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001128:	d102      	bne.n	8001130 <HAL_PWREx_ControlVoltageScaling+0x60>
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f2      	bne.n	8001116 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	695b      	ldr	r3, [r3, #20]
 8001134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800113c:	d110      	bne.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e00f      	b.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800114a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114e:	d007      	beq.n	8001160 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001150:	4b07      	ldr	r3, [pc, #28]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001158:	4a05      	ldr	r2, [pc, #20]	@ (8001170 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800115a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800115e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001160:	2300      	movs	r3, #0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40007000 	.word	0x40007000
 8001174:	20000000 	.word	0x20000000
 8001178:	431bde83 	.word	0x431bde83

0800117c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b088      	sub	sp, #32
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e3ca      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800118e:	4b97      	ldr	r3, [pc, #604]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001198:	4b94      	ldr	r3, [pc, #592]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 0310 	and.w	r3, r3, #16
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80e4 	beq.w	8001378 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <HAL_RCC_OscConfig+0x4a>
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	2b0c      	cmp	r3, #12
 80011ba:	f040 808b 	bne.w	80012d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	f040 8087 	bne.w	80012d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011c6:	4b89      	ldr	r3, [pc, #548]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d005      	beq.n	80011de <HAL_RCC_OscConfig+0x62>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e3a2      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1a      	ldr	r2, [r3, #32]
 80011e2:	4b82      	ldr	r3, [pc, #520]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0308 	and.w	r3, r3, #8
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d004      	beq.n	80011f8 <HAL_RCC_OscConfig+0x7c>
 80011ee:	4b7f      	ldr	r3, [pc, #508]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011f6:	e005      	b.n	8001204 <HAL_RCC_OscConfig+0x88>
 80011f8:	4b7c      	ldr	r3, [pc, #496]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80011fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001204:	4293      	cmp	r3, r2
 8001206:	d223      	bcs.n	8001250 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a1b      	ldr	r3, [r3, #32]
 800120c:	4618      	mov	r0, r3
 800120e:	f000 fd87 	bl	8001d20 <RCC_SetFlashLatencyFromMSIRange>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e383      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800121c:	4b73      	ldr	r3, [pc, #460]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a72      	ldr	r2, [pc, #456]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001222:	f043 0308 	orr.w	r3, r3, #8
 8001226:	6013      	str	r3, [r2, #0]
 8001228:	4b70      	ldr	r3, [pc, #448]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a1b      	ldr	r3, [r3, #32]
 8001234:	496d      	ldr	r1, [pc, #436]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800123a:	4b6c      	ldr	r3, [pc, #432]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69db      	ldr	r3, [r3, #28]
 8001246:	021b      	lsls	r3, r3, #8
 8001248:	4968      	ldr	r1, [pc, #416]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800124a:	4313      	orrs	r3, r2
 800124c:	604b      	str	r3, [r1, #4]
 800124e:	e025      	b.n	800129c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001250:	4b66      	ldr	r3, [pc, #408]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a65      	ldr	r2, [pc, #404]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001256:	f043 0308 	orr.w	r3, r3, #8
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	4b63      	ldr	r3, [pc, #396]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4960      	ldr	r1, [pc, #384]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800126e:	4b5f      	ldr	r3, [pc, #380]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	495b      	ldr	r1, [pc, #364]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800127e:	4313      	orrs	r3, r2
 8001280:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	4618      	mov	r0, r3
 800128e:	f000 fd47 	bl	8001d20 <RCC_SetFlashLatencyFromMSIRange>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e343      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800129c:	f000 fc4a 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80012a0:	4602      	mov	r2, r0
 80012a2:	4b52      	ldr	r3, [pc, #328]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f003 030f 	and.w	r3, r3, #15
 80012ac:	4950      	ldr	r1, [pc, #320]	@ (80013f0 <HAL_RCC_OscConfig+0x274>)
 80012ae:	5ccb      	ldrb	r3, [r1, r3]
 80012b0:	f003 031f 	and.w	r3, r3, #31
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	4a4e      	ldr	r2, [pc, #312]	@ (80013f4 <HAL_RCC_OscConfig+0x278>)
 80012ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012bc:	4b4e      	ldr	r3, [pc, #312]	@ (80013f8 <HAL_RCC_OscConfig+0x27c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff fab7 	bl	8000834 <HAL_InitTick>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d052      	beq.n	8001376 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	e327      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d032      	beq.n	8001342 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012dc:	4b43      	ldr	r3, [pc, #268]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a42      	ldr	r2, [pc, #264]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80012e2:	f043 0301 	orr.w	r3, r3, #1
 80012e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012e8:	f7ff fc34 	bl	8000b54 <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc30 	bl	8000b54 <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e310      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001302:	4b3a      	ldr	r3, [pc, #232]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130e:	4b37      	ldr	r3, [pc, #220]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a36      	ldr	r2, [pc, #216]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b34      	ldr	r3, [pc, #208]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4931      	ldr	r1, [pc, #196]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800132c:	4b2f      	ldr	r3, [pc, #188]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	69db      	ldr	r3, [r3, #28]
 8001338:	021b      	lsls	r3, r3, #8
 800133a:	492c      	ldr	r1, [pc, #176]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800133c:	4313      	orrs	r3, r2
 800133e:	604b      	str	r3, [r1, #4]
 8001340:	e01a      	b.n	8001378 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001342:	4b2a      	ldr	r3, [pc, #168]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a29      	ldr	r2, [pc, #164]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001348:	f023 0301 	bic.w	r3, r3, #1
 800134c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800134e:	f7ff fc01 	bl	8000b54 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001356:	f7ff fbfd 	bl	8000b54 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e2dd      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001368:	4b20      	ldr	r3, [pc, #128]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x1da>
 8001374:	e000      	b.n	8001378 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001376:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	2b00      	cmp	r3, #0
 8001382:	d074      	beq.n	800146e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b08      	cmp	r3, #8
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x21a>
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d10e      	bne.n	80013ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d10b      	bne.n	80013ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001396:	4b15      	ldr	r3, [pc, #84]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d064      	beq.n	800146c <HAL_RCC_OscConfig+0x2f0>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d160      	bne.n	800146c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e2ba      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b6:	d106      	bne.n	80013c6 <HAL_RCC_OscConfig+0x24a>
 80013b8:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0b      	ldr	r2, [pc, #44]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	e026      	b.n	8001414 <HAL_RCC_OscConfig+0x298>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ce:	d115      	bne.n	80013fc <HAL_RCC_OscConfig+0x280>
 80013d0:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a05      	ldr	r2, [pc, #20]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013da:	6013      	str	r3, [r2, #0]
 80013dc:	4b03      	ldr	r3, [pc, #12]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a02      	ldr	r2, [pc, #8]	@ (80013ec <HAL_RCC_OscConfig+0x270>)
 80013e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	e014      	b.n	8001414 <HAL_RCC_OscConfig+0x298>
 80013ea:	bf00      	nop
 80013ec:	40021000 	.word	0x40021000
 80013f0:	080066c8 	.word	0x080066c8
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004
 80013fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a9f      	ldr	r2, [pc, #636]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b9d      	ldr	r3, [pc, #628]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a9c      	ldr	r2, [pc, #624]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800140e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d013      	beq.n	8001444 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800141c:	f7ff fb9a 	bl	8000b54 <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001424:	f7ff fb96 	bl	8000b54 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b64      	cmp	r3, #100	@ 0x64
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e276      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001436:	4b92      	ldr	r3, [pc, #584]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d0f0      	beq.n	8001424 <HAL_RCC_OscConfig+0x2a8>
 8001442:	e014      	b.n	800146e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fb86 	bl	8000b54 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800144c:	f7ff fb82 	bl	8000b54 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b64      	cmp	r3, #100	@ 0x64
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e262      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800145e:	4b88      	ldr	r3, [pc, #544]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x2d0>
 800146a:	e000      	b.n	800146e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d060      	beq.n	800153c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	2b04      	cmp	r3, #4
 800147e:	d005      	beq.n	800148c <HAL_RCC_OscConfig+0x310>
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2b0c      	cmp	r3, #12
 8001484:	d119      	bne.n	80014ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d116      	bne.n	80014ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800148c:	4b7c      	ldr	r3, [pc, #496]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001494:	2b00      	cmp	r3, #0
 8001496:	d005      	beq.n	80014a4 <HAL_RCC_OscConfig+0x328>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d101      	bne.n	80014a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e23f      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a4:	4b76      	ldr	r3, [pc, #472]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	061b      	lsls	r3, r3, #24
 80014b2:	4973      	ldr	r1, [pc, #460]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b8:	e040      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d023      	beq.n	800150a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c2:	4b6f      	ldr	r3, [pc, #444]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a6e      	ldr	r2, [pc, #440]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fb41 	bl	8000b54 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fb3d 	bl	8000b54 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e21d      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014e8:	4b65      	ldr	r3, [pc, #404]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b62      	ldr	r3, [pc, #392]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	061b      	lsls	r3, r3, #24
 8001502:	495f      	ldr	r1, [pc, #380]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001504:	4313      	orrs	r3, r2
 8001506:	604b      	str	r3, [r1, #4]
 8001508:	e018      	b.n	800153c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b5d      	ldr	r3, [pc, #372]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a5c      	ldr	r2, [pc, #368]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001510:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001514:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001516:	f7ff fb1d 	bl	8000b54 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800151e:	f7ff fb19 	bl	8000b54 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1f9      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001530:	4b53      	ldr	r3, [pc, #332]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f0      	bne.n	800151e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d03c      	beq.n	80015c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d01c      	beq.n	800158a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001550:	4b4b      	ldr	r3, [pc, #300]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001552:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001556:	4a4a      	ldr	r2, [pc, #296]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff faf8 	bl	8000b54 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff faf4 	bl	8000b54 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e1d4      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800157a:	4b41      	ldr	r3, [pc, #260]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800157c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0ef      	beq.n	8001568 <HAL_RCC_OscConfig+0x3ec>
 8001588:	e01b      	b.n	80015c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001590:	4a3b      	ldr	r2, [pc, #236]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159a:	f7ff fadb 	bl	8000b54 <HAL_GetTick>
 800159e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a0:	e008      	b.n	80015b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a2:	f7ff fad7 	bl	8000b54 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d901      	bls.n	80015b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e1b7      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015b4:	4b32      	ldr	r3, [pc, #200]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ef      	bne.n	80015a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d0:	2300      	movs	r3, #0
 80015d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d10d      	bne.n	80015fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e0:	4b27      	ldr	r3, [pc, #156]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e4:	4a26      	ldr	r2, [pc, #152]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ec:	4b24      	ldr	r3, [pc, #144]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 80015ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015f8:	2301      	movs	r3, #1
 80015fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fc:	4b21      	ldr	r3, [pc, #132]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001604:	2b00      	cmp	r3, #0
 8001606:	d118      	bne.n	800163a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001608:	4b1e      	ldr	r3, [pc, #120]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1d      	ldr	r2, [pc, #116]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 800160e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001612:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001614:	f7ff fa9e 	bl	8000b54 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800161c:	f7ff fa9a 	bl	8000b54 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e17a      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800162e:	4b15      	ldr	r3, [pc, #84]	@ (8001684 <HAL_RCC_OscConfig+0x508>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d108      	bne.n	8001654 <HAL_RCC_OscConfig+0x4d8>
 8001642:	4b0f      	ldr	r3, [pc, #60]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001648:	4a0d      	ldr	r2, [pc, #52]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001652:	e029      	b.n	80016a8 <HAL_RCC_OscConfig+0x52c>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	2b05      	cmp	r3, #5
 800165a:	d115      	bne.n	8001688 <HAL_RCC_OscConfig+0x50c>
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800165e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001662:	4a07      	ldr	r2, [pc, #28]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001664:	f043 0304 	orr.w	r3, r3, #4
 8001668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800166c:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001672:	4a03      	ldr	r2, [pc, #12]	@ (8001680 <HAL_RCC_OscConfig+0x504>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800167c:	e014      	b.n	80016a8 <HAL_RCC_OscConfig+0x52c>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	40007000 	.word	0x40007000
 8001688:	4b9c      	ldr	r3, [pc, #624]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a9b      	ldr	r2, [pc, #620]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001698:	4b98      	ldr	r3, [pc, #608]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800169a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800169e:	4a97      	ldr	r2, [pc, #604]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80016a0:	f023 0304 	bic.w	r3, r3, #4
 80016a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d016      	beq.n	80016de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b0:	f7ff fa50 	bl	8000b54 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fa4c 	bl	8000b54 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e12a      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ce:	4b8b      	ldr	r3, [pc, #556]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80016d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d0ed      	beq.n	80016b8 <HAL_RCC_OscConfig+0x53c>
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016de:	f7ff fa39 	bl	8000b54 <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016e4:	e00a      	b.n	80016fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e6:	f7ff fa35 	bl	8000b54 <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e113      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016fc:	4b7f      	ldr	r3, [pc, #508]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80016fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1ed      	bne.n	80016e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800170a:	7ffb      	ldrb	r3, [r7, #31]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d105      	bne.n	800171c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001710:	4b7a      	ldr	r3, [pc, #488]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001714:	4a79      	ldr	r2, [pc, #484]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001716:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800171a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	2b00      	cmp	r3, #0
 8001722:	f000 80fe 	beq.w	8001922 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172a:	2b02      	cmp	r3, #2
 800172c:	f040 80d0 	bne.w	80018d0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001730:	4b72      	ldr	r3, [pc, #456]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0203 	and.w	r2, r3, #3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001740:	429a      	cmp	r2, r3
 8001742:	d130      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174e:	3b01      	subs	r3, #1
 8001750:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	429a      	cmp	r2, r3
 8001754:	d127      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001760:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d11f      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001770:	2a07      	cmp	r2, #7
 8001772:	bf14      	ite	ne
 8001774:	2201      	movne	r2, #1
 8001776:	2200      	moveq	r2, #0
 8001778:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800177a:	4293      	cmp	r3, r2
 800177c:	d113      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001788:	085b      	lsrs	r3, r3, #1
 800178a:	3b01      	subs	r3, #1
 800178c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d109      	bne.n	80017a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	085b      	lsrs	r3, r3, #1
 800179e:	3b01      	subs	r3, #1
 80017a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d06e      	beq.n	8001884 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	2b0c      	cmp	r3, #12
 80017aa:	d069      	beq.n	8001880 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017ac:	4b53      	ldr	r3, [pc, #332]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017b8:	4b50      	ldr	r3, [pc, #320]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0ad      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017c8:	4b4c      	ldr	r3, [pc, #304]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a4b      	ldr	r2, [pc, #300]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017d4:	f7ff f9be 	bl	8000b54 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff f9ba 	bl	8000b54 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e09a      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ee:	4b43      	ldr	r3, [pc, #268]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017fa:	4b40      	ldr	r3, [pc, #256]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b40      	ldr	r3, [pc, #256]	@ (8001900 <HAL_RCC_OscConfig+0x784>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800180a:	3a01      	subs	r2, #1
 800180c:	0112      	lsls	r2, r2, #4
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001814:	0212      	lsls	r2, r2, #8
 8001816:	4311      	orrs	r1, r2
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800181c:	0852      	lsrs	r2, r2, #1
 800181e:	3a01      	subs	r2, #1
 8001820:	0552      	lsls	r2, r2, #21
 8001822:	4311      	orrs	r1, r2
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001828:	0852      	lsrs	r2, r2, #1
 800182a:	3a01      	subs	r2, #1
 800182c:	0652      	lsls	r2, r2, #25
 800182e:	4311      	orrs	r1, r2
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001834:	0912      	lsrs	r2, r2, #4
 8001836:	0452      	lsls	r2, r2, #17
 8001838:	430a      	orrs	r2, r1
 800183a:	4930      	ldr	r1, [pc, #192]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800183c:	4313      	orrs	r3, r2
 800183e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001840:	4b2e      	ldr	r3, [pc, #184]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a2d      	ldr	r2, [pc, #180]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800184c:	4b2b      	ldr	r3, [pc, #172]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4a2a      	ldr	r2, [pc, #168]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001856:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001858:	f7ff f97c 	bl	8000b54 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff f978 	bl	8000b54 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e058      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800187e:	e050      	b.n	8001922 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e04f      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001884:	4b1d      	ldr	r3, [pc, #116]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d148      	bne.n	8001922 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001890:	4b1a      	ldr	r3, [pc, #104]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a19      	ldr	r2, [pc, #100]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 8001896:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800189a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800189c:	4b17      	ldr	r3, [pc, #92]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	4a16      	ldr	r2, [pc, #88]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018a6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018a8:	f7ff f954 	bl	8000b54 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f950 	bl	8000b54 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e030      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x734>
 80018ce:	e028      	b.n	8001922 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	2b0c      	cmp	r3, #12
 80018d4:	d023      	beq.n	800191e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b09      	ldr	r3, [pc, #36]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a08      	ldr	r2, [pc, #32]	@ (80018fc <HAL_RCC_OscConfig+0x780>)
 80018dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e2:	f7ff f937 	bl	8000b54 <HAL_GetTick>
 80018e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e8:	e00c      	b.n	8001904 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ea:	f7ff f933 	bl	8000b54 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d905      	bls.n	8001904 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018f8:	2303      	movs	r3, #3
 80018fa:	e013      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
 80018fc:	40021000 	.word	0x40021000
 8001900:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	4b09      	ldr	r3, [pc, #36]	@ (800192c <HAL_RCC_OscConfig+0x7b0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ec      	bne.n	80018ea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001910:	4b06      	ldr	r3, [pc, #24]	@ (800192c <HAL_RCC_OscConfig+0x7b0>)
 8001912:	68da      	ldr	r2, [r3, #12]
 8001914:	4905      	ldr	r1, [pc, #20]	@ (800192c <HAL_RCC_OscConfig+0x7b0>)
 8001916:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <HAL_RCC_OscConfig+0x7b4>)
 8001918:	4013      	ands	r3, r2
 800191a:	60cb      	str	r3, [r1, #12]
 800191c:	e001      	b.n	8001922 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e000      	b.n	8001924 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001922:	2300      	movs	r3, #0
}
 8001924:	4618      	mov	r0, r3
 8001926:	3720      	adds	r7, #32
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40021000 	.word	0x40021000
 8001930:	feeefffc 	.word	0xfeeefffc

08001934 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e0e7      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001948:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d910      	bls.n	8001978 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b72      	ldr	r3, [pc, #456]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4970      	ldr	r1, [pc, #448]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b6e      	ldr	r3, [pc, #440]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e0cf      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0302 	and.w	r3, r3, #2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d010      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689a      	ldr	r2, [r3, #8]
 8001988:	4b66      	ldr	r3, [pc, #408]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001990:	429a      	cmp	r2, r3
 8001992:	d908      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b63      	ldr	r3, [pc, #396]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	4960      	ldr	r1, [pc, #384]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04c      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b03      	cmp	r3, #3
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d121      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e0a6      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019d2:	4b54      	ldr	r3, [pc, #336]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d115      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e09a      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d109      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e08e      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019fa:	4b4a      	ldr	r3, [pc, #296]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d101      	bne.n	8001a0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e086      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0a:	4b46      	ldr	r3, [pc, #280]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f023 0203 	bic.w	r2, r3, #3
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4943      	ldr	r1, [pc, #268]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a1c:	f7ff f89a 	bl	8000b54 <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	e00a      	b.n	8001a3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a24:	f7ff f896 	bl	8000b54 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e06e      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 020c 	and.w	r2, r3, #12
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d1eb      	bne.n	8001a24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d010      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b31      	ldr	r3, [pc, #196]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d208      	bcs.n	8001a7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	492b      	ldr	r1, [pc, #172]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7a:	4b29      	ldr	r3, [pc, #164]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d210      	bcs.n	8001aaa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f023 0207 	bic.w	r2, r3, #7
 8001a90:	4923      	ldr	r1, [pc, #140]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <HAL_RCC_ClockConfig+0x1ec>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d001      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e036      	b.n	8001b18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d008      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	4918      	ldr	r1, [pc, #96]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0308 	and.w	r3, r3, #8
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d009      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ad4:	4b13      	ldr	r3, [pc, #76]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4910      	ldr	r1, [pc, #64]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ae8:	f000 f824 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001aec:	4602      	mov	r2, r0
 8001aee:	4b0d      	ldr	r3, [pc, #52]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f0>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	091b      	lsrs	r3, r3, #4
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	490b      	ldr	r1, [pc, #44]	@ (8001b28 <HAL_RCC_ClockConfig+0x1f4>)
 8001afa:	5ccb      	ldrb	r3, [r1, r3]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	fa22 f303 	lsr.w	r3, r2, r3
 8001b04:	4a09      	ldr	r2, [pc, #36]	@ (8001b2c <HAL_RCC_ClockConfig+0x1f8>)
 8001b06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b08:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_RCC_ClockConfig+0x1fc>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7fe fe91 	bl	8000834 <HAL_InitTick>
 8001b12:	4603      	mov	r3, r0
 8001b14:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b16:	7afb      	ldrb	r3, [r7, #11]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40022000 	.word	0x40022000
 8001b24:	40021000 	.word	0x40021000
 8001b28:	080066c8 	.word	0x080066c8
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b089      	sub	sp, #36	@ 0x24
 8001b38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b42:	4b3e      	ldr	r3, [pc, #248]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
 8001b4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b4c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d005      	beq.n	8001b68 <HAL_RCC_GetSysClockFreq+0x34>
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b0c      	cmp	r3, #12
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d11e      	bne.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b68:	4b34      	ldr	r3, [pc, #208]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b74:	4b31      	ldr	r3, [pc, #196]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b7a:	0a1b      	lsrs	r3, r3, #8
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	61fb      	str	r3, [r7, #28]
 8001b82:	e005      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b84:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b90:	4a2b      	ldr	r2, [pc, #172]	@ (8001c40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d10d      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba4:	e00a      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d102      	bne.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bac:	4b25      	ldr	r3, [pc, #148]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	e004      	b.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d101      	bne.n	8001bbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb8:	4b23      	ldr	r3, [pc, #140]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d134      	bne.n	8001c2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d003      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0xa6>
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d003      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0xac>
 8001bd8:	e005      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	@ (8001c44 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bdc:	617b      	str	r3, [r7, #20]
      break;
 8001bde:	e005      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001be0:	4b19      	ldr	r3, [pc, #100]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x114>)
 8001be2:	617b      	str	r3, [r7, #20]
      break;
 8001be4:	e002      	b.n	8001bec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	617b      	str	r3, [r7, #20]
      break;
 8001bea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	091b      	lsrs	r3, r3, #4
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	0a1b      	lsrs	r3, r3, #8
 8001c00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c04:	697a      	ldr	r2, [r7, #20]
 8001c06:	fb03 f202 	mul.w	r2, r3, r2
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	0e5b      	lsrs	r3, r3, #25
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c2c:	69bb      	ldr	r3, [r7, #24]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	@ 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	080066e0 	.word	0x080066e0
 8001c44:	00f42400 	.word	0x00f42400
 8001c48:	007a1200 	.word	0x007a1200

08001c4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000000 	.word	0x20000000

08001c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c68:	f7ff fff0 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	0a1b      	lsrs	r3, r3, #8
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	4904      	ldr	r1, [pc, #16]	@ (8001c8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7a:	5ccb      	ldrb	r3, [r1, r3]
 8001c7c:	f003 031f 	and.w	r3, r3, #31
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	080066d8 	.word	0x080066d8

08001c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c94:	f7ff ffda 	bl	8001c4c <HAL_RCC_GetHCLKFreq>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	0adb      	lsrs	r3, r3, #11
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	4904      	ldr	r1, [pc, #16]	@ (8001cb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ca6:	5ccb      	ldrb	r3, [r1, r3]
 8001ca8:	f003 031f 	and.w	r3, r3, #31
 8001cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080066d8 	.word	0x080066d8

08001cbc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	220f      	movs	r2, #15
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001ccc:	4b12      	ldr	r3, [pc, #72]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 0203 	and.w	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <HAL_RCC_GetClockConfig+0x5c>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	08db      	lsrs	r3, r3, #3
 8001cf6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cfe:	4b07      	ldr	r3, [pc, #28]	@ (8001d1c <HAL_RCC_GetClockConfig+0x60>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0207 	and.w	r2, r3, #7
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	601a      	str	r2, [r3, #0]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40022000 	.word	0x40022000

08001d20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d28:	2300      	movs	r3, #0
 8001d2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d38:	f7ff f9bc 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 8001d3c:	6178      	str	r0, [r7, #20]
 8001d3e:	e014      	b.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b25      	ldr	r3, [pc, #148]	@ (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d44:	4a24      	ldr	r2, [pc, #144]	@ (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4c:	4b22      	ldr	r3, [pc, #136]	@ (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d54:	60fb      	str	r3, [r7, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d58:	f7ff f9ac 	bl	80010b4 <HAL_PWREx_GetVoltageRange>
 8001d5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d62:	4a1d      	ldr	r2, [pc, #116]	@ (8001dd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d70:	d10b      	bne.n	8001d8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2b80      	cmp	r3, #128	@ 0x80
 8001d76:	d919      	bls.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d7c:	d902      	bls.n	8001d84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d7e:	2302      	movs	r3, #2
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	e013      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d84:	2301      	movs	r3, #1
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	e010      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b80      	cmp	r3, #128	@ 0x80
 8001d8e:	d902      	bls.n	8001d96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d90:	2303      	movs	r3, #3
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e00a      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b80      	cmp	r3, #128	@ 0x80
 8001d9a:	d102      	bne.n	8001da2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e004      	b.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2b70      	cmp	r3, #112	@ 0x70
 8001da6:	d101      	bne.n	8001dac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001da8:	2301      	movs	r3, #1
 8001daa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 0207 	bic.w	r2, r3, #7
 8001db4:	4909      	ldr	r1, [pc, #36]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001dbc:	4b07      	ldr	r3, [pc, #28]	@ (8001ddc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40022000 	.word	0x40022000

08001de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001de8:	2300      	movs	r3, #0
 8001dea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dec:	2300      	movs	r3, #0
 8001dee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d041      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e00:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e04:	d02a      	beq.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001e06:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001e0a:	d824      	bhi.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e0c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e10:	d008      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e12:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001e16:	d81e      	bhi.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d00a      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001e1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e20:	d010      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e22:	e018      	b.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e24:	4b86      	ldr	r3, [pc, #536]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a85      	ldr	r2, [pc, #532]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e30:	e015      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fabb 	bl	80023b4 <RCCEx_PLLSAI1_Config>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e42:	e00c      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3320      	adds	r3, #32
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fba6 	bl	800259c <RCCEx_PLLSAI2_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e54:	e003      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	74fb      	strb	r3, [r7, #19]
      break;
 8001e5a:	e000      	b.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e5e:	7cfb      	ldrb	r3, [r7, #19]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e64:	4b76      	ldr	r3, [pc, #472]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e72:	4973      	ldr	r1, [pc, #460]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e7a:	e001      	b.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e7c:	7cfb      	ldrb	r3, [r7, #19]
 8001e7e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d041      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e90:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e94:	d02a      	beq.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e96:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e9c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ea0:	d008      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001ea2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001ea6:	d81e      	bhi.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb0:	d010      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001eb2:	e018      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001eb4:	4b62      	ldr	r3, [pc, #392]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4a61      	ldr	r2, [pc, #388]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec0:	e015      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f000 fa73 	bl	80023b4 <RCCEx_PLLSAI1_Config>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ed2:	e00c      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3320      	adds	r3, #32
 8001ed8:	2100      	movs	r1, #0
 8001eda:	4618      	mov	r0, r3
 8001edc:	f000 fb5e 	bl	800259c <RCCEx_PLLSAI2_Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ee4:	e003      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eea:	e000      	b.n	8001eee <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001eee:	7cfb      	ldrb	r3, [r7, #19]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d10b      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ef4:	4b52      	ldr	r3, [pc, #328]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001efa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001f02:	494f      	ldr	r1, [pc, #316]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001f0a:	e001      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80a0 	beq.w	800205e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f22:	4b47      	ldr	r3, [pc, #284]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00d      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f38:	4b41      	ldr	r3, [pc, #260]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3c:	4a40      	ldr	r2, [pc, #256]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f42:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f44:	4b3e      	ldr	r3, [pc, #248]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4c:	60bb      	str	r3, [r7, #8]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f54:	4b3b      	ldr	r3, [pc, #236]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a3a      	ldr	r2, [pc, #232]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f60:	f7fe fdf8 	bl	8000b54 <HAL_GetTick>
 8001f64:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f66:	e009      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f68:	f7fe fdf4 	bl	8000b54 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d902      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	74fb      	strb	r3, [r7, #19]
        break;
 8001f7a:	e005      	b.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f7c:	4b31      	ldr	r3, [pc, #196]	@ (8002044 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d0ef      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d15c      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f98:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01f      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d019      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fac:	4b24      	ldr	r3, [pc, #144]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fb6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb8:	4b21      	ldr	r3, [pc, #132]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fbe:	4a20      	ldr	r2, [pc, #128]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fce:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fd8:	4a19      	ldr	r2, [pc, #100]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d016      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fdb3 	bl	8000b54 <HAL_GetTick>
 8001fee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff0:	e00b      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe fdaf 	bl	8000b54 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d902      	bls.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	74fb      	strb	r3, [r7, #19]
            break;
 8002008:	e006      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200a:	4b0d      	ldr	r3, [pc, #52]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0ec      	beq.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002024:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800202e:	4904      	ldr	r1, [pc, #16]	@ (8002040 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002030:	4313      	orrs	r3, r2
 8002032:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002036:	e009      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002038:	7cfb      	ldrb	r3, [r7, #19]
 800203a:	74bb      	strb	r3, [r7, #18]
 800203c:	e006      	b.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800203e:	bf00      	nop
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002048:	7cfb      	ldrb	r3, [r7, #19]
 800204a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204c:	7c7b      	ldrb	r3, [r7, #17]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b9e      	ldr	r3, [pc, #632]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	4a9d      	ldr	r2, [pc, #628]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800206a:	4b98      	ldr	r3, [pc, #608]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002070:	f023 0203 	bic.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002078:	4994      	ldr	r1, [pc, #592]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207a:	4313      	orrs	r3, r2
 800207c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800208c:	4b8f      	ldr	r3, [pc, #572]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002092:	f023 020c 	bic.w	r2, r3, #12
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209a:	498c      	ldr	r1, [pc, #560]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80020ae:	4b87      	ldr	r3, [pc, #540]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4983      	ldr	r1, [pc, #524]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020d0:	4b7e      	ldr	r3, [pc, #504]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	497b      	ldr	r1, [pc, #492]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00a      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020f2:	4b76      	ldr	r3, [pc, #472]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002100:	4972      	ldr	r1, [pc, #456]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0320 	and.w	r3, r3, #32
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002114:	4b6d      	ldr	r3, [pc, #436]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	496a      	ldr	r1, [pc, #424]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002136:	4b65      	ldr	r3, [pc, #404]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002138:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002144:	4961      	ldr	r1, [pc, #388]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002146:	4313      	orrs	r3, r2
 8002148:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00a      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002158:	4b5c      	ldr	r3, [pc, #368]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002166:	4959      	ldr	r1, [pc, #356]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002168:	4313      	orrs	r3, r2
 800216a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217a:	4b54      	ldr	r3, [pc, #336]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002180:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002188:	4950      	ldr	r1, [pc, #320]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800219c:	4b4b      	ldr	r3, [pc, #300]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021aa:	4948      	ldr	r1, [pc, #288]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00a      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80021be:	4b43      	ldr	r3, [pc, #268]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021cc:	493f      	ldr	r1, [pc, #252]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d028      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021e0:	4b3a      	ldr	r3, [pc, #232]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ee:	4937      	ldr	r1, [pc, #220]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021fe:	d106      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002200:	4b32      	ldr	r3, [pc, #200]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a31      	ldr	r2, [pc, #196]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800220a:	60d3      	str	r3, [r2, #12]
 800220c:	e011      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002212:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002216:	d10c      	bne.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3304      	adds	r3, #4
 800221c:	2101      	movs	r1, #1
 800221e:	4618      	mov	r0, r3
 8002220:	f000 f8c8 	bl	80023b4 <RCCEx_PLLSAI1_Config>
 8002224:	4603      	mov	r3, r0
 8002226:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800222e:	7cfb      	ldrb	r3, [r7, #19]
 8002230:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d028      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800223e:	4b23      	ldr	r3, [pc, #140]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002244:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	491f      	ldr	r1, [pc, #124]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800224e:	4313      	orrs	r3, r2
 8002250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800225c:	d106      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800225e:	4b1b      	ldr	r3, [pc, #108]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	4a1a      	ldr	r2, [pc, #104]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002268:	60d3      	str	r3, [r2, #12]
 800226a:	e011      	b.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002270:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002274:	d10c      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3304      	adds	r3, #4
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f899 	bl	80023b4 <RCCEx_PLLSAI1_Config>
 8002282:	4603      	mov	r3, r0
 8002284:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002286:	7cfb      	ldrb	r3, [r7, #19]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800228c:	7cfb      	ldrb	r3, [r7, #19]
 800228e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d02b      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800229c:	4b0b      	ldr	r3, [pc, #44]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022aa:	4908      	ldr	r1, [pc, #32]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ba:	d109      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022bc:	4b03      	ldr	r3, [pc, #12]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4a02      	ldr	r2, [pc, #8]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022c6:	60d3      	str	r3, [r2, #12]
 80022c8:	e014      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022ca:	bf00      	nop
 80022cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3304      	adds	r3, #4
 80022de:	2101      	movs	r1, #1
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 f867 	bl	80023b4 <RCCEx_PLLSAI1_Config>
 80022e6:	4603      	mov	r3, r0
 80022e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d02f      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002300:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002306:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800230e:	4928      	ldr	r1, [pc, #160]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800231a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800231e:	d10d      	bne.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
 8002324:	2102      	movs	r1, #2
 8002326:	4618      	mov	r0, r3
 8002328:	f000 f844 	bl	80023b4 <RCCEx_PLLSAI1_Config>
 800232c:	4603      	mov	r3, r0
 800232e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d014      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	74bb      	strb	r3, [r7, #18]
 800233a:	e011      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002340:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002344:	d10c      	bne.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3320      	adds	r3, #32
 800234a:	2102      	movs	r1, #2
 800234c:	4618      	mov	r0, r3
 800234e:	f000 f925 	bl	800259c <RCCEx_PLLSAI2_Config>
 8002352:	4603      	mov	r3, r0
 8002354:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002356:	7cfb      	ldrb	r3, [r7, #19]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800235c:	7cfb      	ldrb	r3, [r7, #19]
 800235e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00a      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800236c:	4b10      	ldr	r3, [pc, #64]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002372:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800237a:	490d      	ldr	r1, [pc, #52]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800237c:	4313      	orrs	r3, r2
 800237e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00b      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800238e:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002394:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800239e:	4904      	ldr	r1, [pc, #16]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000

080023b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023c2:	4b75      	ldr	r3, [pc, #468]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d018      	beq.n	8002400 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ce:	4b72      	ldr	r3, [pc, #456]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0203 	and.w	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d10d      	bne.n	80023fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
       ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d009      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023e6:	4b6c      	ldr	r3, [pc, #432]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
       ||
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d047      	beq.n	800248a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	73fb      	strb	r3, [r7, #15]
 80023fe:	e044      	b.n	800248a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d018      	beq.n	800243a <RCCEx_PLLSAI1_Config+0x86>
 8002408:	2b03      	cmp	r3, #3
 800240a:	d825      	bhi.n	8002458 <RCCEx_PLLSAI1_Config+0xa4>
 800240c:	2b01      	cmp	r3, #1
 800240e:	d002      	beq.n	8002416 <RCCEx_PLLSAI1_Config+0x62>
 8002410:	2b02      	cmp	r3, #2
 8002412:	d009      	beq.n	8002428 <RCCEx_PLLSAI1_Config+0x74>
 8002414:	e020      	b.n	8002458 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002416:	4b60      	ldr	r3, [pc, #384]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d11d      	bne.n	800245e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002426:	e01a      	b.n	800245e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002428:	4b5b      	ldr	r3, [pc, #364]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d116      	bne.n	8002462 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002438:	e013      	b.n	8002462 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800243a:	4b57      	ldr	r3, [pc, #348]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10f      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002446:	4b54      	ldr	r3, [pc, #336]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002456:	e006      	b.n	8002466 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e004      	b.n	8002468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800245e:	bf00      	nop
 8002460:	e002      	b.n	8002468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002466:	bf00      	nop
    }

    if(status == HAL_OK)
 8002468:	7bfb      	ldrb	r3, [r7, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800246e:	4b4a      	ldr	r3, [pc, #296]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	3b01      	subs	r3, #1
 8002480:	011b      	lsls	r3, r3, #4
 8002482:	430b      	orrs	r3, r1
 8002484:	4944      	ldr	r1, [pc, #272]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002486:	4313      	orrs	r3, r2
 8002488:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d17d      	bne.n	800258c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002490:	4b41      	ldr	r3, [pc, #260]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a40      	ldr	r2, [pc, #256]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002496:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800249a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249c:	f7fe fb5a 	bl	8000b54 <HAL_GetTick>
 80024a0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024a2:	e009      	b.n	80024b8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a4:	f7fe fb56 	bl	8000b54 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d902      	bls.n	80024b8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	73fb      	strb	r3, [r7, #15]
        break;
 80024b6:	e005      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024b8:	4b37      	ldr	r3, [pc, #220]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1ef      	bne.n	80024a4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d160      	bne.n	800258c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d111      	bne.n	80024f4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d0:	4b31      	ldr	r3, [pc, #196]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	691b      	ldr	r3, [r3, #16]
 80024d4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6892      	ldr	r2, [r2, #8]
 80024e0:	0211      	lsls	r1, r2, #8
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68d2      	ldr	r2, [r2, #12]
 80024e6:	0912      	lsrs	r2, r2, #4
 80024e8:	0452      	lsls	r2, r2, #17
 80024ea:	430a      	orrs	r2, r1
 80024ec:	492a      	ldr	r1, [pc, #168]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	610b      	str	r3, [r1, #16]
 80024f2:	e027      	b.n	8002544 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d112      	bne.n	8002520 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024fa:	4b27      	ldr	r3, [pc, #156]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002502:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6892      	ldr	r2, [r2, #8]
 800250a:	0211      	lsls	r1, r2, #8
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6912      	ldr	r2, [r2, #16]
 8002510:	0852      	lsrs	r2, r2, #1
 8002512:	3a01      	subs	r2, #1
 8002514:	0552      	lsls	r2, r2, #21
 8002516:	430a      	orrs	r2, r1
 8002518:	491f      	ldr	r1, [pc, #124]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800251a:	4313      	orrs	r3, r2
 800251c:	610b      	str	r3, [r1, #16]
 800251e:	e011      	b.n	8002544 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002520:	4b1d      	ldr	r3, [pc, #116]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002528:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6892      	ldr	r2, [r2, #8]
 8002530:	0211      	lsls	r1, r2, #8
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	6952      	ldr	r2, [r2, #20]
 8002536:	0852      	lsrs	r2, r2, #1
 8002538:	3a01      	subs	r2, #1
 800253a:	0652      	lsls	r2, r2, #25
 800253c:	430a      	orrs	r2, r1
 800253e:	4916      	ldr	r1, [pc, #88]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002544:	4b14      	ldr	r3, [pc, #80]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a13      	ldr	r2, [pc, #76]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800254e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fb00 	bl	8000b54 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002556:	e009      	b.n	800256c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002558:	f7fe fafc 	bl	8000b54 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d902      	bls.n	800256c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	73fb      	strb	r3, [r7, #15]
          break;
 800256a:	e005      	b.n	8002578 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800256c:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ef      	beq.n	8002558 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002578:	7bfb      	ldrb	r3, [r7, #15]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002580:	691a      	ldr	r2, [r3, #16]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	4904      	ldr	r1, [pc, #16]	@ (8002598 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800258c:	7bfb      	ldrb	r3, [r7, #15]
}
 800258e:	4618      	mov	r0, r3
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025aa:	4b6a      	ldr	r3, [pc, #424]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d018      	beq.n	80025e8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80025b6:	4b67      	ldr	r3, [pc, #412]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f003 0203 	and.w	r2, r3, #3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d10d      	bne.n	80025e2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
       ||
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d009      	beq.n	80025e2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025ce:	4b61      	ldr	r3, [pc, #388]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
       ||
 80025de:	429a      	cmp	r2, r3
 80025e0:	d047      	beq.n	8002672 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e044      	b.n	8002672 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d018      	beq.n	8002622 <RCCEx_PLLSAI2_Config+0x86>
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d825      	bhi.n	8002640 <RCCEx_PLLSAI2_Config+0xa4>
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d002      	beq.n	80025fe <RCCEx_PLLSAI2_Config+0x62>
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d009      	beq.n	8002610 <RCCEx_PLLSAI2_Config+0x74>
 80025fc:	e020      	b.n	8002640 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025fe:	4b55      	ldr	r3, [pc, #340]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d11d      	bne.n	8002646 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800260e:	e01a      	b.n	8002646 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002610:	4b50      	ldr	r3, [pc, #320]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d116      	bne.n	800264a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002620:	e013      	b.n	800264a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002622:	4b4c      	ldr	r3, [pc, #304]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10f      	bne.n	800264e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800262e:	4b49      	ldr	r3, [pc, #292]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800263e:	e006      	b.n	800264e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	73fb      	strb	r3, [r7, #15]
      break;
 8002644:	e004      	b.n	8002650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002646:	bf00      	nop
 8002648:	e002      	b.n	8002650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800264a:	bf00      	nop
 800264c:	e000      	b.n	8002650 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800264e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d10d      	bne.n	8002672 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002656:	4b3f      	ldr	r3, [pc, #252]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6819      	ldr	r1, [r3, #0]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	430b      	orrs	r3, r1
 800266c:	4939      	ldr	r1, [pc, #228]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002672:	7bfb      	ldrb	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d167      	bne.n	8002748 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002678:	4b36      	ldr	r3, [pc, #216]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a35      	ldr	r2, [pc, #212]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800267e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002682:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002684:	f7fe fa66 	bl	8000b54 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800268a:	e009      	b.n	80026a0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800268c:	f7fe fa62 	bl	8000b54 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d902      	bls.n	80026a0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	73fb      	strb	r3, [r7, #15]
        break;
 800269e:	e005      	b.n	80026ac <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80026a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ef      	bne.n	800268c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d14a      	bne.n	8002748 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d111      	bne.n	80026dc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026b8:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	6892      	ldr	r2, [r2, #8]
 80026c8:	0211      	lsls	r1, r2, #8
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68d2      	ldr	r2, [r2, #12]
 80026ce:	0912      	lsrs	r2, r2, #4
 80026d0:	0452      	lsls	r2, r2, #17
 80026d2:	430a      	orrs	r2, r1
 80026d4:	491f      	ldr	r1, [pc, #124]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	614b      	str	r3, [r1, #20]
 80026da:	e011      	b.n	8002700 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026e4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6892      	ldr	r2, [r2, #8]
 80026ec:	0211      	lsls	r1, r2, #8
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6912      	ldr	r2, [r2, #16]
 80026f2:	0852      	lsrs	r2, r2, #1
 80026f4:	3a01      	subs	r2, #1
 80026f6:	0652      	lsls	r2, r2, #25
 80026f8:	430a      	orrs	r2, r1
 80026fa:	4916      	ldr	r1, [pc, #88]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a13      	ldr	r2, [pc, #76]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002706:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800270a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7fe fa22 	bl	8000b54 <HAL_GetTick>
 8002710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002712:	e009      	b.n	8002728 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002714:	f7fe fa1e 	bl	8000b54 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	73fb      	strb	r3, [r7, #15]
          break;
 8002726:	e005      	b.n	8002734 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002728:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ef      	beq.n	8002714 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002734:	7bfb      	ldrb	r3, [r7, #15]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d106      	bne.n	8002748 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 800273c:	695a      	ldr	r2, [r3, #20]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	4904      	ldr	r1, [pc, #16]	@ (8002754 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40021000 	.word	0x40021000

08002758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d101      	bne.n	800276a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e049      	b.n	80027fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f841 	bl	8002806 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f000 f9e0 	bl	8002b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2201      	movs	r2, #1
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b01      	cmp	r3, #1
 800282e:	d001      	beq.n	8002834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e04f      	b.n	80028d4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68da      	ldr	r2, [r3, #12]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0201 	orr.w	r2, r2, #1
 800284a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a23      	ldr	r2, [pc, #140]	@ (80028e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d01d      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x76>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800285e:	d018      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x76>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a1f      	ldr	r2, [pc, #124]	@ (80028e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x76>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a1e      	ldr	r2, [pc, #120]	@ (80028e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d00e      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x76>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a1c      	ldr	r2, [pc, #112]	@ (80028ec <HAL_TIM_Base_Start_IT+0xd0>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x76>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a1b      	ldr	r2, [pc, #108]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d004      	beq.n	8002892 <HAL_TIM_Base_Start_IT+0x76>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a19      	ldr	r2, [pc, #100]	@ (80028f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d115      	bne.n	80028be <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b17      	ldr	r3, [pc, #92]	@ (80028f8 <HAL_TIM_Base_Start_IT+0xdc>)
 800289a:	4013      	ands	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b06      	cmp	r3, #6
 80028a2:	d015      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0xb4>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028aa:	d011      	beq.n	80028d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f042 0201 	orr.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028bc:	e008      	b.n	80028d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f042 0201 	orr.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
 80028ce:	e000      	b.n	80028d2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	40012c00 	.word	0x40012c00
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40000800 	.word	0x40000800
 80028ec:	40000c00 	.word	0x40000c00
 80028f0:	40013400 	.word	0x40013400
 80028f4:	40014000 	.word	0x40014000
 80028f8:	00010007 	.word	0x00010007

080028fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0202 	mvn.w	r2, #2
 8002930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8e9 	bl	8002b1e <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f8db 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f8ec 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0204 	mvn.w	r2, #4
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f8c3 	bl	8002b1e <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f8b5 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 f8c6 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0308 	and.w	r3, r3, #8
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0208 	mvn.w	r2, #8
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f89d 	bl	8002b1e <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f000 f88f 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f8a0 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d020      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0310 	and.w	r3, r3, #16
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d01b      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0210 	mvn.w	r2, #16
 8002a14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2208      	movs	r2, #8
 8002a1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f877 	bl	8002b1e <HAL_TIM_IC_CaptureCallback>
 8002a30:	e005      	b.n	8002a3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f869 	bl	8002b0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f87a 	bl	8002b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0201 	mvn.w	r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fd fea6 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00c      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f913 	bl	8002cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00c      	beq.n	8002aba <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d007      	beq.n	8002aba <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f90b 	bl	8002cd0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d00c      	beq.n	8002ade <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f834 	bl	8002b46 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f003 0320 	and.w	r3, r3, #32
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d00c      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0320 	and.w	r3, r3, #32
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f06f 0220 	mvn.w	r2, #32
 8002afa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8d3 	bl	8002ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b02:	bf00      	nop
 8002b04:	3710      	adds	r7, #16
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b083      	sub	sp, #12
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b26:	bf00      	nop
 8002b28:	370c      	adds	r7, #12
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a46      	ldr	r2, [pc, #280]	@ (8002c88 <TIM_Base_SetConfig+0x12c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b7a:	d00f      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a43      	ldr	r2, [pc, #268]	@ (8002c8c <TIM_Base_SetConfig+0x130>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d00b      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a42      	ldr	r2, [pc, #264]	@ (8002c90 <TIM_Base_SetConfig+0x134>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d007      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a41      	ldr	r2, [pc, #260]	@ (8002c94 <TIM_Base_SetConfig+0x138>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d003      	beq.n	8002b9c <TIM_Base_SetConfig+0x40>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	4a40      	ldr	r2, [pc, #256]	@ (8002c98 <TIM_Base_SetConfig+0x13c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d108      	bne.n	8002bae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a35      	ldr	r2, [pc, #212]	@ (8002c88 <TIM_Base_SetConfig+0x12c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01f      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbc:	d01b      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a32      	ldr	r2, [pc, #200]	@ (8002c8c <TIM_Base_SetConfig+0x130>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d017      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a31      	ldr	r2, [pc, #196]	@ (8002c90 <TIM_Base_SetConfig+0x134>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d013      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a30      	ldr	r2, [pc, #192]	@ (8002c94 <TIM_Base_SetConfig+0x138>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d00f      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c98 <TIM_Base_SetConfig+0x13c>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00b      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <TIM_Base_SetConfig+0x140>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d007      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca0 <TIM_Base_SetConfig+0x144>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d003      	beq.n	8002bf6 <TIM_Base_SetConfig+0x9a>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca4 <TIM_Base_SetConfig+0x148>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d108      	bne.n	8002c08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68fa      	ldr	r2, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a16      	ldr	r2, [pc, #88]	@ (8002c88 <TIM_Base_SetConfig+0x12c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d00f      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a18      	ldr	r2, [pc, #96]	@ (8002c98 <TIM_Base_SetConfig+0x13c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d00b      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a17      	ldr	r2, [pc, #92]	@ (8002c9c <TIM_Base_SetConfig+0x140>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d007      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a16      	ldr	r2, [pc, #88]	@ (8002ca0 <TIM_Base_SetConfig+0x144>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d003      	beq.n	8002c54 <TIM_Base_SetConfig+0xf8>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a15      	ldr	r2, [pc, #84]	@ (8002ca4 <TIM_Base_SetConfig+0x148>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d103      	bne.n	8002c5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d105      	bne.n	8002c7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f023 0201 	bic.w	r2, r3, #1
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	611a      	str	r2, [r3, #16]
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3714      	adds	r7, #20
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40012c00 	.word	0x40012c00
 8002c8c:	40000400 	.word	0x40000400
 8002c90:	40000800 	.word	0x40000800
 8002c94:	40000c00 	.word	0x40000c00
 8002c98:	40013400 	.word	0x40013400
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40014400 	.word	0x40014400
 8002ca4:	40014800 	.word	0x40014800

08002ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e040      	b.n	8002d78 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f7fd fe6a 	bl	80009e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2224      	movs	r2, #36	@ 0x24
 8002d10:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0201 	bic.w	r2, r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 fae0 	bl	80032f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f825 	bl	8002d80 <UART_SetConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e01b      	b.n	8002d78 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d4e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d5e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 fb5f 	bl	8003434 <UART_CheckIdleState>
 8002d76:	4603      	mov	r3, r0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3708      	adds	r7, #8
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b08a      	sub	sp, #40	@ 0x28
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	4ba4      	ldr	r3, [pc, #656]	@ (8003040 <UART_SetConfig+0x2c0>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	6812      	ldr	r2, [r2, #0]
 8002db6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	699b      	ldr	r3, [r3, #24]
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a99      	ldr	r2, [pc, #612]	@ (8003044 <UART_SetConfig+0x2c4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d004      	beq.n	8002dec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de8:	4313      	orrs	r3, r2
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a90      	ldr	r2, [pc, #576]	@ (8003048 <UART_SetConfig+0x2c8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d126      	bne.n	8002e58 <UART_SetConfig+0xd8>
 8002e0a:	4b90      	ldr	r3, [pc, #576]	@ (800304c <UART_SetConfig+0x2cc>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d81b      	bhi.n	8002e50 <UART_SetConfig+0xd0>
 8002e18:	a201      	add	r2, pc, #4	@ (adr r2, 8002e20 <UART_SetConfig+0xa0>)
 8002e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e1e:	bf00      	nop
 8002e20:	08002e31 	.word	0x08002e31
 8002e24:	08002e41 	.word	0x08002e41
 8002e28:	08002e39 	.word	0x08002e39
 8002e2c:	08002e49 	.word	0x08002e49
 8002e30:	2301      	movs	r3, #1
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e36:	e116      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3e:	e112      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e40:	2304      	movs	r3, #4
 8002e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e46:	e10e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e48:	2308      	movs	r3, #8
 8002e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e4e:	e10a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e50:	2310      	movs	r3, #16
 8002e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e56:	e106      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a7c      	ldr	r2, [pc, #496]	@ (8003050 <UART_SetConfig+0x2d0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d138      	bne.n	8002ed4 <UART_SetConfig+0x154>
 8002e62:	4b7a      	ldr	r3, [pc, #488]	@ (800304c <UART_SetConfig+0x2cc>)
 8002e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e68:	f003 030c 	and.w	r3, r3, #12
 8002e6c:	2b0c      	cmp	r3, #12
 8002e6e:	d82d      	bhi.n	8002ecc <UART_SetConfig+0x14c>
 8002e70:	a201      	add	r2, pc, #4	@ (adr r2, 8002e78 <UART_SetConfig+0xf8>)
 8002e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e76:	bf00      	nop
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002ecd 	.word	0x08002ecd
 8002e80:	08002ecd 	.word	0x08002ecd
 8002e84:	08002ecd 	.word	0x08002ecd
 8002e88:	08002ebd 	.word	0x08002ebd
 8002e8c:	08002ecd 	.word	0x08002ecd
 8002e90:	08002ecd 	.word	0x08002ecd
 8002e94:	08002ecd 	.word	0x08002ecd
 8002e98:	08002eb5 	.word	0x08002eb5
 8002e9c:	08002ecd 	.word	0x08002ecd
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08002ecd 	.word	0x08002ecd
 8002ea8:	08002ec5 	.word	0x08002ec5
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e0d8      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eba:	e0d4      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ec2:	e0d0      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eca:	e0cc      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ecc:	2310      	movs	r3, #16
 8002ece:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ed2:	e0c8      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a5e      	ldr	r2, [pc, #376]	@ (8003054 <UART_SetConfig+0x2d4>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d125      	bne.n	8002f2a <UART_SetConfig+0x1aa>
 8002ede:	4b5b      	ldr	r3, [pc, #364]	@ (800304c <UART_SetConfig+0x2cc>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ee8:	2b30      	cmp	r3, #48	@ 0x30
 8002eea:	d016      	beq.n	8002f1a <UART_SetConfig+0x19a>
 8002eec:	2b30      	cmp	r3, #48	@ 0x30
 8002eee:	d818      	bhi.n	8002f22 <UART_SetConfig+0x1a2>
 8002ef0:	2b20      	cmp	r3, #32
 8002ef2:	d00a      	beq.n	8002f0a <UART_SetConfig+0x18a>
 8002ef4:	2b20      	cmp	r3, #32
 8002ef6:	d814      	bhi.n	8002f22 <UART_SetConfig+0x1a2>
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d002      	beq.n	8002f02 <UART_SetConfig+0x182>
 8002efc:	2b10      	cmp	r3, #16
 8002efe:	d008      	beq.n	8002f12 <UART_SetConfig+0x192>
 8002f00:	e00f      	b.n	8002f22 <UART_SetConfig+0x1a2>
 8002f02:	2300      	movs	r3, #0
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f08:	e0ad      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f10:	e0a9      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f12:	2304      	movs	r3, #4
 8002f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f18:	e0a5      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f1a:	2308      	movs	r3, #8
 8002f1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f20:	e0a1      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f22:	2310      	movs	r3, #16
 8002f24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f28:	e09d      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a4a      	ldr	r2, [pc, #296]	@ (8003058 <UART_SetConfig+0x2d8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d125      	bne.n	8002f80 <UART_SetConfig+0x200>
 8002f34:	4b45      	ldr	r3, [pc, #276]	@ (800304c <UART_SetConfig+0x2cc>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f40:	d016      	beq.n	8002f70 <UART_SetConfig+0x1f0>
 8002f42:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f44:	d818      	bhi.n	8002f78 <UART_SetConfig+0x1f8>
 8002f46:	2b80      	cmp	r3, #128	@ 0x80
 8002f48:	d00a      	beq.n	8002f60 <UART_SetConfig+0x1e0>
 8002f4a:	2b80      	cmp	r3, #128	@ 0x80
 8002f4c:	d814      	bhi.n	8002f78 <UART_SetConfig+0x1f8>
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <UART_SetConfig+0x1d8>
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d008      	beq.n	8002f68 <UART_SetConfig+0x1e8>
 8002f56:	e00f      	b.n	8002f78 <UART_SetConfig+0x1f8>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5e:	e082      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f60:	2302      	movs	r3, #2
 8002f62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f66:	e07e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f6e:	e07a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f70:	2308      	movs	r3, #8
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f76:	e076      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f7e:	e072      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a35      	ldr	r2, [pc, #212]	@ (800305c <UART_SetConfig+0x2dc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d12a      	bne.n	8002fe0 <UART_SetConfig+0x260>
 8002f8a:	4b30      	ldr	r3, [pc, #192]	@ (800304c <UART_SetConfig+0x2cc>)
 8002f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f98:	d01a      	beq.n	8002fd0 <UART_SetConfig+0x250>
 8002f9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f9e:	d81b      	bhi.n	8002fd8 <UART_SetConfig+0x258>
 8002fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa4:	d00c      	beq.n	8002fc0 <UART_SetConfig+0x240>
 8002fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002faa:	d815      	bhi.n	8002fd8 <UART_SetConfig+0x258>
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <UART_SetConfig+0x238>
 8002fb0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fb4:	d008      	beq.n	8002fc8 <UART_SetConfig+0x248>
 8002fb6:	e00f      	b.n	8002fd8 <UART_SetConfig+0x258>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e052      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fc6:	e04e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fce:	e04a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fd6:	e046      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fde:	e042      	b.n	8003066 <UART_SetConfig+0x2e6>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a17      	ldr	r2, [pc, #92]	@ (8003044 <UART_SetConfig+0x2c4>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d13a      	bne.n	8003060 <UART_SetConfig+0x2e0>
 8002fea:	4b18      	ldr	r3, [pc, #96]	@ (800304c <UART_SetConfig+0x2cc>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ff4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ff8:	d01a      	beq.n	8003030 <UART_SetConfig+0x2b0>
 8002ffa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ffe:	d81b      	bhi.n	8003038 <UART_SetConfig+0x2b8>
 8003000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003004:	d00c      	beq.n	8003020 <UART_SetConfig+0x2a0>
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800300a:	d815      	bhi.n	8003038 <UART_SetConfig+0x2b8>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <UART_SetConfig+0x298>
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003014:	d008      	beq.n	8003028 <UART_SetConfig+0x2a8>
 8003016:	e00f      	b.n	8003038 <UART_SetConfig+0x2b8>
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e022      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003020:	2302      	movs	r3, #2
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003026:	e01e      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003028:	2304      	movs	r3, #4
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800302e:	e01a      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003030:	2308      	movs	r3, #8
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003036:	e016      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003038:	2310      	movs	r3, #16
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800303e:	e012      	b.n	8003066 <UART_SetConfig+0x2e6>
 8003040:	efff69f3 	.word	0xefff69f3
 8003044:	40008000 	.word	0x40008000
 8003048:	40013800 	.word	0x40013800
 800304c:	40021000 	.word	0x40021000
 8003050:	40004400 	.word	0x40004400
 8003054:	40004800 	.word	0x40004800
 8003058:	40004c00 	.word	0x40004c00
 800305c:	40005000 	.word	0x40005000
 8003060:	2310      	movs	r3, #16
 8003062:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a9f      	ldr	r2, [pc, #636]	@ (80032e8 <UART_SetConfig+0x568>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d17a      	bne.n	8003166 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003070:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003074:	2b08      	cmp	r3, #8
 8003076:	d824      	bhi.n	80030c2 <UART_SetConfig+0x342>
 8003078:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <UART_SetConfig+0x300>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080030c3 	.word	0x080030c3
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030c3 	.word	0x080030c3
 8003090:	080030b3 	.word	0x080030b3
 8003094:	080030c3 	.word	0x080030c3
 8003098:	080030c3 	.word	0x080030c3
 800309c:	080030c3 	.word	0x080030c3
 80030a0:	080030bb 	.word	0x080030bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a4:	f7fe fdde 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 80030a8:	61f8      	str	r0, [r7, #28]
        break;
 80030aa:	e010      	b.n	80030ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030ac:	4b8f      	ldr	r3, [pc, #572]	@ (80032ec <UART_SetConfig+0x56c>)
 80030ae:	61fb      	str	r3, [r7, #28]
        break;
 80030b0:	e00d      	b.n	80030ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030b2:	f7fe fd3f 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80030b6:	61f8      	str	r0, [r7, #28]
        break;
 80030b8:	e009      	b.n	80030ce <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80030be:	61fb      	str	r3, [r7, #28]
        break;
 80030c0:	e005      	b.n	80030ce <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030cc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80fb 	beq.w	80032cc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d305      	bcc.n	80030f2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d903      	bls.n	80030fa <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030f8:	e0e8      	b.n	80032cc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	2200      	movs	r2, #0
 80030fe:	461c      	mov	r4, r3
 8003100:	4615      	mov	r5, r2
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	f04f 0300 	mov.w	r3, #0
 800310a:	022b      	lsls	r3, r5, #8
 800310c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003110:	0222      	lsls	r2, r4, #8
 8003112:	68f9      	ldr	r1, [r7, #12]
 8003114:	6849      	ldr	r1, [r1, #4]
 8003116:	0849      	lsrs	r1, r1, #1
 8003118:	2000      	movs	r0, #0
 800311a:	4688      	mov	r8, r1
 800311c:	4681      	mov	r9, r0
 800311e:	eb12 0a08 	adds.w	sl, r2, r8
 8003122:	eb43 0b09 	adc.w	fp, r3, r9
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	607a      	str	r2, [r7, #4]
 8003130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003134:	4650      	mov	r0, sl
 8003136:	4659      	mov	r1, fp
 8003138:	f7fd f84a 	bl	80001d0 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800314a:	d308      	bcc.n	800315e <UART_SetConfig+0x3de>
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003152:	d204      	bcs.n	800315e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	e0b6      	b.n	80032cc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003164:	e0b2      	b.n	80032cc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800316e:	d15e      	bne.n	800322e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003170:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003174:	2b08      	cmp	r3, #8
 8003176:	d828      	bhi.n	80031ca <UART_SetConfig+0x44a>
 8003178:	a201      	add	r2, pc, #4	@ (adr r2, 8003180 <UART_SetConfig+0x400>)
 800317a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800317e:	bf00      	nop
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031b5 	.word	0x080031b5
 800318c:	080031cb 	.word	0x080031cb
 8003190:	080031bb 	.word	0x080031bb
 8003194:	080031cb 	.word	0x080031cb
 8003198:	080031cb 	.word	0x080031cb
 800319c:	080031cb 	.word	0x080031cb
 80031a0:	080031c3 	.word	0x080031c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a4:	f7fe fd5e 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 80031a8:	61f8      	str	r0, [r7, #28]
        break;
 80031aa:	e014      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ac:	f7fe fd70 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 80031b0:	61f8      	str	r0, [r7, #28]
        break;
 80031b2:	e010      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b4:	4b4d      	ldr	r3, [pc, #308]	@ (80032ec <UART_SetConfig+0x56c>)
 80031b6:	61fb      	str	r3, [r7, #28]
        break;
 80031b8:	e00d      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7fe fcbb 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 80031be:	61f8      	str	r0, [r7, #28]
        break;
 80031c0:	e009      	b.n	80031d6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031c6:	61fb      	str	r3, [r7, #28]
        break;
 80031c8:	e005      	b.n	80031d6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d077      	beq.n	80032cc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	005a      	lsls	r2, r3, #1
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	085b      	lsrs	r3, r3, #1
 80031e6:	441a      	add	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b0f      	cmp	r3, #15
 80031f6:	d916      	bls.n	8003226 <UART_SetConfig+0x4a6>
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031fe:	d212      	bcs.n	8003226 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	b29b      	uxth	r3, r3
 8003204:	f023 030f 	bic.w	r3, r3, #15
 8003208:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	b29b      	uxth	r3, r3
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	b29a      	uxth	r2, r3
 8003216:	8afb      	ldrh	r3, [r7, #22]
 8003218:	4313      	orrs	r3, r2
 800321a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	8afa      	ldrh	r2, [r7, #22]
 8003222:	60da      	str	r2, [r3, #12]
 8003224:	e052      	b.n	80032cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800322c:	e04e      	b.n	80032cc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800322e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003232:	2b08      	cmp	r3, #8
 8003234:	d827      	bhi.n	8003286 <UART_SetConfig+0x506>
 8003236:	a201      	add	r2, pc, #4	@ (adr r2, 800323c <UART_SetConfig+0x4bc>)
 8003238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323c:	08003261 	.word	0x08003261
 8003240:	08003269 	.word	0x08003269
 8003244:	08003271 	.word	0x08003271
 8003248:	08003287 	.word	0x08003287
 800324c:	08003277 	.word	0x08003277
 8003250:	08003287 	.word	0x08003287
 8003254:	08003287 	.word	0x08003287
 8003258:	08003287 	.word	0x08003287
 800325c:	0800327f 	.word	0x0800327f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003260:	f7fe fd00 	bl	8001c64 <HAL_RCC_GetPCLK1Freq>
 8003264:	61f8      	str	r0, [r7, #28]
        break;
 8003266:	e014      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003268:	f7fe fd12 	bl	8001c90 <HAL_RCC_GetPCLK2Freq>
 800326c:	61f8      	str	r0, [r7, #28]
        break;
 800326e:	e010      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003270:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <UART_SetConfig+0x56c>)
 8003272:	61fb      	str	r3, [r7, #28]
        break;
 8003274:	e00d      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003276:	f7fe fc5d 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 800327a:	61f8      	str	r0, [r7, #28]
        break;
 800327c:	e009      	b.n	8003292 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800327e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003282:	61fb      	str	r3, [r7, #28]
        break;
 8003284:	e005      	b.n	8003292 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003290:	bf00      	nop
    }

    if (pclk != 0U)
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d019      	beq.n	80032cc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	085a      	lsrs	r2, r3, #1
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	441a      	add	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032aa:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	2b0f      	cmp	r3, #15
 80032b0:	d909      	bls.n	80032c6 <UART_SetConfig+0x546>
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032b8:	d205      	bcs.n	80032c6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	60da      	str	r2, [r3, #12]
 80032c4:	e002      	b.n	80032cc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	@ 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032e6:	bf00      	nop
 80032e8:	40008000 	.word	0x40008000
 80032ec:	00f42400 	.word	0x00f42400

080032f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	430a      	orrs	r2, r1
 8003318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003384:	f003 0310 	and.w	r3, r3, #16
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d01a      	beq.n	8003406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ee:	d10a      	bne.n	8003406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b098      	sub	sp, #96	@ 0x60
 8003438:	af02      	add	r7, sp, #8
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003444:	f7fd fb86 	bl	8000b54 <HAL_GetTick>
 8003448:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b08      	cmp	r3, #8
 8003456:	d12e      	bne.n	80034b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003458:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003460:	2200      	movs	r2, #0
 8003462:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f88c 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d021      	beq.n	80034b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003482:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003486:	653b      	str	r3, [r7, #80]	@ 0x50
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003490:	647b      	str	r3, [r7, #68]	@ 0x44
 8003492:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003496:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800349e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e6      	bne.n	8003472 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2220      	movs	r2, #32
 80034a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e062      	b.n	800357c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d149      	bne.n	8003558 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	2200      	movs	r2, #0
 80034ce:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f856 	bl	8003584 <UART_WaitOnFlagUntilTimeout>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03c      	beq.n	8003558 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	623b      	str	r3, [r7, #32]
   return(result);
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	461a      	mov	r2, r3
 80034fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003502:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800350a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e6      	bne.n	80034de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0301 	bic.w	r3, r3, #1
 8003526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3308      	adds	r3, #8
 800352e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003530:	61fa      	str	r2, [r7, #28]
 8003532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	69b9      	ldr	r1, [r7, #24]
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	617b      	str	r3, [r7, #20]
   return(result);
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e5      	bne.n	8003510 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e011      	b.n	800357c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3758      	adds	r7, #88	@ 0x58
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	4613      	mov	r3, r2
 8003592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003594:	e04f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800359c:	d04b      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800359e:	f7fd fad9 	bl	8000b54 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d302      	bcc.n	80035b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e04e      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0304 	and.w	r3, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d037      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b80      	cmp	r3, #128	@ 0x80
 80035ca:	d034      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	2b40      	cmp	r3, #64	@ 0x40
 80035d0:	d031      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b08      	cmp	r3, #8
 80035de:	d110      	bne.n	8003602 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2208      	movs	r2, #8
 80035e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f838 	bl	800365e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2208      	movs	r2, #8
 80035f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e029      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003610:	d111      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800361a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f81e 	bl	800365e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2220      	movs	r2, #32
 8003626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e00f      	b.n	8003656 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4013      	ands	r3, r2
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	429a      	cmp	r2, r3
 8003644:	bf0c      	ite	eq
 8003646:	2301      	moveq	r3, #1
 8003648:	2300      	movne	r3, #0
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	79fb      	ldrb	r3, [r7, #7]
 8003650:	429a      	cmp	r2, r3
 8003652:	d0a0      	beq.n	8003596 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800365e:	b480      	push	{r7}
 8003660:	b095      	sub	sp, #84	@ 0x54
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800366e:	e853 3f00 	ldrex	r3, [r3]
 8003672:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003676:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800367a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	461a      	mov	r2, r3
 8003682:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003684:	643b      	str	r3, [r7, #64]	@ 0x40
 8003686:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003688:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800368a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800368c:	e841 2300 	strex	r3, r2, [r1]
 8003690:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1e6      	bne.n	8003666 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3308      	adds	r3, #8
 800369e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	f023 0301 	bic.w	r3, r3, #1
 80036ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	3308      	adds	r3, #8
 80036b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e5      	bne.n	8003698 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d118      	bne.n	8003706 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f023 0310 	bic.w	r3, r3, #16
 80036e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	461a      	mov	r2, r3
 80036f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036f2:	61bb      	str	r3, [r7, #24]
 80036f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e6      	bne.n	80036d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800371a:	bf00      	nop
 800371c:	3754      	adds	r7, #84	@ 0x54
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <__NVIC_SetPriority>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003738:	2b00      	cmp	r3, #0
 800373a:	db0a      	blt.n	8003752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	b2da      	uxtb	r2, r3
 8003740:	490c      	ldr	r1, [pc, #48]	@ (8003774 <__NVIC_SetPriority+0x4c>)
 8003742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003746:	0112      	lsls	r2, r2, #4
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	440b      	add	r3, r1
 800374c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003750:	e00a      	b.n	8003768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	b2da      	uxtb	r2, r3
 8003756:	4908      	ldr	r1, [pc, #32]	@ (8003778 <__NVIC_SetPriority+0x50>)
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	f003 030f 	and.w	r3, r3, #15
 800375e:	3b04      	subs	r3, #4
 8003760:	0112      	lsls	r2, r2, #4
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	440b      	add	r3, r1
 8003766:	761a      	strb	r2, [r3, #24]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <SysTick_Handler+0x1c>)
 8003782:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003784:	f001 fdc6 	bl	8005314 <xTaskGetSchedulerState>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d001      	beq.n	8003792 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800378e:	f002 fbbb 	bl	8005f08 <xPortSysTickHandler>
  }
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	e000e010 	.word	0xe000e010

0800379c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80037a0:	2100      	movs	r1, #0
 80037a2:	f06f 0004 	mvn.w	r0, #4
 80037a6:	f7ff ffbf 	bl	8003728 <__NVIC_SetPriority>
#endif
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037b6:	f3ef 8305 	mrs	r3, IPSR
 80037ba:	603b      	str	r3, [r7, #0]
  return(result);
 80037bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037c2:	f06f 0305 	mvn.w	r3, #5
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	e00c      	b.n	80037e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037ca:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <osKernelInitialize+0x44>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d105      	bne.n	80037de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037d2:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <osKernelInitialize+0x44>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037d8:	2300      	movs	r3, #0
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e002      	b.n	80037e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037e4:	687b      	ldr	r3, [r7, #4]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000168 	.word	0x20000168

080037f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037fe:	f3ef 8305 	mrs	r3, IPSR
 8003802:	603b      	str	r3, [r7, #0]
  return(result);
 8003804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <osKernelStart+0x1a>
    stat = osErrorISR;
 800380a:	f06f 0305 	mvn.w	r3, #5
 800380e:	607b      	str	r3, [r7, #4]
 8003810:	e010      	b.n	8003834 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003812:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <osKernelStart+0x48>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d109      	bne.n	800382e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800381a:	f7ff ffbf 	bl	800379c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800381e:	4b08      	ldr	r3, [pc, #32]	@ (8003840 <osKernelStart+0x48>)
 8003820:	2202      	movs	r2, #2
 8003822:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003824:	f001 f912 	bl	8004a4c <vTaskStartScheduler>
      stat = osOK;
 8003828:	2300      	movs	r3, #0
 800382a:	607b      	str	r3, [r7, #4]
 800382c:	e002      	b.n	8003834 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800382e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003834:	687b      	ldr	r3, [r7, #4]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000168 	.word	0x20000168

08003844 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003844:	b580      	push	{r7, lr}
 8003846:	b08e      	sub	sp, #56	@ 0x38
 8003848:	af04      	add	r7, sp, #16
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003854:	f3ef 8305 	mrs	r3, IPSR
 8003858:	617b      	str	r3, [r7, #20]
  return(result);
 800385a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800385c:	2b00      	cmp	r3, #0
 800385e:	d17e      	bne.n	800395e <osThreadNew+0x11a>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d07b      	beq.n	800395e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003866:	2380      	movs	r3, #128	@ 0x80
 8003868:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800386a:	2318      	movs	r3, #24
 800386c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800386e:	2300      	movs	r3, #0
 8003870:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003876:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d045      	beq.n	800390a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <osThreadNew+0x48>
        name = attr->name;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d008      	beq.n	80038b2 <osThreadNew+0x6e>
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b38      	cmp	r3, #56	@ 0x38
 80038a4:	d805      	bhi.n	80038b2 <osThreadNew+0x6e>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <osThreadNew+0x72>
        return (NULL);
 80038b2:	2300      	movs	r3, #0
 80038b4:	e054      	b.n	8003960 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00e      	beq.n	80038ec <osThreadNew+0xa8>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2ba7      	cmp	r3, #167	@ 0xa7
 80038d4:	d90a      	bls.n	80038ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695b      	ldr	r3, [r3, #20]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <osThreadNew+0xa8>
        mem = 1;
 80038e6:	2301      	movs	r3, #1
 80038e8:	61bb      	str	r3, [r7, #24]
 80038ea:	e010      	b.n	800390e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10c      	bne.n	800390e <osThreadNew+0xca>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d108      	bne.n	800390e <osThreadNew+0xca>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d104      	bne.n	800390e <osThreadNew+0xca>
          mem = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	e001      	b.n	800390e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800390a:	2300      	movs	r3, #0
 800390c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d110      	bne.n	8003936 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800391c:	9202      	str	r2, [sp, #8]
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6a3a      	ldr	r2, [r7, #32]
 8003928:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f000 fe1a 	bl	8004564 <xTaskCreateStatic>
 8003930:	4603      	mov	r3, r0
 8003932:	613b      	str	r3, [r7, #16]
 8003934:	e013      	b.n	800395e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d110      	bne.n	800395e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	b29a      	uxth	r2, r3
 8003940:	f107 0310 	add.w	r3, r7, #16
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 fe68 	bl	8004624 <xTaskCreate>
 8003954:	4603      	mov	r3, r0
 8003956:	2b01      	cmp	r3, #1
 8003958:	d001      	beq.n	800395e <osThreadNew+0x11a>
            hTask = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800395e:	693b      	ldr	r3, [r7, #16]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3728      	adds	r7, #40	@ 0x28
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003970:	f3ef 8305 	mrs	r3, IPSR
 8003974:	60bb      	str	r3, [r7, #8]
  return(result);
 8003976:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <osDelay+0x1c>
    stat = osErrorISR;
 800397c:	f06f 0305 	mvn.w	r3, #5
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e007      	b.n	8003994 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003984:	2300      	movs	r3, #0
 8003986:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <osDelay+0x2c>
      vTaskDelay(ticks);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f001 f826 	bl	80049e0 <vTaskDelay>
    }
  }

  return (stat);
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4a07      	ldr	r2, [pc, #28]	@ (80039cc <vApplicationGetIdleTaskMemory+0x2c>)
 80039b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	4a06      	ldr	r2, [pc, #24]	@ (80039d0 <vApplicationGetIdleTaskMemory+0x30>)
 80039b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2280      	movs	r2, #128	@ 0x80
 80039bc:	601a      	str	r2, [r3, #0]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	2000016c 	.word	0x2000016c
 80039d0:	20000214 	.word	0x20000214

080039d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4a07      	ldr	r2, [pc, #28]	@ (8003a00 <vApplicationGetTimerTaskMemory+0x2c>)
 80039e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4a06      	ldr	r2, [pc, #24]	@ (8003a04 <vApplicationGetTimerTaskMemory+0x30>)
 80039ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039f2:	601a      	str	r2, [r3, #0]
}
 80039f4:	bf00      	nop
 80039f6:	3714      	adds	r7, #20
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr
 8003a00:	20000414 	.word	0x20000414
 8003a04:	200004bc 	.word	0x200004bc

08003a08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f103 0208 	add.w	r2, r3, #8
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f103 0208 	add.w	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f103 0208 	add.w	r2, r3, #8
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr

08003a62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a62:	b480      	push	{r7}
 8003a64:	b085      	sub	sp, #20
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	6078      	str	r0, [r7, #4]
 8003a6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	601a      	str	r2, [r3, #0]
}
 8003a9e:	bf00      	nop
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ac0:	d103      	bne.n	8003aca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	60fb      	str	r3, [r7, #12]
 8003ac8:	e00c      	b.n	8003ae4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3308      	adds	r3, #8
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	e002      	b.n	8003ad8 <vListInsert+0x2e>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68ba      	ldr	r2, [r7, #8]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d2f6      	bcs.n	8003ad2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	601a      	str	r2, [r3, #0]
}
 8003b10:	bf00      	nop
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6892      	ldr	r2, [r2, #8]
 8003b32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6852      	ldr	r2, [r2, #4]
 8003b3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d103      	bne.n	8003b50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	1e5a      	subs	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10b      	bne.n	8003b9c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b96:	bf00      	nop
 8003b98:	bf00      	nop
 8003b9a:	e7fd      	b.n	8003b98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b9c:	f002 f924 	bl	8005de8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	68f9      	ldr	r1, [r7, #12]
 8003baa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bac:	fb01 f303 	mul.w	r3, r1, r3
 8003bb0:	441a      	add	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	68f9      	ldr	r1, [r7, #12]
 8003bd0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bd2:	fb01 f303 	mul.w	r3, r1, r3
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	22ff      	movs	r2, #255	@ 0xff
 8003be0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	22ff      	movs	r2, #255	@ 0xff
 8003be8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d114      	bne.n	8003c1c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01a      	beq.n	8003c30 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3310      	adds	r3, #16
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f9c2 	bl	8004f88 <xTaskRemoveFromEventList>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d012      	beq.n	8003c30 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c40 <xQueueGenericReset+0xd0>)
 8003c0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	f3bf 8f6f 	isb	sy
 8003c1a:	e009      	b.n	8003c30 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	3310      	adds	r3, #16
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fef1 	bl	8003a08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3324      	adds	r3, #36	@ 0x24
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f7ff feec 	bl	8003a08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c30:	f002 f90c 	bl	8005e4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c34:	2301      	movs	r3, #1
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	e000ed04 	.word	0xe000ed04

08003c44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	@ 0x38
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
 8003c50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10b      	bne.n	8003c8e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	e7fd      	b.n	8003c8a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <xQueueGenericCreateStatic+0x56>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <xQueueGenericCreateStatic+0x5a>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <xQueueGenericCreateStatic+0x5c>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10b      	bne.n	8003cbc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	623b      	str	r3, [r7, #32]
}
 8003cb6:	bf00      	nop
 8003cb8:	bf00      	nop
 8003cba:	e7fd      	b.n	8003cb8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d102      	bne.n	8003cc8 <xQueueGenericCreateStatic+0x84>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <xQueueGenericCreateStatic+0x88>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <xQueueGenericCreateStatic+0x8a>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	61fb      	str	r3, [r7, #28]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cea:	2350      	movs	r3, #80	@ 0x50
 8003cec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b50      	cmp	r3, #80	@ 0x50
 8003cf2:	d00b      	beq.n	8003d0c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	61bb      	str	r3, [r7, #24]
}
 8003d06:	bf00      	nop
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d0c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d00d      	beq.n	8003d34 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d20:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	68b9      	ldr	r1, [r7, #8]
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f805 	bl	8003d3e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3730      	adds	r7, #48	@ 0x30
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b084      	sub	sp, #16
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
 8003d4a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d103      	bne.n	8003d5a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e002      	b.n	8003d60 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	69b8      	ldr	r0, [r7, #24]
 8003d70:	f7ff fefe 	bl	8003b70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d7c:	bf00      	nop
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	@ 0x38
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d92:	2300      	movs	r3, #0
 8003d94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10b      	bne.n	8003db8 <xQueueGenericSend+0x34>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003db2:	bf00      	nop
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d103      	bne.n	8003dc6 <xQueueGenericSend+0x42>
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <xQueueGenericSend+0x46>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <xQueueGenericSend+0x48>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <xQueueGenericSend+0x64>
	__asm volatile
 8003dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd4:	f383 8811 	msr	BASEPRI, r3
 8003dd8:	f3bf 8f6f 	isb	sy
 8003ddc:	f3bf 8f4f 	dsb	sy
 8003de0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003de2:	bf00      	nop
 8003de4:	bf00      	nop
 8003de6:	e7fd      	b.n	8003de4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d103      	bne.n	8003df6 <xQueueGenericSend+0x72>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <xQueueGenericSend+0x76>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <xQueueGenericSend+0x78>
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d10b      	bne.n	8003e18 <xQueueGenericSend+0x94>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	623b      	str	r3, [r7, #32]
}
 8003e12:	bf00      	nop
 8003e14:	bf00      	nop
 8003e16:	e7fd      	b.n	8003e14 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e18:	f001 fa7c 	bl	8005314 <xTaskGetSchedulerState>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <xQueueGenericSend+0xa4>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d101      	bne.n	8003e2c <xQueueGenericSend+0xa8>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <xQueueGenericSend+0xaa>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10b      	bne.n	8003e4a <xQueueGenericSend+0xc6>
	__asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	61fb      	str	r3, [r7, #28]
}
 8003e44:	bf00      	nop
 8003e46:	bf00      	nop
 8003e48:	e7fd      	b.n	8003e46 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e4a:	f001 ffcd 	bl	8005de8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d302      	bcc.n	8003e60 <xQueueGenericSend+0xdc>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d129      	bne.n	8003eb4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e66:	f000 fa0f 	bl	8004288 <prvCopyDataToQueue>
 8003e6a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d010      	beq.n	8003e96 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	3324      	adds	r3, #36	@ 0x24
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 f885 	bl	8004f88 <xTaskRemoveFromEventList>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d013      	beq.n	8003eac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e84:	4b3f      	ldr	r3, [pc, #252]	@ (8003f84 <xQueueGenericSend+0x200>)
 8003e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	e00a      	b.n	8003eac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d007      	beq.n	8003eac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e9c:	4b39      	ldr	r3, [pc, #228]	@ (8003f84 <xQueueGenericSend+0x200>)
 8003e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003eac:	f001 ffce 	bl	8005e4c <vPortExitCritical>
				return pdPASS;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e063      	b.n	8003f7c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003eba:	f001 ffc7 	bl	8005e4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e05c      	b.n	8003f7c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d106      	bne.n	8003ed6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f001 f8bf 	bl	8005050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ed6:	f001 ffb9 	bl	8005e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eda:	f000 fe27 	bl	8004b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ede:	f001 ff83 	bl	8005de8 <vPortEnterCritical>
 8003ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003eee:	d103      	bne.n	8003ef8 <xQueueGenericSend+0x174>
 8003ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003efa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003efe:	b25b      	sxtb	r3, r3
 8003f00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f04:	d103      	bne.n	8003f0e <xQueueGenericSend+0x18a>
 8003f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f0e:	f001 ff9d 	bl	8005e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f12:	1d3a      	adds	r2, r7, #4
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 f8ae 	bl	800507c <xTaskCheckForTimeOut>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d124      	bne.n	8003f70 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f28:	f000 faa6 	bl	8004478 <prvIsQueueFull>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f34:	3310      	adds	r3, #16
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 ffd2 	bl	8004ee4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f42:	f000 fa31 	bl	80043a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f46:	f000 fdff 	bl	8004b48 <xTaskResumeAll>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f47f af7c 	bne.w	8003e4a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f52:	4b0c      	ldr	r3, [pc, #48]	@ (8003f84 <xQueueGenericSend+0x200>)
 8003f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	f3bf 8f6f 	isb	sy
 8003f62:	e772      	b.n	8003e4a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f66:	f000 fa1f 	bl	80043a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f6a:	f000 fded 	bl	8004b48 <xTaskResumeAll>
 8003f6e:	e76c      	b.n	8003e4a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f72:	f000 fa19 	bl	80043a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f76:	f000 fde7 	bl	8004b48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f7a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3738      	adds	r7, #56	@ 0x38
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	e000ed04 	.word	0xe000ed04

08003f88 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b090      	sub	sp, #64	@ 0x40
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10b      	bne.n	8003fb8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fa4:	f383 8811 	msr	BASEPRI, r3
 8003fa8:	f3bf 8f6f 	isb	sy
 8003fac:	f3bf 8f4f 	dsb	sy
 8003fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003fb2:	bf00      	nop
 8003fb4:	bf00      	nop
 8003fb6:	e7fd      	b.n	8003fb4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <xQueueGenericSendFromISR+0x3e>
 8003fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <xQueueGenericSendFromISR+0x42>
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e000      	b.n	8003fcc <xQueueGenericSendFromISR+0x44>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd4:	f383 8811 	msr	BASEPRI, r3
 8003fd8:	f3bf 8f6f 	isb	sy
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fe2:	bf00      	nop
 8003fe4:	bf00      	nop
 8003fe6:	e7fd      	b.n	8003fe4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d103      	bne.n	8003ff6 <xQueueGenericSendFromISR+0x6e>
 8003fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d101      	bne.n	8003ffa <xQueueGenericSendFromISR+0x72>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <xQueueGenericSendFromISR+0x74>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10b      	bne.n	8004018 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	623b      	str	r3, [r7, #32]
}
 8004012:	bf00      	nop
 8004014:	bf00      	nop
 8004016:	e7fd      	b.n	8004014 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004018:	f001 ffc6 	bl	8005fa8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800401c:	f3ef 8211 	mrs	r2, BASEPRI
 8004020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61fa      	str	r2, [r7, #28]
 8004032:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004034:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004036:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800403c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800403e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004040:	429a      	cmp	r2, r3
 8004042:	d302      	bcc.n	800404a <xQueueGenericSendFromISR+0xc2>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d12f      	bne.n	80040aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800404a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800404c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004050:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004058:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68b9      	ldr	r1, [r7, #8]
 800405e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004060:	f000 f912 	bl	8004288 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004064:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800406c:	d112      	bne.n	8004094 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800406e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d016      	beq.n	80040a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004078:	3324      	adds	r3, #36	@ 0x24
 800407a:	4618      	mov	r0, r3
 800407c:	f000 ff84 	bl	8004f88 <xTaskRemoveFromEventList>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00e      	beq.n	80040a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00b      	beq.n	80040a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	601a      	str	r2, [r3, #0]
 8004092:	e007      	b.n	80040a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004094:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004098:	3301      	adds	r3, #1
 800409a:	b2db      	uxtb	r3, r3
 800409c:	b25a      	sxtb	r2, r3
 800409e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80040a4:	2301      	movs	r3, #1
 80040a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80040a8:	e001      	b.n	80040ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80040ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80040b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80040ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3740      	adds	r7, #64	@ 0x40
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08c      	sub	sp, #48	@ 0x30
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <xQueueReceive+0x32>
	__asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	623b      	str	r3, [r7, #32]
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	e7fd      	b.n	80040f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d103      	bne.n	8004104 <xQueueReceive+0x40>
 80040fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <xQueueReceive+0x44>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <xQueueReceive+0x46>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10b      	bne.n	8004126 <xQueueReceive+0x62>
	__asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	61fb      	str	r3, [r7, #28]
}
 8004120:	bf00      	nop
 8004122:	bf00      	nop
 8004124:	e7fd      	b.n	8004122 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004126:	f001 f8f5 	bl	8005314 <xTaskGetSchedulerState>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d102      	bne.n	8004136 <xQueueReceive+0x72>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <xQueueReceive+0x76>
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <xQueueReceive+0x78>
 800413a:	2300      	movs	r3, #0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d10b      	bne.n	8004158 <xQueueReceive+0x94>
	__asm volatile
 8004140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	61bb      	str	r3, [r7, #24]
}
 8004152:	bf00      	nop
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004158:	f001 fe46 	bl	8005de8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800415c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004160:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01f      	beq.n	80041a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800416c:	f000 f8f6 	bl	800435c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004172:	1e5a      	subs	r2, r3, #1
 8004174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004176:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00f      	beq.n	80041a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004182:	3310      	adds	r3, #16
 8004184:	4618      	mov	r0, r3
 8004186:	f000 feff 	bl	8004f88 <xTaskRemoveFromEventList>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004190:	4b3c      	ldr	r3, [pc, #240]	@ (8004284 <xQueueReceive+0x1c0>)
 8004192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004196:	601a      	str	r2, [r3, #0]
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80041a0:	f001 fe54 	bl	8005e4c <vPortExitCritical>
				return pdPASS;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e069      	b.n	800427c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d103      	bne.n	80041b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80041ae:	f001 fe4d 	bl	8005e4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e062      	b.n	800427c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80041b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d106      	bne.n	80041ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 ff45 	bl	8005050 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041c6:	2301      	movs	r3, #1
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041ca:	f001 fe3f 	bl	8005e4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ce:	f000 fcad 	bl	8004b2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041d2:	f001 fe09 	bl	8005de8 <vPortEnterCritical>
 80041d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041dc:	b25b      	sxtb	r3, r3
 80041de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e2:	d103      	bne.n	80041ec <xQueueReceive+0x128>
 80041e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041f8:	d103      	bne.n	8004202 <xQueueReceive+0x13e>
 80041fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004202:	f001 fe23 	bl	8005e4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004206:	1d3a      	adds	r2, r7, #4
 8004208:	f107 0310 	add.w	r3, r7, #16
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 ff34 	bl	800507c <xTaskCheckForTimeOut>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d123      	bne.n	8004262 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800421a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800421c:	f000 f916 	bl	800444c <prvIsQueueEmpty>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d017      	beq.n	8004256 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	3324      	adds	r3, #36	@ 0x24
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4611      	mov	r1, r2
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fe58 	bl	8004ee4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004234:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004236:	f000 f8b7 	bl	80043a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800423a:	f000 fc85 	bl	8004b48 <xTaskResumeAll>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d189      	bne.n	8004158 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004244:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <xQueueReceive+0x1c0>)
 8004246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	f3bf 8f4f 	dsb	sy
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	e780      	b.n	8004158 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004256:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004258:	f000 f8a6 	bl	80043a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800425c:	f000 fc74 	bl	8004b48 <xTaskResumeAll>
 8004260:	e77a      	b.n	8004158 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004262:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004264:	f000 f8a0 	bl	80043a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004268:	f000 fc6e 	bl	8004b48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800426c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800426e:	f000 f8ed 	bl	800444c <prvIsQueueEmpty>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	f43f af6f 	beq.w	8004158 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800427a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800427c:	4618      	mov	r0, r3
 800427e:	3730      	adds	r7, #48	@ 0x30
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004294:	2300      	movs	r3, #0
 8004296:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d10d      	bne.n	80042c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d14d      	bne.n	800434a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f001 f84c 	bl	8005350 <xTaskPriorityDisinherit>
 80042b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	609a      	str	r2, [r3, #8]
 80042c0:	e043      	b.n	800434a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d119      	bne.n	80042fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6858      	ldr	r0, [r3, #4]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	461a      	mov	r2, r3
 80042d2:	68b9      	ldr	r1, [r7, #8]
 80042d4:	f002 f91c 	bl	8006510 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e0:	441a      	add	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d32b      	bcc.n	800434a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	605a      	str	r2, [r3, #4]
 80042fa:	e026      	b.n	800434a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68d8      	ldr	r0, [r3, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004304:	461a      	mov	r2, r3
 8004306:	68b9      	ldr	r1, [r7, #8]
 8004308:	f002 f902 	bl	8006510 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004314:	425b      	negs	r3, r3
 8004316:	441a      	add	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d207      	bcs.n	8004338 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004330:	425b      	negs	r3, r3
 8004332:	441a      	add	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d105      	bne.n	800434a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d002      	beq.n	800434a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	3b01      	subs	r3, #1
 8004348:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1c5a      	adds	r2, r3, #1
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004352:	697b      	ldr	r3, [r7, #20]
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d018      	beq.n	80043a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004376:	441a      	add	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	d303      	bcc.n	8004390 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68d9      	ldr	r1, [r3, #12]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	461a      	mov	r2, r3
 800439a:	6838      	ldr	r0, [r7, #0]
 800439c:	f002 f8b8 	bl	8006510 <memcpy>
	}
}
 80043a0:	bf00      	nop
 80043a2:	3708      	adds	r7, #8
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80043b0:	f001 fd1a 	bl	8005de8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043bc:	e011      	b.n	80043e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d012      	beq.n	80043ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3324      	adds	r3, #36	@ 0x24
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fddc 	bl	8004f88 <xTaskRemoveFromEventList>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043d6:	f000 feb5 	bl	8005144 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
 80043dc:	3b01      	subs	r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	dce9      	bgt.n	80043be <prvUnlockQueue+0x16>
 80043ea:	e000      	b.n	80043ee <prvUnlockQueue+0x46>
					break;
 80043ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	22ff      	movs	r2, #255	@ 0xff
 80043f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80043f6:	f001 fd29 	bl	8005e4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043fa:	f001 fcf5 	bl	8005de8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004404:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004406:	e011      	b.n	800442c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d012      	beq.n	8004436 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	3310      	adds	r3, #16
 8004414:	4618      	mov	r0, r3
 8004416:	f000 fdb7 	bl	8004f88 <xTaskRemoveFromEventList>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d001      	beq.n	8004424 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004420:	f000 fe90 	bl	8005144 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004424:	7bbb      	ldrb	r3, [r7, #14]
 8004426:	3b01      	subs	r3, #1
 8004428:	b2db      	uxtb	r3, r3
 800442a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800442c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004430:	2b00      	cmp	r3, #0
 8004432:	dce9      	bgt.n	8004408 <prvUnlockQueue+0x60>
 8004434:	e000      	b.n	8004438 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004436:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	22ff      	movs	r2, #255	@ 0xff
 800443c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004440:	f001 fd04 	bl	8005e4c <vPortExitCritical>
}
 8004444:	bf00      	nop
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004454:	f001 fcc8 	bl	8005de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445c:	2b00      	cmp	r3, #0
 800445e:	d102      	bne.n	8004466 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e001      	b.n	800446a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800446a:	f001 fcef 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 800446e:	68fb      	ldr	r3, [r7, #12]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004480:	f001 fcb2 	bl	8005de8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448c:	429a      	cmp	r2, r3
 800448e:	d102      	bne.n	8004496 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004490:	2301      	movs	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	e001      	b.n	800449a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004496:	2300      	movs	r3, #0
 8004498:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800449a:	f001 fcd7 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 800449e:	68fb      	ldr	r3, [r7, #12]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3710      	adds	r7, #16
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044b2:	2300      	movs	r3, #0
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	e014      	b.n	80044e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80044b8:	4a0f      	ldr	r2, [pc, #60]	@ (80044f8 <vQueueAddToRegistry+0x50>)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10b      	bne.n	80044dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044c4:	490c      	ldr	r1, [pc, #48]	@ (80044f8 <vQueueAddToRegistry+0x50>)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044ce:	4a0a      	ldr	r2, [pc, #40]	@ (80044f8 <vQueueAddToRegistry+0x50>)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	4413      	add	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044da:	e006      	b.n	80044ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3301      	adds	r3, #1
 80044e0:	60fb      	str	r3, [r7, #12]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2b07      	cmp	r3, #7
 80044e6:	d9e7      	bls.n	80044b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	200008bc 	.word	0x200008bc

080044fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800450c:	f001 fc6c 	bl	8005de8 <vPortEnterCritical>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004516:	b25b      	sxtb	r3, r3
 8004518:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800451c:	d103      	bne.n	8004526 <vQueueWaitForMessageRestricted+0x2a>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800452c:	b25b      	sxtb	r3, r3
 800452e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004532:	d103      	bne.n	800453c <vQueueWaitForMessageRestricted+0x40>
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800453c:	f001 fc86 	bl	8005e4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004544:	2b00      	cmp	r3, #0
 8004546:	d106      	bne.n	8004556 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	3324      	adds	r3, #36	@ 0x24
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68b9      	ldr	r1, [r7, #8]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fced 	bl	8004f30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004556:	6978      	ldr	r0, [r7, #20]
 8004558:	f7ff ff26 	bl	80043a8 <prvUnlockQueue>
	}
 800455c:	bf00      	nop
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004564:	b580      	push	{r7, lr}
 8004566:	b08e      	sub	sp, #56	@ 0x38
 8004568:	af04      	add	r7, sp, #16
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10b      	bne.n	8004590 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	623b      	str	r3, [r7, #32]
}
 800458a:	bf00      	nop
 800458c:	bf00      	nop
 800458e:	e7fd      	b.n	800458c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10b      	bne.n	80045ae <xTaskCreateStatic+0x4a>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	61fb      	str	r3, [r7, #28]
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	e7fd      	b.n	80045aa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80045ae:	23a8      	movs	r3, #168	@ 0xa8
 80045b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2ba8      	cmp	r3, #168	@ 0xa8
 80045b6:	d00b      	beq.n	80045d0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80045b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045bc:	f383 8811 	msr	BASEPRI, r3
 80045c0:	f3bf 8f6f 	isb	sy
 80045c4:	f3bf 8f4f 	dsb	sy
 80045c8:	61bb      	str	r3, [r7, #24]
}
 80045ca:	bf00      	nop
 80045cc:	bf00      	nop
 80045ce:	e7fd      	b.n	80045cc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01e      	beq.n	8004616 <xTaskCreateStatic+0xb2>
 80045d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d01b      	beq.n	8004616 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045e6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045f0:	2300      	movs	r3, #0
 80045f2:	9303      	str	r3, [sp, #12]
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	9302      	str	r3, [sp, #8]
 80045f8:	f107 0314 	add.w	r3, r7, #20
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	68b9      	ldr	r1, [r7, #8]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f851 	bl	80046b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800460e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004610:	f000 f8f6 	bl	8004800 <prvAddNewTaskToReadyList>
 8004614:	e001      	b.n	800461a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800461a:	697b      	ldr	r3, [r7, #20]
	}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	@ 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	@ 0x30
 8004628:	af04      	add	r7, sp, #16
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	4613      	mov	r3, r2
 8004632:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4618      	mov	r0, r3
 800463a:	f001 fcf7 	bl	800602c <pvPortMalloc>
 800463e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00e      	beq.n	8004664 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004646:	20a8      	movs	r0, #168	@ 0xa8
 8004648:	f001 fcf0 	bl	800602c <pvPortMalloc>
 800464c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	631a      	str	r2, [r3, #48]	@ 0x30
 800465a:	e005      	b.n	8004668 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800465c:	6978      	ldr	r0, [r7, #20]
 800465e:	f001 fdb3 	bl	80061c8 <vPortFree>
 8004662:	e001      	b.n	8004668 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004664:	2300      	movs	r3, #0
 8004666:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d017      	beq.n	800469e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004676:	88fa      	ldrh	r2, [r7, #6]
 8004678:	2300      	movs	r3, #0
 800467a:	9303      	str	r3, [sp, #12]
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	9302      	str	r3, [sp, #8]
 8004680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 f80f 	bl	80046b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004692:	69f8      	ldr	r0, [r7, #28]
 8004694:	f000 f8b4 	bl	8004800 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004698:	2301      	movs	r3, #1
 800469a:	61bb      	str	r3, [r7, #24]
 800469c:	e002      	b.n	80046a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800469e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80046a4:	69bb      	ldr	r3, [r7, #24]
	}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b088      	sub	sp, #32
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
 80046bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80046be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	461a      	mov	r2, r3
 80046c8:	21a5      	movs	r1, #165	@ 0xa5
 80046ca:	f001 fe9d 	bl	8006408 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046d8:	3b01      	subs	r3, #1
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	617b      	str	r3, [r7, #20]
}
 8004704:	bf00      	nop
 8004706:	bf00      	nop
 8004708:	e7fd      	b.n	8004706 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d01f      	beq.n	8004750 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004710:	2300      	movs	r3, #0
 8004712:	61fb      	str	r3, [r7, #28]
 8004714:	e012      	b.n	800473c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	7819      	ldrb	r1, [r3, #0]
 800471e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	3334      	adds	r3, #52	@ 0x34
 8004726:	460a      	mov	r2, r1
 8004728:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800472a:	68ba      	ldr	r2, [r7, #8]
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d006      	beq.n	8004744 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3301      	adds	r3, #1
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b0f      	cmp	r3, #15
 8004740:	d9e9      	bls.n	8004716 <prvInitialiseNewTask+0x66>
 8004742:	e000      	b.n	8004746 <prvInitialiseNewTask+0x96>
			{
				break;
 8004744:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800474e:	e003      	b.n	8004758 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	2200      	movs	r2, #0
 8004754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	2b37      	cmp	r3, #55	@ 0x37
 800475c:	d901      	bls.n	8004762 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800475e:	2337      	movs	r3, #55	@ 0x37
 8004760:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004766:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800476c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800476e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004770:	2200      	movs	r2, #0
 8004772:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	3304      	adds	r3, #4
 8004778:	4618      	mov	r0, r3
 800477a:	f7ff f965 	bl	8003a48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	3318      	adds	r3, #24
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff f960 	bl	8003a48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800478a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800478c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800478e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004790:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800479c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800479e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80047ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b0:	3354      	adds	r3, #84	@ 0x54
 80047b2:	224c      	movs	r2, #76	@ 0x4c
 80047b4:	2100      	movs	r1, #0
 80047b6:	4618      	mov	r0, r3
 80047b8:	f001 fe26 	bl	8006408 <memset>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047be:	4a0d      	ldr	r2, [pc, #52]	@ (80047f4 <prvInitialiseNewTask+0x144>)
 80047c0:	659a      	str	r2, [r3, #88]	@ 0x58
 80047c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047c4:	4a0c      	ldr	r2, [pc, #48]	@ (80047f8 <prvInitialiseNewTask+0x148>)
 80047c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ca:	4a0c      	ldr	r2, [pc, #48]	@ (80047fc <prvInitialiseNewTask+0x14c>)
 80047cc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	68f9      	ldr	r1, [r7, #12]
 80047d2:	69b8      	ldr	r0, [r7, #24]
 80047d4:	f001 f9da 	bl	8005b8c <pxPortInitialiseStack>
 80047d8:	4602      	mov	r2, r0
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d002      	beq.n	80047ea <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ea:	bf00      	nop
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	20001b08 	.word	0x20001b08
 80047f8:	20001b70 	.word	0x20001b70
 80047fc:	20001bd8 	.word	0x20001bd8

08004800 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004808:	f001 faee 	bl	8005de8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800480c:	4b2d      	ldr	r3, [pc, #180]	@ (80048c4 <prvAddNewTaskToReadyList+0xc4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <prvAddNewTaskToReadyList+0xc4>)
 8004814:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004816:	4b2c      	ldr	r3, [pc, #176]	@ (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800481e:	4a2a      	ldr	r2, [pc, #168]	@ (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004824:	4b27      	ldr	r3, [pc, #156]	@ (80048c4 <prvAddNewTaskToReadyList+0xc4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d110      	bne.n	800484e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800482c:	f000 fcae 	bl	800518c <prvInitialiseTaskLists>
 8004830:	e00d      	b.n	800484e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004832:	4b26      	ldr	r3, [pc, #152]	@ (80048cc <prvAddNewTaskToReadyList+0xcc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800483a:	4b23      	ldr	r3, [pc, #140]	@ (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004844:	429a      	cmp	r2, r3
 8004846:	d802      	bhi.n	800484e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004848:	4a1f      	ldr	r2, [pc, #124]	@ (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800484e:	4b20      	ldr	r3, [pc, #128]	@ (80048d0 <prvAddNewTaskToReadyList+0xd0>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	3301      	adds	r3, #1
 8004854:	4a1e      	ldr	r2, [pc, #120]	@ (80048d0 <prvAddNewTaskToReadyList+0xd0>)
 8004856:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004858:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <prvAddNewTaskToReadyList+0xd0>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004864:	4b1b      	ldr	r3, [pc, #108]	@ (80048d4 <prvAddNewTaskToReadyList+0xd4>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	429a      	cmp	r2, r3
 800486a:	d903      	bls.n	8004874 <prvAddNewTaskToReadyList+0x74>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004870:	4a18      	ldr	r2, [pc, #96]	@ (80048d4 <prvAddNewTaskToReadyList+0xd4>)
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004878:	4613      	mov	r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4413      	add	r3, r2
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4a15      	ldr	r2, [pc, #84]	@ (80048d8 <prvAddNewTaskToReadyList+0xd8>)
 8004882:	441a      	add	r2, r3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	3304      	adds	r3, #4
 8004888:	4619      	mov	r1, r3
 800488a:	4610      	mov	r0, r2
 800488c:	f7ff f8e9 	bl	8003a62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004890:	f001 fadc 	bl	8005e4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004894:	4b0d      	ldr	r3, [pc, #52]	@ (80048cc <prvAddNewTaskToReadyList+0xcc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00e      	beq.n	80048ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800489c:	4b0a      	ldr	r3, [pc, #40]	@ (80048c8 <prvAddNewTaskToReadyList+0xc8>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d207      	bcs.n	80048ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048aa:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <prvAddNewTaskToReadyList+0xdc>)
 80048ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	f3bf 8f4f 	dsb	sy
 80048b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20000dd0 	.word	0x20000dd0
 80048c8:	200008fc 	.word	0x200008fc
 80048cc:	20000ddc 	.word	0x20000ddc
 80048d0:	20000dec 	.word	0x20000dec
 80048d4:	20000dd8 	.word	0x20000dd8
 80048d8:	20000900 	.word	0x20000900
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b08a      	sub	sp, #40	@ 0x28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80048ea:	2300      	movs	r3, #0
 80048ec:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <vTaskDelayUntil+0x2c>
	__asm volatile
 80048f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f8:	f383 8811 	msr	BASEPRI, r3
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	f3bf 8f4f 	dsb	sy
 8004904:	617b      	str	r3, [r7, #20]
}
 8004906:	bf00      	nop
 8004908:	bf00      	nop
 800490a:	e7fd      	b.n	8004908 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10b      	bne.n	800492a <vTaskDelayUntil+0x4a>
	__asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	613b      	str	r3, [r7, #16]
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 800492a:	4b2a      	ldr	r3, [pc, #168]	@ (80049d4 <vTaskDelayUntil+0xf4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <vTaskDelayUntil+0x6a>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60fb      	str	r3, [r7, #12]
}
 8004944:	bf00      	nop
 8004946:	bf00      	nop
 8004948:	e7fd      	b.n	8004946 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 800494a:	f000 f8ef 	bl	8004b2c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800494e:	4b22      	ldr	r3, [pc, #136]	@ (80049d8 <vTaskDelayUntil+0xf8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	4413      	add	r3, r2
 800495c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	429a      	cmp	r2, r3
 8004966:	d20b      	bcs.n	8004980 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69fa      	ldr	r2, [r7, #28]
 800496e:	429a      	cmp	r2, r3
 8004970:	d211      	bcs.n	8004996 <vTaskDelayUntil+0xb6>
 8004972:	69fa      	ldr	r2, [r7, #28]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	429a      	cmp	r2, r3
 8004978:	d90d      	bls.n	8004996 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800497a:	2301      	movs	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
 800497e:	e00a      	b.n	8004996 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	69fa      	ldr	r2, [r7, #28]
 8004986:	429a      	cmp	r2, r3
 8004988:	d303      	bcc.n	8004992 <vTaskDelayUntil+0xb2>
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	429a      	cmp	r2, r3
 8004990:	d901      	bls.n	8004996 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004992:	2301      	movs	r3, #1
 8004994:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d006      	beq.n	80049b0 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80049a2:	69fa      	ldr	r2, [r7, #28]
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fd40 	bl	8005430 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80049b0:	f000 f8ca 	bl	8004b48 <xTaskResumeAll>
 80049b4:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d107      	bne.n	80049cc <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 80049bc:	4b07      	ldr	r3, [pc, #28]	@ (80049dc <vTaskDelayUntil+0xfc>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049cc:	bf00      	nop
 80049ce:	3728      	adds	r7, #40	@ 0x28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000df8 	.word	0x20000df8
 80049d8:	20000dd4 	.word	0x20000dd4
 80049dc:	e000ed04 	.word	0xe000ed04

080049e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d018      	beq.n	8004a24 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049f2:	4b14      	ldr	r3, [pc, #80]	@ (8004a44 <vTaskDelay+0x64>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <vTaskDelay+0x32>
	__asm volatile
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	60bb      	str	r3, [r7, #8]
}
 8004a0c:	bf00      	nop
 8004a0e:	bf00      	nop
 8004a10:	e7fd      	b.n	8004a0e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a12:	f000 f88b 	bl	8004b2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a16:	2100      	movs	r1, #0
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 fd09 	bl	8005430 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a1e:	f000 f893 	bl	8004b48 <xTaskResumeAll>
 8004a22:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d107      	bne.n	8004a3a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a2a:	4b07      	ldr	r3, [pc, #28]	@ (8004a48 <vTaskDelay+0x68>)
 8004a2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	f3bf 8f4f 	dsb	sy
 8004a36:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000df8 	.word	0x20000df8
 8004a48:	e000ed04 	.word	0xe000ed04

08004a4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	@ 0x28
 8004a50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a5a:	463a      	mov	r2, r7
 8004a5c:	1d39      	adds	r1, r7, #4
 8004a5e:	f107 0308 	add.w	r3, r7, #8
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fe ff9c 	bl	80039a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a68:	6839      	ldr	r1, [r7, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	9202      	str	r2, [sp, #8]
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2300      	movs	r3, #0
 8004a78:	460a      	mov	r2, r1
 8004a7a:	4924      	ldr	r1, [pc, #144]	@ (8004b0c <vTaskStartScheduler+0xc0>)
 8004a7c:	4824      	ldr	r0, [pc, #144]	@ (8004b10 <vTaskStartScheduler+0xc4>)
 8004a7e:	f7ff fd71 	bl	8004564 <xTaskCreateStatic>
 8004a82:	4603      	mov	r3, r0
 8004a84:	4a23      	ldr	r2, [pc, #140]	@ (8004b14 <vTaskStartScheduler+0xc8>)
 8004a86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a88:	4b22      	ldr	r3, [pc, #136]	@ (8004b14 <vTaskStartScheduler+0xc8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d002      	beq.n	8004a96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a90:	2301      	movs	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
 8004a94:	e001      	b.n	8004a9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d102      	bne.n	8004aa6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004aa0:	f000 fd1a 	bl	80054d8 <xTimerCreateTimerTask>
 8004aa4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d11b      	bne.n	8004ae4 <vTaskStartScheduler+0x98>
	__asm volatile
 8004aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab0:	f383 8811 	msr	BASEPRI, r3
 8004ab4:	f3bf 8f6f 	isb	sy
 8004ab8:	f3bf 8f4f 	dsb	sy
 8004abc:	613b      	str	r3, [r7, #16]
}
 8004abe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004ac0:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <vTaskStartScheduler+0xcc>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3354      	adds	r3, #84	@ 0x54
 8004ac6:	4a15      	ldr	r2, [pc, #84]	@ (8004b1c <vTaskStartScheduler+0xd0>)
 8004ac8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004aca:	4b15      	ldr	r3, [pc, #84]	@ (8004b20 <vTaskStartScheduler+0xd4>)
 8004acc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ad0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ad2:	4b14      	ldr	r3, [pc, #80]	@ (8004b24 <vTaskStartScheduler+0xd8>)
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ad8:	4b13      	ldr	r3, [pc, #76]	@ (8004b28 <vTaskStartScheduler+0xdc>)
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ade:	f001 f8df 	bl	8005ca0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004ae2:	e00f      	b.n	8004b04 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004aea:	d10b      	bne.n	8004b04 <vTaskStartScheduler+0xb8>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	60fb      	str	r3, [r7, #12]
}
 8004afe:	bf00      	nop
 8004b00:	bf00      	nop
 8004b02:	e7fd      	b.n	8004b00 <vTaskStartScheduler+0xb4>
}
 8004b04:	bf00      	nop
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	08006620 	.word	0x08006620
 8004b10:	0800515d 	.word	0x0800515d
 8004b14:	20000df4 	.word	0x20000df4
 8004b18:	200008fc 	.word	0x200008fc
 8004b1c:	20000010 	.word	0x20000010
 8004b20:	20000df0 	.word	0x20000df0
 8004b24:	20000ddc 	.word	0x20000ddc
 8004b28:	20000dd4 	.word	0x20000dd4

08004b2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b30:	4b04      	ldr	r3, [pc, #16]	@ (8004b44 <vTaskSuspendAll+0x18>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3301      	adds	r3, #1
 8004b36:	4a03      	ldr	r2, [pc, #12]	@ (8004b44 <vTaskSuspendAll+0x18>)
 8004b38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004b3a:	bf00      	nop
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000df8 	.word	0x20000df8

08004b48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b084      	sub	sp, #16
 8004b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b56:	4b42      	ldr	r3, [pc, #264]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <xTaskResumeAll+0x2e>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	603b      	str	r3, [r7, #0]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b76:	f001 f937 	bl	8005de8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b7a:	4b39      	ldr	r3, [pc, #228]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	4a37      	ldr	r2, [pc, #220]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b84:	4b36      	ldr	r3, [pc, #216]	@ (8004c60 <xTaskResumeAll+0x118>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d162      	bne.n	8004c52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b8c:	4b35      	ldr	r3, [pc, #212]	@ (8004c64 <xTaskResumeAll+0x11c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d05e      	beq.n	8004c52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b94:	e02f      	b.n	8004bf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b96:	4b34      	ldr	r3, [pc, #208]	@ (8004c68 <xTaskResumeAll+0x120>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3318      	adds	r3, #24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fe ffba 	bl	8003b1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	3304      	adds	r3, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe ffb5 	bl	8003b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004c6c <xTaskResumeAll+0x124>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d903      	bls.n	8004bc6 <xTaskResumeAll+0x7e>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc2:	4a2a      	ldr	r2, [pc, #168]	@ (8004c6c <xTaskResumeAll+0x124>)
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4a27      	ldr	r2, [pc, #156]	@ (8004c70 <xTaskResumeAll+0x128>)
 8004bd4:	441a      	add	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4610      	mov	r0, r2
 8004bde:	f7fe ff40 	bl	8003a62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be6:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <xTaskResumeAll+0x12c>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004bf0:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <xTaskResumeAll+0x130>)
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8004c68 <xTaskResumeAll+0x120>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1cb      	bne.n	8004b96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c04:	f000 fb66 	bl	80052d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c08:	4b1c      	ldr	r3, [pc, #112]	@ (8004c7c <xTaskResumeAll+0x134>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d010      	beq.n	8004c36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c14:	f000 f846 	bl	8004ca4 <xTaskIncrementTick>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d002      	beq.n	8004c24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004c1e:	4b16      	ldr	r3, [pc, #88]	@ (8004c78 <xTaskResumeAll+0x130>)
 8004c20:	2201      	movs	r2, #1
 8004c22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f1      	bne.n	8004c14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004c30:	4b12      	ldr	r3, [pc, #72]	@ (8004c7c <xTaskResumeAll+0x134>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c36:	4b10      	ldr	r3, [pc, #64]	@ (8004c78 <xTaskResumeAll+0x130>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d009      	beq.n	8004c52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c42:	4b0f      	ldr	r3, [pc, #60]	@ (8004c80 <xTaskResumeAll+0x138>)
 8004c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c48:	601a      	str	r2, [r3, #0]
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c52:	f001 f8fb 	bl	8005e4c <vPortExitCritical>

	return xAlreadyYielded;
 8004c56:	68bb      	ldr	r3, [r7, #8]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3710      	adds	r7, #16
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000df8 	.word	0x20000df8
 8004c64:	20000dd0 	.word	0x20000dd0
 8004c68:	20000d90 	.word	0x20000d90
 8004c6c:	20000dd8 	.word	0x20000dd8
 8004c70:	20000900 	.word	0x20000900
 8004c74:	200008fc 	.word	0x200008fc
 8004c78:	20000de4 	.word	0x20000de4
 8004c7c:	20000de0 	.word	0x20000de0
 8004c80:	e000ed04 	.word	0xe000ed04

08004c84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c8a:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <xTaskGetTickCount+0x1c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c90:	687b      	ldr	r3, [r7, #4]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	20000dd4 	.word	0x20000dd4

08004ca4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004caa:	2300      	movs	r3, #0
 8004cac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cae:	4b4f      	ldr	r3, [pc, #316]	@ (8004dec <xTaskIncrementTick+0x148>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f040 8090 	bne.w	8004dd8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8004df0 <xTaskIncrementTick+0x14c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8004df0 <xTaskIncrementTick+0x14c>)
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d121      	bne.n	8004d10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ccc:	4b49      	ldr	r3, [pc, #292]	@ (8004df4 <xTaskIncrementTick+0x150>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <xTaskIncrementTick+0x4a>
	__asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	603b      	str	r3, [r7, #0]
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xTaskIncrementTick+0x46>
 8004cee:	4b41      	ldr	r3, [pc, #260]	@ (8004df4 <xTaskIncrementTick+0x150>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	4b40      	ldr	r3, [pc, #256]	@ (8004df8 <xTaskIncrementTick+0x154>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8004df4 <xTaskIncrementTick+0x150>)
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	4a3e      	ldr	r2, [pc, #248]	@ (8004df8 <xTaskIncrementTick+0x154>)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	4b3e      	ldr	r3, [pc, #248]	@ (8004dfc <xTaskIncrementTick+0x158>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3301      	adds	r3, #1
 8004d08:	4a3c      	ldr	r2, [pc, #240]	@ (8004dfc <xTaskIncrementTick+0x158>)
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	f000 fae2 	bl	80052d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d10:	4b3b      	ldr	r3, [pc, #236]	@ (8004e00 <xTaskIncrementTick+0x15c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d349      	bcc.n	8004dae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1a:	4b36      	ldr	r3, [pc, #216]	@ (8004df4 <xTaskIncrementTick+0x150>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d104      	bne.n	8004d2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d24:	4b36      	ldr	r3, [pc, #216]	@ (8004e00 <xTaskIncrementTick+0x15c>)
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d2a:	601a      	str	r2, [r3, #0]
					break;
 8004d2c:	e03f      	b.n	8004dae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d2e:	4b31      	ldr	r3, [pc, #196]	@ (8004df4 <xTaskIncrementTick+0x150>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d203      	bcs.n	8004d4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d46:	4a2e      	ldr	r2, [pc, #184]	@ (8004e00 <xTaskIncrementTick+0x15c>)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d4c:	e02f      	b.n	8004dae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	3304      	adds	r3, #4
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fee2 	bl	8003b1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	3318      	adds	r3, #24
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe fed9 	bl	8003b1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d6e:	4b25      	ldr	r3, [pc, #148]	@ (8004e04 <xTaskIncrementTick+0x160>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d903      	bls.n	8004d7e <xTaskIncrementTick+0xda>
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7a:	4a22      	ldr	r2, [pc, #136]	@ (8004e04 <xTaskIncrementTick+0x160>)
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8004e08 <xTaskIncrementTick+0x164>)
 8004d8c:	441a      	add	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f7fe fe64 	bl	8003a62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8004e0c <xTaskIncrementTick+0x168>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d3b8      	bcc.n	8004d1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dac:	e7b5      	b.n	8004d1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004dae:	4b17      	ldr	r3, [pc, #92]	@ (8004e0c <xTaskIncrementTick+0x168>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004db4:	4914      	ldr	r1, [pc, #80]	@ (8004e08 <xTaskIncrementTick+0x164>)
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d901      	bls.n	8004dca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004dca:	4b11      	ldr	r3, [pc, #68]	@ (8004e10 <xTaskIncrementTick+0x16c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d007      	beq.n	8004de2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e004      	b.n	8004de2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8004e14 <xTaskIncrementTick+0x170>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	4a0d      	ldr	r2, [pc, #52]	@ (8004e14 <xTaskIncrementTick+0x170>)
 8004de0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004de2:	697b      	ldr	r3, [r7, #20]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}
 8004dec:	20000df8 	.word	0x20000df8
 8004df0:	20000dd4 	.word	0x20000dd4
 8004df4:	20000d88 	.word	0x20000d88
 8004df8:	20000d8c 	.word	0x20000d8c
 8004dfc:	20000de8 	.word	0x20000de8
 8004e00:	20000df0 	.word	0x20000df0
 8004e04:	20000dd8 	.word	0x20000dd8
 8004e08:	20000900 	.word	0x20000900
 8004e0c:	200008fc 	.word	0x200008fc
 8004e10:	20000de4 	.word	0x20000de4
 8004e14:	20000de0 	.word	0x20000de0

08004e18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8004ecc <vTaskSwitchContext+0xb4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e26:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed0 <vTaskSwitchContext+0xb8>)
 8004e28:	2201      	movs	r2, #1
 8004e2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e2c:	e047      	b.n	8004ebe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004e2e:	4b28      	ldr	r3, [pc, #160]	@ (8004ed0 <vTaskSwitchContext+0xb8>)
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e34:	4b27      	ldr	r3, [pc, #156]	@ (8004ed4 <vTaskSwitchContext+0xbc>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	e011      	b.n	8004e60 <vTaskSwitchContext+0x48>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10b      	bne.n	8004e5a <vTaskSwitchContext+0x42>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	607b      	str	r3, [r7, #4]
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop
 8004e58:	e7fd      	b.n	8004e56 <vTaskSwitchContext+0x3e>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	60fb      	str	r3, [r7, #12]
 8004e60:	491d      	ldr	r1, [pc, #116]	@ (8004ed8 <vTaskSwitchContext+0xc0>)
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0e3      	beq.n	8004e3c <vTaskSwitchContext+0x24>
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4a16      	ldr	r2, [pc, #88]	@ (8004ed8 <vTaskSwitchContext+0xc0>)
 8004e80:	4413      	add	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	3308      	adds	r3, #8
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d104      	bne.n	8004ea4 <vTaskSwitchContext+0x8c>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	685a      	ldr	r2, [r3, #4]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	605a      	str	r2, [r3, #4]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8004edc <vTaskSwitchContext+0xc4>)
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	4a09      	ldr	r2, [pc, #36]	@ (8004ed4 <vTaskSwitchContext+0xbc>)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004eb4:	4b09      	ldr	r3, [pc, #36]	@ (8004edc <vTaskSwitchContext+0xc4>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3354      	adds	r3, #84	@ 0x54
 8004eba:	4a09      	ldr	r2, [pc, #36]	@ (8004ee0 <vTaskSwitchContext+0xc8>)
 8004ebc:	6013      	str	r3, [r2, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	3714      	adds	r7, #20
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr
 8004eca:	bf00      	nop
 8004ecc:	20000df8 	.word	0x20000df8
 8004ed0:	20000de4 	.word	0x20000de4
 8004ed4:	20000dd8 	.word	0x20000dd8
 8004ed8:	20000900 	.word	0x20000900
 8004edc:	200008fc 	.word	0x200008fc
 8004ee0:	20000010 	.word	0x20000010

08004ee4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d10b      	bne.n	8004f0c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60fb      	str	r3, [r7, #12]
}
 8004f06:	bf00      	nop
 8004f08:	bf00      	nop
 8004f0a:	e7fd      	b.n	8004f08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f0c:	4b07      	ldr	r3, [pc, #28]	@ (8004f2c <vTaskPlaceOnEventList+0x48>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3318      	adds	r3, #24
 8004f12:	4619      	mov	r1, r3
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f7fe fdc8 	bl	8003aaa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	6838      	ldr	r0, [r7, #0]
 8004f1e:	f000 fa87 	bl	8005430 <prvAddCurrentTaskToDelayedList>
}
 8004f22:	bf00      	nop
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200008fc 	.word	0x200008fc

08004f30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10b      	bne.n	8004f5a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f46:	f383 8811 	msr	BASEPRI, r3
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	f3bf 8f4f 	dsb	sy
 8004f52:	617b      	str	r3, [r7, #20]
}
 8004f54:	bf00      	nop
 8004f56:	bf00      	nop
 8004f58:	e7fd      	b.n	8004f56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3318      	adds	r3, #24
 8004f60:	4619      	mov	r1, r3
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f7fe fd7d 	bl	8003a62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d002      	beq.n	8004f74 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f72:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f74:	6879      	ldr	r1, [r7, #4]
 8004f76:	68b8      	ldr	r0, [r7, #8]
 8004f78:	f000 fa5a 	bl	8005430 <prvAddCurrentTaskToDelayedList>
	}
 8004f7c:	bf00      	nop
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	200008fc 	.word	0x200008fc

08004f88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10b      	bne.n	8004fb6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	3318      	adds	r3, #24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7fe fdae 	bl	8003b1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8005038 <xTaskRemoveFromEventList+0xb0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d11d      	bne.n	8005004 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3304      	adds	r3, #4
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fe fda5 	bl	8003b1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd6:	4b19      	ldr	r3, [pc, #100]	@ (800503c <xTaskRemoveFromEventList+0xb4>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d903      	bls.n	8004fe6 <xTaskRemoveFromEventList+0x5e>
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe2:	4a16      	ldr	r2, [pc, #88]	@ (800503c <xTaskRemoveFromEventList+0xb4>)
 8004fe4:	6013      	str	r3, [r2, #0]
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fea:	4613      	mov	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	4413      	add	r3, r2
 8004ff0:	009b      	lsls	r3, r3, #2
 8004ff2:	4a13      	ldr	r2, [pc, #76]	@ (8005040 <xTaskRemoveFromEventList+0xb8>)
 8004ff4:	441a      	add	r2, r3
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	f7fe fd30 	bl	8003a62 <vListInsertEnd>
 8005002:	e005      	b.n	8005010 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	3318      	adds	r3, #24
 8005008:	4619      	mov	r1, r3
 800500a:	480e      	ldr	r0, [pc, #56]	@ (8005044 <xTaskRemoveFromEventList+0xbc>)
 800500c:	f7fe fd29 	bl	8003a62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005014:	4b0c      	ldr	r3, [pc, #48]	@ (8005048 <xTaskRemoveFromEventList+0xc0>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800501a:	429a      	cmp	r2, r3
 800501c:	d905      	bls.n	800502a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005022:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <xTaskRemoveFromEventList+0xc4>)
 8005024:	2201      	movs	r2, #1
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e001      	b.n	800502e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800502a:	2300      	movs	r3, #0
 800502c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800502e:	697b      	ldr	r3, [r7, #20]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20000df8 	.word	0x20000df8
 800503c:	20000dd8 	.word	0x20000dd8
 8005040:	20000900 	.word	0x20000900
 8005044:	20000d90 	.word	0x20000d90
 8005048:	200008fc 	.word	0x200008fc
 800504c:	20000de4 	.word	0x20000de4

08005050 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005058:	4b06      	ldr	r3, [pc, #24]	@ (8005074 <vTaskInternalSetTimeOutState+0x24>)
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <vTaskInternalSetTimeOutState+0x28>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr
 8005074:	20000de8 	.word	0x20000de8
 8005078:	20000dd4 	.word	0x20000dd4

0800507c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10b      	bne.n	80050a4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	613b      	str	r3, [r7, #16]
}
 800509e:	bf00      	nop
 80050a0:	bf00      	nop
 80050a2:	e7fd      	b.n	80050a0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	60fb      	str	r3, [r7, #12]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80050c2:	f000 fe91 	bl	8005de8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050c6:	4b1d      	ldr	r3, [pc, #116]	@ (800513c <xTaskCheckForTimeOut+0xc0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	69ba      	ldr	r2, [r7, #24]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050de:	d102      	bne.n	80050e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
 80050e4:	e023      	b.n	800512e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	4b15      	ldr	r3, [pc, #84]	@ (8005140 <xTaskCheckForTimeOut+0xc4>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d007      	beq.n	8005102 <xTaskCheckForTimeOut+0x86>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d302      	bcc.n	8005102 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	61fb      	str	r3, [r7, #28]
 8005100:	e015      	b.n	800512e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	429a      	cmp	r2, r3
 800510a:	d20b      	bcs.n	8005124 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad2      	subs	r2, r2, r3
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ff99 	bl	8005050 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800511e:	2300      	movs	r3, #0
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	e004      	b.n	800512e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2200      	movs	r2, #0
 8005128:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800512a:	2301      	movs	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800512e:	f000 fe8d 	bl	8005e4c <vPortExitCritical>

	return xReturn;
 8005132:	69fb      	ldr	r3, [r7, #28]
}
 8005134:	4618      	mov	r0, r3
 8005136:	3720      	adds	r7, #32
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	20000dd4 	.word	0x20000dd4
 8005140:	20000de8 	.word	0x20000de8

08005144 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005144:	b480      	push	{r7}
 8005146:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005148:	4b03      	ldr	r3, [pc, #12]	@ (8005158 <vTaskMissedYield+0x14>)
 800514a:	2201      	movs	r2, #1
 800514c:	601a      	str	r2, [r3, #0]
}
 800514e:	bf00      	nop
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	20000de4 	.word	0x20000de4

0800515c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005164:	f000 f852 	bl	800520c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005168:	4b06      	ldr	r3, [pc, #24]	@ (8005184 <prvIdleTask+0x28>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d9f9      	bls.n	8005164 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005170:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <prvIdleTask+0x2c>)
 8005172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	f3bf 8f4f 	dsb	sy
 800517c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005180:	e7f0      	b.n	8005164 <prvIdleTask+0x8>
 8005182:	bf00      	nop
 8005184:	20000900 	.word	0x20000900
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
 8005196:	e00c      	b.n	80051b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	4a12      	ldr	r2, [pc, #72]	@ (80051ec <prvInitialiseTaskLists+0x60>)
 80051a4:	4413      	add	r3, r2
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe fc2e 	bl	8003a08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3301      	adds	r3, #1
 80051b0:	607b      	str	r3, [r7, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b37      	cmp	r3, #55	@ 0x37
 80051b6:	d9ef      	bls.n	8005198 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051b8:	480d      	ldr	r0, [pc, #52]	@ (80051f0 <prvInitialiseTaskLists+0x64>)
 80051ba:	f7fe fc25 	bl	8003a08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051be:	480d      	ldr	r0, [pc, #52]	@ (80051f4 <prvInitialiseTaskLists+0x68>)
 80051c0:	f7fe fc22 	bl	8003a08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051c4:	480c      	ldr	r0, [pc, #48]	@ (80051f8 <prvInitialiseTaskLists+0x6c>)
 80051c6:	f7fe fc1f 	bl	8003a08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051ca:	480c      	ldr	r0, [pc, #48]	@ (80051fc <prvInitialiseTaskLists+0x70>)
 80051cc:	f7fe fc1c 	bl	8003a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051d0:	480b      	ldr	r0, [pc, #44]	@ (8005200 <prvInitialiseTaskLists+0x74>)
 80051d2:	f7fe fc19 	bl	8003a08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <prvInitialiseTaskLists+0x78>)
 80051d8:	4a05      	ldr	r2, [pc, #20]	@ (80051f0 <prvInitialiseTaskLists+0x64>)
 80051da:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005208 <prvInitialiseTaskLists+0x7c>)
 80051de:	4a05      	ldr	r2, [pc, #20]	@ (80051f4 <prvInitialiseTaskLists+0x68>)
 80051e0:	601a      	str	r2, [r3, #0]
}
 80051e2:	bf00      	nop
 80051e4:	3708      	adds	r7, #8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000900 	.word	0x20000900
 80051f0:	20000d60 	.word	0x20000d60
 80051f4:	20000d74 	.word	0x20000d74
 80051f8:	20000d90 	.word	0x20000d90
 80051fc:	20000da4 	.word	0x20000da4
 8005200:	20000dbc 	.word	0x20000dbc
 8005204:	20000d88 	.word	0x20000d88
 8005208:	20000d8c 	.word	0x20000d8c

0800520c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005212:	e019      	b.n	8005248 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005214:	f000 fde8 	bl	8005de8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005218:	4b10      	ldr	r3, [pc, #64]	@ (800525c <prvCheckTasksWaitingTermination+0x50>)
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4618      	mov	r0, r3
 8005226:	f7fe fc79 	bl	8003b1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800522a:	4b0d      	ldr	r3, [pc, #52]	@ (8005260 <prvCheckTasksWaitingTermination+0x54>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3b01      	subs	r3, #1
 8005230:	4a0b      	ldr	r2, [pc, #44]	@ (8005260 <prvCheckTasksWaitingTermination+0x54>)
 8005232:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005234:	4b0b      	ldr	r3, [pc, #44]	@ (8005264 <prvCheckTasksWaitingTermination+0x58>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3b01      	subs	r3, #1
 800523a:	4a0a      	ldr	r2, [pc, #40]	@ (8005264 <prvCheckTasksWaitingTermination+0x58>)
 800523c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800523e:	f000 fe05 	bl	8005e4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f810 	bl	8005268 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005248:	4b06      	ldr	r3, [pc, #24]	@ (8005264 <prvCheckTasksWaitingTermination+0x58>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1e1      	bne.n	8005214 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005250:	bf00      	nop
 8005252:	bf00      	nop
 8005254:	3708      	adds	r7, #8
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	20000da4 	.word	0x20000da4
 8005260:	20000dd0 	.word	0x20000dd0
 8005264:	20000db8 	.word	0x20000db8

08005268 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3354      	adds	r3, #84	@ 0x54
 8005274:	4618      	mov	r0, r3
 8005276:	f001 f8cf 	bl	8006418 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005288:	4618      	mov	r0, r3
 800528a:	f000 ff9d 	bl	80061c8 <vPortFree>
				vPortFree( pxTCB );
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 ff9a 	bl	80061c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005294:	e019      	b.n	80052ca <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800529c:	2b01      	cmp	r3, #1
 800529e:	d103      	bne.n	80052a8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 ff91 	bl	80061c8 <vPortFree>
	}
 80052a6:	e010      	b.n	80052ca <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80052ae:	2b02      	cmp	r3, #2
 80052b0:	d00b      	beq.n	80052ca <prvDeleteTCB+0x62>
	__asm volatile
 80052b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	60fb      	str	r3, [r7, #12]
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop
 80052c8:	e7fd      	b.n	80052c6 <prvDeleteTCB+0x5e>
	}
 80052ca:	bf00      	nop
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052da:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <prvResetNextTaskUnblockTime+0x38>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d104      	bne.n	80052ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052e4:	4b0a      	ldr	r3, [pc, #40]	@ (8005310 <prvResetNextTaskUnblockTime+0x3c>)
 80052e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80052ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052ec:	e008      	b.n	8005300 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ee:	4b07      	ldr	r3, [pc, #28]	@ (800530c <prvResetNextTaskUnblockTime+0x38>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a04      	ldr	r2, [pc, #16]	@ (8005310 <prvResetNextTaskUnblockTime+0x3c>)
 80052fe:	6013      	str	r3, [r2, #0]
}
 8005300:	bf00      	nop
 8005302:	370c      	adds	r7, #12
 8005304:	46bd      	mov	sp, r7
 8005306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530a:	4770      	bx	lr
 800530c:	20000d88 	.word	0x20000d88
 8005310:	20000df0 	.word	0x20000df0

08005314 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800531a:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <xTaskGetSchedulerState+0x34>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d102      	bne.n	8005328 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005322:	2301      	movs	r3, #1
 8005324:	607b      	str	r3, [r7, #4]
 8005326:	e008      	b.n	800533a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005328:	4b08      	ldr	r3, [pc, #32]	@ (800534c <xTaskGetSchedulerState+0x38>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d102      	bne.n	8005336 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005330:	2302      	movs	r3, #2
 8005332:	607b      	str	r3, [r7, #4]
 8005334:	e001      	b.n	800533a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005336:	2300      	movs	r3, #0
 8005338:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800533a:	687b      	ldr	r3, [r7, #4]
	}
 800533c:	4618      	mov	r0, r3
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	20000ddc 	.word	0x20000ddc
 800534c:	20000df8 	.word	0x20000df8

08005350 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800535c:	2300      	movs	r3, #0
 800535e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d058      	beq.n	8005418 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005366:	4b2f      	ldr	r3, [pc, #188]	@ (8005424 <xTaskPriorityDisinherit+0xd4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	693a      	ldr	r2, [r7, #16]
 800536c:	429a      	cmp	r2, r3
 800536e:	d00b      	beq.n	8005388 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	60fb      	str	r3, [r7, #12]
}
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538c:	2b00      	cmp	r3, #0
 800538e:	d10b      	bne.n	80053a8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
 800539c:	f3bf 8f4f 	dsb	sy
 80053a0:	60bb      	str	r3, [r7, #8]
}
 80053a2:	bf00      	nop
 80053a4:	bf00      	nop
 80053a6:	e7fd      	b.n	80053a4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ac:	1e5a      	subs	r2, r3, #1
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d02c      	beq.n	8005418 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d128      	bne.n	8005418 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe fba6 	bl	8003b1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e8:	4b0f      	ldr	r3, [pc, #60]	@ (8005428 <xTaskPriorityDisinherit+0xd8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d903      	bls.n	80053f8 <xTaskPriorityDisinherit+0xa8>
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f4:	4a0c      	ldr	r2, [pc, #48]	@ (8005428 <xTaskPriorityDisinherit+0xd8>)
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053fc:	4613      	mov	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	4413      	add	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4a09      	ldr	r2, [pc, #36]	@ (800542c <xTaskPriorityDisinherit+0xdc>)
 8005406:	441a      	add	r2, r3
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	3304      	adds	r3, #4
 800540c:	4619      	mov	r1, r3
 800540e:	4610      	mov	r0, r2
 8005410:	f7fe fb27 	bl	8003a62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005418:	697b      	ldr	r3, [r7, #20]
	}
 800541a:	4618      	mov	r0, r3
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200008fc 	.word	0x200008fc
 8005428:	20000dd8 	.word	0x20000dd8
 800542c:	20000900 	.word	0x20000900

08005430 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800543a:	4b21      	ldr	r3, [pc, #132]	@ (80054c0 <prvAddCurrentTaskToDelayedList+0x90>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005440:	4b20      	ldr	r3, [pc, #128]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	3304      	adds	r3, #4
 8005446:	4618      	mov	r0, r3
 8005448:	f7fe fb68 	bl	8003b1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005452:	d10a      	bne.n	800546a <prvAddCurrentTaskToDelayedList+0x3a>
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545a:	4b1a      	ldr	r3, [pc, #104]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4819      	ldr	r0, [pc, #100]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005464:	f7fe fafd 	bl	8003a62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005468:	e026      	b.n	80054b8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005472:	4b14      	ldr	r3, [pc, #80]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	429a      	cmp	r2, r3
 8005480:	d209      	bcs.n	8005496 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005482:	4b12      	ldr	r3, [pc, #72]	@ (80054cc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	4b0f      	ldr	r3, [pc, #60]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3304      	adds	r3, #4
 800548c:	4619      	mov	r1, r3
 800548e:	4610      	mov	r0, r2
 8005490:	f7fe fb0b 	bl	8003aaa <vListInsert>
}
 8005494:	e010      	b.n	80054b8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005496:	4b0e      	ldr	r3, [pc, #56]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	4b0a      	ldr	r3, [pc, #40]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0x94>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3304      	adds	r3, #4
 80054a0:	4619      	mov	r1, r3
 80054a2:	4610      	mov	r0, r2
 80054a4:	f7fe fb01 	bl	8003aaa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d202      	bcs.n	80054b8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80054b2:	4a08      	ldr	r2, [pc, #32]	@ (80054d4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6013      	str	r3, [r2, #0]
}
 80054b8:	bf00      	nop
 80054ba:	3710      	adds	r7, #16
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000dd4 	.word	0x20000dd4
 80054c4:	200008fc 	.word	0x200008fc
 80054c8:	20000dbc 	.word	0x20000dbc
 80054cc:	20000d8c 	.word	0x20000d8c
 80054d0:	20000d88 	.word	0x20000d88
 80054d4:	20000df0 	.word	0x20000df0

080054d8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08a      	sub	sp, #40	@ 0x28
 80054dc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054e2:	f000 fb13 	bl	8005b0c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054e6:	4b1d      	ldr	r3, [pc, #116]	@ (800555c <xTimerCreateTimerTask+0x84>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d021      	beq.n	8005532 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054f6:	1d3a      	adds	r2, r7, #4
 80054f8:	f107 0108 	add.w	r1, r7, #8
 80054fc:	f107 030c 	add.w	r3, r7, #12
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fa67 	bl	80039d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005506:	6879      	ldr	r1, [r7, #4]
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	9202      	str	r2, [sp, #8]
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	2302      	movs	r3, #2
 8005512:	9300      	str	r3, [sp, #0]
 8005514:	2300      	movs	r3, #0
 8005516:	460a      	mov	r2, r1
 8005518:	4911      	ldr	r1, [pc, #68]	@ (8005560 <xTimerCreateTimerTask+0x88>)
 800551a:	4812      	ldr	r0, [pc, #72]	@ (8005564 <xTimerCreateTimerTask+0x8c>)
 800551c:	f7ff f822 	bl	8004564 <xTaskCreateStatic>
 8005520:	4603      	mov	r3, r0
 8005522:	4a11      	ldr	r2, [pc, #68]	@ (8005568 <xTimerCreateTimerTask+0x90>)
 8005524:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005526:	4b10      	ldr	r3, [pc, #64]	@ (8005568 <xTimerCreateTimerTask+0x90>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800552e:	2301      	movs	r3, #1
 8005530:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	613b      	str	r3, [r7, #16]
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	e7fd      	b.n	800554c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005550:	697b      	ldr	r3, [r7, #20]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000e2c 	.word	0x20000e2c
 8005560:	08006628 	.word	0x08006628
 8005564:	080056a5 	.word	0x080056a5
 8005568:	20000e30 	.word	0x20000e30

0800556c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08a      	sub	sp, #40	@ 0x28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]
 8005578:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800557a:	2300      	movs	r3, #0
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10b      	bne.n	800559c <xTimerGenericCommand+0x30>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	623b      	str	r3, [r7, #32]
}
 8005596:	bf00      	nop
 8005598:	bf00      	nop
 800559a:	e7fd      	b.n	8005598 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800559c:	4b19      	ldr	r3, [pc, #100]	@ (8005604 <xTimerGenericCommand+0x98>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d02a      	beq.n	80055fa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b05      	cmp	r3, #5
 80055b4:	dc18      	bgt.n	80055e8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80055b6:	f7ff fead 	bl	8005314 <xTaskGetSchedulerState>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d109      	bne.n	80055d4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055c0:	4b10      	ldr	r3, [pc, #64]	@ (8005604 <xTimerGenericCommand+0x98>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	f107 0110 	add.w	r1, r7, #16
 80055c8:	2300      	movs	r3, #0
 80055ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055cc:	f7fe fbda 	bl	8003d84 <xQueueGenericSend>
 80055d0:	6278      	str	r0, [r7, #36]	@ 0x24
 80055d2:	e012      	b.n	80055fa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <xTimerGenericCommand+0x98>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	f107 0110 	add.w	r1, r7, #16
 80055dc:	2300      	movs	r3, #0
 80055de:	2200      	movs	r2, #0
 80055e0:	f7fe fbd0 	bl	8003d84 <xQueueGenericSend>
 80055e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80055e6:	e008      	b.n	80055fa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055e8:	4b06      	ldr	r3, [pc, #24]	@ (8005604 <xTimerGenericCommand+0x98>)
 80055ea:	6818      	ldr	r0, [r3, #0]
 80055ec:	f107 0110 	add.w	r1, r7, #16
 80055f0:	2300      	movs	r3, #0
 80055f2:	683a      	ldr	r2, [r7, #0]
 80055f4:	f7fe fcc8 	bl	8003f88 <xQueueGenericSendFromISR>
 80055f8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3728      	adds	r7, #40	@ 0x28
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000e2c 	.word	0x20000e2c

08005608 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b088      	sub	sp, #32
 800560c:	af02      	add	r7, sp, #8
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005612:	4b23      	ldr	r3, [pc, #140]	@ (80056a0 <prvProcessExpiredTimer+0x98>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3304      	adds	r3, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f7fe fa7b 	bl	8003b1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800562c:	f003 0304 	and.w	r3, r3, #4
 8005630:	2b00      	cmp	r3, #0
 8005632:	d023      	beq.n	800567c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	699a      	ldr	r2, [r3, #24]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	18d1      	adds	r1, r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	6978      	ldr	r0, [r7, #20]
 8005642:	f000 f8d5 	bl	80057f0 <prvInsertTimerInActiveList>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d020      	beq.n	800568e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800564c:	2300      	movs	r3, #0
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	2300      	movs	r3, #0
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	2100      	movs	r1, #0
 8005656:	6978      	ldr	r0, [r7, #20]
 8005658:	f7ff ff88 	bl	800556c <xTimerGenericCommand>
 800565c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d114      	bne.n	800568e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005668:	f383 8811 	msr	BASEPRI, r3
 800566c:	f3bf 8f6f 	isb	sy
 8005670:	f3bf 8f4f 	dsb	sy
 8005674:	60fb      	str	r3, [r7, #12]
}
 8005676:	bf00      	nop
 8005678:	bf00      	nop
 800567a:	e7fd      	b.n	8005678 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005682:	f023 0301 	bic.w	r3, r3, #1
 8005686:	b2da      	uxtb	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	6978      	ldr	r0, [r7, #20]
 8005694:	4798      	blx	r3
}
 8005696:	bf00      	nop
 8005698:	3718      	adds	r7, #24
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000e24 	.word	0x20000e24

080056a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056ac:	f107 0308 	add.w	r3, r7, #8
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 f859 	bl	8005768 <prvGetNextExpireTime>
 80056b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	4619      	mov	r1, r3
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 f805 	bl	80056cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056c2:	f000 f8d7 	bl	8005874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056c6:	bf00      	nop
 80056c8:	e7f0      	b.n	80056ac <prvTimerTask+0x8>
	...

080056cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056d6:	f7ff fa29 	bl	8004b2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056da:	f107 0308 	add.w	r3, r7, #8
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 f866 	bl	80057b0 <prvSampleTimeNow>
 80056e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d130      	bne.n	800574e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d10a      	bne.n	8005708 <prvProcessTimerOrBlockTask+0x3c>
 80056f2:	687a      	ldr	r2, [r7, #4]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d806      	bhi.n	8005708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056fa:	f7ff fa25 	bl	8004b48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056fe:	68f9      	ldr	r1, [r7, #12]
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff ff81 	bl	8005608 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005706:	e024      	b.n	8005752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d008      	beq.n	8005720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800570e:	4b13      	ldr	r3, [pc, #76]	@ (800575c <prvProcessTimerOrBlockTask+0x90>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <prvProcessTimerOrBlockTask+0x50>
 8005718:	2301      	movs	r3, #1
 800571a:	e000      	b.n	800571e <prvProcessTimerOrBlockTask+0x52>
 800571c:	2300      	movs	r3, #0
 800571e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005720:	4b0f      	ldr	r3, [pc, #60]	@ (8005760 <prvProcessTimerOrBlockTask+0x94>)
 8005722:	6818      	ldr	r0, [r3, #0]
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	4619      	mov	r1, r3
 800572e:	f7fe fee5 	bl	80044fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005732:	f7ff fa09 	bl	8004b48 <xTaskResumeAll>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d10a      	bne.n	8005752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800573c:	4b09      	ldr	r3, [pc, #36]	@ (8005764 <prvProcessTimerOrBlockTask+0x98>)
 800573e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005742:	601a      	str	r2, [r3, #0]
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	f3bf 8f6f 	isb	sy
}
 800574c:	e001      	b.n	8005752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800574e:	f7ff f9fb 	bl	8004b48 <xTaskResumeAll>
}
 8005752:	bf00      	nop
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	20000e28 	.word	0x20000e28
 8005760:	20000e2c 	.word	0x20000e2c
 8005764:	e000ed04 	.word	0xe000ed04

08005768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005770:	4b0e      	ldr	r3, [pc, #56]	@ (80057ac <prvGetNextExpireTime+0x44>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <prvGetNextExpireTime+0x16>
 800577a:	2201      	movs	r2, #1
 800577c:	e000      	b.n	8005780 <prvGetNextExpireTime+0x18>
 800577e:	2200      	movs	r2, #0
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800578c:	4b07      	ldr	r3, [pc, #28]	@ (80057ac <prvGetNextExpireTime+0x44>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	60fb      	str	r3, [r7, #12]
 8005796:	e001      	b.n	800579c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800579c:	68fb      	ldr	r3, [r7, #12]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3714      	adds	r7, #20
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
 80057aa:	bf00      	nop
 80057ac:	20000e24 	.word	0x20000e24

080057b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80057b8:	f7ff fa64 	bl	8004c84 <xTaskGetTickCount>
 80057bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80057be:	4b0b      	ldr	r3, [pc, #44]	@ (80057ec <prvSampleTimeNow+0x3c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d205      	bcs.n	80057d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057c8:	f000 f93a 	bl	8005a40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e002      	b.n	80057da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057da:	4a04      	ldr	r2, [pc, #16]	@ (80057ec <prvSampleTimeNow+0x3c>)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057e0:	68fb      	ldr	r3, [r7, #12]
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000e34 	.word	0x20000e34

080057f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	429a      	cmp	r2, r3
 8005814:	d812      	bhi.n	800583c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	1ad2      	subs	r2, r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	429a      	cmp	r2, r3
 8005822:	d302      	bcc.n	800582a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005824:	2301      	movs	r3, #1
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	e01b      	b.n	8005862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800582a:	4b10      	ldr	r3, [pc, #64]	@ (800586c <prvInsertTimerInActiveList+0x7c>)
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	3304      	adds	r3, #4
 8005832:	4619      	mov	r1, r3
 8005834:	4610      	mov	r0, r2
 8005836:	f7fe f938 	bl	8003aaa <vListInsert>
 800583a:	e012      	b.n	8005862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800583c:	687a      	ldr	r2, [r7, #4]
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	429a      	cmp	r2, r3
 8005842:	d206      	bcs.n	8005852 <prvInsertTimerInActiveList+0x62>
 8005844:	68ba      	ldr	r2, [r7, #8]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d302      	bcc.n	8005852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]
 8005850:	e007      	b.n	8005862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005852:	4b07      	ldr	r3, [pc, #28]	@ (8005870 <prvInsertTimerInActiveList+0x80>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3304      	adds	r3, #4
 800585a:	4619      	mov	r1, r3
 800585c:	4610      	mov	r0, r2
 800585e:	f7fe f924 	bl	8003aaa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005862:	697b      	ldr	r3, [r7, #20]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20000e28 	.word	0x20000e28
 8005870:	20000e24 	.word	0x20000e24

08005874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08e      	sub	sp, #56	@ 0x38
 8005878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800587a:	e0ce      	b.n	8005a1a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	da19      	bge.n	80058b6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005882:	1d3b      	adds	r3, r7, #4
 8005884:	3304      	adds	r3, #4
 8005886:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d10b      	bne.n	80058a6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	61fb      	str	r3, [r7, #28]
}
 80058a0:	bf00      	nop
 80058a2:	bf00      	nop
 80058a4:	e7fd      	b.n	80058a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058ac:	6850      	ldr	r0, [r2, #4]
 80058ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80058b0:	6892      	ldr	r2, [r2, #8]
 80058b2:	4611      	mov	r1, r2
 80058b4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f2c0 80ae 	blt.w	8005a1a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058cc:	3304      	adds	r3, #4
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe f924 	bl	8003b1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058d4:	463b      	mov	r3, r7
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff ff6a 	bl	80057b0 <prvSampleTimeNow>
 80058dc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b09      	cmp	r3, #9
 80058e2:	f200 8097 	bhi.w	8005a14 <prvProcessReceivedCommands+0x1a0>
 80058e6:	a201      	add	r2, pc, #4	@ (adr r2, 80058ec <prvProcessReceivedCommands+0x78>)
 80058e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ec:	08005915 	.word	0x08005915
 80058f0:	08005915 	.word	0x08005915
 80058f4:	08005915 	.word	0x08005915
 80058f8:	0800598b 	.word	0x0800598b
 80058fc:	0800599f 	.word	0x0800599f
 8005900:	080059eb 	.word	0x080059eb
 8005904:	08005915 	.word	0x08005915
 8005908:	08005915 	.word	0x08005915
 800590c:	0800598b 	.word	0x0800598b
 8005910:	0800599f 	.word	0x0800599f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005916:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	b2da      	uxtb	r2, r3
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	18d1      	adds	r1, r2, r3
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005932:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005934:	f7ff ff5c 	bl	80057f0 <prvInsertTimerInActiveList>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	d06c      	beq.n	8005a18 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800593e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005940:	6a1b      	ldr	r3, [r3, #32]
 8005942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d061      	beq.n	8005a18 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	441a      	add	r2, r3
 800595c:	2300      	movs	r3, #0
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	2100      	movs	r1, #0
 8005964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005966:	f7ff fe01 	bl	800556c <xTimerGenericCommand>
 800596a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d152      	bne.n	8005a18 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	61bb      	str	r3, [r7, #24]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800598a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	b2da      	uxtb	r2, r3
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800599c:	e03d      	b.n	8005a1a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800599e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059a4:	f043 0301 	orr.w	r3, r3, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	617b      	str	r3, [r7, #20]
}
 80059d0:	bf00      	nop
 80059d2:	bf00      	nop
 80059d4:	e7fd      	b.n	80059d2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d8:	699a      	ldr	r2, [r3, #24]
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	18d1      	adds	r1, r2, r3
 80059de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059e4:	f7ff ff04 	bl	80057f0 <prvInsertTimerInActiveList>
					break;
 80059e8:	e017      	b.n	8005a1a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d103      	bne.n	8005a00 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80059f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059fa:	f000 fbe5 	bl	80061c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059fe:	e00c      	b.n	8005a1a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a06:	f023 0301 	bic.w	r3, r3, #1
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005a12:	e002      	b.n	8005a1a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005a14:	bf00      	nop
 8005a16:	e000      	b.n	8005a1a <prvProcessReceivedCommands+0x1a6>
					break;
 8005a18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a1a:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <prvProcessReceivedCommands+0x1c8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	1d39      	adds	r1, r7, #4
 8005a20:	2200      	movs	r2, #0
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe fb4e 	bl	80040c4 <xQueueReceive>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f47f af26 	bne.w	800587c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005a30:	bf00      	nop
 8005a32:	bf00      	nop
 8005a34:	3730      	adds	r7, #48	@ 0x30
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000e2c 	.word	0x20000e2c

08005a40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b088      	sub	sp, #32
 8005a44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a46:	e049      	b.n	8005adc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a48:	4b2e      	ldr	r3, [pc, #184]	@ (8005b04 <prvSwitchTimerLists+0xc4>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a52:	4b2c      	ldr	r3, [pc, #176]	@ (8005b04 <prvSwitchTimerLists+0xc4>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3304      	adds	r3, #4
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fe f85b 	bl	8003b1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d02f      	beq.n	8005adc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	693a      	ldr	r2, [r7, #16]
 8005a82:	4413      	add	r3, r2
 8005a84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d90e      	bls.n	8005aac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	68ba      	ldr	r2, [r7, #8]
 8005a92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a9a:	4b1a      	ldr	r3, [pc, #104]	@ (8005b04 <prvSwitchTimerLists+0xc4>)
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7fe f800 	bl	8003aaa <vListInsert>
 8005aaa:	e017      	b.n	8005adc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aac:	2300      	movs	r3, #0
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	68f8      	ldr	r0, [r7, #12]
 8005ab8:	f7ff fd58 	bl	800556c <xTimerGenericCommand>
 8005abc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	603b      	str	r3, [r7, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	bf00      	nop
 8005ada:	e7fd      	b.n	8005ad8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005adc:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <prvSwitchTimerLists+0xc4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1b0      	bne.n	8005a48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ae6:	4b07      	ldr	r3, [pc, #28]	@ (8005b04 <prvSwitchTimerLists+0xc4>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005aec:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <prvSwitchTimerLists+0xc8>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a04      	ldr	r2, [pc, #16]	@ (8005b04 <prvSwitchTimerLists+0xc4>)
 8005af2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005af4:	4a04      	ldr	r2, [pc, #16]	@ (8005b08 <prvSwitchTimerLists+0xc8>)
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6013      	str	r3, [r2, #0]
}
 8005afa:	bf00      	nop
 8005afc:	3718      	adds	r7, #24
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}
 8005b02:	bf00      	nop
 8005b04:	20000e24 	.word	0x20000e24
 8005b08:	20000e28 	.word	0x20000e28

08005b0c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b12:	f000 f969 	bl	8005de8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b16:	4b15      	ldr	r3, [pc, #84]	@ (8005b6c <prvCheckForValidListAndQueue+0x60>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d120      	bne.n	8005b60 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b1e:	4814      	ldr	r0, [pc, #80]	@ (8005b70 <prvCheckForValidListAndQueue+0x64>)
 8005b20:	f7fd ff72 	bl	8003a08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b24:	4813      	ldr	r0, [pc, #76]	@ (8005b74 <prvCheckForValidListAndQueue+0x68>)
 8005b26:	f7fd ff6f 	bl	8003a08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b2a:	4b13      	ldr	r3, [pc, #76]	@ (8005b78 <prvCheckForValidListAndQueue+0x6c>)
 8005b2c:	4a10      	ldr	r2, [pc, #64]	@ (8005b70 <prvCheckForValidListAndQueue+0x64>)
 8005b2e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b30:	4b12      	ldr	r3, [pc, #72]	@ (8005b7c <prvCheckForValidListAndQueue+0x70>)
 8005b32:	4a10      	ldr	r2, [pc, #64]	@ (8005b74 <prvCheckForValidListAndQueue+0x68>)
 8005b34:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b36:	2300      	movs	r3, #0
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	4b11      	ldr	r3, [pc, #68]	@ (8005b80 <prvCheckForValidListAndQueue+0x74>)
 8005b3c:	4a11      	ldr	r2, [pc, #68]	@ (8005b84 <prvCheckForValidListAndQueue+0x78>)
 8005b3e:	2110      	movs	r1, #16
 8005b40:	200a      	movs	r0, #10
 8005b42:	f7fe f87f 	bl	8003c44 <xQueueGenericCreateStatic>
 8005b46:	4603      	mov	r3, r0
 8005b48:	4a08      	ldr	r2, [pc, #32]	@ (8005b6c <prvCheckForValidListAndQueue+0x60>)
 8005b4a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b4c:	4b07      	ldr	r3, [pc, #28]	@ (8005b6c <prvCheckForValidListAndQueue+0x60>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b54:	4b05      	ldr	r3, [pc, #20]	@ (8005b6c <prvCheckForValidListAndQueue+0x60>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	490b      	ldr	r1, [pc, #44]	@ (8005b88 <prvCheckForValidListAndQueue+0x7c>)
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fca4 	bl	80044a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b60:	f000 f974 	bl	8005e4c <vPortExitCritical>
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000e2c 	.word	0x20000e2c
 8005b70:	20000dfc 	.word	0x20000dfc
 8005b74:	20000e10 	.word	0x20000e10
 8005b78:	20000e24 	.word	0x20000e24
 8005b7c:	20000e28 	.word	0x20000e28
 8005b80:	20000ed8 	.word	0x20000ed8
 8005b84:	20000e38 	.word	0x20000e38
 8005b88:	08006630 	.word	0x08006630

08005b8c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	3b04      	subs	r3, #4
 8005b9c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3b04      	subs	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f023 0201 	bic.w	r2, r3, #1
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	3b04      	subs	r3, #4
 8005bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bbc:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf0 <pxPortInitialiseStack+0x64>)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	3b14      	subs	r3, #20
 8005bc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	3b04      	subs	r3, #4
 8005bd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f06f 0202 	mvn.w	r2, #2
 8005bda:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3b20      	subs	r3, #32
 8005be0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005be2:	68fb      	ldr	r3, [r7, #12]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	08005bf5 	.word	0x08005bf5

08005bf4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b085      	sub	sp, #20
 8005bf8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bfe:	4b13      	ldr	r3, [pc, #76]	@ (8005c4c <prvTaskExitError+0x58>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c06:	d00b      	beq.n	8005c20 <prvTaskExitError+0x2c>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	60fb      	str	r3, [r7, #12]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <prvTaskExitError+0x28>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	60bb      	str	r3, [r7, #8]
}
 8005c32:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c34:	bf00      	nop
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0fc      	beq.n	8005c36 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	3714      	adds	r7, #20
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr
 8005c4a:	bf00      	nop
 8005c4c:	2000000c 	.word	0x2000000c

08005c50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c50:	4b07      	ldr	r3, [pc, #28]	@ (8005c70 <pxCurrentTCBConst2>)
 8005c52:	6819      	ldr	r1, [r3, #0]
 8005c54:	6808      	ldr	r0, [r1, #0]
 8005c56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c5a:	f380 8809 	msr	PSP, r0
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f380 8811 	msr	BASEPRI, r0
 8005c6a:	4770      	bx	lr
 8005c6c:	f3af 8000 	nop.w

08005c70 <pxCurrentTCBConst2>:
 8005c70:	200008fc 	.word	0x200008fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c78:	4808      	ldr	r0, [pc, #32]	@ (8005c9c <prvPortStartFirstTask+0x24>)
 8005c7a:	6800      	ldr	r0, [r0, #0]
 8005c7c:	6800      	ldr	r0, [r0, #0]
 8005c7e:	f380 8808 	msr	MSP, r0
 8005c82:	f04f 0000 	mov.w	r0, #0
 8005c86:	f380 8814 	msr	CONTROL, r0
 8005c8a:	b662      	cpsie	i
 8005c8c:	b661      	cpsie	f
 8005c8e:	f3bf 8f4f 	dsb	sy
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	df00      	svc	0
 8005c98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c9a:	bf00      	nop
 8005c9c:	e000ed08 	.word	0xe000ed08

08005ca0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ca6:	4b47      	ldr	r3, [pc, #284]	@ (8005dc4 <xPortStartScheduler+0x124>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a47      	ldr	r2, [pc, #284]	@ (8005dc8 <xPortStartScheduler+0x128>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d10b      	bne.n	8005cc8 <xPortStartScheduler+0x28>
	__asm volatile
 8005cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb4:	f383 8811 	msr	BASEPRI, r3
 8005cb8:	f3bf 8f6f 	isb	sy
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	613b      	str	r3, [r7, #16]
}
 8005cc2:	bf00      	nop
 8005cc4:	bf00      	nop
 8005cc6:	e7fd      	b.n	8005cc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005cc8:	4b3e      	ldr	r3, [pc, #248]	@ (8005dc4 <xPortStartScheduler+0x124>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a3f      	ldr	r2, [pc, #252]	@ (8005dcc <xPortStartScheduler+0x12c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10b      	bne.n	8005cea <xPortStartScheduler+0x4a>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	60fb      	str	r3, [r7, #12]
}
 8005ce4:	bf00      	nop
 8005ce6:	bf00      	nop
 8005ce8:	e7fd      	b.n	8005ce6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cea:	4b39      	ldr	r3, [pc, #228]	@ (8005dd0 <xPortStartScheduler+0x130>)
 8005cec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	22ff      	movs	r2, #255	@ 0xff
 8005cfa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d04:	78fb      	ldrb	r3, [r7, #3]
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	4b31      	ldr	r3, [pc, #196]	@ (8005dd4 <xPortStartScheduler+0x134>)
 8005d10:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d12:	4b31      	ldr	r3, [pc, #196]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d14:	2207      	movs	r2, #7
 8005d16:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d18:	e009      	b.n	8005d2e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3b01      	subs	r3, #1
 8005d20:	4a2d      	ldr	r2, [pc, #180]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d22:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d2e:	78fb      	ldrb	r3, [r7, #3]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d36:	2b80      	cmp	r3, #128	@ 0x80
 8005d38:	d0ef      	beq.n	8005d1a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d3a:	4b27      	ldr	r3, [pc, #156]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f1c3 0307 	rsb	r3, r3, #7
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d00b      	beq.n	8005d5e <xPortStartScheduler+0xbe>
	__asm volatile
 8005d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4a:	f383 8811 	msr	BASEPRI, r3
 8005d4e:	f3bf 8f6f 	isb	sy
 8005d52:	f3bf 8f4f 	dsb	sy
 8005d56:	60bb      	str	r3, [r7, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	bf00      	nop
 8005d5c:	e7fd      	b.n	8005d5a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d66:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d68:	4b1b      	ldr	r3, [pc, #108]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005d70:	4a19      	ldr	r2, [pc, #100]	@ (8005dd8 <xPortStartScheduler+0x138>)
 8005d72:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	b2da      	uxtb	r2, r3
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d7c:	4b17      	ldr	r3, [pc, #92]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a16      	ldr	r2, [pc, #88]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d82:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005d86:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d88:	4b14      	ldr	r3, [pc, #80]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a13      	ldr	r2, [pc, #76]	@ (8005ddc <xPortStartScheduler+0x13c>)
 8005d8e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005d92:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d94:	f000 f8da 	bl	8005f4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d98:	4b11      	ldr	r3, [pc, #68]	@ (8005de0 <xPortStartScheduler+0x140>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d9e:	f000 f8f9 	bl	8005f94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005da2:	4b10      	ldr	r3, [pc, #64]	@ (8005de4 <xPortStartScheduler+0x144>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a0f      	ldr	r2, [pc, #60]	@ (8005de4 <xPortStartScheduler+0x144>)
 8005da8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005dac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005dae:	f7ff ff63 	bl	8005c78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005db2:	f7ff f831 	bl	8004e18 <vTaskSwitchContext>
	prvTaskExitError();
 8005db6:	f7ff ff1d 	bl	8005bf4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	e000ed00 	.word	0xe000ed00
 8005dc8:	410fc271 	.word	0x410fc271
 8005dcc:	410fc270 	.word	0x410fc270
 8005dd0:	e000e400 	.word	0xe000e400
 8005dd4:	20000f28 	.word	0x20000f28
 8005dd8:	20000f2c 	.word	0x20000f2c
 8005ddc:	e000ed20 	.word	0xe000ed20
 8005de0:	2000000c 	.word	0x2000000c
 8005de4:	e000ef34 	.word	0xe000ef34

08005de8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	607b      	str	r3, [r7, #4]
}
 8005e00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e02:	4b10      	ldr	r3, [pc, #64]	@ (8005e44 <vPortEnterCritical+0x5c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a0e      	ldr	r2, [pc, #56]	@ (8005e44 <vPortEnterCritical+0x5c>)
 8005e0a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e44 <vPortEnterCritical+0x5c>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d110      	bne.n	8005e36 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e14:	4b0c      	ldr	r3, [pc, #48]	@ (8005e48 <vPortEnterCritical+0x60>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <vPortEnterCritical+0x4e>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	603b      	str	r3, [r7, #0]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <vPortEnterCritical+0x4a>
	}
}
 8005e36:	bf00      	nop
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	2000000c 	.word	0x2000000c
 8005e48:	e000ed04 	.word	0xe000ed04

08005e4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e52:	4b12      	ldr	r3, [pc, #72]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d10b      	bne.n	8005e72 <vPortExitCritical+0x26>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	607b      	str	r3, [r7, #4]
}
 8005e6c:	bf00      	nop
 8005e6e:	bf00      	nop
 8005e70:	e7fd      	b.n	8005e6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005e72:	4b0a      	ldr	r3, [pc, #40]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e7c:	4b07      	ldr	r3, [pc, #28]	@ (8005e9c <vPortExitCritical+0x50>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <vPortExitCritical+0x44>
 8005e84:	2300      	movs	r3, #0
 8005e86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	f383 8811 	msr	BASEPRI, r3
}
 8005e8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	2000000c 	.word	0x2000000c

08005ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ea0:	f3ef 8009 	mrs	r0, PSP
 8005ea4:	f3bf 8f6f 	isb	sy
 8005ea8:	4b15      	ldr	r3, [pc, #84]	@ (8005f00 <pxCurrentTCBConst>)
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	f01e 0f10 	tst.w	lr, #16
 8005eb0:	bf08      	it	eq
 8005eb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005eb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eba:	6010      	str	r0, [r2, #0]
 8005ebc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ec0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ec4:	f380 8811 	msr	BASEPRI, r0
 8005ec8:	f3bf 8f4f 	dsb	sy
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f7fe ffa2 	bl	8004e18 <vTaskSwitchContext>
 8005ed4:	f04f 0000 	mov.w	r0, #0
 8005ed8:	f380 8811 	msr	BASEPRI, r0
 8005edc:	bc09      	pop	{r0, r3}
 8005ede:	6819      	ldr	r1, [r3, #0]
 8005ee0:	6808      	ldr	r0, [r1, #0]
 8005ee2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ee6:	f01e 0f10 	tst.w	lr, #16
 8005eea:	bf08      	it	eq
 8005eec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005ef0:	f380 8809 	msr	PSP, r0
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	f3af 8000 	nop.w

08005f00 <pxCurrentTCBConst>:
 8005f00:	200008fc 	.word	0x200008fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop

08005f08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	607b      	str	r3, [r7, #4]
}
 8005f20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f22:	f7fe febf 	bl	8004ca4 <xTaskIncrementTick>
 8005f26:	4603      	mov	r3, r0
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f2c:	4b06      	ldr	r3, [pc, #24]	@ (8005f48 <xPortSysTickHandler+0x40>)
 8005f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	2300      	movs	r3, #0
 8005f36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	f383 8811 	msr	BASEPRI, r3
}
 8005f3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f40:	bf00      	nop
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000ed04 	.word	0xe000ed04

08005f4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f50:	4b0b      	ldr	r3, [pc, #44]	@ (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f56:	4b0b      	ldr	r3, [pc, #44]	@ (8005f84 <vPortSetupTimerInterrupt+0x38>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <vPortSetupTimerInterrupt+0x3c>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a0a      	ldr	r2, [pc, #40]	@ (8005f8c <vPortSetupTimerInterrupt+0x40>)
 8005f62:	fba2 2303 	umull	r2, r3, r2, r3
 8005f66:	099b      	lsrs	r3, r3, #6
 8005f68:	4a09      	ldr	r2, [pc, #36]	@ (8005f90 <vPortSetupTimerInterrupt+0x44>)
 8005f6a:	3b01      	subs	r3, #1
 8005f6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f6e:	4b04      	ldr	r3, [pc, #16]	@ (8005f80 <vPortSetupTimerInterrupt+0x34>)
 8005f70:	2207      	movs	r2, #7
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	e000e010 	.word	0xe000e010
 8005f84:	e000e018 	.word	0xe000e018
 8005f88:	20000000 	.word	0x20000000
 8005f8c:	10624dd3 	.word	0x10624dd3
 8005f90:	e000e014 	.word	0xe000e014

08005f94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005fa4 <vPortEnableVFP+0x10>
 8005f98:	6801      	ldr	r1, [r0, #0]
 8005f9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005f9e:	6001      	str	r1, [r0, #0]
 8005fa0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fa2:	bf00      	nop
 8005fa4:	e000ed88 	.word	0xe000ed88

08005fa8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fae:	f3ef 8305 	mrs	r3, IPSR
 8005fb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	d915      	bls.n	8005fe6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005fba:	4a18      	ldr	r2, [pc, #96]	@ (800601c <vPortValidateInterruptPriority+0x74>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005fc4:	4b16      	ldr	r3, [pc, #88]	@ (8006020 <vPortValidateInterruptPriority+0x78>)
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	7afa      	ldrb	r2, [r7, #11]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d20b      	bcs.n	8005fe6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd2:	f383 8811 	msr	BASEPRI, r3
 8005fd6:	f3bf 8f6f 	isb	sy
 8005fda:	f3bf 8f4f 	dsb	sy
 8005fde:	607b      	str	r3, [r7, #4]
}
 8005fe0:	bf00      	nop
 8005fe2:	bf00      	nop
 8005fe4:	e7fd      	b.n	8005fe2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8006024 <vPortValidateInterruptPriority+0x7c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005fee:	4b0e      	ldr	r3, [pc, #56]	@ (8006028 <vPortValidateInterruptPriority+0x80>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d90b      	bls.n	800600e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	603b      	str	r3, [r7, #0]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <vPortValidateInterruptPriority+0x62>
	}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	e000e3f0 	.word	0xe000e3f0
 8006020:	20000f28 	.word	0x20000f28
 8006024:	e000ed0c 	.word	0xe000ed0c
 8006028:	20000f2c 	.word	0x20000f2c

0800602c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b08a      	sub	sp, #40	@ 0x28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006038:	f7fe fd78 	bl	8004b2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800603c:	4b5c      	ldr	r3, [pc, #368]	@ (80061b0 <pvPortMalloc+0x184>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d101      	bne.n	8006048 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006044:	f000 f924 	bl	8006290 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006048:	4b5a      	ldr	r3, [pc, #360]	@ (80061b4 <pvPortMalloc+0x188>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4013      	ands	r3, r2
 8006050:	2b00      	cmp	r3, #0
 8006052:	f040 8095 	bne.w	8006180 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d01e      	beq.n	800609a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800605c:	2208      	movs	r2, #8
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4413      	add	r3, r2
 8006062:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d015      	beq.n	800609a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f023 0307 	bic.w	r3, r3, #7
 8006074:	3308      	adds	r3, #8
 8006076:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00b      	beq.n	800609a <pvPortMalloc+0x6e>
	__asm volatile
 8006082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006086:	f383 8811 	msr	BASEPRI, r3
 800608a:	f3bf 8f6f 	isb	sy
 800608e:	f3bf 8f4f 	dsb	sy
 8006092:	617b      	str	r3, [r7, #20]
}
 8006094:	bf00      	nop
 8006096:	bf00      	nop
 8006098:	e7fd      	b.n	8006096 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d06f      	beq.n	8006180 <pvPortMalloc+0x154>
 80060a0:	4b45      	ldr	r3, [pc, #276]	@ (80061b8 <pvPortMalloc+0x18c>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d86a      	bhi.n	8006180 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060aa:	4b44      	ldr	r3, [pc, #272]	@ (80061bc <pvPortMalloc+0x190>)
 80060ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060ae:	4b43      	ldr	r3, [pc, #268]	@ (80061bc <pvPortMalloc+0x190>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060b4:	e004      	b.n	80060c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d903      	bls.n	80060d2 <pvPortMalloc+0xa6>
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d1f1      	bne.n	80060b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80060d2:	4b37      	ldr	r3, [pc, #220]	@ (80061b0 <pvPortMalloc+0x184>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d8:	429a      	cmp	r2, r3
 80060da:	d051      	beq.n	8006180 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2208      	movs	r2, #8
 80060e2:	4413      	add	r3, r2
 80060e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	6a3b      	ldr	r3, [r7, #32]
 80060ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	1ad2      	subs	r2, r2, r3
 80060f6:	2308      	movs	r3, #8
 80060f8:	005b      	lsls	r3, r3, #1
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d920      	bls.n	8006140 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4413      	add	r3, r2
 8006104:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	2b00      	cmp	r3, #0
 800610e:	d00b      	beq.n	8006128 <pvPortMalloc+0xfc>
	__asm volatile
 8006110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006114:	f383 8811 	msr	BASEPRI, r3
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	f3bf 8f4f 	dsb	sy
 8006120:	613b      	str	r3, [r7, #16]
}
 8006122:	bf00      	nop
 8006124:	bf00      	nop
 8006126:	e7fd      	b.n	8006124 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800613a:	69b8      	ldr	r0, [r7, #24]
 800613c:	f000 f90a 	bl	8006354 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006140:	4b1d      	ldr	r3, [pc, #116]	@ (80061b8 <pvPortMalloc+0x18c>)
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	4a1b      	ldr	r2, [pc, #108]	@ (80061b8 <pvPortMalloc+0x18c>)
 800614c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800614e:	4b1a      	ldr	r3, [pc, #104]	@ (80061b8 <pvPortMalloc+0x18c>)
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4b1b      	ldr	r3, [pc, #108]	@ (80061c0 <pvPortMalloc+0x194>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	429a      	cmp	r2, r3
 8006158:	d203      	bcs.n	8006162 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800615a:	4b17      	ldr	r3, [pc, #92]	@ (80061b8 <pvPortMalloc+0x18c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a18      	ldr	r2, [pc, #96]	@ (80061c0 <pvPortMalloc+0x194>)
 8006160:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	685a      	ldr	r2, [r3, #4]
 8006166:	4b13      	ldr	r3, [pc, #76]	@ (80061b4 <pvPortMalloc+0x188>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	431a      	orrs	r2, r3
 800616c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800616e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006176:	4b13      	ldr	r3, [pc, #76]	@ (80061c4 <pvPortMalloc+0x198>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3301      	adds	r3, #1
 800617c:	4a11      	ldr	r2, [pc, #68]	@ (80061c4 <pvPortMalloc+0x198>)
 800617e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006180:	f7fe fce2 	bl	8004b48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	f003 0307 	and.w	r3, r3, #7
 800618a:	2b00      	cmp	r3, #0
 800618c:	d00b      	beq.n	80061a6 <pvPortMalloc+0x17a>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	60fb      	str	r3, [r7, #12]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <pvPortMalloc+0x176>
	return pvReturn;
 80061a6:	69fb      	ldr	r3, [r7, #28]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3728      	adds	r7, #40	@ 0x28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20001af0 	.word	0x20001af0
 80061b4:	20001b04 	.word	0x20001b04
 80061b8:	20001af4 	.word	0x20001af4
 80061bc:	20001ae8 	.word	0x20001ae8
 80061c0:	20001af8 	.word	0x20001af8
 80061c4:	20001afc 	.word	0x20001afc

080061c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d04f      	beq.n	800627a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80061da:	2308      	movs	r3, #8
 80061dc:	425b      	negs	r3, r3
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	4413      	add	r3, r2
 80061e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	4b25      	ldr	r3, [pc, #148]	@ (8006284 <vPortFree+0xbc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4013      	ands	r3, r2
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <vPortFree+0x46>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	60fb      	str	r3, [r7, #12]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <vPortFree+0x66>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	60bb      	str	r3, [r7, #8]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	685a      	ldr	r2, [r3, #4]
 8006232:	4b14      	ldr	r3, [pc, #80]	@ (8006284 <vPortFree+0xbc>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11a      	bne.n	800627a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4b0e      	ldr	r3, [pc, #56]	@ (8006284 <vPortFree+0xbc>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	43db      	mvns	r3, r3
 800624e:	401a      	ands	r2, r3
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006254:	f7fe fc6a 	bl	8004b2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	4b0a      	ldr	r3, [pc, #40]	@ (8006288 <vPortFree+0xc0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4413      	add	r3, r2
 8006262:	4a09      	ldr	r2, [pc, #36]	@ (8006288 <vPortFree+0xc0>)
 8006264:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006266:	6938      	ldr	r0, [r7, #16]
 8006268:	f000 f874 	bl	8006354 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800626c:	4b07      	ldr	r3, [pc, #28]	@ (800628c <vPortFree+0xc4>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	3301      	adds	r3, #1
 8006272:	4a06      	ldr	r2, [pc, #24]	@ (800628c <vPortFree+0xc4>)
 8006274:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006276:	f7fe fc67 	bl	8004b48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800627a:	bf00      	nop
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20001b04 	.word	0x20001b04
 8006288:	20001af4 	.word	0x20001af4
 800628c:	20001b00 	.word	0x20001b00

08006290 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006296:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800629a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800629c:	4b27      	ldr	r3, [pc, #156]	@ (800633c <prvHeapInit+0xac>)
 800629e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3307      	adds	r3, #7
 80062ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0307 	bic.w	r3, r3, #7
 80062b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	4a1f      	ldr	r2, [pc, #124]	@ (800633c <prvHeapInit+0xac>)
 80062c0:	4413      	add	r3, r2
 80062c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006340 <prvHeapInit+0xb0>)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80062ce:	4b1c      	ldr	r3, [pc, #112]	@ (8006340 <prvHeapInit+0xb0>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	68ba      	ldr	r2, [r7, #8]
 80062d8:	4413      	add	r3, r2
 80062da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80062dc:	2208      	movs	r2, #8
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4a15      	ldr	r2, [pc, #84]	@ (8006344 <prvHeapInit+0xb4>)
 80062f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80062f2:	4b14      	ldr	r3, [pc, #80]	@ (8006344 <prvHeapInit+0xb4>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2200      	movs	r2, #0
 80062f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80062fa:	4b12      	ldr	r3, [pc, #72]	@ (8006344 <prvHeapInit+0xb4>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006310:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <prvHeapInit+0xb4>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a0a      	ldr	r2, [pc, #40]	@ (8006348 <prvHeapInit+0xb8>)
 800631e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	4a09      	ldr	r2, [pc, #36]	@ (800634c <prvHeapInit+0xbc>)
 8006326:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006328:	4b09      	ldr	r3, [pc, #36]	@ (8006350 <prvHeapInit+0xc0>)
 800632a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800632e:	601a      	str	r2, [r3, #0]
}
 8006330:	bf00      	nop
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	20000f30 	.word	0x20000f30
 8006340:	20001ae8 	.word	0x20001ae8
 8006344:	20001af0 	.word	0x20001af0
 8006348:	20001af8 	.word	0x20001af8
 800634c:	20001af4 	.word	0x20001af4
 8006350:	20001b04 	.word	0x20001b04

08006354 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800635c:	4b28      	ldr	r3, [pc, #160]	@ (8006400 <prvInsertBlockIntoFreeList+0xac>)
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	e002      	b.n	8006368 <prvInsertBlockIntoFreeList+0x14>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d8f7      	bhi.n	8006362 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	4413      	add	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	429a      	cmp	r2, r3
 8006382:	d108      	bne.n	8006396 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	68ba      	ldr	r2, [r7, #8]
 80063a0:	441a      	add	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d118      	bne.n	80063dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b15      	ldr	r3, [pc, #84]	@ (8006404 <prvInsertBlockIntoFreeList+0xb0>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d00d      	beq.n	80063d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e008      	b.n	80063e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80063d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006404 <prvInsertBlockIntoFreeList+0xb0>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	601a      	str	r2, [r3, #0]
 80063da:	e003      	b.n	80063e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d002      	beq.n	80063f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80063f2:	bf00      	nop
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	20001ae8 	.word	0x20001ae8
 8006404:	20001af0 	.word	0x20001af0

08006408 <memset>:
 8006408:	4402      	add	r2, r0
 800640a:	4603      	mov	r3, r0
 800640c:	4293      	cmp	r3, r2
 800640e:	d100      	bne.n	8006412 <memset+0xa>
 8006410:	4770      	bx	lr
 8006412:	f803 1b01 	strb.w	r1, [r3], #1
 8006416:	e7f9      	b.n	800640c <memset+0x4>

08006418 <_reclaim_reent>:
 8006418:	4b29      	ldr	r3, [pc, #164]	@ (80064c0 <_reclaim_reent+0xa8>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4283      	cmp	r3, r0
 800641e:	b570      	push	{r4, r5, r6, lr}
 8006420:	4604      	mov	r4, r0
 8006422:	d04b      	beq.n	80064bc <_reclaim_reent+0xa4>
 8006424:	69c3      	ldr	r3, [r0, #28]
 8006426:	b1ab      	cbz	r3, 8006454 <_reclaim_reent+0x3c>
 8006428:	68db      	ldr	r3, [r3, #12]
 800642a:	b16b      	cbz	r3, 8006448 <_reclaim_reent+0x30>
 800642c:	2500      	movs	r5, #0
 800642e:	69e3      	ldr	r3, [r4, #28]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	5959      	ldr	r1, [r3, r5]
 8006434:	2900      	cmp	r1, #0
 8006436:	d13b      	bne.n	80064b0 <_reclaim_reent+0x98>
 8006438:	3504      	adds	r5, #4
 800643a:	2d80      	cmp	r5, #128	@ 0x80
 800643c:	d1f7      	bne.n	800642e <_reclaim_reent+0x16>
 800643e:	69e3      	ldr	r3, [r4, #28]
 8006440:	4620      	mov	r0, r4
 8006442:	68d9      	ldr	r1, [r3, #12]
 8006444:	f000 f872 	bl	800652c <_free_r>
 8006448:	69e3      	ldr	r3, [r4, #28]
 800644a:	6819      	ldr	r1, [r3, #0]
 800644c:	b111      	cbz	r1, 8006454 <_reclaim_reent+0x3c>
 800644e:	4620      	mov	r0, r4
 8006450:	f000 f86c 	bl	800652c <_free_r>
 8006454:	6961      	ldr	r1, [r4, #20]
 8006456:	b111      	cbz	r1, 800645e <_reclaim_reent+0x46>
 8006458:	4620      	mov	r0, r4
 800645a:	f000 f867 	bl	800652c <_free_r>
 800645e:	69e1      	ldr	r1, [r4, #28]
 8006460:	b111      	cbz	r1, 8006468 <_reclaim_reent+0x50>
 8006462:	4620      	mov	r0, r4
 8006464:	f000 f862 	bl	800652c <_free_r>
 8006468:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800646a:	b111      	cbz	r1, 8006472 <_reclaim_reent+0x5a>
 800646c:	4620      	mov	r0, r4
 800646e:	f000 f85d 	bl	800652c <_free_r>
 8006472:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006474:	b111      	cbz	r1, 800647c <_reclaim_reent+0x64>
 8006476:	4620      	mov	r0, r4
 8006478:	f000 f858 	bl	800652c <_free_r>
 800647c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800647e:	b111      	cbz	r1, 8006486 <_reclaim_reent+0x6e>
 8006480:	4620      	mov	r0, r4
 8006482:	f000 f853 	bl	800652c <_free_r>
 8006486:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006488:	b111      	cbz	r1, 8006490 <_reclaim_reent+0x78>
 800648a:	4620      	mov	r0, r4
 800648c:	f000 f84e 	bl	800652c <_free_r>
 8006490:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8006492:	b111      	cbz	r1, 800649a <_reclaim_reent+0x82>
 8006494:	4620      	mov	r0, r4
 8006496:	f000 f849 	bl	800652c <_free_r>
 800649a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800649c:	b111      	cbz	r1, 80064a4 <_reclaim_reent+0x8c>
 800649e:	4620      	mov	r0, r4
 80064a0:	f000 f844 	bl	800652c <_free_r>
 80064a4:	6a23      	ldr	r3, [r4, #32]
 80064a6:	b14b      	cbz	r3, 80064bc <_reclaim_reent+0xa4>
 80064a8:	4620      	mov	r0, r4
 80064aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80064ae:	4718      	bx	r3
 80064b0:	680e      	ldr	r6, [r1, #0]
 80064b2:	4620      	mov	r0, r4
 80064b4:	f000 f83a 	bl	800652c <_free_r>
 80064b8:	4631      	mov	r1, r6
 80064ba:	e7bb      	b.n	8006434 <_reclaim_reent+0x1c>
 80064bc:	bd70      	pop	{r4, r5, r6, pc}
 80064be:	bf00      	nop
 80064c0:	20000010 	.word	0x20000010

080064c4 <__libc_init_array>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	4d0d      	ldr	r5, [pc, #52]	@ (80064fc <__libc_init_array+0x38>)
 80064c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006500 <__libc_init_array+0x3c>)
 80064ca:	1b64      	subs	r4, r4, r5
 80064cc:	10a4      	asrs	r4, r4, #2
 80064ce:	2600      	movs	r6, #0
 80064d0:	42a6      	cmp	r6, r4
 80064d2:	d109      	bne.n	80064e8 <__libc_init_array+0x24>
 80064d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006504 <__libc_init_array+0x40>)
 80064d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006508 <__libc_init_array+0x44>)
 80064d8:	f000 f87e 	bl	80065d8 <_init>
 80064dc:	1b64      	subs	r4, r4, r5
 80064de:	10a4      	asrs	r4, r4, #2
 80064e0:	2600      	movs	r6, #0
 80064e2:	42a6      	cmp	r6, r4
 80064e4:	d105      	bne.n	80064f2 <__libc_init_array+0x2e>
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80064ec:	4798      	blx	r3
 80064ee:	3601      	adds	r6, #1
 80064f0:	e7ee      	b.n	80064d0 <__libc_init_array+0xc>
 80064f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80064f6:	4798      	blx	r3
 80064f8:	3601      	adds	r6, #1
 80064fa:	e7f2      	b.n	80064e2 <__libc_init_array+0x1e>
 80064fc:	08006718 	.word	0x08006718
 8006500:	08006718 	.word	0x08006718
 8006504:	08006718 	.word	0x08006718
 8006508:	0800671c 	.word	0x0800671c

0800650c <__retarget_lock_acquire_recursive>:
 800650c:	4770      	bx	lr

0800650e <__retarget_lock_release_recursive>:
 800650e:	4770      	bx	lr

08006510 <memcpy>:
 8006510:	440a      	add	r2, r1
 8006512:	4291      	cmp	r1, r2
 8006514:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006518:	d100      	bne.n	800651c <memcpy+0xc>
 800651a:	4770      	bx	lr
 800651c:	b510      	push	{r4, lr}
 800651e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006522:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006526:	4291      	cmp	r1, r2
 8006528:	d1f9      	bne.n	800651e <memcpy+0xe>
 800652a:	bd10      	pop	{r4, pc}

0800652c <_free_r>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	4605      	mov	r5, r0
 8006530:	2900      	cmp	r1, #0
 8006532:	d041      	beq.n	80065b8 <_free_r+0x8c>
 8006534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006538:	1f0c      	subs	r4, r1, #4
 800653a:	2b00      	cmp	r3, #0
 800653c:	bfb8      	it	lt
 800653e:	18e4      	addlt	r4, r4, r3
 8006540:	f000 f83e 	bl	80065c0 <__malloc_lock>
 8006544:	4a1d      	ldr	r2, [pc, #116]	@ (80065bc <_free_r+0x90>)
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	b933      	cbnz	r3, 8006558 <_free_r+0x2c>
 800654a:	6063      	str	r3, [r4, #4]
 800654c:	6014      	str	r4, [r2, #0]
 800654e:	4628      	mov	r0, r5
 8006550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006554:	f000 b83a 	b.w	80065cc <__malloc_unlock>
 8006558:	42a3      	cmp	r3, r4
 800655a:	d908      	bls.n	800656e <_free_r+0x42>
 800655c:	6820      	ldr	r0, [r4, #0]
 800655e:	1821      	adds	r1, r4, r0
 8006560:	428b      	cmp	r3, r1
 8006562:	bf01      	itttt	eq
 8006564:	6819      	ldreq	r1, [r3, #0]
 8006566:	685b      	ldreq	r3, [r3, #4]
 8006568:	1809      	addeq	r1, r1, r0
 800656a:	6021      	streq	r1, [r4, #0]
 800656c:	e7ed      	b.n	800654a <_free_r+0x1e>
 800656e:	461a      	mov	r2, r3
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	b10b      	cbz	r3, 8006578 <_free_r+0x4c>
 8006574:	42a3      	cmp	r3, r4
 8006576:	d9fa      	bls.n	800656e <_free_r+0x42>
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	1850      	adds	r0, r2, r1
 800657c:	42a0      	cmp	r0, r4
 800657e:	d10b      	bne.n	8006598 <_free_r+0x6c>
 8006580:	6820      	ldr	r0, [r4, #0]
 8006582:	4401      	add	r1, r0
 8006584:	1850      	adds	r0, r2, r1
 8006586:	4283      	cmp	r3, r0
 8006588:	6011      	str	r1, [r2, #0]
 800658a:	d1e0      	bne.n	800654e <_free_r+0x22>
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	6053      	str	r3, [r2, #4]
 8006592:	4408      	add	r0, r1
 8006594:	6010      	str	r0, [r2, #0]
 8006596:	e7da      	b.n	800654e <_free_r+0x22>
 8006598:	d902      	bls.n	80065a0 <_free_r+0x74>
 800659a:	230c      	movs	r3, #12
 800659c:	602b      	str	r3, [r5, #0]
 800659e:	e7d6      	b.n	800654e <_free_r+0x22>
 80065a0:	6820      	ldr	r0, [r4, #0]
 80065a2:	1821      	adds	r1, r4, r0
 80065a4:	428b      	cmp	r3, r1
 80065a6:	bf04      	itt	eq
 80065a8:	6819      	ldreq	r1, [r3, #0]
 80065aa:	685b      	ldreq	r3, [r3, #4]
 80065ac:	6063      	str	r3, [r4, #4]
 80065ae:	bf04      	itt	eq
 80065b0:	1809      	addeq	r1, r1, r0
 80065b2:	6021      	streq	r1, [r4, #0]
 80065b4:	6054      	str	r4, [r2, #4]
 80065b6:	e7ca      	b.n	800654e <_free_r+0x22>
 80065b8:	bd38      	pop	{r3, r4, r5, pc}
 80065ba:	bf00      	nop
 80065bc:	20001c44 	.word	0x20001c44

080065c0 <__malloc_lock>:
 80065c0:	4801      	ldr	r0, [pc, #4]	@ (80065c8 <__malloc_lock+0x8>)
 80065c2:	f7ff bfa3 	b.w	800650c <__retarget_lock_acquire_recursive>
 80065c6:	bf00      	nop
 80065c8:	20001c40 	.word	0x20001c40

080065cc <__malloc_unlock>:
 80065cc:	4801      	ldr	r0, [pc, #4]	@ (80065d4 <__malloc_unlock+0x8>)
 80065ce:	f7ff bf9e 	b.w	800650e <__retarget_lock_release_recursive>
 80065d2:	bf00      	nop
 80065d4:	20001c40 	.word	0x20001c40

080065d8 <_init>:
 80065d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065da:	bf00      	nop
 80065dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065de:	bc08      	pop	{r3}
 80065e0:	469e      	mov	lr, r3
 80065e2:	4770      	bx	lr

080065e4 <_fini>:
 80065e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065e6:	bf00      	nop
 80065e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ea:	bc08      	pop	{r3}
 80065ec:	469e      	mov	lr, r3
 80065ee:	4770      	bx	lr
