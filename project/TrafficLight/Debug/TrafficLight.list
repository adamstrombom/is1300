
TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f40  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080090d0  080090d0  0000a0d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800922c  0800922c  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  0800922c  0800922c  0000a22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009234  08009234  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009234  08009234  0000a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009238  08009238  0000a238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800923c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f9c  20000068  080092a4  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004004  080092a4  0000c004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f658  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004524  00000000  00000000  0002a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  0002ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149b  00000000  00000000  000306a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e30  00000000  00000000  00031b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7ba  00000000  00000000  0005b973  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010097f  00000000  00000000  0007a12d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017aaac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000721c  00000000  00000000  0017aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00181d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090b8 	.word	0x080090b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080090b8 	.word	0x080090b8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	led_registers_init(&leds);
 80004c4:	482b      	ldr	r0, [pc, #172]	@ (8000574 <MX_FREERTOS_Init+0xb4>)
 80004c6:	f000 fd59 	bl	8000f7c <led_registers_init>
	traffic_state_init(&traffic);
 80004ca:	482b      	ldr	r0, [pc, #172]	@ (8000578 <MX_FREERTOS_Init+0xb8>)
 80004cc:	f000 fd7f 	bl	8000fce <traffic_state_init>
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	ledBlock = xSemaphoreCreateMutex();
 80004d0:	2001      	movs	r0, #1
 80004d2:	f005 f9ce 	bl	8005872 <xQueueCreateMutex>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a28      	ldr	r2, [pc, #160]	@ (800057c <MX_FREERTOS_Init+0xbc>)
 80004da:	6013      	str	r3, [r2, #0]
	trafficBlock = xSemaphoreCreateMutex();
 80004dc:	2001      	movs	r0, #1
 80004de:	f005 f9c8 	bl	8005872 <xQueueCreateMutex>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a26      	ldr	r2, [pc, #152]	@ (8000580 <MX_FREERTOS_Init+0xc0>)
 80004e6:	6013      	str	r3, [r2, #0]
	northPedestrianBlinkFlagBlock = xSemaphoreCreateMutex();
 80004e8:	2001      	movs	r0, #1
 80004ea:	f005 f9c2 	bl	8005872 <xQueueCreateMutex>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a24      	ldr	r2, [pc, #144]	@ (8000584 <MX_FREERTOS_Init+0xc4>)
 80004f2:	6013      	str	r3, [r2, #0]
	westPedestrianBlinkFlagBlock = xSemaphoreCreateMutex();
 80004f4:	2001      	movs	r0, #1
 80004f6:	f005 f9bc 	bl	8005872 <xQueueCreateMutex>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a22      	ldr	r2, [pc, #136]	@ (8000588 <MX_FREERTOS_Init+0xc8>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

	/*using message buffer to be able to get message from ISR*/
	message_pedestrian_north = xMessageBufferCreate( 10 );
 8000500:	2201      	movs	r2, #1
 8000502:	2100      	movs	r1, #0
 8000504:	200a      	movs	r0, #10
 8000506:	f005 fee5 	bl	80062d4 <xStreamBufferGenericCreate>
 800050a:	4603      	mov	r3, r0
 800050c:	4a1f      	ldr	r2, [pc, #124]	@ (800058c <MX_FREERTOS_Init+0xcc>)
 800050e:	6013      	str	r3, [r2, #0]
	message_pedestrian_west = xMessageBufferCreate( 10 );
 8000510:	2201      	movs	r2, #1
 8000512:	2100      	movs	r1, #0
 8000514:	200a      	movs	r0, #10
 8000516:	f005 fedd 	bl	80062d4 <xStreamBufferGenericCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a1c      	ldr	r2, [pc, #112]	@ (8000590 <MX_FREERTOS_Init+0xd0>)
 800051e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a1c      	ldr	r2, [pc, #112]	@ (8000594 <MX_FREERTOS_Init+0xd4>)
 8000522:	2100      	movs	r1, #0
 8000524:	481c      	ldr	r0, [pc, #112]	@ (8000598 <MX_FREERTOS_Init+0xd8>)
 8000526:	f004 feaf 	bl	8005288 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a1b      	ldr	r2, [pc, #108]	@ (800059c <MX_FREERTOS_Init+0xdc>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of pollSwitchesTas */
  pollSwitchesTasHandle = osThreadNew(PollSwitchesTask, NULL, &pollSwitchesTas_attributes);
 8000530:	4a1b      	ldr	r2, [pc, #108]	@ (80005a0 <MX_FREERTOS_Init+0xe0>)
 8000532:	2100      	movs	r1, #0
 8000534:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <MX_FREERTOS_Init+0xe4>)
 8000536:	f004 fea7 	bl	8005288 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a1a      	ldr	r2, [pc, #104]	@ (80005a8 <MX_FREERTOS_Init+0xe8>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of updateLedsTask */
  updateLedsTaskHandle = osThreadNew(UpdateLedsTask, NULL, &updateLedsTask_attributes);
 8000540:	4a1a      	ldr	r2, [pc, #104]	@ (80005ac <MX_FREERTOS_Init+0xec>)
 8000542:	2100      	movs	r1, #0
 8000544:	481a      	ldr	r0, [pc, #104]	@ (80005b0 <MX_FREERTOS_Init+0xf0>)
 8000546:	f004 fe9f 	bl	8005288 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a19      	ldr	r2, [pc, #100]	@ (80005b4 <MX_FREERTOS_Init+0xf4>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of logicTask */
  logicTaskHandle = osThreadNew(LogicTask, NULL, &logicTask_attributes);
 8000550:	4a19      	ldr	r2, [pc, #100]	@ (80005b8 <MX_FREERTOS_Init+0xf8>)
 8000552:	2100      	movs	r1, #0
 8000554:	4819      	ldr	r0, [pc, #100]	@ (80005bc <MX_FREERTOS_Init+0xfc>)
 8000556:	f004 fe97 	bl	8005288 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a18      	ldr	r2, [pc, #96]	@ (80005c0 <MX_FREERTOS_Init+0x100>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of blinkNorthTask */
  blinkNorthTaskHandle = osThreadNew(BlinkNorthTask, NULL, &blinkNorthTask_attributes);
 8000560:	4a18      	ldr	r2, [pc, #96]	@ (80005c4 <MX_FREERTOS_Init+0x104>)
 8000562:	2100      	movs	r1, #0
 8000564:	4818      	ldr	r0, [pc, #96]	@ (80005c8 <MX_FREERTOS_Init+0x108>)
 8000566:	f004 fe8f 	bl	8005288 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a17      	ldr	r2, [pc, #92]	@ (80005cc <MX_FREERTOS_Init+0x10c>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000084 	.word	0x20000084
 8000578:	20000088 	.word	0x20000088
 800057c:	20000090 	.word	0x20000090
 8000580:	20000094 	.word	0x20000094
 8000584:	20000098 	.word	0x20000098
 8000588:	2000009c 	.word	0x2000009c
 800058c:	200000a4 	.word	0x200000a4
 8000590:	200000a0 	.word	0x200000a0
 8000594:	08009130 	.word	0x08009130
 8000598:	080005d1 	.word	0x080005d1
 800059c:	200000ac 	.word	0x200000ac
 80005a0:	08009154 	.word	0x08009154
 80005a4:	080005e1 	.word	0x080005e1
 80005a8:	200000b0 	.word	0x200000b0
 80005ac:	08009178 	.word	0x08009178
 80005b0:	080006b9 	.word	0x080006b9
 80005b4:	200000b4 	.word	0x200000b4
 80005b8:	0800919c 	.word	0x0800919c
 80005bc:	08000709 	.word	0x08000709
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	080091c0 	.word	0x080091c0
 80005c8:	08000745 	.word	0x08000745
 80005cc:	200000bc 	.word	0x200000bc

080005d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f004 fee7 	bl	80053ac <osDelay>
 80005de:	e7fb      	b.n	80005d8 <StartDefaultTask+0x8>

080005e0 <PollSwitchesTask>:
* @param 	argument: Not used
* @retval 	None
*/
/* USER CODE END Header_PollSwitchesTask */
void PollSwitchesTask(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PollSwitchesTask */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(10);
 80005e8:	230a      	movs	r3, #10
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
	xLastWakeTime = xTaskGetTickCount();
 80005ec:	f006 fd7c 	bl	80070e8 <xTaskGetTickCount>
 80005f0:	4603      	mov	r3, r0
 80005f2:	623b      	str	r3, [r7, #32]

	/* Infinite loop */
	for(;;)
	{

		if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 80005f4:	4b2c      	ldr	r3, [pc, #176]	@ (80006a8 <PollSwitchesTask+0xc8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	210a      	movs	r1, #10
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fbd4 	bl	8005da8 <xQueueSemaphoreTake>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d148      	bne.n	8000698 <PollSwitchesTask+0xb8>

			//actually pool switches
			traffic.north_car = check_car(NORTH);
 8000606:	2003      	movs	r0, #3
 8000608:	f000 fd0c 	bl	8001024 <check_car>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000612:	701a      	strb	r2, [r3, #0]
			traffic.west_car = check_car(WEST);
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fd05 	bl	8001024 <check_car>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000620:	705a      	strb	r2, [r3, #1]
			traffic.south_car = check_car(SOUTH);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fcfe 	bl	8001024 <check_car>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <PollSwitchesTask+0xcc>)
 800062e:	709a      	strb	r2, [r3, #2]
			traffic.east_car = check_car(EAST);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 fcf7 	bl	8001024 <check_car>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <PollSwitchesTask+0xcc>)
 800063c:	70da      	strb	r2, [r3, #3]

			//check message buffers from ISR (we don't care about the message itself just whether or not there is a message in the queue)
			if( xMessageBufferIsEmpty( message_pedestrian_north ) == pdFALSE ){
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <PollSwitchesTask+0xd0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f006 f852 	bl	80066ec <xStreamBufferIsEmpty>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10a      	bne.n	8000664 <PollSwitchesTask+0x84>
				xMessageBufferReceive( message_pedestrian_north, north_buf, 10, 1);
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <PollSwitchesTask+0xd0>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f107 0114 	add.w	r1, r7, #20
 8000656:	2301      	movs	r3, #1
 8000658:	220a      	movs	r2, #10
 800065a:	f005 ff7d 	bl	8006558 <xStreamBufferReceive>
				traffic.north_pedestrian = true;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000660:	2201      	movs	r2, #1
 8000662:	711a      	strb	r2, [r3, #4]
//				xMessageBufferReset( message_pedestrian_north );
			}

			if( xMessageBufferIsEmpty( message_pedestrian_west ) == pdFALSE ){
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <PollSwitchesTask+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f006 f83f 	bl	80066ec <xStreamBufferIsEmpty>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10a      	bne.n	800068a <PollSwitchesTask+0xaa>
				xMessageBufferReceive( message_pedestrian_west, west_buf, 10, 1);
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <PollSwitchesTask+0xd4>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	f107 0108 	add.w	r1, r7, #8
 800067c:	2301      	movs	r3, #1
 800067e:	220a      	movs	r2, #10
 8000680:	f005 ff6a 	bl	8006558 <xStreamBufferReceive>
				traffic.west_pedestrian = true;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000686:	2201      	movs	r2, #1
 8000688:	715a      	strb	r2, [r3, #5]
//				xMessageBufferReset( message_pedestrian_west );
			}



			xSemaphoreGive(trafficBlock);
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <PollSwitchesTask+0xc8>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	f005 f906 	bl	80058a4 <xQueueGenericSend>
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fb50 	bl	8006d44 <vTaskDelayUntil>
		if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 80006a4:	e7a6      	b.n	80005f4 <PollSwitchesTask+0x14>
 80006a6:	bf00      	nop
 80006a8:	20000094 	.word	0x20000094
 80006ac:	20000088 	.word	0x20000088
 80006b0:	200000a4 	.word	0x200000a4
 80006b4:	200000a0 	.word	0x200000a0

080006b8 <UpdateLedsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UpdateLedsTask */
void UpdateLedsTask(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UpdateLedsTask */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20);
 80006c0:	2314      	movs	r3, #20
 80006c2:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80006c4:	f006 fd10 	bl	80070e8 <xTaskGetTickCount>
 80006c8:	4603      	mov	r3, r0
 80006ca:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
	for(;;)
	{

		if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <UpdateLedsTask+0x48>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	210a      	movs	r1, #10
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fb68 	bl	8005da8 <xQueueSemaphoreTake>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d109      	bne.n	80006f2 <UpdateLedsTask+0x3a>
			update_leds(&leds);
 80006de:	4809      	ldr	r0, [pc, #36]	@ (8000704 <UpdateLedsTask+0x4c>)
 80006e0:	f000 fc5f 	bl	8000fa2 <update_leds>
			xSemaphoreGive(ledBlock);
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <UpdateLedsTask+0x48>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	f005 f8d9 	bl	80058a4 <xQueueGenericSend>
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	68f9      	ldr	r1, [r7, #12]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f006 fb23 	bl	8006d44 <vTaskDelayUntil>
		if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 80006fe:	e7e5      	b.n	80006cc <UpdateLedsTask+0x14>
 8000700:	20000090 	.word	0x20000090
 8000704:	20000084 	.word	0x20000084

08000708 <LogicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LogicTask */
void LogicTask(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LogicTask */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20);
 8000710:	2314      	movs	r3, #20
 8000712:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000714:	f006 fce8 	bl	80070e8 <xTaskGetTickCount>
 8000718:	4603      	mov	r3, r0
 800071a:	60bb      	str	r3, [r7, #8]

	//initialize state for state machine
	state = START;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <LogicTask+0x34>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
	nextState = START;
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <LogicTask+0x38>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
	for(;;)
	{
//		test_logic(); //function used to test functionality of different tasks
		task1_logic();
 8000728:	f000 f864 	bl	80007f4 <task1_logic>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	68f9      	ldr	r1, [r7, #12]
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fb06 	bl	8006d44 <vTaskDelayUntil>
		task1_logic();
 8000738:	bf00      	nop
 800073a:	e7f5      	b.n	8000728 <LogicTask+0x20>
 800073c:	2000008e 	.word	0x2000008e
 8000740:	2000008f 	.word	0x2000008f

08000744 <BlinkNorthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlinkNorthTask */
void BlinkNorthTask(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af02      	add	r7, sp, #8
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlinkNorthTask */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(toggleFreq);
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <BlinkNorthTask+0x98>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	fb02 f303 	mul.w	r3, r2, r3
 800075a:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <BlinkNorthTask+0x9c>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	099b      	lsrs	r3, r3, #6
 8000762:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8000764:	f006 fcc0 	bl	80070e8 <xTaskGetTickCount>
 8000768:	4603      	mov	r3, r0
 800076a:	60fb      	str	r3, [r7, #12]
	bool tempFlag = false;
 800076c:	2300      	movs	r3, #0
 800076e:	75fb      	strb	r3, [r7, #23]

  /* Infinite loop */
	for(;;)
	{
		//check flag (use tempFlag to avoid a little bit of nesting)
		if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <BlinkNorthTask+0xa0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	210a      	movs	r1, #10
 8000776:	4618      	mov	r0, r3
 8000778:	f005 fb16 	bl	8005da8 <xQueueSemaphoreTake>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d109      	bne.n	8000796 <BlinkNorthTask+0x52>
			tempFlag = northPedestrianBlinkFlag;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <BlinkNorthTask+0xa4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	75fb      	strb	r3, [r7, #23]
			xSemaphoreGive(northPedestrianBlinkFlagBlock);
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <BlinkNorthTask+0xa0>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	f005 f887 	bl	80058a4 <xQueueGenericSend>
		}

		//if flag true -> toggle led
		if(tempFlag == true){
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d018      	beq.n	80007ce <BlinkNorthTask+0x8a>
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <BlinkNorthTask+0xa8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	210a      	movs	r1, #10
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fb00 	bl	8005da8 <xQueueSemaphoreTake>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10f      	bne.n	80007ce <BlinkNorthTask+0x8a>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, INDICATOR, TOGGLE);
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2303      	movs	r3, #3
 80007b6:	2201      	movs	r2, #1
 80007b8:	2103      	movs	r1, #3
 80007ba:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <BlinkNorthTask+0xac>)
 80007bc:	f000 fca8 	bl	8001110 <set_led>
				xSemaphoreGive(ledBlock);
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <BlinkNorthTask+0xa8>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	f005 f86b 	bl	80058a4 <xQueueGenericSend>
			}
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	6939      	ldr	r1, [r7, #16]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f006 fab5 	bl	8006d44 <vTaskDelayUntil>
		if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 80007da:	e7c9      	b.n	8000770 <BlinkNorthTask+0x2c>
 80007dc:	20000000 	.word	0x20000000
 80007e0:	10624dd3 	.word	0x10624dd3
 80007e4:	20000098 	.word	0x20000098
 80007e8:	200000a8 	.word	0x200000a8
 80007ec:	20000090 	.word	0x20000090
 80007f0:	20000084 	.word	0x20000084

080007f4 <task1_logic>:
/**
 * @brief : function containing the state machine used to handle the logic of task 1
 * @param : void
 * @return : void
 */
void task1_logic(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af02      	add	r7, sp, #8

	//used to delay within state machine
	TickType_t time;
	TickType_t period;

	state = nextState;
 80007fa:	4bac      	ldr	r3, [pc, #688]	@ (8000aac <task1_logic+0x2b8>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	4bac      	ldr	r3, [pc, #688]	@ (8000ab0 <task1_logic+0x2bc>)
 8000800:	701a      	strb	r2, [r3, #0]

	switch (state){
 8000802:	4bab      	ldr	r3, [pc, #684]	@ (8000ab0 <task1_logic+0x2bc>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b04      	cmp	r3, #4
 8000808:	f200 81c4 	bhi.w	8000b94 <task1_logic+0x3a0>
 800080c:	a201      	add	r2, pc, #4	@ (adr r2, 8000814 <task1_logic+0x20>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000829 	.word	0x08000829
 8000818:	08000889 	.word	0x08000889
 800081c:	08000913 	.word	0x08000913
 8000820:	08000a23 	.word	0x08000a23
 8000824:	08000add 	.word	0x08000add
		case START:
			//init for CAR_GO state
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000828:	4ba2      	ldr	r3, [pc, #648]	@ (8000ab4 <task1_logic+0x2c0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	210a      	movs	r1, #10
 800082e:	4618      	mov	r0, r3
 8000830:	f005 faba 	bl	8005da8 <xQueueSemaphoreTake>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d122      	bne.n	8000880 <task1_logic+0x8c>
				set_led_all(&leds, OFF);
 800083a:	2100      	movs	r1, #0
 800083c:	489e      	ldr	r0, [pc, #632]	@ (8000ab8 <task1_logic+0x2c4>)
 800083e:	f000 fc3f 	bl	80010c0 <set_led_all>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, GREEN, ON);
 8000842:	2301      	movs	r3, #1
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2200      	movs	r2, #0
 800084a:	2103      	movs	r1, #3
 800084c:	489a      	ldr	r0, [pc, #616]	@ (8000ab8 <task1_logic+0x2c4>)
 800084e:	f000 fc5f 	bl	8001110 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, GREEN, ON);
 8000852:	2301      	movs	r3, #1
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2302      	movs	r3, #2
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	4896      	ldr	r0, [pc, #600]	@ (8000ab8 <task1_logic+0x2c4>)
 800085e:	f000 fc57 	bl	8001110 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, RED, ON);
 8000862:	2301      	movs	r3, #1
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2300      	movs	r3, #0
 8000868:	2201      	movs	r2, #1
 800086a:	2103      	movs	r1, #3
 800086c:	4892      	ldr	r0, [pc, #584]	@ (8000ab8 <task1_logic+0x2c4>)
 800086e:	f000 fc4f 	bl	8001110 <set_led>
				xSemaphoreGive(ledBlock);
 8000872:	4b90      	ldr	r3, [pc, #576]	@ (8000ab4 <task1_logic+0x2c0>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	f005 f812 	bl	80058a4 <xQueueGenericSend>
			}
			nextState = CAR_GO;
 8000880:	4b8a      	ldr	r3, [pc, #552]	@ (8000aac <task1_logic+0x2b8>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
			break;
 8000886:	e188      	b.n	8000b9a <task1_logic+0x3a6>
		case CAR_GO:
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000888:	4b8a      	ldr	r3, [pc, #552]	@ (8000ab4 <task1_logic+0x2c0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	210a      	movs	r1, #10
 800088e:	4618      	mov	r0, r3
 8000890:	f005 fa8a 	bl	8005da8 <xQueueSemaphoreTake>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d122      	bne.n	80008e0 <task1_logic+0xec>
				set_led_all(&leds, OFF);
 800089a:	2100      	movs	r1, #0
 800089c:	4886      	ldr	r0, [pc, #536]	@ (8000ab8 <task1_logic+0x2c4>)
 800089e:	f000 fc0f 	bl	80010c0 <set_led_all>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, GREEN, ON);
 80008a2:	2301      	movs	r3, #1
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2302      	movs	r3, #2
 80008a8:	2200      	movs	r2, #0
 80008aa:	2103      	movs	r1, #3
 80008ac:	4882      	ldr	r0, [pc, #520]	@ (8000ab8 <task1_logic+0x2c4>)
 80008ae:	f000 fc2f 	bl	8001110 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, GREEN, ON);
 80008b2:	2301      	movs	r3, #1
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2302      	movs	r3, #2
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	487e      	ldr	r0, [pc, #504]	@ (8000ab8 <task1_logic+0x2c4>)
 80008be:	f000 fc27 	bl	8001110 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, RED, ON);
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	2201      	movs	r2, #1
 80008ca:	2103      	movs	r1, #3
 80008cc:	487a      	ldr	r0, [pc, #488]	@ (8000ab8 <task1_logic+0x2c4>)
 80008ce:	f000 fc1f 	bl	8001110 <set_led>
				xSemaphoreGive(ledBlock);
 80008d2:	4b78      	ldr	r3, [pc, #480]	@ (8000ab4 <task1_logic+0x2c0>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	f004 ffe2 	bl	80058a4 <xQueueGenericSend>
			}

			//if pedestrian button has been pressed, go to CAR_TO_PEDESTRIAN state
			if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 80008e0:	4b76      	ldr	r3, [pc, #472]	@ (8000abc <task1_logic+0x2c8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	210a      	movs	r1, #10
 80008e6:	4618      	mov	r0, r3
 80008e8:	f005 fa5e 	bl	8005da8 <xQueueSemaphoreTake>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	f040 8152 	bne.w	8000b98 <task1_logic+0x3a4>
				if(traffic.north_pedestrian == true){
 80008f4:	4b72      	ldr	r3, [pc, #456]	@ (8000ac0 <task1_logic+0x2cc>)
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <task1_logic+0x10e>
					nextState = CAR_TO_PEDESTRIAN;
 80008fc:	4b6b      	ldr	r3, [pc, #428]	@ (8000aac <task1_logic+0x2b8>)
 80008fe:	2202      	movs	r2, #2
 8000900:	701a      	strb	r2, [r3, #0]
				}

				xSemaphoreGive(trafficBlock);
 8000902:	4b6e      	ldr	r3, [pc, #440]	@ (8000abc <task1_logic+0x2c8>)
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	f004 ffca 	bl	80058a4 <xQueueGenericSend>
			}
			break;
 8000910:	e142      	b.n	8000b98 <task1_logic+0x3a4>
		case CAR_TO_PEDESTRIAN:
			//start blinking pedestrian indicator
			if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 8000912:	4b6c      	ldr	r3, [pc, #432]	@ (8000ac4 <task1_logic+0x2d0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	210a      	movs	r1, #10
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fa45 	bl	8005da8 <xQueueSemaphoreTake>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d109      	bne.n	8000938 <task1_logic+0x144>
				northPedestrianBlinkFlag = true;
 8000924:	4b68      	ldr	r3, [pc, #416]	@ (8000ac8 <task1_logic+0x2d4>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(northPedestrianBlinkFlagBlock);
 800092a:	4b66      	ldr	r3, [pc, #408]	@ (8000ac4 <task1_logic+0x2d0>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	f004 ffb6 	bl	80058a4 <xQueueGenericSend>
			}

			//delay for  pedestrianDelay-orangeDelay ms
			period = pdMS_TO_TICKS(pedestrianDelay - orangeDelay);
 8000938:	4b64      	ldr	r3, [pc, #400]	@ (8000acc <task1_logic+0x2d8>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b64      	ldr	r3, [pc, #400]	@ (8000ad0 <task1_logic+0x2dc>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	461a      	mov	r2, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	fb02 f303 	mul.w	r3, r2, r3
 800094e:	4a61      	ldr	r2, [pc, #388]	@ (8000ad4 <task1_logic+0x2e0>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	099b      	lsrs	r3, r3, #6
 8000956:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 8000958:	f006 fbc6 	bl	80070e8 <xTaskGetTickCount>
 800095c:	4603      	mov	r3, r0
 800095e:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 8000960:	463b      	mov	r3, r7
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	f006 f9ed 	bl	8006d44 <vTaskDelayUntil>

			//light orange car led, turn off red car led
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 800096a:	4b52      	ldr	r3, [pc, #328]	@ (8000ab4 <task1_logic+0x2c0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	210a      	movs	r1, #10
 8000970:	4618      	mov	r0, r3
 8000972:	f005 fa19 	bl	8005da8 <xQueueSemaphoreTake>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d126      	bne.n	80009ca <task1_logic+0x1d6>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, GREEN, OFF);
 800097c:	2300      	movs	r3, #0
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	2200      	movs	r2, #0
 8000984:	2103      	movs	r1, #3
 8000986:	484c      	ldr	r0, [pc, #304]	@ (8000ab8 <task1_logic+0x2c4>)
 8000988:	f000 fbc2 	bl	8001110 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, GREEN, OFF);
 800098c:	2300      	movs	r3, #0
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2302      	movs	r3, #2
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	4848      	ldr	r0, [pc, #288]	@ (8000ab8 <task1_logic+0x2c4>)
 8000998:	f000 fbba 	bl	8001110 <set_led>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, ORANGE, ON);
 800099c:	2301      	movs	r3, #1
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2200      	movs	r2, #0
 80009a4:	2103      	movs	r1, #3
 80009a6:	4844      	ldr	r0, [pc, #272]	@ (8000ab8 <task1_logic+0x2c4>)
 80009a8:	f000 fbb2 	bl	8001110 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, ORANGE, ON);
 80009ac:	2301      	movs	r3, #1
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	2200      	movs	r2, #0
 80009b4:	2101      	movs	r1, #1
 80009b6:	4840      	ldr	r0, [pc, #256]	@ (8000ab8 <task1_logic+0x2c4>)
 80009b8:	f000 fbaa 	bl	8001110 <set_led>
				xSemaphoreGive(ledBlock);
 80009bc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab4 <task1_logic+0x2c0>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	f004 ff6d 	bl	80058a4 <xQueueGenericSend>
			}

			//delay for orangeDelay ms
			period = pdMS_TO_TICKS(orangeDelay);
 80009ca:	4b41      	ldr	r3, [pc, #260]	@ (8000ad0 <task1_logic+0x2dc>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ad4 <task1_logic+0x2e0>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	099b      	lsrs	r3, r3, #6
 80009e0:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 80009e2:	f006 fb81 	bl	80070e8 <xTaskGetTickCount>
 80009e6:	4603      	mov	r3, r0
 80009e8:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 80009ea:	463b      	mov	r3, r7
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 f9a8 	bl	8006d44 <vTaskDelayUntil>

			//stop blinking pedestrian indicator
			if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 80009f4:	4b33      	ldr	r3, [pc, #204]	@ (8000ac4 <task1_logic+0x2d0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	210a      	movs	r1, #10
 80009fa:	4618      	mov	r0, r3
 80009fc:	f005 f9d4 	bl	8005da8 <xQueueSemaphoreTake>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d109      	bne.n	8000a1a <task1_logic+0x226>
				northPedestrianBlinkFlag = false;
 8000a06:	4b30      	ldr	r3, [pc, #192]	@ (8000ac8 <task1_logic+0x2d4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(northPedestrianBlinkFlagBlock);
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <task1_logic+0x2d0>)
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	f004 ff45 	bl	80058a4 <xQueueGenericSend>
			}

			//go to next state
			nextState = PEDESTRIAN_GO;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <task1_logic+0x2b8>)
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	701a      	strb	r2, [r3, #0]
			break;
 8000a20:	e0bb      	b.n	8000b9a <task1_logic+0x3a6>
		case PEDESTRIAN_GO:

			//light correct leds
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000a22:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <task1_logic+0x2c0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	210a      	movs	r1, #10
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 f9bd 	bl	8005da8 <xQueueSemaphoreTake>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d122      	bne.n	8000a7a <task1_logic+0x286>
				set_led_all(&leds, OFF);
 8000a34:	2100      	movs	r1, #0
 8000a36:	4820      	ldr	r0, [pc, #128]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a38:	f000 fb42 	bl	80010c0 <set_led_all>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, RED, ON);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2200      	movs	r2, #0
 8000a44:	2103      	movs	r1, #3
 8000a46:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a48:	f000 fb62 	bl	8001110 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, RED, ON);
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a58:	f000 fb5a 	bl	8001110 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, GREEN, ON);
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2302      	movs	r3, #2
 8000a62:	2201      	movs	r2, #1
 8000a64:	2103      	movs	r1, #3
 8000a66:	4814      	ldr	r0, [pc, #80]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a68:	f000 fb52 	bl	8001110 <set_led>
				xSemaphoreGive(ledBlock);
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <task1_logic+0x2c0>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	2300      	movs	r3, #0
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	f004 ff15 	bl	80058a4 <xQueueGenericSend>
			}

			//delay for walkingDelay ms
			period = pdMS_TO_TICKS(walkingDelay);
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <task1_logic+0x2e4>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a84:	fb02 f303 	mul.w	r3, r2, r3
 8000a88:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <task1_logic+0x2e0>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	099b      	lsrs	r3, r3, #6
 8000a90:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 8000a92:	f006 fb29 	bl	80070e8 <xTaskGetTickCount>
 8000a96:	4603      	mov	r3, r0
 8000a98:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f006 f950 	bl	8006d44 <vTaskDelayUntil>

			nextState = PEDESTRIAN_TO_CAR;
 8000aa4:	4b01      	ldr	r3, [pc, #4]	@ (8000aac <task1_logic+0x2b8>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	701a      	strb	r2, [r3, #0]
			break;
 8000aaa:	e076      	b.n	8000b9a <task1_logic+0x3a6>
 8000aac:	2000008f 	.word	0x2000008f
 8000ab0:	2000008e 	.word	0x2000008e
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	20000084 	.word	0x20000084
 8000abc:	20000094 	.word	0x20000094
 8000ac0:	20000088 	.word	0x20000088
 8000ac4:	20000098 	.word	0x20000098
 8000ac8:	200000a8 	.word	0x200000a8
 8000acc:	20000002 	.word	0x20000002
 8000ad0:	20000006 	.word	0x20000006
 8000ad4:	10624dd3 	.word	0x10624dd3
 8000ad8:	20000004 	.word	0x20000004
		case PEDESTRIAN_TO_CAR:

			//turn off pedestrian green leds and light orange car leds and red pedestrian leds
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000adc:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <task1_logic+0x3b0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	210a      	movs	r1, #10
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 f960 	bl	8005da8 <xQueueSemaphoreTake>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d126      	bne.n	8000b3c <task1_logic+0x348>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, ORANGE, ON);
 8000aee:	2301      	movs	r3, #1
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	2200      	movs	r2, #0
 8000af6:	2103      	movs	r1, #3
 8000af8:	482b      	ldr	r0, [pc, #172]	@ (8000ba8 <task1_logic+0x3b4>)
 8000afa:	f000 fb09 	bl	8001110 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, ORANGE, ON);
 8000afe:	2301      	movs	r3, #1
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	4827      	ldr	r0, [pc, #156]	@ (8000ba8 <task1_logic+0x3b4>)
 8000b0a:	f000 fb01 	bl	8001110 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, GREEN, OFF);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2302      	movs	r3, #2
 8000b14:	2201      	movs	r2, #1
 8000b16:	2103      	movs	r1, #3
 8000b18:	4823      	ldr	r0, [pc, #140]	@ (8000ba8 <task1_logic+0x3b4>)
 8000b1a:	f000 faf9 	bl	8001110 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, RED, ON);
 8000b1e:	2301      	movs	r3, #1
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	2201      	movs	r2, #1
 8000b26:	2103      	movs	r1, #3
 8000b28:	481f      	ldr	r0, [pc, #124]	@ (8000ba8 <task1_logic+0x3b4>)
 8000b2a:	f000 faf1 	bl	8001110 <set_led>
				xSemaphoreGive(ledBlock);
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <task1_logic+0x3b0>)
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	f004 feb4 	bl	80058a4 <xQueueGenericSend>
			/*
			assert that pedestrian flag is cleared
			effectively disregard any button presses made
			when pedestrian light was green or waiting to turn green
			*/
			if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <task1_logic+0x3b8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	210a      	movs	r1, #10
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 f930 	bl	8005da8 <xQueueSemaphoreTake>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d109      	bne.n	8000b62 <task1_logic+0x36e>
				traffic.north_pedestrian = false;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <task1_logic+0x3bc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	711a      	strb	r2, [r3, #4]
				xSemaphoreGive(trafficBlock);
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <task1_logic+0x3b8>)
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f004 fea1 	bl	80058a4 <xQueueGenericSend>
			}

			//delay for orangeDelay ms
			period = pdMS_TO_TICKS(orangeDelay);
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <task1_logic+0x3c0>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6c:	fb02 f303 	mul.w	r3, r2, r3
 8000b70:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <task1_logic+0x3c4>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	099b      	lsrs	r3, r3, #6
 8000b78:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 8000b7a:	f006 fab5 	bl	80070e8 <xTaskGetTickCount>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 8000b82:	463b      	mov	r3, r7
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f8dc 	bl	8006d44 <vTaskDelayUntil>

			nextState = CAR_GO;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <task1_logic+0x3c8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
			break;
 8000b92:	e002      	b.n	8000b9a <task1_logic+0x3a6>
		default:
			break;
 8000b94:	bf00      	nop
 8000b96:	e000      	b.n	8000b9a <task1_logic+0x3a6>
			break;
 8000b98:	bf00      	nop
	}

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000090 	.word	0x20000090
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	20000088 	.word	0x20000088
 8000bb4:	20000006 	.word	0x20000006
 8000bb8:	10624dd3 	.word	0x10624dd3
 8000bbc:	2000008f 	.word	0x2000008f

08000bc0 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief: redefinition of callback for external interrupt
 * @param: uint16_t GPIO_Pin, pin identifier of pin invoking the interrupt
 * @return: void
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	uint8_t message[1];
	message[0] = 0x1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	733b      	strb	r3, [r7, #12]

	switch( GPIO_Pin ){
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	2b80      	cmp	r3, #128	@ 0x80
 8000bd2:	d013      	beq.n	8000bfc <HAL_GPIO_EXTI_Callback+0x3c>
 8000bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000bd8:	d121      	bne.n	8000c1e <HAL_GPIO_EXTI_Callback+0x5e>
		case PL1_Switch_Pin:
			//HAL_GPIO_TogglePin(USR_LED1_GPIO_Port, USR_LED1_Pin);

			if( xMessageBufferIsEmpty( message_pedestrian_west ) == pdTRUE ){
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f005 fd84 	bl	80066ec <xStreamBufferIsEmpty>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d11b      	bne.n	8000c22 <HAL_GPIO_EXTI_Callback+0x62>
				xMessageBufferSendFromISR( message_pedestrian_west, message, 1 , NULL);
 8000bea:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_GPIO_EXTI_Callback+0x70>)
 8000bec:	6818      	ldr	r0, [r3, #0]
 8000bee:	f107 010c 	add.w	r1, r7, #12
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f005 fbff 	bl	80063f8 <xStreamBufferSendFromISR>
			}

			break;
 8000bfa:	e012      	b.n	8000c22 <HAL_GPIO_EXTI_Callback+0x62>
		case PL2_Switch_Pin:
			//HAL_GPIO_TogglePin(USR_LED2_GPIO_Port, USR_LED2_Pin);

			if( xMessageBufferIsEmpty( message_pedestrian_north ) == pdTRUE ){
 8000bfc:	4b0d      	ldr	r3, [pc, #52]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x74>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f005 fd73 	bl	80066ec <xStreamBufferIsEmpty>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d10c      	bne.n	8000c26 <HAL_GPIO_EXTI_Callback+0x66>
				xMessageBufferSendFromISR( message_pedestrian_north, message, 1 , NULL);
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <HAL_GPIO_EXTI_Callback+0x74>)
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	f107 010c 	add.w	r1, r7, #12
 8000c14:	2300      	movs	r3, #0
 8000c16:	2201      	movs	r2, #1
 8000c18:	f005 fbee 	bl	80063f8 <xStreamBufferSendFromISR>
			}

			break;
 8000c1c:	e003      	b.n	8000c26 <HAL_GPIO_EXTI_Callback+0x66>
		default:
			break;
 8000c1e:	bf00      	nop
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_EXTI_Callback+0x68>
			break;
 8000c22:	bf00      	nop
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_EXTI_Callback+0x68>
			break;
 8000c26:	bf00      	nop
	}

}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	200000a0 	.word	0x200000a0
 8000c34:	200000a4 	.word	0x200000a4

08000c38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	@ 0x28
 8000c3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
 8000c4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4e:	4b63      	ldr	r3, [pc, #396]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c52:	4a62      	ldr	r2, [pc, #392]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c54:	f043 0304 	orr.w	r3, r3, #4
 8000c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c5a:	4b60      	ldr	r3, [pc, #384]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c5e:	f003 0304 	and.w	r3, r3, #4
 8000c62:	613b      	str	r3, [r7, #16]
 8000c64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	4b5d      	ldr	r3, [pc, #372]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a5c      	ldr	r2, [pc, #368]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b5a      	ldr	r3, [pc, #360]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b57      	ldr	r3, [pc, #348]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a56      	ldr	r2, [pc, #344]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b54      	ldr	r3, [pc, #336]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	4b51      	ldr	r3, [pc, #324]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	4a50      	ldr	r2, [pc, #320]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8000ddc <MX_GPIO_Init+0x1a4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SR_RESET_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cb8:	f001 fb70 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_LED1_Pin|SR_STCP_Pin|USR_LED2_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	f249 0104 	movw	r1, #36868	@ 0x9004
 8000cc2:	4847      	ldr	r0, [pc, #284]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000cc4:	f001 fb6a 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SR_ENABLE_GPIO_Port, SR_ENABLE_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2180      	movs	r1, #128	@ 0x80
 8000ccc:	4845      	ldr	r0, [pc, #276]	@ (8000de4 <MX_GPIO_Init+0x1ac>)
 8000cce:	f001 fb65 	bl	800239c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SR_RESET_Pin;
 8000cd2:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cee:	f001 f993 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_CAR_Pin;
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_CAR_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4837      	ldr	r0, [pc, #220]	@ (8000de4 <MX_GPIO_Init+0x1ac>)
 8000d06:	f001 f987 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = USR_LED1_Pin|SR_STCP_Pin|USR_LED2_Pin;
 8000d0a:	f249 0304 	movw	r3, #36868	@ 0x9004
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	482f      	ldr	r0, [pc, #188]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000d24:	f001 f978 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_CAR_Pin|TL3_CAR_Pin;
 8000d28:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4828      	ldr	r0, [pc, #160]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000d3e:	f001 f96b 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR_ENABLE_Pin;
 8000d42:	2380      	movs	r3, #128	@ 0x80
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4822      	ldr	r0, [pc, #136]	@ (8000de4 <MX_GPIO_Init+0x1ac>)
 8000d5a:	f001 f95d 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL4_CAR_Pin;
 8000d5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d64:	2300      	movs	r3, #0
 8000d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL4_CAR_GPIO_Port, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d76:	f001 f94f 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL1_Switch_Pin;
 8000d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d80:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL1_Switch_GPIO_Port, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d94:	f001 f940 	bl	8002018 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL2_Switch_Pin;
 8000d98:	2380      	movs	r3, #128	@ 0x80
 8000d9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000da0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL2_Switch_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	480c      	ldr	r0, [pc, #48]	@ (8000de0 <MX_GPIO_Init+0x1a8>)
 8000dae:	f001 f933 	bl	8002018 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2105      	movs	r1, #5
 8000db6:	2017      	movs	r0, #23
 8000db8:	f001 f904 	bl	8001fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dbc:	2017      	movs	r0, #23
 8000dbe:	f001 f91d 	bl	8001ffc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2105      	movs	r1, #5
 8000dc6:	2028      	movs	r0, #40	@ 0x28
 8000dc8:	f001 f8fc 	bl	8001fc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dcc:	2028      	movs	r0, #40	@ 0x28
 8000dce:	f001 f915 	bl	8001ffc <HAL_NVIC_EnableIRQ>

}
 8000dd2:	bf00      	nop
 8000dd4:	3728      	adds	r7, #40	@ 0x28
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	48000400 	.word	0x48000400
 8000de4:	48000800 	.word	0x48000800

08000de8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dec:	f000 fff2 	bl	8001dd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000df0:	f000 f810 	bl	8000e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000df4:	f7ff ff20 	bl	8000c38 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000df8:	f000 ff36 	bl	8001c68 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000dfc:	f000 fdb8 	bl	8001970 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SR_Init(); //initialize shift registers (probably unnecessary)
 8000e00:	f000 f89a 	bl	8000f38 <SR_Init>
//  test_low_level(); //omment in/out to run tests

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e04:	f004 f9f6 	bl	80051f4 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e08:	f7ff fb5a 	bl	80004c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e0c:	f004 fa16 	bl	800523c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <main+0x28>

08000e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b096      	sub	sp, #88	@ 0x58
 8000e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	2244      	movs	r2, #68	@ 0x44
 8000e20:	2100      	movs	r1, #0
 8000e22:	4618      	mov	r0, r3
 8000e24:	f008 f860 	bl	8008ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e28:	463b      	mov	r3, r7
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
 8000e32:	60da      	str	r2, [r3, #12]
 8000e34:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e36:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e3a:	f001 faed 	bl	8002418 <HAL_PWREx_ControlVoltageScaling>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e44:	f000 f84a 	bl	8000edc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e52:	2310      	movs	r3, #16
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e56:	2302      	movs	r3, #2
 8000e58:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e62:	230a      	movs	r3, #10
 8000e64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e66:	2307      	movs	r3, #7
 8000e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e6a:	2302      	movs	r3, #2
 8000e6c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e72:	f107 0314 	add.w	r3, r7, #20
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fb24 	bl	80024c4 <HAL_RCC_OscConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e82:	f000 f82b 	bl	8000edc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e86:	230f      	movs	r3, #15
 8000e88:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	2104      	movs	r1, #4
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 feec 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000eaa:	f000 f817 	bl	8000edc <Error_Handler>
  }
}
 8000eae:	bf00      	nop
 8000eb0:	3758      	adds	r7, #88	@ 0x58
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
	...

08000eb8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d101      	bne.n	8000ece <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eca:	f000 ffa3 	bl	8001e14 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40012c00 	.word	0x40012c00

08000edc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee0:	b672      	cpsid	i
}
 8000ee2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <Error_Handler+0x8>

08000ee8 <SR_Send>:
 * 					bytes[0] respresents Shift regsiter3
 * 					bytes[1] respresents Shift regsiter2
 * 					bytes[2] respresents Shift regsiter1
 *
 */
int8_t SR_Send(uint8_t bytes[]){
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_SPI_Transmit(&hspi3, bytes, 3, 1000);
 8000ef0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <SR_Send+0x48>)
 8000efa:	f002 fe74 	bl	8003be6 <HAL_SPI_Transmit>
 8000efe:	4603      	mov	r3, r0
 8000f00:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d10d      	bne.n	8000f24 <SR_Send+0x3c>
		HAL_GPIO_WritePin(SR_STCP_GPIO_Port, SR_STCP_Pin, GPIO_PIN_SET); //toggle stcp to put it to the output
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f0e:	4809      	ldr	r0, [pc, #36]	@ (8000f34 <SR_Send+0x4c>)
 8000f10:	f001 fa44 	bl	800239c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SR_STCP_GPIO_Port, SR_STCP_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f1a:	4806      	ldr	r0, [pc, #24]	@ (8000f34 <SR_Send+0x4c>)
 8000f1c:	f001 fa3e 	bl	800239c <HAL_GPIO_WritePin>
		return 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	e001      	b.n	8000f28 <SR_Send+0x40>
	}

	return -1;
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200000c0 	.word	0x200000c0
 8000f34:	48000400 	.word	0x48000400

08000f38 <SR_Init>:
/**
 * @brief	:	function for initializing shift register
 * @param	:	void
 * @return	:	void
 */
void SR_Init(void){
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	//set SR_reset high (active low)
	HAL_GPIO_WritePin(SR_RESET_GPIO_PORT, SR_RESET_Pin, GPIO_PIN_RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f46:	f001 fa29 	bl	800239c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SR_RESET_GPIO_PORT, SR_RESET_Pin, GPIO_PIN_SET);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f54:	f001 fa22 	bl	800239c <HAL_GPIO_WritePin>

	//set SR_ENABLE low (output enable is active low)
	HAL_GPIO_WritePin(SR_ENABLE_GPIO_Port, SR_ENABLE_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2180      	movs	r1, #128	@ 0x80
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <SR_Init+0x3c>)
 8000f5e:	f001 fa1d 	bl	800239c <HAL_GPIO_WritePin>

	//set SR_STCP low (data transferred to storage register on rising edge)
	HAL_GPIO_WritePin(SR_STCP_GPIO_Port, SR_STCP_Pin, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f68:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <SR_Init+0x40>)
 8000f6a:	f001 fa17 	bl	800239c <HAL_GPIO_WritePin>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	48000800 	.word	0x48000800
 8000f78:	48000400 	.word	0x48000400

08000f7c <led_registers_init>:
/**
 * @brief : led_registers_init, initialization of led register struct
 * @param : led_registers_t* registers, pointer to led state object to be initialized
 * @return : void
 */
void led_registers_init(led_registers_t* registers){
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	registers->sr1 = 0x00;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
	registers->sr2 = 0x00;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	705a      	strb	r2, [r3, #1]
	registers->sr3 = 0x00;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	709a      	strb	r2, [r3, #2]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr

08000fa2 <update_leds>:
/**
 * @brief : update_leds, re-package contents of a ledregister struct and send it to shift registers
 * @param : led_registers_t* registers, pointer to led state object to be initialized
 * @return : void
 */
void update_leds(led_registers_t* registers){
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b084      	sub	sp, #16
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	buf[0] = registers->sr3;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	789b      	ldrb	r3, [r3, #2]
 8000fae:	733b      	strb	r3, [r7, #12]
	buf[1] = registers->sr2;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	785b      	ldrb	r3, [r3, #1]
 8000fb4:	737b      	strb	r3, [r7, #13]
	buf[2] = registers->sr1;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	73bb      	strb	r3, [r7, #14]
	SR_Send(buf);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff91 	bl	8000ee8 <SR_Send>
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <traffic_state_init>:
/**
 * @brief : traffic_state_init, initialization of a traffic state
 * @params : traffic_state_t* state, pointer to the trafffic state to be initialized
 * @return : int8_t, 0 if correctly initialized
 */
int8_t traffic_state_init(traffic_state_t* state){
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
	state->north_pedestrian = false;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	711a      	strb	r2, [r3, #4]
	state->west_pedestrian = false;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	715a      	strb	r2, [r3, #5]

	state->north_car = check_car(NORTH);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 f81e 	bl	8001024 <check_car>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	701a      	strb	r2, [r3, #0]
	state->west_car = check_car(WEST);
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	f000 f817 	bl	8001024 <check_car>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	705a      	strb	r2, [r3, #1]
	state->south_car = check_car(SOUTH);
 8000ffe:	2001      	movs	r0, #1
 8001000:	f000 f810 	bl	8001024 <check_car>
 8001004:	4603      	mov	r3, r0
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	709a      	strb	r2, [r3, #2]
	state->east_car = check_car(EAST);
 800100c:	2002      	movs	r0, #2
 800100e:	f000 f809 	bl	8001024 <check_car>
 8001012:	4603      	mov	r3, r0
 8001014:	461a      	mov	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	70da      	strb	r2, [r3, #3]

	return 0;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <check_car>:
/**
 * @brief : check_car, check switch status at a given position in the junction
 * @param : junction_position_t position, position in junction
 * @return : boolean, true if switch active
 */
bool check_car(junction_position_t position){
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	71fb      	strb	r3, [r7, #7]
	switch (position){
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b03      	cmp	r3, #3
 8001032:	d833      	bhi.n	800109c <check_car+0x78>
 8001034:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <check_car+0x18>)
 8001036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103a:	bf00      	nop
 800103c:	08001063 	.word	0x08001063
 8001040:	08001075 	.word	0x08001075
 8001044:	08001089 	.word	0x08001089
 8001048:	0800104d 	.word	0x0800104d
		case NORTH:
			if( HAL_GPIO_ReadPin(TL4_CAR_GPIO_Port, TL4_CAR_Pin) == GPIO_PIN_SET ){
 800104c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001050:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001054:	f001 f98a 	bl	800236c <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d120      	bne.n	80010a0 <check_car+0x7c>
				return true;
 800105e:	2301      	movs	r3, #1
 8001060:	e026      	b.n	80010b0 <check_car+0x8c>
			}
			break;
		case WEST:
			if( HAL_GPIO_ReadPin(TL1_CAR_GPIO_Port, TL1_CAR_Pin) == GPIO_PIN_SET ){
 8001062:	2110      	movs	r1, #16
 8001064:	4814      	ldr	r0, [pc, #80]	@ (80010b8 <check_car+0x94>)
 8001066:	f001 f981 	bl	800236c <HAL_GPIO_ReadPin>
 800106a:	4603      	mov	r3, r0
 800106c:	2b01      	cmp	r3, #1
 800106e:	d119      	bne.n	80010a4 <check_car+0x80>
				return true;
 8001070:	2301      	movs	r3, #1
 8001072:	e01d      	b.n	80010b0 <check_car+0x8c>
			}
			break;
		case SOUTH:
			if( HAL_GPIO_ReadPin(TL2_CAR_GPIO_Port, TL2_CAR_Pin) == GPIO_PIN_SET ){
 8001074:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001078:	4810      	ldr	r0, [pc, #64]	@ (80010bc <check_car+0x98>)
 800107a:	f001 f977 	bl	800236c <HAL_GPIO_ReadPin>
 800107e:	4603      	mov	r3, r0
 8001080:	2b01      	cmp	r3, #1
 8001082:	d111      	bne.n	80010a8 <check_car+0x84>
				return true;
 8001084:	2301      	movs	r3, #1
 8001086:	e013      	b.n	80010b0 <check_car+0x8c>
			}
			break;
		case EAST:
			if( HAL_GPIO_ReadPin(TL3_CAR_GPIO_Port, TL3_CAR_Pin) == GPIO_PIN_SET ){
 8001088:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800108c:	480b      	ldr	r0, [pc, #44]	@ (80010bc <check_car+0x98>)
 800108e:	f001 f96d 	bl	800236c <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	2b01      	cmp	r3, #1
 8001096:	d109      	bne.n	80010ac <check_car+0x88>
				return true;
 8001098:	2301      	movs	r3, #1
 800109a:	e009      	b.n	80010b0 <check_car+0x8c>
			}
			break;
		default:
			return false;
 800109c:	2300      	movs	r3, #0
 800109e:	e007      	b.n	80010b0 <check_car+0x8c>
			break;
 80010a0:	bf00      	nop
 80010a2:	e004      	b.n	80010ae <check_car+0x8a>
			break;
 80010a4:	bf00      	nop
 80010a6:	e002      	b.n	80010ae <check_car+0x8a>
			break;
 80010a8:	bf00      	nop
 80010aa:	e000      	b.n	80010ae <check_car+0x8a>
			break;
 80010ac:	bf00      	nop
			break;
	}
	return false;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3708      	adds	r7, #8
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	48000800 	.word	0x48000800
 80010bc:	48000400 	.word	0x48000400

080010c0 <set_led_all>:
 * @brief : 	set_led_all, set all leds to specified state of a specific led state object
 * @param : 	led_registers_t* leds, pointer to led state object to modify
 * 				led_state_t led_state, state to set ledst to (ON or OFF)
 * @return : 	void
 */
void set_led_all(led_registers_t* leds, led_state_t led_state){
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	70fb      	strb	r3, [r7, #3]
	switch (led_state){
 80010cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00b      	beq.n	80010ec <set_led_all+0x2c>
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d113      	bne.n	8001100 <set_led_all+0x40>
		case ON:
			leds->sr3 = 0xff;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	22ff      	movs	r2, #255	@ 0xff
 80010dc:	709a      	strb	r2, [r3, #2]
			leds->sr2 = 0xff;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	22ff      	movs	r2, #255	@ 0xff
 80010e2:	705a      	strb	r2, [r3, #1]
			leds->sr1 = 0xff;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	22ff      	movs	r2, #255	@ 0xff
 80010e8:	701a      	strb	r2, [r3, #0]
			break;
 80010ea:	e00a      	b.n	8001102 <set_led_all+0x42>
		case OFF:
			leds->sr3 = 0x00;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	709a      	strb	r2, [r3, #2]
			leds->sr2 = 0x00;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	705a      	strb	r2, [r3, #1]
			leds->sr1 = 0x00;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
			break;
 80010fe:	e000      	b.n	8001102 <set_led_all+0x42>
		default:
			break;
 8001100:	bf00      	nop
	}
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <set_led>:
 * 				junction_position_t position, position in junction (NORTH, WEST, SOUTH, EAST)
 * 				light_type_t light_type, type of traffic light, TRAFFIC_LIGHT for actual traffic light (for cars) and PEDESTRIAN_LIGHT for pedestrian crossing lights an indicator led
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void set_led(led_registers_t* leds, junction_position_t position, light_type_t light_type, light_color_t color, led_state_t led_state){
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	4608      	mov	r0, r1
 800111a:	4611      	mov	r1, r2
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	70fb      	strb	r3, [r7, #3]
 8001122:	460b      	mov	r3, r1
 8001124:	70bb      	strb	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	707b      	strb	r3, [r7, #1]

	//reroute to help functions instead of indentation hell
	switch (position){
 800112a:	78fb      	ldrb	r3, [r7, #3]
 800112c:	2b03      	cmp	r3, #3
 800112e:	d82b      	bhi.n	8001188 <set_led+0x78>
 8001130:	a201      	add	r2, pc, #4	@ (adr r2, 8001138 <set_led+0x28>)
 8001132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001136:	bf00      	nop
 8001138:	08001159 	.word	0x08001159
 800113c:	08001169 	.word	0x08001169
 8001140:	08001179 	.word	0x08001179
 8001144:	08001149 	.word	0x08001149
		case NORTH:
			north_leds(leds, light_type, color, led_state);
 8001148:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800114c:	787a      	ldrb	r2, [r7, #1]
 800114e:	78b9      	ldrb	r1, [r7, #2]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 f81f 	bl	8001194 <north_leds>
			break;
 8001156:	e018      	b.n	800118a <set_led+0x7a>
		case WEST:
			west_leds(leds, light_type, color, led_state);
 8001158:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800115c:	787a      	ldrb	r2, [r7, #1]
 800115e:	78b9      	ldrb	r1, [r7, #2]
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f000 f83e 	bl	80011e2 <west_leds>
			break;
 8001166:	e010      	b.n	800118a <set_led+0x7a>
		case SOUTH:
			south_leds(leds, light_type, color, led_state);
 8001168:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800116c:	787a      	ldrb	r2, [r7, #1]
 800116e:	78b9      	ldrb	r1, [r7, #2]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f85d 	bl	8001230 <south_leds>
			break;
 8001176:	e008      	b.n	800118a <set_led+0x7a>
		case EAST:
			east_leds(leds, light_type, color, led_state);
 8001178:	f997 3010 	ldrsb.w	r3, [r7, #16]
 800117c:	787a      	ldrb	r2, [r7, #1]
 800117e:	78b9      	ldrb	r1, [r7, #2]
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f000 f875 	bl	8001270 <east_leds>
			break;
 8001186:	e000      	b.n	800118a <set_led+0x7a>
		default:
			break;
 8001188:	bf00      	nop
	}
}
 800118a:	bf00      	nop
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop

08001194 <north_leds>:
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_type_t light_type, type of traffic light, TRAFFIC_LIGHT for actual traffic light (for cars) and PEDESTRIAN_LIGHT for pedestrian crossing lights an indicator led
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void north_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	4608      	mov	r0, r1
 800119e:	4611      	mov	r1, r2
 80011a0:	461a      	mov	r2, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	70fb      	strb	r3, [r7, #3]
 80011a6:	460b      	mov	r3, r1
 80011a8:	70bb      	strb	r3, [r7, #2]
 80011aa:	4613      	mov	r3, r2
 80011ac:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <north_leds+0x26>
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d008      	beq.n	80011ca <north_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			north_pedestrian_light(leds, color, led_state);
			break;
		default:
			break;
 80011b8:	e00f      	b.n	80011da <north_leds+0x46>
			north_traffic_light(leds, color, led_state);
 80011ba:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80011be:	78bb      	ldrb	r3, [r7, #2]
 80011c0:	4619      	mov	r1, r3
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f000 f874 	bl	80012b0 <north_traffic_light>
			break;
 80011c8:	e007      	b.n	80011da <north_leds+0x46>
			north_pedestrian_light(leds, color, led_state);
 80011ca:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80011ce:	78bb      	ldrb	r3, [r7, #2]
 80011d0:	4619      	mov	r1, r3
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 faac 	bl	8001730 <north_pedestrian_light>
			break;
 80011d8:	bf00      	nop
	}
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <west_leds>:
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_type_t light_type, type of traffic light, TRAFFIC_LIGHT for actual traffic light (for cars) and PEDESTRIAN_LIGHT for pedestrian crossing lights an indicator led
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void west_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b082      	sub	sp, #8
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]
 80011ea:	4608      	mov	r0, r1
 80011ec:	4611      	mov	r1, r2
 80011ee:	461a      	mov	r2, r3
 80011f0:	4603      	mov	r3, r0
 80011f2:	70fb      	strb	r3, [r7, #3]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70bb      	strb	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <west_leds+0x26>
 8001202:	2b01      	cmp	r3, #1
 8001204:	d008      	beq.n	8001218 <west_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			west_pedestrian_light(leds, color, led_state);
			break;
		default:
			break;
 8001206:	e00f      	b.n	8001228 <west_leds+0x46>
			west_traffic_light(leds, color, led_state);
 8001208:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800120c:	78bb      	ldrb	r3, [r7, #2]
 800120e:	4619      	mov	r1, r3
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f8dd 	bl	80013d0 <west_traffic_light>
			break;
 8001216:	e007      	b.n	8001228 <west_leds+0x46>
			west_pedestrian_light(leds, color, led_state);
 8001218:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800121c:	78bb      	ldrb	r3, [r7, #2]
 800121e:	4619      	mov	r1, r3
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f000 fb15 	bl	8001850 <west_pedestrian_light>
			break;
 8001226:	bf00      	nop
	}
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <south_leds>:
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_type_t light_type, type of traffic light, TRAFFIC_LIGHT for actual traffic light (for cars) and PEDESTRIAN_LIGHT for pedestrian crossing lights an indicator led
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void south_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	4608      	mov	r0, r1
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	4603      	mov	r3, r0
 8001240:	70fb      	strb	r3, [r7, #3]
 8001242:	460b      	mov	r3, r1
 8001244:	70bb      	strb	r3, [r7, #2]
 8001246:	4613      	mov	r3, r2
 8001248:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 800124a:	78fb      	ldrb	r3, [r7, #3]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <south_leds+0x26>
 8001250:	2b01      	cmp	r3, #1
 8001252:	d008      	beq.n	8001266 <south_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			//do nothing (no pedestrian lights)
			break;
		default:
			break;
 8001254:	e008      	b.n	8001268 <south_leds+0x38>
			south_traffic_light(leds, color, led_state);
 8001256:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800125a:	78bb      	ldrb	r3, [r7, #2]
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f946 	bl	80014f0 <south_traffic_light>
			break;
 8001264:	e000      	b.n	8001268 <south_leds+0x38>
			break;
 8001266:	bf00      	nop
	}
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <east_leds>:
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_type_t light_type, type of traffic light, TRAFFIC_LIGHT for actual traffic light (for cars) and PEDESTRIAN_LIGHT for pedestrian crossing lights an indicator led
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void east_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	4608      	mov	r0, r1
 800127a:	4611      	mov	r1, r2
 800127c:	461a      	mov	r2, r3
 800127e:	4603      	mov	r3, r0
 8001280:	70fb      	strb	r3, [r7, #3]
 8001282:	460b      	mov	r3, r1
 8001284:	70bb      	strb	r3, [r7, #2]
 8001286:	4613      	mov	r3, r2
 8001288:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 800128a:	78fb      	ldrb	r3, [r7, #3]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <east_leds+0x26>
 8001290:	2b01      	cmp	r3, #1
 8001292:	d008      	beq.n	80012a6 <east_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			//do nothing (no pedestrian lights)
			break;
		default:
			break;
 8001294:	e008      	b.n	80012a8 <east_leds+0x38>
			east_traffic_light(leds, color, led_state);
 8001296:	f997 2001 	ldrsb.w	r2, [r7, #1]
 800129a:	78bb      	ldrb	r3, [r7, #2]
 800129c:	4619      	mov	r1, r3
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 f9b6 	bl	8001610 <east_traffic_light>
			break;
 80012a4:	e000      	b.n	80012a8 <east_leds+0x38>
			break;
 80012a6:	bf00      	nop
	}
}
 80012a8:	bf00      	nop
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <north_traffic_light>:
 * @return	:	void
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void north_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	70fb      	strb	r3, [r7, #3]
 80012bc:	4613      	mov	r3, r2
 80012be:	70bb      	strb	r3, [r7, #2]
	switch (color){
 80012c0:	78fb      	ldrb	r3, [r7, #3]
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	d87c      	bhi.n	80013c0 <north_traffic_light+0x110>
 80012c6:	a201      	add	r2, pc, #4	@ (adr r2, 80012cc <north_traffic_light+0x1c>)
 80012c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012cc:	080012dd 	.word	0x080012dd
 80012d0:	08001329 	.word	0x08001329
 80012d4:	08001375 	.word	0x08001375
 80012d8:	080013c1 	.word	0x080013c1
		case RED:
			switch (led_state){
 80012dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d007      	beq.n	80012f4 <north_traffic_light+0x44>
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	dc1d      	bgt.n	8001324 <north_traffic_light+0x74>
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80012ec:	d012      	beq.n	8001314 <north_traffic_light+0x64>
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d008      	beq.n	8001304 <north_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL4_RED;
					break;
				default:
					break;
 80012f2:	e017      	b.n	8001324 <north_traffic_light+0x74>
					leds->sr3 = leds->sr3 | TL4_RED;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	709a      	strb	r2, [r3, #2]
					break;
 8001302:	e010      	b.n	8001326 <north_traffic_light+0x76>
					leds->sr3 = leds->sr3 & ~TL4_RED;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	789b      	ldrb	r3, [r3, #2]
 8001308:	f023 0308 	bic.w	r3, r3, #8
 800130c:	b2da      	uxtb	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	709a      	strb	r2, [r3, #2]
					break;
 8001312:	e008      	b.n	8001326 <north_traffic_light+0x76>
					leds->sr3 = leds->sr3 ^ TL4_RED;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	789b      	ldrb	r3, [r3, #2]
 8001318:	f083 0308 	eor.w	r3, r3, #8
 800131c:	b2da      	uxtb	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	709a      	strb	r2, [r3, #2]
					break;
 8001322:	e000      	b.n	8001326 <north_traffic_light+0x76>
					break;
 8001324:	bf00      	nop
			}
			break;
 8001326:	e04c      	b.n	80013c2 <north_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 8001328:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d007      	beq.n	8001340 <north_traffic_light+0x90>
 8001330:	2b01      	cmp	r3, #1
 8001332:	dc1d      	bgt.n	8001370 <north_traffic_light+0xc0>
 8001334:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001338:	d012      	beq.n	8001360 <north_traffic_light+0xb0>
 800133a:	2b00      	cmp	r3, #0
 800133c:	d008      	beq.n	8001350 <north_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL4_YELLOW;
					break;
				default:
					break;
 800133e:	e017      	b.n	8001370 <north_traffic_light+0xc0>
					leds->sr3 = leds->sr3 | TL4_YELLOW;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	789b      	ldrb	r3, [r3, #2]
 8001344:	f043 0310 	orr.w	r3, r3, #16
 8001348:	b2da      	uxtb	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	709a      	strb	r2, [r3, #2]
					break;
 800134e:	e010      	b.n	8001372 <north_traffic_light+0xc2>
					leds->sr3 = leds->sr3 & ~TL4_YELLOW;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	789b      	ldrb	r3, [r3, #2]
 8001354:	f023 0310 	bic.w	r3, r3, #16
 8001358:	b2da      	uxtb	r2, r3
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	709a      	strb	r2, [r3, #2]
					break;
 800135e:	e008      	b.n	8001372 <north_traffic_light+0xc2>
					leds->sr3 = leds->sr3 ^ TL4_YELLOW;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	789b      	ldrb	r3, [r3, #2]
 8001364:	f083 0310 	eor.w	r3, r3, #16
 8001368:	b2da      	uxtb	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	709a      	strb	r2, [r3, #2]
					break;
 800136e:	e000      	b.n	8001372 <north_traffic_light+0xc2>
					break;
 8001370:	bf00      	nop
			}
			break;
 8001372:	e026      	b.n	80013c2 <north_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 8001374:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d007      	beq.n	800138c <north_traffic_light+0xdc>
 800137c:	2b01      	cmp	r3, #1
 800137e:	dc1d      	bgt.n	80013bc <north_traffic_light+0x10c>
 8001380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001384:	d012      	beq.n	80013ac <north_traffic_light+0xfc>
 8001386:	2b00      	cmp	r3, #0
 8001388:	d008      	beq.n	800139c <north_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL4_GREEN;
					break;
				default:
					break;
 800138a:	e017      	b.n	80013bc <north_traffic_light+0x10c>
					leds->sr3 = leds->sr3 | TL4_GREEN;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	f043 0320 	orr.w	r3, r3, #32
 8001394:	b2da      	uxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	709a      	strb	r2, [r3, #2]
					break;
 800139a:	e010      	b.n	80013be <north_traffic_light+0x10e>
					leds->sr3 = leds->sr3 & ~TL4_GREEN;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	f023 0320 	bic.w	r3, r3, #32
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	709a      	strb	r2, [r3, #2]
					break;
 80013aa:	e008      	b.n	80013be <north_traffic_light+0x10e>
					leds->sr3 = leds->sr3 ^ TL4_GREEN;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	f083 0320 	eor.w	r3, r3, #32
 80013b4:	b2da      	uxtb	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	709a      	strb	r2, [r3, #2]
					break;
 80013ba:	e000      	b.n	80013be <north_traffic_light+0x10e>
					break;
 80013bc:	bf00      	nop
			}
			break;
 80013be:	e000      	b.n	80013c2 <north_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 80013c0:	bf00      	nop
	}
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <west_traffic_light>:
 * @return	:	void
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void west_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	70fb      	strb	r3, [r7, #3]
 80013dc:	4613      	mov	r3, r2
 80013de:	70bb      	strb	r3, [r7, #2]
	switch (color){
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	2b03      	cmp	r3, #3
 80013e4:	d87c      	bhi.n	80014e0 <west_traffic_light+0x110>
 80013e6:	a201      	add	r2, pc, #4	@ (adr r2, 80013ec <west_traffic_light+0x1c>)
 80013e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	08001449 	.word	0x08001449
 80013f4:	08001495 	.word	0x08001495
 80013f8:	080014e1 	.word	0x080014e1
		case RED:
			switch (led_state){
 80013fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d007      	beq.n	8001414 <west_traffic_light+0x44>
 8001404:	2b01      	cmp	r3, #1
 8001406:	dc1d      	bgt.n	8001444 <west_traffic_light+0x74>
 8001408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800140c:	d012      	beq.n	8001434 <west_traffic_light+0x64>
 800140e:	2b00      	cmp	r3, #0
 8001410:	d008      	beq.n	8001424 <west_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ TL1_RED;
					break;
				default:
					break;
 8001412:	e017      	b.n	8001444 <west_traffic_light+0x74>
					leds->sr1 = leds->sr1 | TL1_RED;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	b2da      	uxtb	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	701a      	strb	r2, [r3, #0]
					break;
 8001422:	e010      	b.n	8001446 <west_traffic_light+0x76>
					leds->sr1 = leds->sr1 & ~TL1_RED;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	f023 0301 	bic.w	r3, r3, #1
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	701a      	strb	r2, [r3, #0]
					break;
 8001432:	e008      	b.n	8001446 <west_traffic_light+0x76>
					leds->sr1 = leds->sr1 ^ TL1_RED;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	b2da      	uxtb	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	701a      	strb	r2, [r3, #0]
					break;
 8001442:	e000      	b.n	8001446 <west_traffic_light+0x76>
					break;
 8001444:	bf00      	nop
			}
			break;
 8001446:	e04c      	b.n	80014e2 <west_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 8001448:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d007      	beq.n	8001460 <west_traffic_light+0x90>
 8001450:	2b01      	cmp	r3, #1
 8001452:	dc1d      	bgt.n	8001490 <west_traffic_light+0xc0>
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001458:	d012      	beq.n	8001480 <west_traffic_light+0xb0>
 800145a:	2b00      	cmp	r3, #0
 800145c:	d008      	beq.n	8001470 <west_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ TL1_YELLOW;
					break;
				default:
					break;
 800145e:	e017      	b.n	8001490 <west_traffic_light+0xc0>
					leds->sr1 = leds->sr1 | TL1_YELLOW;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	b2da      	uxtb	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	701a      	strb	r2, [r3, #0]
					break;
 800146e:	e010      	b.n	8001492 <west_traffic_light+0xc2>
					leds->sr1 = leds->sr1 & ~TL1_YELLOW;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	f023 0302 	bic.w	r3, r3, #2
 8001478:	b2da      	uxtb	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	701a      	strb	r2, [r3, #0]
					break;
 800147e:	e008      	b.n	8001492 <west_traffic_light+0xc2>
					leds->sr1 = leds->sr1 ^ TL1_YELLOW;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	f083 0302 	eor.w	r3, r3, #2
 8001488:	b2da      	uxtb	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	701a      	strb	r2, [r3, #0]
					break;
 800148e:	e000      	b.n	8001492 <west_traffic_light+0xc2>
					break;
 8001490:	bf00      	nop
			}
			break;
 8001492:	e026      	b.n	80014e2 <west_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 8001494:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d007      	beq.n	80014ac <west_traffic_light+0xdc>
 800149c:	2b01      	cmp	r3, #1
 800149e:	dc1d      	bgt.n	80014dc <west_traffic_light+0x10c>
 80014a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014a4:	d012      	beq.n	80014cc <west_traffic_light+0xfc>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <west_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ TL1_GREEN;
					break;
				default:
					break;
 80014aa:	e017      	b.n	80014dc <west_traffic_light+0x10c>
					leds->sr1 = leds->sr1 | TL1_GREEN;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	701a      	strb	r2, [r3, #0]
					break;
 80014ba:	e010      	b.n	80014de <west_traffic_light+0x10e>
					leds->sr1 = leds->sr1 & ~TL1_GREEN;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	f023 0304 	bic.w	r3, r3, #4
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	701a      	strb	r2, [r3, #0]
					break;
 80014ca:	e008      	b.n	80014de <west_traffic_light+0x10e>
					leds->sr1 = leds->sr1 ^ TL1_GREEN;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	f083 0304 	eor.w	r3, r3, #4
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	701a      	strb	r2, [r3, #0]
					break;
 80014da:	e000      	b.n	80014de <west_traffic_light+0x10e>
					break;
 80014dc:	bf00      	nop
			}
			break;
 80014de:	e000      	b.n	80014e2 <west_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 80014e0:	bf00      	nop
	}
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop

080014f0 <south_traffic_light>:
 * @return	:	void
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void south_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	70fb      	strb	r3, [r7, #3]
 80014fc:	4613      	mov	r3, r2
 80014fe:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d87c      	bhi.n	8001600 <south_traffic_light+0x110>
 8001506:	a201      	add	r2, pc, #4	@ (adr r2, 800150c <south_traffic_light+0x1c>)
 8001508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800150c:	0800151d 	.word	0x0800151d
 8001510:	08001569 	.word	0x08001569
 8001514:	080015b5 	.word	0x080015b5
 8001518:	08001601 	.word	0x08001601
		case RED:
			switch (led_state){
 800151c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001520:	2b01      	cmp	r3, #1
 8001522:	d007      	beq.n	8001534 <south_traffic_light+0x44>
 8001524:	2b01      	cmp	r3, #1
 8001526:	dc1d      	bgt.n	8001564 <south_traffic_light+0x74>
 8001528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800152c:	d012      	beq.n	8001554 <south_traffic_light+0x64>
 800152e:	2b00      	cmp	r3, #0
 8001530:	d008      	beq.n	8001544 <south_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ TL2_RED;
					break;
				default:
					break;
 8001532:	e017      	b.n	8001564 <south_traffic_light+0x74>
					leds->sr2 = leds->sr2 | TL2_RED;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	b2da      	uxtb	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	705a      	strb	r2, [r3, #1]
					break;
 8001542:	e010      	b.n	8001566 <south_traffic_light+0x76>
					leds->sr2 = leds->sr2 & ~TL2_RED;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	785b      	ldrb	r3, [r3, #1]
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	705a      	strb	r2, [r3, #1]
					break;
 8001552:	e008      	b.n	8001566 <south_traffic_light+0x76>
					leds->sr2 = leds->sr2 ^ TL2_RED;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	785b      	ldrb	r3, [r3, #1]
 8001558:	f083 0301 	eor.w	r3, r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	705a      	strb	r2, [r3, #1]
					break;
 8001562:	e000      	b.n	8001566 <south_traffic_light+0x76>
					break;
 8001564:	bf00      	nop
			}
			break;
 8001566:	e04c      	b.n	8001602 <south_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 8001568:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d007      	beq.n	8001580 <south_traffic_light+0x90>
 8001570:	2b01      	cmp	r3, #1
 8001572:	dc1d      	bgt.n	80015b0 <south_traffic_light+0xc0>
 8001574:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001578:	d012      	beq.n	80015a0 <south_traffic_light+0xb0>
 800157a:	2b00      	cmp	r3, #0
 800157c:	d008      	beq.n	8001590 <south_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ TL2_YELLOW;
					break;
				default:
					break;
 800157e:	e017      	b.n	80015b0 <south_traffic_light+0xc0>
					leds->sr2 = leds->sr2 | TL2_YELLOW;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	785b      	ldrb	r3, [r3, #1]
 8001584:	f043 0302 	orr.w	r3, r3, #2
 8001588:	b2da      	uxtb	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	705a      	strb	r2, [r3, #1]
					break;
 800158e:	e010      	b.n	80015b2 <south_traffic_light+0xc2>
					leds->sr2 = leds->sr2 & ~TL2_YELLOW;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	f023 0302 	bic.w	r3, r3, #2
 8001598:	b2da      	uxtb	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	705a      	strb	r2, [r3, #1]
					break;
 800159e:	e008      	b.n	80015b2 <south_traffic_light+0xc2>
					leds->sr2 = leds->sr2 ^ TL2_YELLOW;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	785b      	ldrb	r3, [r3, #1]
 80015a4:	f083 0302 	eor.w	r3, r3, #2
 80015a8:	b2da      	uxtb	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	705a      	strb	r2, [r3, #1]
					break;
 80015ae:	e000      	b.n	80015b2 <south_traffic_light+0xc2>
					break;
 80015b0:	bf00      	nop
			}
			break;
 80015b2:	e026      	b.n	8001602 <south_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 80015b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d007      	beq.n	80015cc <south_traffic_light+0xdc>
 80015bc:	2b01      	cmp	r3, #1
 80015be:	dc1d      	bgt.n	80015fc <south_traffic_light+0x10c>
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015c4:	d012      	beq.n	80015ec <south_traffic_light+0xfc>
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d008      	beq.n	80015dc <south_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ TL2_GREEN;
					break;
				default:
					break;
 80015ca:	e017      	b.n	80015fc <south_traffic_light+0x10c>
					leds->sr2 = leds->sr2 | TL2_GREEN;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	785b      	ldrb	r3, [r3, #1]
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	705a      	strb	r2, [r3, #1]
					break;
 80015da:	e010      	b.n	80015fe <south_traffic_light+0x10e>
					leds->sr2 = leds->sr2 & ~TL2_GREEN;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	785b      	ldrb	r3, [r3, #1]
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	705a      	strb	r2, [r3, #1]
					break;
 80015ea:	e008      	b.n	80015fe <south_traffic_light+0x10e>
					leds->sr2 = leds->sr2 ^ TL2_GREEN;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	785b      	ldrb	r3, [r3, #1]
 80015f0:	f083 0304 	eor.w	r3, r3, #4
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	705a      	strb	r2, [r3, #1]
					break;
 80015fa:	e000      	b.n	80015fe <south_traffic_light+0x10e>
					break;
 80015fc:	bf00      	nop
			}
			break;
 80015fe:	e000      	b.n	8001602 <south_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 8001600:	bf00      	nop
	}
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop

08001610 <east_traffic_light>:
 * @return	:	void
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void east_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
 800161c:	4613      	mov	r3, r2
 800161e:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001620:	78fb      	ldrb	r3, [r7, #3]
 8001622:	2b03      	cmp	r3, #3
 8001624:	d87c      	bhi.n	8001720 <east_traffic_light+0x110>
 8001626:	a201      	add	r2, pc, #4	@ (adr r2, 800162c <east_traffic_light+0x1c>)
 8001628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800162c:	0800163d 	.word	0x0800163d
 8001630:	08001689 	.word	0x08001689
 8001634:	080016d5 	.word	0x080016d5
 8001638:	08001721 	.word	0x08001721
		case RED:
			switch (led_state){
 800163c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d007      	beq.n	8001654 <east_traffic_light+0x44>
 8001644:	2b01      	cmp	r3, #1
 8001646:	dc1d      	bgt.n	8001684 <east_traffic_light+0x74>
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800164c:	d012      	beq.n	8001674 <east_traffic_light+0x64>
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <east_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL3_RED;
					break;
				default:
					break;
 8001652:	e017      	b.n	8001684 <east_traffic_light+0x74>
					leds->sr3 = leds->sr3 | TL3_RED;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	789b      	ldrb	r3, [r3, #2]
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	b2da      	uxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	709a      	strb	r2, [r3, #2]
					break;
 8001662:	e010      	b.n	8001686 <east_traffic_light+0x76>
					leds->sr3 = leds->sr3 & ~TL3_RED;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	f023 0301 	bic.w	r3, r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	709a      	strb	r2, [r3, #2]
					break;
 8001672:	e008      	b.n	8001686 <east_traffic_light+0x76>
					leds->sr3 = leds->sr3 ^ TL3_RED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	f083 0301 	eor.w	r3, r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	709a      	strb	r2, [r3, #2]
					break;
 8001682:	e000      	b.n	8001686 <east_traffic_light+0x76>
					break;
 8001684:	bf00      	nop
			}
			break;
 8001686:	e04c      	b.n	8001722 <east_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 8001688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d007      	beq.n	80016a0 <east_traffic_light+0x90>
 8001690:	2b01      	cmp	r3, #1
 8001692:	dc1d      	bgt.n	80016d0 <east_traffic_light+0xc0>
 8001694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001698:	d012      	beq.n	80016c0 <east_traffic_light+0xb0>
 800169a:	2b00      	cmp	r3, #0
 800169c:	d008      	beq.n	80016b0 <east_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL3_YELLOW;
					break;
				default:
					break;
 800169e:	e017      	b.n	80016d0 <east_traffic_light+0xc0>
					leds->sr3 = leds->sr3 | TL3_YELLOW;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	789b      	ldrb	r3, [r3, #2]
 80016a4:	f043 0302 	orr.w	r3, r3, #2
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	709a      	strb	r2, [r3, #2]
					break;
 80016ae:	e010      	b.n	80016d2 <east_traffic_light+0xc2>
					leds->sr3 = leds->sr3 & ~TL3_YELLOW;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	789b      	ldrb	r3, [r3, #2]
 80016b4:	f023 0302 	bic.w	r3, r3, #2
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	709a      	strb	r2, [r3, #2]
					break;
 80016be:	e008      	b.n	80016d2 <east_traffic_light+0xc2>
					leds->sr3 = leds->sr3 ^ TL3_YELLOW;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	f083 0302 	eor.w	r3, r3, #2
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	709a      	strb	r2, [r3, #2]
					break;
 80016ce:	e000      	b.n	80016d2 <east_traffic_light+0xc2>
					break;
 80016d0:	bf00      	nop
			}
			break;
 80016d2:	e026      	b.n	8001722 <east_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 80016d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d007      	beq.n	80016ec <east_traffic_light+0xdc>
 80016dc:	2b01      	cmp	r3, #1
 80016de:	dc1d      	bgt.n	800171c <east_traffic_light+0x10c>
 80016e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016e4:	d012      	beq.n	800170c <east_traffic_light+0xfc>
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <east_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL3_GREEN;
					break;
				default:
					break;
 80016ea:	e017      	b.n	800171c <east_traffic_light+0x10c>
					leds->sr3 = leds->sr3 | TL3_GREEN;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	709a      	strb	r2, [r3, #2]
					break;
 80016fa:	e010      	b.n	800171e <east_traffic_light+0x10e>
					leds->sr3 = leds->sr3 & ~TL3_GREEN;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	b2da      	uxtb	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	709a      	strb	r2, [r3, #2]
					break;
 800170a:	e008      	b.n	800171e <east_traffic_light+0x10e>
					leds->sr3 = leds->sr3 ^ TL3_GREEN;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	789b      	ldrb	r3, [r3, #2]
 8001710:	f083 0304 	eor.w	r3, r3, #4
 8001714:	b2da      	uxtb	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	709a      	strb	r2, [r3, #2]
					break;
 800171a:	e000      	b.n	800171e <east_traffic_light+0x10e>
					break;
 800171c:	bf00      	nop
			}
			break;
 800171e:	e000      	b.n	8001722 <east_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 8001720:	bf00      	nop
	}
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop

08001730 <north_pedestrian_light>:
 * @return	:	void
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void north_pedestrian_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	460b      	mov	r3, r1
 800173a:	70fb      	strb	r3, [r7, #3]
 800173c:	4613      	mov	r3, r2
 800173e:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d87c      	bhi.n	8001840 <north_pedestrian_light+0x110>
 8001746:	a201      	add	r2, pc, #4	@ (adr r2, 800174c <north_pedestrian_light+0x1c>)
 8001748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800174c:	0800175d 	.word	0x0800175d
 8001750:	08001841 	.word	0x08001841
 8001754:	080017a9 	.word	0x080017a9
 8001758:	080017f5 	.word	0x080017f5
		case RED:
			switch (led_state){
 800175c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d007      	beq.n	8001774 <north_pedestrian_light+0x44>
 8001764:	2b01      	cmp	r3, #1
 8001766:	dc1d      	bgt.n	80017a4 <north_pedestrian_light+0x74>
 8001768:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800176c:	d012      	beq.n	8001794 <north_pedestrian_light+0x64>
 800176e:	2b00      	cmp	r3, #0
 8001770:	d008      	beq.n	8001784 <north_pedestrian_light+0x54>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ PL2_RED;
					break;
				default:
					break;
 8001772:	e017      	b.n	80017a4 <north_pedestrian_light+0x74>
					leds->sr2 = leds->sr2 | PL2_RED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	785b      	ldrb	r3, [r3, #1]
 8001778:	f043 0308 	orr.w	r3, r3, #8
 800177c:	b2da      	uxtb	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	705a      	strb	r2, [r3, #1]
					break;
 8001782:	e010      	b.n	80017a6 <north_pedestrian_light+0x76>
					leds->sr2 = leds->sr2 & ~PL2_RED;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	785b      	ldrb	r3, [r3, #1]
 8001788:	f023 0308 	bic.w	r3, r3, #8
 800178c:	b2da      	uxtb	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	705a      	strb	r2, [r3, #1]
					break;
 8001792:	e008      	b.n	80017a6 <north_pedestrian_light+0x76>
					leds->sr2 = leds->sr2 ^ PL2_RED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	785b      	ldrb	r3, [r3, #1]
 8001798:	f083 0308 	eor.w	r3, r3, #8
 800179c:	b2da      	uxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	705a      	strb	r2, [r3, #1]
					break;
 80017a2:	e000      	b.n	80017a6 <north_pedestrian_light+0x76>
					break;
 80017a4:	bf00      	nop
			}
			break;
 80017a6:	e04c      	b.n	8001842 <north_pedestrian_light+0x112>
		case YELLOW:
			//do nothing
			break;
		case GREEN:
			switch (led_state){
 80017a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d007      	beq.n	80017c0 <north_pedestrian_light+0x90>
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	dc1d      	bgt.n	80017f0 <north_pedestrian_light+0xc0>
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017b8:	d012      	beq.n	80017e0 <north_pedestrian_light+0xb0>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <north_pedestrian_light+0xa0>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ PL2_GREEN;
					break;
				default:
					break;
 80017be:	e017      	b.n	80017f0 <north_pedestrian_light+0xc0>
					leds->sr2 = leds->sr2 | PL2_GREEN;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	785b      	ldrb	r3, [r3, #1]
 80017c4:	f043 0310 	orr.w	r3, r3, #16
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	705a      	strb	r2, [r3, #1]
					break;
 80017ce:	e010      	b.n	80017f2 <north_pedestrian_light+0xc2>
					leds->sr2 = leds->sr2 & ~PL2_GREEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	785b      	ldrb	r3, [r3, #1]
 80017d4:	f023 0310 	bic.w	r3, r3, #16
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	705a      	strb	r2, [r3, #1]
					break;
 80017de:	e008      	b.n	80017f2 <north_pedestrian_light+0xc2>
					leds->sr2 = leds->sr2 ^ PL2_GREEN;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	f083 0310 	eor.w	r3, r3, #16
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	705a      	strb	r2, [r3, #1]
					break;
 80017ee:	e000      	b.n	80017f2 <north_pedestrian_light+0xc2>
					break;
 80017f0:	bf00      	nop
			}
			break;
 80017f2:	e026      	b.n	8001842 <north_pedestrian_light+0x112>
		case INDICATOR:
			switch (led_state){
 80017f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d007      	beq.n	800180c <north_pedestrian_light+0xdc>
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	dc1d      	bgt.n	800183c <north_pedestrian_light+0x10c>
 8001800:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001804:	d012      	beq.n	800182c <north_pedestrian_light+0xfc>
 8001806:	2b00      	cmp	r3, #0
 8001808:	d008      	beq.n	800181c <north_pedestrian_light+0xec>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ PL2_BLUE;
					break;
				default:
					break;
 800180a:	e017      	b.n	800183c <north_pedestrian_light+0x10c>
					leds->sr2 = leds->sr2 | PL2_BLUE;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	785b      	ldrb	r3, [r3, #1]
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	b2da      	uxtb	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	705a      	strb	r2, [r3, #1]
					break;
 800181a:	e010      	b.n	800183e <north_pedestrian_light+0x10e>
					leds->sr2 = leds->sr2 & ~PL2_BLUE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	785b      	ldrb	r3, [r3, #1]
 8001820:	f023 0320 	bic.w	r3, r3, #32
 8001824:	b2da      	uxtb	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	705a      	strb	r2, [r3, #1]
					break;
 800182a:	e008      	b.n	800183e <north_pedestrian_light+0x10e>
					leds->sr2 = leds->sr2 ^ PL2_BLUE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	785b      	ldrb	r3, [r3, #1]
 8001830:	f083 0320 	eor.w	r3, r3, #32
 8001834:	b2da      	uxtb	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	705a      	strb	r2, [r3, #1]
					break;
 800183a:	e000      	b.n	800183e <north_pedestrian_light+0x10e>
					break;
 800183c:	bf00      	nop
			}
			break;
 800183e:	e000      	b.n	8001842 <north_pedestrian_light+0x112>
		default:
			break;
 8001840:	bf00      	nop
	}
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <west_pedestrian_light>:
 * @return	:	void
 * @param	: 	led_registers_t* leds, pointer to led state to be modified
 * 				light_color_t color, color of led to be modified RED, YELLOW, GREEN, ORANGE=YELLOW for traffic type TRAFFIC_LIGHT, RED, GREEN, INDICATOR for PEDESTRIAN_LIGHT
 * 				led_state_t led_state, state to set specific led to, ON, OFF or TOGGLE (will flip specific bit)
 */
void west_pedestrian_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
 800185c:	4613      	mov	r3, r2
 800185e:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d87c      	bhi.n	8001960 <west_pedestrian_light+0x110>
 8001866:	a201      	add	r2, pc, #4	@ (adr r2, 800186c <west_pedestrian_light+0x1c>)
 8001868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186c:	0800187d 	.word	0x0800187d
 8001870:	08001961 	.word	0x08001961
 8001874:	080018c9 	.word	0x080018c9
 8001878:	08001915 	.word	0x08001915
		case RED:
			switch (led_state){
 800187c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d007      	beq.n	8001894 <west_pedestrian_light+0x44>
 8001884:	2b01      	cmp	r3, #1
 8001886:	dc1d      	bgt.n	80018c4 <west_pedestrian_light+0x74>
 8001888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800188c:	d012      	beq.n	80018b4 <west_pedestrian_light+0x64>
 800188e:	2b00      	cmp	r3, #0
 8001890:	d008      	beq.n	80018a4 <west_pedestrian_light+0x54>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ PL1_RED;
					break;
				default:
					break;
 8001892:	e017      	b.n	80018c4 <west_pedestrian_light+0x74>
					leds->sr1 = leds->sr1 | PL1_RED;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	f043 0308 	orr.w	r3, r3, #8
 800189c:	b2da      	uxtb	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	701a      	strb	r2, [r3, #0]
					break;
 80018a2:	e010      	b.n	80018c6 <west_pedestrian_light+0x76>
					leds->sr1 = leds->sr1 & ~PL1_RED;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	f023 0308 	bic.w	r3, r3, #8
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	701a      	strb	r2, [r3, #0]
					break;
 80018b2:	e008      	b.n	80018c6 <west_pedestrian_light+0x76>
					leds->sr1 = leds->sr1 ^ PL1_RED;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	f083 0308 	eor.w	r3, r3, #8
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	701a      	strb	r2, [r3, #0]
					break;
 80018c2:	e000      	b.n	80018c6 <west_pedestrian_light+0x76>
					break;
 80018c4:	bf00      	nop
			}
			break;
 80018c6:	e04c      	b.n	8001962 <west_pedestrian_light+0x112>
		case YELLOW:
			//do nothing
			break;
		case GREEN:
			switch (led_state){
 80018c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d007      	beq.n	80018e0 <west_pedestrian_light+0x90>
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	dc1d      	bgt.n	8001910 <west_pedestrian_light+0xc0>
 80018d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018d8:	d012      	beq.n	8001900 <west_pedestrian_light+0xb0>
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <west_pedestrian_light+0xa0>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ PL1_GREEN;
					break;
				default:
					break;
 80018de:	e017      	b.n	8001910 <west_pedestrian_light+0xc0>
					leds->sr1 = leds->sr1 | PL1_GREEN;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f043 0310 	orr.w	r3, r3, #16
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	701a      	strb	r2, [r3, #0]
					break;
 80018ee:	e010      	b.n	8001912 <west_pedestrian_light+0xc2>
					leds->sr1 = leds->sr1 & ~PL1_GREEN;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	f023 0310 	bic.w	r3, r3, #16
 80018f8:	b2da      	uxtb	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	701a      	strb	r2, [r3, #0]
					break;
 80018fe:	e008      	b.n	8001912 <west_pedestrian_light+0xc2>
					leds->sr1 = leds->sr1 ^ PL1_GREEN;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	f083 0310 	eor.w	r3, r3, #16
 8001908:	b2da      	uxtb	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	701a      	strb	r2, [r3, #0]
					break;
 800190e:	e000      	b.n	8001912 <west_pedestrian_light+0xc2>
					break;
 8001910:	bf00      	nop
			}
			break;
 8001912:	e026      	b.n	8001962 <west_pedestrian_light+0x112>
		case INDICATOR:
			switch (led_state){
 8001914:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d007      	beq.n	800192c <west_pedestrian_light+0xdc>
 800191c:	2b01      	cmp	r3, #1
 800191e:	dc1d      	bgt.n	800195c <west_pedestrian_light+0x10c>
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001924:	d012      	beq.n	800194c <west_pedestrian_light+0xfc>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <west_pedestrian_light+0xec>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ PL1_BLUE;
					break;
				default:
					break;
 800192a:	e017      	b.n	800195c <west_pedestrian_light+0x10c>
					leds->sr1 = leds->sr1 | PL1_BLUE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	f043 0320 	orr.w	r3, r3, #32
 8001934:	b2da      	uxtb	r2, r3
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	701a      	strb	r2, [r3, #0]
					break;
 800193a:	e010      	b.n	800195e <west_pedestrian_light+0x10e>
					leds->sr1 = leds->sr1 & ~PL1_BLUE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f023 0320 	bic.w	r3, r3, #32
 8001944:	b2da      	uxtb	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	701a      	strb	r2, [r3, #0]
					break;
 800194a:	e008      	b.n	800195e <west_pedestrian_light+0x10e>
					leds->sr1 = leds->sr1 ^ PL1_BLUE;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	f083 0320 	eor.w	r3, r3, #32
 8001954:	b2da      	uxtb	r2, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	701a      	strb	r2, [r3, #0]
					break;
 800195a:	e000      	b.n	800195e <west_pedestrian_light+0x10e>
					break;
 800195c:	bf00      	nop
			}
			break;
 800195e:	e000      	b.n	8001962 <west_pedestrian_light+0x112>
		default:
			break;
 8001960:	bf00      	nop
	}
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001974:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <MX_SPI3_Init+0x74>)
 8001976:	4a1c      	ldr	r2, [pc, #112]	@ (80019e8 <MX_SPI3_Init+0x78>)
 8001978:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800197a:	4b1a      	ldr	r3, [pc, #104]	@ (80019e4 <MX_SPI3_Init+0x74>)
 800197c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001980:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <MX_SPI3_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <MX_SPI3_Init+0x74>)
 800198a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800198e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001990:	4b14      	ldr	r3, [pc, #80]	@ (80019e4 <MX_SPI3_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001996:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <MX_SPI3_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <MX_SPI3_Init+0x74>)
 800199e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019a4:	4b0f      	ldr	r3, [pc, #60]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019a6:	2208      	movs	r2, #8
 80019a8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019be:	2207      	movs	r2, #7
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019ca:	2208      	movs	r2, #8
 80019cc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <MX_SPI3_Init+0x74>)
 80019d0:	f002 f866 	bl	8003aa0 <HAL_SPI_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80019da:	f7ff fa7f 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200000c0 	.word	0x200000c0
 80019e8:	40003c00 	.word	0x40003c00

080019ec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a25      	ldr	r2, [pc, #148]	@ (8001aa0 <HAL_SPI_MspInit+0xb4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d144      	bne.n	8001a98 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a0e:	4b25      	ldr	r3, [pc, #148]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a12:	4a24      	ldr	r2, [pc, #144]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a14:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a1a:	4b22      	ldr	r3, [pc, #136]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a1e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a26:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a32:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3e:	4b19      	ldr	r3, [pc, #100]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	4a18      	ldr	r2, [pc, #96]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a44:	f043 0302 	orr.w	r3, r3, #2
 8001a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4a:	4b16      	ldr	r3, [pc, #88]	@ (8001aa4 <HAL_SPI_MspInit+0xb8>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SR_SHCP_Pin;
 8001a56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a68:	2306      	movs	r3, #6
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SR_SHCP_GPIO_Port, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	480d      	ldr	r0, [pc, #52]	@ (8001aa8 <HAL_SPI_MspInit+0xbc>)
 8001a74:	f000 fad0 	bl	8002018 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SR_DS_Pin;
 8001a78:	2320      	movs	r3, #32
 8001a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a84:	2303      	movs	r3, #3
 8001a86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a88:	2306      	movs	r3, #6
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SR_DS_GPIO_Port, &GPIO_InitStruct);
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	4619      	mov	r1, r3
 8001a92:	4806      	ldr	r0, [pc, #24]	@ (8001aac <HAL_SPI_MspInit+0xc0>)
 8001a94:	f000 fac0 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40003c00 	.word	0x40003c00
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	48000800 	.word	0x48000800
 8001aac:	48000400 	.word	0x48000400

08001ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aba:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <HAL_MspInit+0x4c>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ac4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	607b      	str	r3, [r7, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <HAL_MspInit+0x4c>)
 8001ad4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ada:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_MspInit+0x4c>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	210f      	movs	r1, #15
 8001aea:	f06f 0001 	mvn.w	r0, #1
 8001aee:	f000 fa69 	bl	8001fc4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001af2:	bf00      	nop
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40021000 	.word	0x40021000

08001b00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08c      	sub	sp, #48	@ 0x30
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bc8 <HAL_InitTick+0xc8>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b12:	4a2d      	ldr	r2, [pc, #180]	@ (8001bc8 <HAL_InitTick+0xc8>)
 8001b14:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b18:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bc8 <HAL_InitTick+0xc8>)
 8001b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b22:	60bb      	str	r3, [r7, #8]
 8001b24:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b26:	f107 020c 	add.w	r2, r7, #12
 8001b2a:	f107 0310 	add.w	r3, r7, #16
 8001b2e:	4611      	mov	r1, r2
 8001b30:	4618      	mov	r0, r3
 8001b32:	f001 fa67 	bl	8003004 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b36:	f001 fa4f 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8001b3a:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3e:	4a23      	ldr	r2, [pc, #140]	@ (8001bcc <HAL_InitTick+0xcc>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	0c9b      	lsrs	r3, r3, #18
 8001b46:	3b01      	subs	r3, #1
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b4a:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b4c:	4a21      	ldr	r2, [pc, #132]	@ (8001bd4 <HAL_InitTick+0xd4>)
 8001b4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b50:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b56:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b58:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b64:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b70:	4817      	ldr	r0, [pc, #92]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b72:	f002 fb13 	bl	800419c <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d11b      	bne.n	8001bbc <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b84:	4812      	ldr	r0, [pc, #72]	@ (8001bd0 <HAL_InitTick+0xd0>)
 8001b86:	f002 fb6b 	bl	8004260 <HAL_TIM_Base_Start_IT>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b90:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d111      	bne.n	8001bbc <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b98:	2019      	movs	r0, #25
 8001b9a:	f000 fa2f 	bl	8001ffc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d808      	bhi.n	8001bb6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	2019      	movs	r0, #25
 8001baa:	f000 fa0b 	bl	8001fc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <HAL_InitTick+0xd8>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	e002      	b.n	8001bbc <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3730      	adds	r7, #48	@ 0x30
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	431bde83 	.word	0x431bde83
 8001bd0:	20000124 	.word	0x20000124
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	2000000c 	.word	0x2000000c

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <NMI_Handler+0x4>

08001be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <HardFault_Handler+0x4>

08001bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <MemManage_Handler+0x4>

08001bf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <BusFault_Handler+0x4>

08001bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <UsageFault_Handler+0x4>

08001c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PL2_Switch_Pin);
 8001c16:	2080      	movs	r0, #128	@ 0x80
 8001c18:	f000 fbd8 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c24:	4802      	ldr	r0, [pc, #8]	@ (8001c30 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c26:	f002 fb8b 	bl	8004340 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000124 	.word	0x20000124

08001c34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PL1_Switch_Pin);
 8001c38:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c3c:	f000 fbc6 	bl	80023cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c40:	bf00      	nop
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c48:	4b06      	ldr	r3, [pc, #24]	@ (8001c64 <SystemInit+0x20>)
 8001c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c4e:	4a05      	ldr	r2, [pc, #20]	@ (8001c64 <SystemInit+0x20>)
 8001c50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00

08001c68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c6c:	4b14      	ldr	r3, [pc, #80]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c6e:	4a15      	ldr	r2, [pc, #84]	@ (8001cc4 <MX_USART2_UART_Init+0x5c>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c72:	4b13      	ldr	r3, [pc, #76]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_USART2_UART_Init+0x58>)
 8001cac:	f002 fd3c 	bl	8004728 <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cb6:	f7ff f911 	bl	8000edc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000170 	.word	0x20000170
 8001cc4:	40004400 	.word	0x40004400

08001cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b0ac      	sub	sp, #176	@ 0xb0
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce0:	f107 0314 	add.w	r3, r7, #20
 8001ce4:	2288      	movs	r2, #136	@ 0x88
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f007 f8fd 	bl	8008ee8 <memset>
  if(uartHandle->Instance==USART2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <HAL_UART_MspInit+0xb0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d13b      	bne.n	8001d70 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4618      	mov	r0, r3
 8001d06:	f001 fa0f 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d10:	f7ff f8e4 	bl	8000edc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d14:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d18:	4a18      	ldr	r2, [pc, #96]	@ (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d20:	4b16      	ldr	r3, [pc, #88]	@ (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d28:	613b      	str	r3, [r7, #16]
 8001d2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b13      	ldr	r3, [pc, #76]	@ (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d30:	4a12      	ldr	r2, [pc, #72]	@ (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d38:	4b10      	ldr	r3, [pc, #64]	@ (8001d7c <HAL_UART_MspInit+0xb4>)
 8001d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d44:	230c      	movs	r3, #12
 8001d46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d5c:	2307      	movs	r3, #7
 8001d5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d66:	4619      	mov	r1, r3
 8001d68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d6c:	f000 f954 	bl	8002018 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d70:	bf00      	nop
 8001d72:	37b0      	adds	r7, #176	@ 0xb0
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40004400 	.word	0x40004400
 8001d7c:	40021000 	.word	0x40021000

08001d80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001db8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d84:	f7ff ff5e 	bl	8001c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d88:	480c      	ldr	r0, [pc, #48]	@ (8001dbc <LoopForever+0x6>)
  ldr r1, =_edata
 8001d8a:	490d      	ldr	r1, [pc, #52]	@ (8001dc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dc4 <LoopForever+0xe>)
  movs r3, #0
 8001d8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d90:	e002      	b.n	8001d98 <LoopCopyDataInit>

08001d92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d96:	3304      	adds	r3, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d9c:	d3f9      	bcc.n	8001d92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001da0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dcc <LoopForever+0x16>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001da4:	e001      	b.n	8001daa <LoopFillZerobss>

08001da6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001da6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001da8:	3204      	adds	r2, #4

08001daa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001daa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dac:	d3fb      	bcc.n	8001da6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dae:	f007 f8f9 	bl	8008fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001db2:	f7ff f819 	bl	8000de8 <main>

08001db6 <LoopForever>:

LoopForever:
    b LoopForever
 8001db6:	e7fe      	b.n	8001db6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001db8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dc0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001dc4:	0800923c 	.word	0x0800923c
  ldr r2, =_sbss
 8001dc8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001dcc:	20004004 	.word	0x20004004

08001dd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001dd0:	e7fe      	b.n	8001dd0 <ADC1_2_IRQHandler>
	...

08001dd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_Init+0x3c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a0b      	ldr	r2, [pc, #44]	@ (8001e10 <HAL_Init+0x3c>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001de8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dea:	2003      	movs	r0, #3
 8001dec:	f000 f8df 	bl	8001fae <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001df0:	200f      	movs	r0, #15
 8001df2:	f7ff fe85 	bl	8001b00 <HAL_InitTick>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	e001      	b.n	8001e06 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e02:	f7ff fe55 	bl	8001ab0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e06:	79fb      	ldrb	r3, [r7, #7]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40022000 	.word	0x40022000

08001e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e18:	4b06      	ldr	r3, [pc, #24]	@ (8001e34 <HAL_IncTick+0x20>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4413      	add	r3, r2
 8001e24:	4a04      	ldr	r2, [pc, #16]	@ (8001e38 <HAL_IncTick+0x24>)
 8001e26:	6013      	str	r3, [r2, #0]
}
 8001e28:	bf00      	nop
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000010 	.word	0x20000010
 8001e38:	200001f8 	.word	0x200001f8

08001e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e40:	4b03      	ldr	r3, [pc, #12]	@ (8001e50 <HAL_GetTick+0x14>)
 8001e42:	681b      	ldr	r3, [r3, #0]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200001f8 	.word	0x200001f8

08001e54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e64:	4b0c      	ldr	r3, [pc, #48]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e6a:	68ba      	ldr	r2, [r7, #8]
 8001e6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e70:	4013      	ands	r3, r2
 8001e72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e86:	4a04      	ldr	r2, [pc, #16]	@ (8001e98 <__NVIC_SetPriorityGrouping+0x44>)
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	60d3      	str	r3, [r2, #12]
}
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ea0:	4b04      	ldr	r3, [pc, #16]	@ (8001eb4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 0307 	and.w	r3, r3, #7
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	db0b      	blt.n	8001ee2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eca:	79fb      	ldrb	r3, [r7, #7]
 8001ecc:	f003 021f 	and.w	r2, r3, #31
 8001ed0:	4907      	ldr	r1, [pc, #28]	@ (8001ef0 <__NVIC_EnableIRQ+0x38>)
 8001ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed6:	095b      	lsrs	r3, r3, #5
 8001ed8:	2001      	movs	r0, #1
 8001eda:	fa00 f202 	lsl.w	r2, r0, r2
 8001ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000e100 	.word	0xe000e100

08001ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	6039      	str	r1, [r7, #0]
 8001efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	db0a      	blt.n	8001f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	b2da      	uxtb	r2, r3
 8001f0c:	490c      	ldr	r1, [pc, #48]	@ (8001f40 <__NVIC_SetPriority+0x4c>)
 8001f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f12:	0112      	lsls	r2, r2, #4
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	440b      	add	r3, r1
 8001f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f1c:	e00a      	b.n	8001f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4908      	ldr	r1, [pc, #32]	@ (8001f44 <__NVIC_SetPriority+0x50>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	3b04      	subs	r3, #4
 8001f2c:	0112      	lsls	r2, r2, #4
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	440b      	add	r3, r1
 8001f32:	761a      	strb	r2, [r3, #24]
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr
 8001f40:	e000e100 	.word	0xe000e100
 8001f44:	e000ed00 	.word	0xe000ed00

08001f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	@ 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f1c3 0307 	rsb	r3, r3, #7
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	bf28      	it	cs
 8001f66:	2304      	movcs	r3, #4
 8001f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	2b06      	cmp	r3, #6
 8001f70:	d902      	bls.n	8001f78 <NVIC_EncodePriority+0x30>
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	3b03      	subs	r3, #3
 8001f76:	e000      	b.n	8001f7a <NVIC_EncodePriority+0x32>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43da      	mvns	r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9a:	43d9      	mvns	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fa0:	4313      	orrs	r3, r2
         );
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3724      	adds	r7, #36	@ 0x24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr

08001fae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ff4c 	bl	8001e54 <__NVIC_SetPriorityGrouping>
}
 8001fbc:	bf00      	nop
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd6:	f7ff ff61 	bl	8001e9c <__NVIC_GetPriorityGrouping>
 8001fda:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	68b9      	ldr	r1, [r7, #8]
 8001fe0:	6978      	ldr	r0, [r7, #20]
 8001fe2:	f7ff ffb1 	bl	8001f48 <NVIC_EncodePriority>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff ff80 	bl	8001ef4 <__NVIC_SetPriority>
}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	4618      	mov	r0, r3
 800200c:	f7ff ff54 	bl	8001eb8 <__NVIC_EnableIRQ>
}
 8002010:	bf00      	nop
 8002012:	3708      	adds	r7, #8
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002022:	2300      	movs	r3, #0
 8002024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002026:	e17f      	b.n	8002328 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	2101      	movs	r1, #1
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa01 f303 	lsl.w	r3, r1, r3
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 8171 	beq.w	8002322 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	2b01      	cmp	r3, #1
 800204a:	d005      	beq.n	8002058 <HAL_GPIO_Init+0x40>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 0303 	and.w	r3, r3, #3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d130      	bne.n	80020ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208e:	2201      	movs	r2, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 0201 	and.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d118      	bne.n	80020f8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020cc:	2201      	movs	r2, #1
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	43db      	mvns	r3, r3
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	4013      	ands	r3, r2
 80020da:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	f003 0201 	and.w	r2, r3, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d017      	beq.n	8002134 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	2203      	movs	r2, #3
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	693a      	ldr	r2, [r7, #16]
 8002132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d123      	bne.n	8002188 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	08da      	lsrs	r2, r3, #3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3208      	adds	r2, #8
 8002148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800214c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0307 	and.w	r3, r3, #7
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	220f      	movs	r2, #15
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	4313      	orrs	r3, r2
 8002178:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	08da      	lsrs	r2, r3, #3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3208      	adds	r2, #8
 8002182:	6939      	ldr	r1, [r7, #16]
 8002184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	693a      	ldr	r2, [r7, #16]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80ac 	beq.w	8002322 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002348 <HAL_GPIO_Init+0x330>)
 80021cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ce:	4a5e      	ldr	r2, [pc, #376]	@ (8002348 <HAL_GPIO_Init+0x330>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80021d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002348 <HAL_GPIO_Init+0x330>)
 80021d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021e2:	4a5a      	ldr	r2, [pc, #360]	@ (800234c <HAL_GPIO_Init+0x334>)
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800220c:	d025      	beq.n	800225a <HAL_GPIO_Init+0x242>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4f      	ldr	r2, [pc, #316]	@ (8002350 <HAL_GPIO_Init+0x338>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <HAL_GPIO_Init+0x23e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a4e      	ldr	r2, [pc, #312]	@ (8002354 <HAL_GPIO_Init+0x33c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d019      	beq.n	8002252 <HAL_GPIO_Init+0x23a>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a4d      	ldr	r2, [pc, #308]	@ (8002358 <HAL_GPIO_Init+0x340>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d013      	beq.n	800224e <HAL_GPIO_Init+0x236>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4c      	ldr	r2, [pc, #304]	@ (800235c <HAL_GPIO_Init+0x344>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d00d      	beq.n	800224a <HAL_GPIO_Init+0x232>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4b      	ldr	r2, [pc, #300]	@ (8002360 <HAL_GPIO_Init+0x348>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d007      	beq.n	8002246 <HAL_GPIO_Init+0x22e>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4a      	ldr	r2, [pc, #296]	@ (8002364 <HAL_GPIO_Init+0x34c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d101      	bne.n	8002242 <HAL_GPIO_Init+0x22a>
 800223e:	2306      	movs	r3, #6
 8002240:	e00c      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002242:	2307      	movs	r3, #7
 8002244:	e00a      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002246:	2305      	movs	r3, #5
 8002248:	e008      	b.n	800225c <HAL_GPIO_Init+0x244>
 800224a:	2304      	movs	r3, #4
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x244>
 800224e:	2303      	movs	r3, #3
 8002250:	e004      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002252:	2302      	movs	r3, #2
 8002254:	e002      	b.n	800225c <HAL_GPIO_Init+0x244>
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x244>
 800225a:	2300      	movs	r3, #0
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	f002 0203 	and.w	r2, r2, #3
 8002262:	0092      	lsls	r2, r2, #2
 8002264:	4093      	lsls	r3, r2
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800226c:	4937      	ldr	r1, [pc, #220]	@ (800234c <HAL_GPIO_Init+0x334>)
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	089b      	lsrs	r3, r3, #2
 8002272:	3302      	adds	r3, #2
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800227a:	4b3b      	ldr	r3, [pc, #236]	@ (8002368 <HAL_GPIO_Init+0x350>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4313      	orrs	r3, r2
 800229c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800229e:	4a32      	ldr	r2, [pc, #200]	@ (8002368 <HAL_GPIO_Init+0x350>)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022a4:	4b30      	ldr	r3, [pc, #192]	@ (8002368 <HAL_GPIO_Init+0x350>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022c8:	4a27      	ldr	r2, [pc, #156]	@ (8002368 <HAL_GPIO_Init+0x350>)
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022ce:	4b26      	ldr	r3, [pc, #152]	@ (8002368 <HAL_GPIO_Init+0x350>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	43db      	mvns	r3, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4013      	ands	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002368 <HAL_GPIO_Init+0x350>)
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80022f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <HAL_GPIO_Init+0x350>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	43db      	mvns	r3, r3
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4013      	ands	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d003      	beq.n	800231c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800231c:	4a12      	ldr	r2, [pc, #72]	@ (8002368 <HAL_GPIO_Init+0x350>)
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	f47f ae78 	bne.w	8002028 <HAL_GPIO_Init+0x10>
  }
}
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	371c      	adds	r7, #28
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40021000 	.word	0x40021000
 800234c:	40010000 	.word	0x40010000
 8002350:	48000400 	.word	0x48000400
 8002354:	48000800 	.word	0x48000800
 8002358:	48000c00 	.word	0x48000c00
 800235c:	48001000 	.word	0x48001000
 8002360:	48001400 	.word	0x48001400
 8002364:	48001800 	.word	0x48001800
 8002368:	40010400 	.word	0x40010400

0800236c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d002      	beq.n	800238a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
 8002388:	e001      	b.n	800238e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800238a:	2300      	movs	r3, #0
 800238c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800238e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	807b      	strh	r3, [r7, #2]
 80023a8:	4613      	mov	r3, r2
 80023aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023ac:	787b      	ldrb	r3, [r7, #1]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023b2:	887a      	ldrh	r2, [r7, #2]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023b8:	e002      	b.n	80023c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ba:	887a      	ldrh	r2, [r7, #2]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023d6:	4b08      	ldr	r3, [pc, #32]	@ (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	4013      	ands	r3, r2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d006      	beq.n	80023f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80023e2:	4a05      	ldr	r2, [pc, #20]	@ (80023f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80023e4:	88fb      	ldrh	r3, [r7, #6]
 80023e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023e8:	88fb      	ldrh	r3, [r7, #6]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fbe8 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 80023f0:	bf00      	nop
 80023f2:	3708      	adds	r7, #8
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	40010400 	.word	0x40010400

080023fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002400:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <HAL_PWREx_GetVoltageRange+0x18>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40007000 	.word	0x40007000

08002418 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002426:	d130      	bne.n	800248a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002428:	4b23      	ldr	r3, [pc, #140]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002430:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002434:	d038      	beq.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002436:	4b20      	ldr	r3, [pc, #128]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800243e:	4a1e      	ldr	r2, [pc, #120]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002440:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002444:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002446:	4b1d      	ldr	r3, [pc, #116]	@ (80024bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2232      	movs	r2, #50	@ 0x32
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	4a1b      	ldr	r2, [pc, #108]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0c9b      	lsrs	r3, r3, #18
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245c:	e002      	b.n	8002464 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3b01      	subs	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002464:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002470:	d102      	bne.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1f2      	bne.n	800245e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002478:	4b0f      	ldr	r3, [pc, #60]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800247a:	695b      	ldr	r3, [r3, #20]
 800247c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002484:	d110      	bne.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e00f      	b.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002496:	d007      	beq.n	80024a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002498:	4b07      	ldr	r3, [pc, #28]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024a0:	4a05      	ldr	r2, [pc, #20]	@ (80024b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40007000 	.word	0x40007000
 80024bc:	20000008 	.word	0x20000008
 80024c0:	431bde83 	.word	0x431bde83

080024c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e3ca      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d6:	4b97      	ldr	r3, [pc, #604]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	f003 030c 	and.w	r3, r3, #12
 80024de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e0:	4b94      	ldr	r3, [pc, #592]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0310 	and.w	r3, r3, #16
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80e4 	beq.w	80026c0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d007      	beq.n	800250e <HAL_RCC_OscConfig+0x4a>
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b0c      	cmp	r3, #12
 8002502:	f040 808b 	bne.w	800261c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 8087 	bne.w	800261c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800250e:	4b89      	ldr	r3, [pc, #548]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x62>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e3a2      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a1a      	ldr	r2, [r3, #32]
 800252a:	4b82      	ldr	r3, [pc, #520]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d004      	beq.n	8002540 <HAL_RCC_OscConfig+0x7c>
 8002536:	4b7f      	ldr	r3, [pc, #508]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800253e:	e005      	b.n	800254c <HAL_RCC_OscConfig+0x88>
 8002540:	4b7c      	ldr	r3, [pc, #496]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002542:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800254c:	4293      	cmp	r3, r2
 800254e:	d223      	bcs.n	8002598 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fd87 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e383      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002564:	4b73      	ldr	r3, [pc, #460]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a72      	ldr	r2, [pc, #456]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	6013      	str	r3, [r2, #0]
 8002570:	4b70      	ldr	r3, [pc, #448]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	496d      	ldr	r1, [pc, #436]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800257e:	4313      	orrs	r3, r2
 8002580:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002582:	4b6c      	ldr	r3, [pc, #432]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	021b      	lsls	r3, r3, #8
 8002590:	4968      	ldr	r1, [pc, #416]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002592:	4313      	orrs	r3, r2
 8002594:	604b      	str	r3, [r1, #4]
 8002596:	e025      	b.n	80025e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002598:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a65      	ldr	r2, [pc, #404]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800259e:	f043 0308 	orr.w	r3, r3, #8
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	4960      	ldr	r1, [pc, #384]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b6:	4b5f      	ldr	r3, [pc, #380]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	69db      	ldr	r3, [r3, #28]
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	495b      	ldr	r1, [pc, #364]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d109      	bne.n	80025e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f000 fd47 	bl	8003068 <RCC_SetFlashLatencyFromMSIRange>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e343      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025e4:	f000 fc4a 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b52      	ldr	r3, [pc, #328]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	4950      	ldr	r1, [pc, #320]	@ (8002738 <HAL_RCC_OscConfig+0x274>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002600:	4a4e      	ldr	r2, [pc, #312]	@ (800273c <HAL_RCC_OscConfig+0x278>)
 8002602:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002604:	4b4e      	ldr	r3, [pc, #312]	@ (8002740 <HAL_RCC_OscConfig+0x27c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff fa79 	bl	8001b00 <HAL_InitTick>
 800260e:	4603      	mov	r3, r0
 8002610:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d052      	beq.n	80026be <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
 800261a:	e327      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d032      	beq.n	800268a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002624:	4b43      	ldr	r3, [pc, #268]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a42      	ldr	r2, [pc, #264]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800262a:	f043 0301 	orr.w	r3, r3, #1
 800262e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002630:	f7ff fc04 	bl	8001e3c <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002638:	f7ff fc00 	bl	8001e3c <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e310      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800264a:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f0      	beq.n	8002638 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002656:	4b37      	ldr	r3, [pc, #220]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a36      	ldr	r2, [pc, #216]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800265c:	f043 0308 	orr.w	r3, r3, #8
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b34      	ldr	r3, [pc, #208]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	4931      	ldr	r1, [pc, #196]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002674:	4b2f      	ldr	r3, [pc, #188]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	021b      	lsls	r3, r3, #8
 8002682:	492c      	ldr	r1, [pc, #176]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
 8002688:	e01a      	b.n	80026c0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800268a:	4b2a      	ldr	r3, [pc, #168]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a29      	ldr	r2, [pc, #164]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002690:	f023 0301 	bic.w	r3, r3, #1
 8002694:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002696:	f7ff fbd1 	bl	8001e3c <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800269e:	f7ff fbcd 	bl	8001e3c <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e2dd      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b0:	4b20      	ldr	r3, [pc, #128]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x1da>
 80026bc:	e000      	b.n	80026c0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026be:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d074      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d005      	beq.n	80026de <HAL_RCC_OscConfig+0x21a>
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	2b0c      	cmp	r3, #12
 80026d6:	d10e      	bne.n	80026f6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d10b      	bne.n	80026f6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026de:	4b15      	ldr	r3, [pc, #84]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d064      	beq.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d160      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e2ba      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x24a>
 8002700:	4b0c      	ldr	r3, [pc, #48]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0b      	ldr	r2, [pc, #44]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002706:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800270a:	6013      	str	r3, [r2, #0]
 800270c:	e026      	b.n	800275c <HAL_RCC_OscConfig+0x298>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002716:	d115      	bne.n	8002744 <HAL_RCC_OscConfig+0x280>
 8002718:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a05      	ldr	r2, [pc, #20]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800271e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002722:	6013      	str	r3, [r2, #0]
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a02      	ldr	r2, [pc, #8]	@ (8002734 <HAL_RCC_OscConfig+0x270>)
 800272a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x298>
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	080091e4 	.word	0x080091e4
 800273c:	20000008 	.word	0x20000008
 8002740:	2000000c 	.word	0x2000000c
 8002744:	4ba0      	ldr	r3, [pc, #640]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a9f      	ldr	r2, [pc, #636]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800274a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274e:	6013      	str	r3, [r2, #0]
 8002750:	4b9d      	ldr	r3, [pc, #628]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a9c      	ldr	r2, [pc, #624]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002756:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800275a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002764:	f7ff fb6a 	bl	8001e3c <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fb66 	bl	8001e3c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e276      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800277e:	4b92      	ldr	r3, [pc, #584]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x2a8>
 800278a:	e014      	b.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7ff fb56 	bl	8001e3c <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002794:	f7ff fb52 	bl	8001e3c <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b64      	cmp	r3, #100	@ 0x64
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e262      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027a6:	4b88      	ldr	r3, [pc, #544]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x2d0>
 80027b2:	e000      	b.n	80027b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d060      	beq.n	8002884 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d005      	beq.n	80027d4 <HAL_RCC_OscConfig+0x310>
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	2b0c      	cmp	r3, #12
 80027cc:	d119      	bne.n	8002802 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d116      	bne.n	8002802 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027d4:	4b7c      	ldr	r3, [pc, #496]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d005      	beq.n	80027ec <HAL_RCC_OscConfig+0x328>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e23f      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ec:	4b76      	ldr	r3, [pc, #472]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	4973      	ldr	r1, [pc, #460]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002800:	e040      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d023      	beq.n	8002852 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800280a:	4b6f      	ldr	r3, [pc, #444]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6e      	ldr	r2, [pc, #440]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002810:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002816:	f7ff fb11 	bl	8001e3c <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800281e:	f7ff fb0d 	bl	8001e3c <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e21d      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002830:	4b65      	ldr	r3, [pc, #404]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d0f0      	beq.n	800281e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b62      	ldr	r3, [pc, #392]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	061b      	lsls	r3, r3, #24
 800284a:	495f      	ldr	r1, [pc, #380]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
 8002850:	e018      	b.n	8002884 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002852:	4b5d      	ldr	r3, [pc, #372]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a5c      	ldr	r2, [pc, #368]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800285c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff faed 	bl	8001e3c <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7ff fae9 	bl	8001e3c <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1f9      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002878:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1f0      	bne.n	8002866 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d03c      	beq.n	800290a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002898:	4b4b      	ldr	r3, [pc, #300]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800289a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800289e:	4a4a      	ldr	r2, [pc, #296]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a8:	f7ff fac8 	bl	8001e3c <HAL_GetTick>
 80028ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ae:	e008      	b.n	80028c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b0:	f7ff fac4 	bl	8001e3c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e1d4      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028c2:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0ef      	beq.n	80028b0 <HAL_RCC_OscConfig+0x3ec>
 80028d0:	e01b      	b.n	800290a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d2:	4b3d      	ldr	r3, [pc, #244]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d8:	4a3b      	ldr	r2, [pc, #236]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e2:	f7ff faab 	bl	8001e3c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ea:	f7ff faa7 	bl	8001e3c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1b7      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028fc:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ef      	bne.n	80028ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 80a6 	beq.w	8002a64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800291c:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800291e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10d      	bne.n	8002944 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292c:	4a26      	ldr	r2, [pc, #152]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	@ 0x58
 8002934:	4b24      	ldr	r3, [pc, #144]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002944:	4b21      	ldr	r3, [pc, #132]	@ (80029cc <HAL_RCC_OscConfig+0x508>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800294c:	2b00      	cmp	r3, #0
 800294e:	d118      	bne.n	8002982 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002950:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <HAL_RCC_OscConfig+0x508>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1d      	ldr	r2, [pc, #116]	@ (80029cc <HAL_RCC_OscConfig+0x508>)
 8002956:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800295a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800295c:	f7ff fa6e 	bl	8001e3c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002964:	f7ff fa6a 	bl	8001e3c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e17a      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002976:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_RCC_OscConfig+0x508>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x4d8>
 800298a:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 800298c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002990:	4a0d      	ldr	r2, [pc, #52]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 8002992:	f043 0301 	orr.w	r3, r3, #1
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800299a:	e029      	b.n	80029f0 <HAL_RCC_OscConfig+0x52c>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b05      	cmp	r3, #5
 80029a2:	d115      	bne.n	80029d0 <HAL_RCC_OscConfig+0x50c>
 80029a4:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029aa:	4a07      	ldr	r2, [pc, #28]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029ac:	f043 0304 	orr.w	r3, r3, #4
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ba:	4a03      	ldr	r2, [pc, #12]	@ (80029c8 <HAL_RCC_OscConfig+0x504>)
 80029bc:	f043 0301 	orr.w	r3, r3, #1
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029c4:	e014      	b.n	80029f0 <HAL_RCC_OscConfig+0x52c>
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40007000 	.word	0x40007000
 80029d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 80029d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029d6:	4a9b      	ldr	r2, [pc, #620]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e0:	4b98      	ldr	r3, [pc, #608]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029e6:	4a97      	ldr	r2, [pc, #604]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 80029e8:	f023 0304 	bic.w	r3, r3, #4
 80029ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d016      	beq.n	8002a26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f8:	f7ff fa20 	bl	8001e3c <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fe:	e00a      	b.n	8002a16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a00:	f7ff fa1c 	bl	8001e3c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e12a      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a16:	4b8b      	ldr	r3, [pc, #556]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ed      	beq.n	8002a00 <HAL_RCC_OscConfig+0x53c>
 8002a24:	e015      	b.n	8002a52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a26:	f7ff fa09 	bl	8001e3c <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7ff fa05 	bl	8001e3c <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e113      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a44:	4b7f      	ldr	r3, [pc, #508]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1ed      	bne.n	8002a2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a52:	7ffb      	ldrb	r3, [r7, #31]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b7a      	ldr	r3, [pc, #488]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5c:	4a79      	ldr	r2, [pc, #484]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 80fe 	beq.w	8002c6a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	f040 80d0 	bne.w	8002c18 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a78:	4b72      	ldr	r3, [pc, #456]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0203 	and.w	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d130      	bne.n	8002aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	3b01      	subs	r3, #1
 8002a98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d127      	bne.n	8002aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aa8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11f      	bne.n	8002aee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ab8:	2a07      	cmp	r2, #7
 8002aba:	bf14      	ite	ne
 8002abc:	2201      	movne	r2, #1
 8002abe:	2200      	moveq	r2, #0
 8002ac0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d113      	bne.n	8002aee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad0:	085b      	lsrs	r3, r3, #1
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	085b      	lsrs	r3, r3, #1
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d06e      	beq.n	8002bcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d069      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002af4:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d105      	bne.n	8002b0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b00:	4b50      	ldr	r3, [pc, #320]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d001      	beq.n	8002b10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e0ad      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b10:	4b4c      	ldr	r3, [pc, #304]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b1c:	f7ff f98e 	bl	8001e3c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b24:	f7ff f98a 	bl	8001e3c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e09a      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b36:	4b43      	ldr	r3, [pc, #268]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b42:	4b40      	ldr	r3, [pc, #256]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_OscConfig+0x784>)
 8002b48:	4013      	ands	r3, r2
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b52:	3a01      	subs	r2, #1
 8002b54:	0112      	lsls	r2, r2, #4
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b5c:	0212      	lsls	r2, r2, #8
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b64:	0852      	lsrs	r2, r2, #1
 8002b66:	3a01      	subs	r2, #1
 8002b68:	0552      	lsls	r2, r2, #21
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b70:	0852      	lsrs	r2, r2, #1
 8002b72:	3a01      	subs	r2, #1
 8002b74:	0652      	lsls	r2, r2, #25
 8002b76:	4311      	orrs	r1, r2
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b7c:	0912      	lsrs	r2, r2, #4
 8002b7e:	0452      	lsls	r2, r2, #17
 8002b80:	430a      	orrs	r2, r1
 8002b82:	4930      	ldr	r1, [pc, #192]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b84:	4313      	orrs	r3, r2
 8002b86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b88:	4b2e      	ldr	r3, [pc, #184]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b94:	4b2b      	ldr	r3, [pc, #172]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	4a2a      	ldr	r2, [pc, #168]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba0:	f7ff f94c 	bl	8001e3c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7ff f948 	bl	8001e3c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e058      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	4b22      	ldr	r3, [pc, #136]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc6:	e050      	b.n	8002c6a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e04f      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d148      	bne.n	8002c6a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002bde:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002be2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be4:	4b17      	ldr	r3, [pc, #92]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4a16      	ldr	r2, [pc, #88]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002bea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bf0:	f7ff f924 	bl	8001e3c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7ff f920 	bl	8001e3c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e030      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x734>
 8002c16:	e028      	b.n	8002c6a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d023      	beq.n	8002c66 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1e:	4b09      	ldr	r3, [pc, #36]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a08      	ldr	r2, [pc, #32]	@ (8002c44 <HAL_RCC_OscConfig+0x780>)
 8002c24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7ff f907 	bl	8001e3c <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c30:	e00c      	b.n	8002c4c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c32:	f7ff f903 	bl	8001e3c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d905      	bls.n	8002c4c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e013      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
 8002c44:	40021000 	.word	0x40021000
 8002c48:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4c:	4b09      	ldr	r3, [pc, #36]	@ (8002c74 <HAL_RCC_OscConfig+0x7b0>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1ec      	bne.n	8002c32 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCC_OscConfig+0x7b0>)
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4905      	ldr	r1, [pc, #20]	@ (8002c74 <HAL_RCC_OscConfig+0x7b0>)
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_RCC_OscConfig+0x7b4>)
 8002c60:	4013      	ands	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
 8002c64:	e001      	b.n	8002c6a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e000      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3720      	adds	r7, #32
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000
 8002c78:	feeefffc 	.word	0xfeeefffc

08002c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0e7      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b75      	ldr	r3, [pc, #468]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0307 	and.w	r3, r3, #7
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d910      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b72      	ldr	r3, [pc, #456]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 0207 	bic.w	r2, r3, #7
 8002ca6:	4970      	ldr	r1, [pc, #448]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b6e      	ldr	r3, [pc, #440]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0cf      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	4b66      	ldr	r3, [pc, #408]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cdc:	4b63      	ldr	r3, [pc, #396]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4960      	ldr	r1, [pc, #384]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d04c      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d107      	bne.n	8002d12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d02:	4b5a      	ldr	r3, [pc, #360]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d121      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0a6      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d107      	bne.n	8002d2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d1a:	4b54      	ldr	r3, [pc, #336]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d115      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e09a      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d32:	4b4e      	ldr	r3, [pc, #312]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d109      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e08e      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d42:	4b4a      	ldr	r3, [pc, #296]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e086      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d52:	4b46      	ldr	r3, [pc, #280]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f023 0203 	bic.w	r2, r3, #3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	4943      	ldr	r1, [pc, #268]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d64:	f7ff f86a 	bl	8001e3c <HAL_GetTick>
 8002d68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d6c:	f7ff f866 	bl	8001e3c <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e06e      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d82:	4b3a      	ldr	r3, [pc, #232]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 020c 	and.w	r2, r3, #12
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d1eb      	bne.n	8002d6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d010      	beq.n	8002dc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	4b31      	ldr	r3, [pc, #196]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d208      	bcs.n	8002dc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	492b      	ldr	r1, [pc, #172]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc2:	4b29      	ldr	r3, [pc, #164]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d210      	bcs.n	8002df2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd0:	4b25      	ldr	r3, [pc, #148]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f023 0207 	bic.w	r2, r3, #7
 8002dd8:	4923      	ldr	r1, [pc, #140]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de0:	4b21      	ldr	r3, [pc, #132]	@ (8002e68 <HAL_RCC_ClockConfig+0x1ec>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0307 	and.w	r3, r3, #7
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e036      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	4918      	ldr	r1, [pc, #96]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0308 	and.w	r3, r3, #8
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d009      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	4910      	ldr	r1, [pc, #64]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e30:	f000 f824 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8002e34:	4602      	mov	r2, r0
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	091b      	lsrs	r3, r3, #4
 8002e3c:	f003 030f 	and.w	r3, r3, #15
 8002e40:	490b      	ldr	r1, [pc, #44]	@ (8002e70 <HAL_RCC_ClockConfig+0x1f4>)
 8002e42:	5ccb      	ldrb	r3, [r1, r3]
 8002e44:	f003 031f 	and.w	r3, r3, #31
 8002e48:	fa22 f303 	lsr.w	r3, r2, r3
 8002e4c:	4a09      	ldr	r2, [pc, #36]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f8>)
 8002e4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e50:	4b09      	ldr	r3, [pc, #36]	@ (8002e78 <HAL_RCC_ClockConfig+0x1fc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fe53 	bl	8001b00 <HAL_InitTick>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e5e:	7afb      	ldrb	r3, [r7, #11]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40022000 	.word	0x40022000
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	080091e4 	.word	0x080091e4
 8002e74:	20000008 	.word	0x20000008
 8002e78:	2000000c 	.word	0x2000000c

08002e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b089      	sub	sp, #36	@ 0x24
 8002e80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e8a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 030c 	and.w	r3, r3, #12
 8002e92:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e94:	4b3b      	ldr	r3, [pc, #236]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d005      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d121      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d11e      	bne.n	8002eee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb0:	4b34      	ldr	r3, [pc, #208]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d107      	bne.n	8002ecc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ebc:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ebe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ec2:	0a1b      	lsrs	r3, r3, #8
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	61fb      	str	r3, [r7, #28]
 8002eca:	e005      	b.n	8002ed8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	091b      	lsrs	r3, r3, #4
 8002ed2:	f003 030f 	and.w	r3, r3, #15
 8002ed6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	@ (8002f88 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10d      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eec:	e00a      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d102      	bne.n	8002efa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ef4:	4b25      	ldr	r3, [pc, #148]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	e004      	b.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d101      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f00:	4b23      	ldr	r3, [pc, #140]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f02:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	d134      	bne.n	8002f74 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d003      	beq.n	8002f22 <HAL_RCC_GetSysClockFreq+0xa6>
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2b03      	cmp	r3, #3
 8002f1e:	d003      	beq.n	8002f28 <HAL_RCC_GetSysClockFreq+0xac>
 8002f20:	e005      	b.n	8002f2e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f22:	4b1a      	ldr	r3, [pc, #104]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x110>)
 8002f24:	617b      	str	r3, [r7, #20]
      break;
 8002f26:	e005      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f28:	4b19      	ldr	r3, [pc, #100]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f2a:	617b      	str	r3, [r7, #20]
      break;
 8002f2c:	e002      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	617b      	str	r3, [r7, #20]
      break;
 8002f32:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f34:	4b13      	ldr	r3, [pc, #76]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	091b      	lsrs	r3, r3, #4
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	3301      	adds	r3, #1
 8002f40:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	0a1b      	lsrs	r3, r3, #8
 8002f48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	fb03 f202 	mul.w	r2, r3, r2
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f58:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	0e5b      	lsrs	r3, r3, #25
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	3301      	adds	r3, #1
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f6a:	697a      	ldr	r2, [r7, #20]
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f72:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f74:	69bb      	ldr	r3, [r7, #24]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3724      	adds	r7, #36	@ 0x24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000
 8002f88:	080091fc 	.word	0x080091fc
 8002f8c:	00f42400 	.word	0x00f42400
 8002f90:	007a1200 	.word	0x007a1200

08002f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f98:	4b03      	ldr	r3, [pc, #12]	@ (8002fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	20000008 	.word	0x20000008

08002fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb0:	f7ff fff0 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b06      	ldr	r3, [pc, #24]	@ (8002fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4904      	ldr	r1, [pc, #16]	@ (8002fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	080091f4 	.word	0x080091f4

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fdc:	f7ff ffda 	bl	8002f94 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b06      	ldr	r3, [pc, #24]	@ (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0adb      	lsrs	r3, r3, #11
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4904      	ldr	r1, [pc, #16]	@ (8003000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40021000 	.word	0x40021000
 8003000:	080091f4 	.word	0x080091f4

08003004 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	220f      	movs	r2, #15
 8003012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003014:	4b12      	ldr	r3, [pc, #72]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0203 	and.w	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003020:	4b0f      	ldr	r3, [pc, #60]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800302c:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003038:	4b09      	ldr	r3, [pc, #36]	@ (8003060 <HAL_RCC_GetClockConfig+0x5c>)
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	08db      	lsrs	r3, r3, #3
 800303e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003046:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <HAL_RCC_GetClockConfig+0x60>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0207 	and.w	r2, r3, #7
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	40021000 	.word	0x40021000
 8003064:	40022000 	.word	0x40022000

08003068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003070:	2300      	movs	r3, #0
 8003072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003080:	f7ff f9bc 	bl	80023fc <HAL_PWREx_GetVoltageRange>
 8003084:	6178      	str	r0, [r7, #20]
 8003086:	e014      	b.n	80030b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308c:	4a24      	ldr	r2, [pc, #144]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003092:	6593      	str	r3, [r2, #88]	@ 0x58
 8003094:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003098:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a0:	f7ff f9ac 	bl	80023fc <HAL_PWREx_GetVoltageRange>
 80030a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030b8:	d10b      	bne.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	@ 0x80
 80030be:	d919      	bls.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2ba0      	cmp	r3, #160	@ 0xa0
 80030c4:	d902      	bls.n	80030cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c6:	2302      	movs	r3, #2
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	e013      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030cc:	2301      	movs	r3, #1
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e010      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b80      	cmp	r3, #128	@ 0x80
 80030d6:	d902      	bls.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030d8:	2303      	movs	r3, #3
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e00a      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b80      	cmp	r3, #128	@ 0x80
 80030e2:	d102      	bne.n	80030ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e4:	2302      	movs	r3, #2
 80030e6:	613b      	str	r3, [r7, #16]
 80030e8:	e004      	b.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b70      	cmp	r3, #112	@ 0x70
 80030ee:	d101      	bne.n	80030f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f0:	2301      	movs	r3, #1
 80030f2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	4909      	ldr	r1, [pc, #36]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003104:	4b07      	ldr	r3, [pc, #28]	@ (8003124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3718      	adds	r7, #24
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40021000 	.word	0x40021000
 8003124:	40022000 	.word	0x40022000

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003130:	2300      	movs	r3, #0
 8003132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003134:	2300      	movs	r3, #0
 8003136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003140:	2b00      	cmp	r3, #0
 8003142:	d041      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003148:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800314c:	d02a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800314e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003152:	d824      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003154:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003158:	d008      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800315a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800315e:	d81e      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003164:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003168:	d010      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800316a:	e018      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800316c:	4b86      	ldr	r3, [pc, #536]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	4a85      	ldr	r2, [pc, #532]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003176:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003178:	e015      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	2100      	movs	r1, #0
 8003180:	4618      	mov	r0, r3
 8003182:	f000 fabb 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800318a:	e00c      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3320      	adds	r3, #32
 8003190:	2100      	movs	r1, #0
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fba6 	bl	80038e4 <RCCEx_PLLSAI2_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800319c:	e003      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	74fb      	strb	r3, [r7, #19]
      break;
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10b      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031ac:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031ba:	4973      	ldr	r1, [pc, #460]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031c2:	e001      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c4:	7cfb      	ldrb	r3, [r7, #19]
 80031c6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d041      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031d8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031dc:	d02a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031de:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031e2:	d824      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031e8:	d008      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031ee:	d81e      	bhi.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f8:	d010      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031fa:	e018      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031fc:	4b62      	ldr	r3, [pc, #392]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	4a61      	ldr	r2, [pc, #388]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003202:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003206:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003208:	e015      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	3304      	adds	r3, #4
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f000 fa73 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800321a:	e00c      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	3320      	adds	r3, #32
 8003220:	2100      	movs	r1, #0
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fb5e 	bl	80038e4 <RCCEx_PLLSAI2_Config>
 8003228:	4603      	mov	r3, r0
 800322a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800322c:	e003      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	74fb      	strb	r3, [r7, #19]
      break;
 8003232:	e000      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003234:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003236:	7cfb      	ldrb	r3, [r7, #19]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10b      	bne.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800323c:	4b52      	ldr	r3, [pc, #328]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003242:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800324a:	494f      	ldr	r1, [pc, #316]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003252:	e001      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003254:	7cfb      	ldrb	r3, [r7, #19]
 8003256:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80a0 	beq.w	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800326a:	4b47      	ldr	r3, [pc, #284]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800326e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003276:	2301      	movs	r3, #1
 8003278:	e000      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800327a:	2300      	movs	r3, #0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00d      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003280:	4b41      	ldr	r3, [pc, #260]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003284:	4a40      	ldr	r2, [pc, #256]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800328a:	6593      	str	r3, [r2, #88]	@ 0x58
 800328c:	4b3e      	ldr	r3, [pc, #248]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003294:	60bb      	str	r3, [r7, #8]
 8003296:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003298:	2301      	movs	r3, #1
 800329a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800329c:	4b3b      	ldr	r3, [pc, #236]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a3a      	ldr	r2, [pc, #232]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a8:	f7fe fdc8 	bl	8001e3c <HAL_GetTick>
 80032ac:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ae:	e009      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b0:	f7fe fdc4 	bl	8001e3c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d902      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	74fb      	strb	r3, [r7, #19]
        break;
 80032c2:	e005      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032c4:	4b31      	ldr	r3, [pc, #196]	@ (800338c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0ef      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032d0:	7cfb      	ldrb	r3, [r7, #19]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d15c      	bne.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d01f      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d019      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032f4:	4b24      	ldr	r3, [pc, #144]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032fe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003300:	4b21      	ldr	r3, [pc, #132]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003306:	4a20      	ldr	r2, [pc, #128]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003316:	4a1c      	ldr	r2, [pc, #112]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003318:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800331c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003320:	4a19      	ldr	r2, [pc, #100]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe fd83 	bl	8001e3c <HAL_GetTick>
 8003336:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003338:	e00b      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800333a:	f7fe fd7f 	bl	8001e3c <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003348:	4293      	cmp	r3, r2
 800334a:	d902      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	74fb      	strb	r3, [r7, #19]
            break;
 8003350:	e006      	b.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003352:	4b0d      	ldr	r3, [pc, #52]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0ec      	beq.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003360:	7cfb      	ldrb	r3, [r7, #19]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10c      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003366:	4b08      	ldr	r3, [pc, #32]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800336c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003376:	4904      	ldr	r1, [pc, #16]	@ (8003388 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800337e:	e009      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
 8003384:	e006      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003390:	7cfb      	ldrb	r3, [r7, #19]
 8003392:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003394:	7c7b      	ldrb	r3, [r7, #17]
 8003396:	2b01      	cmp	r3, #1
 8003398:	d105      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800339a:	4b9e      	ldr	r3, [pc, #632]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339e:	4a9d      	ldr	r2, [pc, #628]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033b2:	4b98      	ldr	r3, [pc, #608]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	f023 0203 	bic.w	r2, r3, #3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c0:	4994      	ldr	r1, [pc, #592]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d4:	4b8f      	ldr	r3, [pc, #572]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f023 020c 	bic.w	r2, r3, #12
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e2:	498c      	ldr	r1, [pc, #560]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f6:	4b87      	ldr	r3, [pc, #540]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003404:	4983      	ldr	r1, [pc, #524]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003418:	4b7e      	ldr	r3, [pc, #504]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003426:	497b      	ldr	r1, [pc, #492]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800343a:	4b76      	ldr	r3, [pc, #472]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003440:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003448:	4972      	ldr	r1, [pc, #456]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800345c:	4b6d      	ldr	r3, [pc, #436]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003462:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800346a:	496a      	ldr	r1, [pc, #424]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800347e:	4b65      	ldr	r3, [pc, #404]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003484:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800348c:	4961      	ldr	r1, [pc, #388]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034ae:	4959      	ldr	r1, [pc, #356]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034c2:	4b54      	ldr	r3, [pc, #336]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d0:	4950      	ldr	r1, [pc, #320]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d00a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034f2:	4948      	ldr	r1, [pc, #288]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00a      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003506:	4b43      	ldr	r3, [pc, #268]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003514:	493f      	ldr	r1, [pc, #252]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d028      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003528:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800352e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003536:	4937      	ldr	r1, [pc, #220]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003538:	4313      	orrs	r3, r2
 800353a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003542:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003546:	d106      	bne.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003548:	4b32      	ldr	r3, [pc, #200]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4a31      	ldr	r2, [pc, #196]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003552:	60d3      	str	r3, [r2, #12]
 8003554:	e011      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800355a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800355e:	d10c      	bne.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3304      	adds	r3, #4
 8003564:	2101      	movs	r1, #1
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f8c8 	bl	80036fc <RCCEx_PLLSAI1_Config>
 800356c:	4603      	mov	r3, r0
 800356e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003570:	7cfb      	ldrb	r3, [r7, #19]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d028      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003586:	4b23      	ldr	r3, [pc, #140]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003594:	491f      	ldr	r1, [pc, #124]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	4313      	orrs	r3, r2
 8003598:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035a4:	d106      	bne.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b0:	60d3      	str	r3, [r2, #12]
 80035b2:	e011      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035b8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035bc:	d10c      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	3304      	adds	r3, #4
 80035c2:	2101      	movs	r1, #1
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f899 	bl	80036fc <RCCEx_PLLSAI1_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ce:	7cfb      	ldrb	r3, [r7, #19]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d02b      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ea:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035f2:	4908      	ldr	r1, [pc, #32]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003602:	d109      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003604:	4b03      	ldr	r3, [pc, #12]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4a02      	ldr	r2, [pc, #8]	@ (8003614 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800360e:	60d3      	str	r3, [r2, #12]
 8003610:	e014      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003612:	bf00      	nop
 8003614:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800361c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003620:	d10c      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	2101      	movs	r1, #1
 8003628:	4618      	mov	r0, r3
 800362a:	f000 f867 	bl	80036fc <RCCEx_PLLSAI1_Config>
 800362e:	4603      	mov	r3, r0
 8003630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003632:	7cfb      	ldrb	r3, [r7, #19]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d02f      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003648:	4b2b      	ldr	r3, [pc, #172]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800364a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800364e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003656:	4928      	ldr	r1, [pc, #160]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003662:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003666:	d10d      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3304      	adds	r3, #4
 800366c:	2102      	movs	r1, #2
 800366e:	4618      	mov	r0, r3
 8003670:	f000 f844 	bl	80036fc <RCCEx_PLLSAI1_Config>
 8003674:	4603      	mov	r3, r0
 8003676:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003678:	7cfb      	ldrb	r3, [r7, #19]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d014      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	74bb      	strb	r3, [r7, #18]
 8003682:	e011      	b.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800368c:	d10c      	bne.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3320      	adds	r3, #32
 8003692:	2102      	movs	r1, #2
 8003694:	4618      	mov	r0, r3
 8003696:	f000 f925 	bl	80038e4 <RCCEx_PLLSAI2_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800369e:	7cfb      	ldrb	r3, [r7, #19]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00a      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036b4:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ba:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036c2:	490d      	ldr	r1, [pc, #52]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00b      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036d6:	4b08      	ldr	r3, [pc, #32]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036e6:	4904      	ldr	r1, [pc, #16]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036ee:	7cbb      	ldrb	r3, [r7, #18]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	40021000 	.word	0x40021000

080036fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003706:	2300      	movs	r3, #0
 8003708:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800370a:	4b75      	ldr	r3, [pc, #468]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	2b00      	cmp	r3, #0
 8003714:	d018      	beq.n	8003748 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003716:	4b72      	ldr	r3, [pc, #456]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f003 0203 	and.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d10d      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
       ||
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800372e:	4b6c      	ldr	r3, [pc, #432]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	091b      	lsrs	r3, r3, #4
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	1c5a      	adds	r2, r3, #1
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
       ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d047      	beq.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	e044      	b.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b03      	cmp	r3, #3
 800374e:	d018      	beq.n	8003782 <RCCEx_PLLSAI1_Config+0x86>
 8003750:	2b03      	cmp	r3, #3
 8003752:	d825      	bhi.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003754:	2b01      	cmp	r3, #1
 8003756:	d002      	beq.n	800375e <RCCEx_PLLSAI1_Config+0x62>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d009      	beq.n	8003770 <RCCEx_PLLSAI1_Config+0x74>
 800375c:	e020      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800375e:	4b60      	ldr	r3, [pc, #384]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11d      	bne.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800376e:	e01a      	b.n	80037a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003770:	4b5b      	ldr	r3, [pc, #364]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003778:	2b00      	cmp	r3, #0
 800377a:	d116      	bne.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003780:	e013      	b.n	80037aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003782:	4b57      	ldr	r3, [pc, #348]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10f      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800378e:	4b54      	ldr	r3, [pc, #336]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d109      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800379e:	e006      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	73fb      	strb	r3, [r7, #15]
      break;
 80037a4:	e004      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037a6:	bf00      	nop
 80037a8:	e002      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037aa:	bf00      	nop
 80037ac:	e000      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d10d      	bne.n	80037d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037b6:	4b4a      	ldr	r3, [pc, #296]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6819      	ldr	r1, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	430b      	orrs	r3, r1
 80037cc:	4944      	ldr	r1, [pc, #272]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d2:	7bfb      	ldrb	r3, [r7, #15]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d17d      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037d8:	4b41      	ldr	r3, [pc, #260]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a40      	ldr	r2, [pc, #256]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037de:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e4:	f7fe fb2a 	bl	8001e3c <HAL_GetTick>
 80037e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ea:	e009      	b.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ec:	f7fe fb26 	bl	8001e3c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d902      	bls.n	8003800 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	73fb      	strb	r3, [r7, #15]
        break;
 80037fe:	e005      	b.n	800380c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003800:	4b37      	ldr	r3, [pc, #220]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ef      	bne.n	80037ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d160      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d111      	bne.n	800383c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003818:	4b31      	ldr	r3, [pc, #196]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	6892      	ldr	r2, [r2, #8]
 8003828:	0211      	lsls	r1, r2, #8
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	68d2      	ldr	r2, [r2, #12]
 800382e:	0912      	lsrs	r2, r2, #4
 8003830:	0452      	lsls	r2, r2, #17
 8003832:	430a      	orrs	r2, r1
 8003834:	492a      	ldr	r1, [pc, #168]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003836:	4313      	orrs	r3, r2
 8003838:	610b      	str	r3, [r1, #16]
 800383a:	e027      	b.n	800388c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d112      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003842:	4b27      	ldr	r3, [pc, #156]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800384a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	0211      	lsls	r1, r2, #8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6912      	ldr	r2, [r2, #16]
 8003858:	0852      	lsrs	r2, r2, #1
 800385a:	3a01      	subs	r2, #1
 800385c:	0552      	lsls	r2, r2, #21
 800385e:	430a      	orrs	r2, r1
 8003860:	491f      	ldr	r1, [pc, #124]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]
 8003866:	e011      	b.n	800388c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003868:	4b1d      	ldr	r3, [pc, #116]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003870:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	0211      	lsls	r1, r2, #8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6952      	ldr	r2, [r2, #20]
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	3a01      	subs	r2, #1
 8003882:	0652      	lsls	r2, r2, #25
 8003884:	430a      	orrs	r2, r1
 8003886:	4916      	ldr	r1, [pc, #88]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003888:	4313      	orrs	r3, r2
 800388a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800388c:	4b14      	ldr	r3, [pc, #80]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fe fad0 	bl	8001e3c <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a0:	f7fe facc 	bl	8001e3c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
          break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b4:	4b0a      	ldr	r3, [pc, #40]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	4904      	ldr	r1, [pc, #16]	@ (80038e0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000

080038e4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038f2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038fe:	4b67      	ldr	r3, [pc, #412]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f003 0203 	and.w	r2, r3, #3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	429a      	cmp	r2, r3
 800390c:	d10d      	bne.n	800392a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
       ||
 8003912:	2b00      	cmp	r3, #0
 8003914:	d009      	beq.n	800392a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003916:	4b61      	ldr	r3, [pc, #388]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	091b      	lsrs	r3, r3, #4
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
       ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d047      	beq.n	80039ba <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	73fb      	strb	r3, [r7, #15]
 800392e:	e044      	b.n	80039ba <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d018      	beq.n	800396a <RCCEx_PLLSAI2_Config+0x86>
 8003938:	2b03      	cmp	r3, #3
 800393a:	d825      	bhi.n	8003988 <RCCEx_PLLSAI2_Config+0xa4>
 800393c:	2b01      	cmp	r3, #1
 800393e:	d002      	beq.n	8003946 <RCCEx_PLLSAI2_Config+0x62>
 8003940:	2b02      	cmp	r3, #2
 8003942:	d009      	beq.n	8003958 <RCCEx_PLLSAI2_Config+0x74>
 8003944:	e020      	b.n	8003988 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003946:	4b55      	ldr	r3, [pc, #340]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d11d      	bne.n	800398e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003956:	e01a      	b.n	800398e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003958:	4b50      	ldr	r3, [pc, #320]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d116      	bne.n	8003992 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003968:	e013      	b.n	8003992 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800396a:	4b4c      	ldr	r3, [pc, #304]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10f      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003976:	4b49      	ldr	r3, [pc, #292]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003986:	e006      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	73fb      	strb	r3, [r7, #15]
      break;
 800398c:	e004      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003996:	bf00      	nop
    }

    if(status == HAL_OK)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800399e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6819      	ldr	r1, [r3, #0]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	3b01      	subs	r3, #1
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	430b      	orrs	r3, r1
 80039b4:	4939      	ldr	r1, [pc, #228]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039ba:	7bfb      	ldrb	r3, [r7, #15]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d167      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039c0:	4b36      	ldr	r3, [pc, #216]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a35      	ldr	r2, [pc, #212]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7fe fa36 	bl	8001e3c <HAL_GetTick>
 80039d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039d2:	e009      	b.n	80039e8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039d4:	f7fe fa32 	bl	8001e3c <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d902      	bls.n	80039e8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	73fb      	strb	r3, [r7, #15]
        break;
 80039e6:	e005      	b.n	80039f4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039e8:	4b2c      	ldr	r3, [pc, #176]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1ef      	bne.n	80039d4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d14a      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d111      	bne.n	8003a24 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a00:	4b26      	ldr	r3, [pc, #152]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6892      	ldr	r2, [r2, #8]
 8003a10:	0211      	lsls	r1, r2, #8
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	0912      	lsrs	r2, r2, #4
 8003a18:	0452      	lsls	r2, r2, #17
 8003a1a:	430a      	orrs	r2, r1
 8003a1c:	491f      	ldr	r1, [pc, #124]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	614b      	str	r3, [r1, #20]
 8003a22:	e011      	b.n	8003a48 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a24:	4b1d      	ldr	r3, [pc, #116]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	695b      	ldr	r3, [r3, #20]
 8003a28:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a2c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	6892      	ldr	r2, [r2, #8]
 8003a34:	0211      	lsls	r1, r2, #8
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6912      	ldr	r2, [r2, #16]
 8003a3a:	0852      	lsrs	r2, r2, #1
 8003a3c:	3a01      	subs	r2, #1
 8003a3e:	0652      	lsls	r2, r2, #25
 8003a40:	430a      	orrs	r2, r1
 8003a42:	4916      	ldr	r1, [pc, #88]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	4313      	orrs	r3, r2
 8003a46:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a48:	4b14      	ldr	r3, [pc, #80]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a52:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe f9f2 	bl	8001e3c <HAL_GetTick>
 8003a58:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a5a:	e009      	b.n	8003a70 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a5c:	f7fe f9ee 	bl	8001e3c <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d902      	bls.n	8003a70 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	73fb      	strb	r3, [r7, #15]
          break;
 8003a6e:	e005      	b.n	8003a7c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a70:	4b0a      	ldr	r3, [pc, #40]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0ef      	beq.n	8003a5c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a7c:	7bfb      	ldrb	r3, [r7, #15]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d106      	bne.n	8003a90 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a82:	4b06      	ldr	r3, [pc, #24]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a84:	695a      	ldr	r2, [r3, #20]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	695b      	ldr	r3, [r3, #20]
 8003a8a:	4904      	ldr	r1, [pc, #16]	@ (8003a9c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e095      	b.n	8003bde <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ac2:	d009      	beq.n	8003ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	61da      	str	r2, [r3, #28]
 8003aca:	e005      	b.n	8003ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d106      	bne.n	8003af8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f7fd ff7a 	bl	80019ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2202      	movs	r2, #2
 8003afc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b0e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b18:	d902      	bls.n	8003b20 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e002      	b.n	8003b26 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b2e:	d007      	beq.n	8003b40 <HAL_SPI_Init+0xa0>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b38:	d002      	beq.n	8003b40 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	431a      	orrs	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b6e:	431a      	orrs	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b82:	ea42 0103 	orr.w	r1, r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	699b      	ldr	r3, [r3, #24]
 8003b9a:	0c1b      	lsrs	r3, r3, #16
 8003b9c:	f003 0204 	and.w	r2, r3, #4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba4:	f003 0310 	and.w	r3, r3, #16
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003bbc:	ea42 0103 	orr.w	r1, r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b088      	sub	sp, #32
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	60b9      	str	r1, [r7, #8]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bf6:	f7fe f921 	bl	8001e3c <HAL_GetTick>
 8003bfa:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003bfc:	88fb      	ldrh	r3, [r7, #6]
 8003bfe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d001      	beq.n	8003c10 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e15c      	b.n	8003eca <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_SPI_Transmit+0x36>
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d101      	bne.n	8003c20 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e154      	b.n	8003eca <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_SPI_Transmit+0x48>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e14d      	b.n	8003eca <HAL_SPI_Transmit+0x2e4>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	88fa      	ldrh	r2, [r7, #6]
 8003c54:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2200      	movs	r2, #0
 8003c76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c80:	d10f      	bne.n	8003ca2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ca0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cac:	2b40      	cmp	r3, #64	@ 0x40
 8003cae:	d007      	beq.n	8003cc0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003cc8:	d952      	bls.n	8003d70 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_SPI_Transmit+0xf2>
 8003cd2:	8b7b      	ldrh	r3, [r7, #26]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d145      	bne.n	8003d64 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003cfc:	e032      	b.n	8003d64 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d112      	bne.n	8003d32 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	881a      	ldrh	r2, [r3, #0]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1c:	1c9a      	adds	r2, r3, #2
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d30:	e018      	b.n	8003d64 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d32:	f7fe f883 	bl	8001e3c <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d803      	bhi.n	8003d4a <HAL_SPI_Transmit+0x164>
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d48:	d102      	bne.n	8003d50 <HAL_SPI_Transmit+0x16a>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e0b2      	b.n	8003eca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1c7      	bne.n	8003cfe <HAL_SPI_Transmit+0x118>
 8003d6e:	e083      	b.n	8003e78 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_SPI_Transmit+0x198>
 8003d78:	8b7b      	ldrh	r3, [r7, #26]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d177      	bne.n	8003e6e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d912      	bls.n	8003dae <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d8c:	881a      	ldrh	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d98:	1c9a      	adds	r2, r3, #2
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b02      	subs	r3, #2
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dac:	e05f      	b.n	8003e6e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	330c      	adds	r3, #12
 8003db8:	7812      	ldrb	r2, [r2, #0]
 8003dba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003dd4:	e04b      	b.n	8003e6e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d12b      	bne.n	8003e3c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d912      	bls.n	8003e14 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df2:	881a      	ldrh	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dfe:	1c9a      	adds	r2, r3, #2
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b02      	subs	r3, #2
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e12:	e02c      	b.n	8003e6e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	330c      	adds	r3, #12
 8003e1e:	7812      	ldrb	r2, [r2, #0]
 8003e20:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	1c5a      	adds	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e3a:	e018      	b.n	8003e6e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e3c:	f7fd fffe 	bl	8001e3c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d803      	bhi.n	8003e54 <HAL_SPI_Transmit+0x26e>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e52:	d102      	bne.n	8003e5a <HAL_SPI_Transmit+0x274>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e02d      	b.n	8003eca <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ae      	bne.n	8003dd6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	6839      	ldr	r1, [r7, #0]
 8003e7c:	68f8      	ldr	r0, [r7, #12]
 8003e7e:	f000 f947 	bl	8004110 <SPI_EndRxTxTransaction>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e96:	2300      	movs	r3, #0
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
  }
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3720      	adds	r7, #32
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
	...

08003ed4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	603b      	str	r3, [r7, #0]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ee4:	f7fd ffaa 	bl	8001e3c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ef4:	f7fd ffa2 	bl	8001e3c <HAL_GetTick>
 8003ef8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003efa:	4b39      	ldr	r3, [pc, #228]	@ (8003fe0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	015b      	lsls	r3, r3, #5
 8003f00:	0d1b      	lsrs	r3, r3, #20
 8003f02:	69fa      	ldr	r2, [r7, #28]
 8003f04:	fb02 f303 	mul.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f0a:	e054      	b.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f12:	d050      	beq.n	8003fb6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f14:	f7fd ff92 	bl	8001e3c <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d902      	bls.n	8003f2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d13d      	bne.n	8003fa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f42:	d111      	bne.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	d004      	beq.n	8003f58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f56:	d107      	bne.n	8003f68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f70:	d10f      	bne.n	8003f92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e017      	b.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	bf0c      	ite	eq
 8003fc6:	2301      	moveq	r3, #1
 8003fc8:	2300      	movne	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	461a      	mov	r2, r3
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d19b      	bne.n	8003f0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	20000008 	.word	0x20000008

08003fe4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	@ 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ff6:	f7fd ff21 	bl	8001e3c <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffe:	1a9b      	subs	r3, r3, r2
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	4413      	add	r3, r2
 8004004:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004006:	f7fd ff19 	bl	8001e3c <HAL_GetTick>
 800400a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	330c      	adds	r3, #12
 8004012:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004014:	4b3d      	ldr	r3, [pc, #244]	@ (800410c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	00da      	lsls	r2, r3, #3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	0d1b      	lsrs	r3, r3, #20
 8004024:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004026:	fb02 f303 	mul.w	r3, r2, r3
 800402a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800402c:	e060      	b.n	80040f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004034:	d107      	bne.n	8004046 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d104      	bne.n	8004046 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	b2db      	uxtb	r3, r3
 8004042:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004044:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800404c:	d050      	beq.n	80040f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800404e:	f7fd fef5 	bl	8001e3c <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405a:	429a      	cmp	r2, r3
 800405c:	d902      	bls.n	8004064 <SPI_WaitFifoStateUntilTimeout+0x80>
 800405e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004060:	2b00      	cmp	r3, #0
 8004062:	d13d      	bne.n	80040e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407c:	d111      	bne.n	80040a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004086:	d004      	beq.n	8004092 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004090:	d107      	bne.n	80040a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040aa:	d10f      	bne.n	80040cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2200      	movs	r2, #0
 80040d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e010      	b.n	8004102 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	4013      	ands	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d196      	bne.n	800402e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3728      	adds	r7, #40	@ 0x28
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000008 	.word	0x20000008

08004110 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	2200      	movs	r2, #0
 8004124:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f7ff ff5b 	bl	8003fe4 <SPI_WaitFifoStateUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004138:	f043 0220 	orr.w	r2, r3, #32
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e027      	b.n	8004194 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	9300      	str	r3, [sp, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2200      	movs	r2, #0
 800414c:	2180      	movs	r1, #128	@ 0x80
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f7ff fec0 	bl	8003ed4 <SPI_WaitFlagStateUntilTimeout>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d007      	beq.n	800416a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415e:	f043 0220 	orr.w	r2, r3, #32
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e014      	b.n	8004194 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2200      	movs	r2, #0
 8004172:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f7ff ff34 	bl	8003fe4 <SPI_WaitFifoStateUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d007      	beq.n	8004192 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004186:	f043 0220 	orr.w	r2, r3, #32
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e000      	b.n	8004194 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e049      	b.n	8004242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d106      	bne.n	80041c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f841 	bl	800424a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3304      	adds	r3, #4
 80041d8:	4619      	mov	r1, r3
 80041da:	4610      	mov	r0, r2
 80041dc:	f000 f9e0 	bl	80045a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800424a:	b480      	push	{r7}
 800424c:	b083      	sub	sp, #12
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b01      	cmp	r3, #1
 8004272:	d001      	beq.n	8004278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e04f      	b.n	8004318 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2202      	movs	r2, #2
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68da      	ldr	r2, [r3, #12]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f042 0201 	orr.w	r2, r2, #1
 800428e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a23      	ldr	r2, [pc, #140]	@ (8004324 <HAL_TIM_Base_Start_IT+0xc4>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d01d      	beq.n	80042d6 <HAL_TIM_Base_Start_IT+0x76>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042a2:	d018      	beq.n	80042d6 <HAL_TIM_Base_Start_IT+0x76>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004328 <HAL_TIM_Base_Start_IT+0xc8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d013      	beq.n	80042d6 <HAL_TIM_Base_Start_IT+0x76>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a1e      	ldr	r2, [pc, #120]	@ (800432c <HAL_TIM_Base_Start_IT+0xcc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d00e      	beq.n	80042d6 <HAL_TIM_Base_Start_IT+0x76>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004330 <HAL_TIM_Base_Start_IT+0xd0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d009      	beq.n	80042d6 <HAL_TIM_Base_Start_IT+0x76>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004334 <HAL_TIM_Base_Start_IT+0xd4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d004      	beq.n	80042d6 <HAL_TIM_Base_Start_IT+0x76>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a19      	ldr	r2, [pc, #100]	@ (8004338 <HAL_TIM_Base_Start_IT+0xd8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d115      	bne.n	8004302 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	4b17      	ldr	r3, [pc, #92]	@ (800433c <HAL_TIM_Base_Start_IT+0xdc>)
 80042de:	4013      	ands	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d015      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0xb4>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ee:	d011      	beq.n	8004314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004300:	e008      	b.n	8004314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f042 0201 	orr.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e000      	b.n	8004316 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004314:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40012c00 	.word	0x40012c00
 8004328:	40000400 	.word	0x40000400
 800432c:	40000800 	.word	0x40000800
 8004330:	40000c00 	.word	0x40000c00
 8004334:	40013400 	.word	0x40013400
 8004338:	40014000 	.word	0x40014000
 800433c:	00010007 	.word	0x00010007

08004340 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0202 	mvn.w	r2, #2
 8004374:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8e9 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f8db 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f8ec 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0304 	and.w	r3, r3, #4
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0204 	mvn.w	r2, #4
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2202      	movs	r2, #2
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8c3 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8b5 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8c6 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0208 	mvn.w	r2, #8
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2204      	movs	r2, #4
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f89d 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f88f 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8a0 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0310 	and.w	r3, r3, #16
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0210 	mvn.w	r2, #16
 8004458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2208      	movs	r2, #8
 800445e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f877 	bl	8004562 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f869 	bl	800454e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f87a 	bl	8004576 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00c      	beq.n	80044ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	2b00      	cmp	r3, #0
 800449a:	d007      	beq.n	80044ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0201 	mvn.w	r2, #1
 80044a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc fd06 	bl	8000eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d104      	bne.n	80044c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f913 	bl	8004700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d00c      	beq.n	80044fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d007      	beq.n	80044fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80044f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f90b 	bl	8004714 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00c      	beq.n	8004522 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450e:	2b00      	cmp	r3, #0
 8004510:	d007      	beq.n	8004522 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800451a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f834 	bl	800458a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00c      	beq.n	8004546 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d007      	beq.n	8004546 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f06f 0220 	mvn.w	r2, #32
 800453e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8d3 	bl	80046ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004546:	bf00      	nop
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800454e:	b480      	push	{r7}
 8004550:	b083      	sub	sp, #12
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004556:	bf00      	nop
 8004558:	370c      	adds	r7, #12
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr

08004576 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr

0800458a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800458a:	b480      	push	{r7}
 800458c:	b083      	sub	sp, #12
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
	...

080045a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a46      	ldr	r2, [pc, #280]	@ (80046cc <TIM_Base_SetConfig+0x12c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045be:	d00f      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a43      	ldr	r2, [pc, #268]	@ (80046d0 <TIM_Base_SetConfig+0x130>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d00b      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a42      	ldr	r2, [pc, #264]	@ (80046d4 <TIM_Base_SetConfig+0x134>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d007      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a41      	ldr	r2, [pc, #260]	@ (80046d8 <TIM_Base_SetConfig+0x138>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d003      	beq.n	80045e0 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a40      	ldr	r2, [pc, #256]	@ (80046dc <TIM_Base_SetConfig+0x13c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d108      	bne.n	80045f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a35      	ldr	r2, [pc, #212]	@ (80046cc <TIM_Base_SetConfig+0x12c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01f      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004600:	d01b      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a32      	ldr	r2, [pc, #200]	@ (80046d0 <TIM_Base_SetConfig+0x130>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d017      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a31      	ldr	r2, [pc, #196]	@ (80046d4 <TIM_Base_SetConfig+0x134>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a30      	ldr	r2, [pc, #192]	@ (80046d8 <TIM_Base_SetConfig+0x138>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00f      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2f      	ldr	r2, [pc, #188]	@ (80046dc <TIM_Base_SetConfig+0x13c>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2e      	ldr	r2, [pc, #184]	@ (80046e0 <TIM_Base_SetConfig+0x140>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2d      	ldr	r2, [pc, #180]	@ (80046e4 <TIM_Base_SetConfig+0x144>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0x9a>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a2c      	ldr	r2, [pc, #176]	@ (80046e8 <TIM_Base_SetConfig+0x148>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a16      	ldr	r2, [pc, #88]	@ (80046cc <TIM_Base_SetConfig+0x12c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d00f      	beq.n	8004698 <TIM_Base_SetConfig+0xf8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a18      	ldr	r2, [pc, #96]	@ (80046dc <TIM_Base_SetConfig+0x13c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d00b      	beq.n	8004698 <TIM_Base_SetConfig+0xf8>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a17      	ldr	r2, [pc, #92]	@ (80046e0 <TIM_Base_SetConfig+0x140>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d007      	beq.n	8004698 <TIM_Base_SetConfig+0xf8>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a16      	ldr	r2, [pc, #88]	@ (80046e4 <TIM_Base_SetConfig+0x144>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d003      	beq.n	8004698 <TIM_Base_SetConfig+0xf8>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a15      	ldr	r2, [pc, #84]	@ (80046e8 <TIM_Base_SetConfig+0x148>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d103      	bne.n	80046a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d105      	bne.n	80046be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f023 0201 	bic.w	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]
  }
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40013400 	.word	0x40013400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800

080046ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e040      	b.n	80047bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d106      	bne.n	8004750 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7fd fabc 	bl	8001cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2224      	movs	r2, #36	@ 0x24
 8004754:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	2b00      	cmp	r3, #0
 800476c:	d002      	beq.n	8004774 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fae0 	bl	8004d34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f825 	bl	80047c4 <UART_SetConfig>
 800477a:	4603      	mov	r3, r0
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e01b      	b.n	80047bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004792:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fb5f 	bl	8004e78 <UART_CheckIdleState>
 80047ba:	4603      	mov	r3, r0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3708      	adds	r7, #8
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047c8:	b08a      	sub	sp, #40	@ 0x28
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	689a      	ldr	r2, [r3, #8]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	431a      	orrs	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	69db      	ldr	r3, [r3, #28]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4ba4      	ldr	r3, [pc, #656]	@ (8004a84 <UART_SetConfig+0x2c0>)
 80047f4:	4013      	ands	r3, r2
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	6812      	ldr	r2, [r2, #0]
 80047fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a99      	ldr	r2, [pc, #612]	@ (8004a88 <UART_SetConfig+0x2c4>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d004      	beq.n	8004830 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800482c:	4313      	orrs	r3, r2
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004840:	430a      	orrs	r2, r1
 8004842:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a90      	ldr	r2, [pc, #576]	@ (8004a8c <UART_SetConfig+0x2c8>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d126      	bne.n	800489c <UART_SetConfig+0xd8>
 800484e:	4b90      	ldr	r3, [pc, #576]	@ (8004a90 <UART_SetConfig+0x2cc>)
 8004850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004854:	f003 0303 	and.w	r3, r3, #3
 8004858:	2b03      	cmp	r3, #3
 800485a:	d81b      	bhi.n	8004894 <UART_SetConfig+0xd0>
 800485c:	a201      	add	r2, pc, #4	@ (adr r2, 8004864 <UART_SetConfig+0xa0>)
 800485e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004862:	bf00      	nop
 8004864:	08004875 	.word	0x08004875
 8004868:	08004885 	.word	0x08004885
 800486c:	0800487d 	.word	0x0800487d
 8004870:	0800488d 	.word	0x0800488d
 8004874:	2301      	movs	r3, #1
 8004876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800487a:	e116      	b.n	8004aaa <UART_SetConfig+0x2e6>
 800487c:	2302      	movs	r3, #2
 800487e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004882:	e112      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004884:	2304      	movs	r3, #4
 8004886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800488a:	e10e      	b.n	8004aaa <UART_SetConfig+0x2e6>
 800488c:	2308      	movs	r3, #8
 800488e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004892:	e10a      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004894:	2310      	movs	r3, #16
 8004896:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800489a:	e106      	b.n	8004aaa <UART_SetConfig+0x2e6>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a7c      	ldr	r2, [pc, #496]	@ (8004a94 <UART_SetConfig+0x2d0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d138      	bne.n	8004918 <UART_SetConfig+0x154>
 80048a6:	4b7a      	ldr	r3, [pc, #488]	@ (8004a90 <UART_SetConfig+0x2cc>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048ac:	f003 030c 	and.w	r3, r3, #12
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d82d      	bhi.n	8004910 <UART_SetConfig+0x14c>
 80048b4:	a201      	add	r2, pc, #4	@ (adr r2, 80048bc <UART_SetConfig+0xf8>)
 80048b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ba:	bf00      	nop
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	08004911 	.word	0x08004911
 80048c4:	08004911 	.word	0x08004911
 80048c8:	08004911 	.word	0x08004911
 80048cc:	08004901 	.word	0x08004901
 80048d0:	08004911 	.word	0x08004911
 80048d4:	08004911 	.word	0x08004911
 80048d8:	08004911 	.word	0x08004911
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	08004911 	.word	0x08004911
 80048e4:	08004911 	.word	0x08004911
 80048e8:	08004911 	.word	0x08004911
 80048ec:	08004909 	.word	0x08004909
 80048f0:	2300      	movs	r3, #0
 80048f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048f6:	e0d8      	b.n	8004aaa <UART_SetConfig+0x2e6>
 80048f8:	2302      	movs	r3, #2
 80048fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048fe:	e0d4      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004900:	2304      	movs	r3, #4
 8004902:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004906:	e0d0      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004908:	2308      	movs	r3, #8
 800490a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800490e:	e0cc      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004910:	2310      	movs	r3, #16
 8004912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004916:	e0c8      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5e      	ldr	r2, [pc, #376]	@ (8004a98 <UART_SetConfig+0x2d4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d125      	bne.n	800496e <UART_SetConfig+0x1aa>
 8004922:	4b5b      	ldr	r3, [pc, #364]	@ (8004a90 <UART_SetConfig+0x2cc>)
 8004924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004928:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800492c:	2b30      	cmp	r3, #48	@ 0x30
 800492e:	d016      	beq.n	800495e <UART_SetConfig+0x19a>
 8004930:	2b30      	cmp	r3, #48	@ 0x30
 8004932:	d818      	bhi.n	8004966 <UART_SetConfig+0x1a2>
 8004934:	2b20      	cmp	r3, #32
 8004936:	d00a      	beq.n	800494e <UART_SetConfig+0x18a>
 8004938:	2b20      	cmp	r3, #32
 800493a:	d814      	bhi.n	8004966 <UART_SetConfig+0x1a2>
 800493c:	2b00      	cmp	r3, #0
 800493e:	d002      	beq.n	8004946 <UART_SetConfig+0x182>
 8004940:	2b10      	cmp	r3, #16
 8004942:	d008      	beq.n	8004956 <UART_SetConfig+0x192>
 8004944:	e00f      	b.n	8004966 <UART_SetConfig+0x1a2>
 8004946:	2300      	movs	r3, #0
 8004948:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494c:	e0ad      	b.n	8004aaa <UART_SetConfig+0x2e6>
 800494e:	2302      	movs	r3, #2
 8004950:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004954:	e0a9      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004956:	2304      	movs	r3, #4
 8004958:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495c:	e0a5      	b.n	8004aaa <UART_SetConfig+0x2e6>
 800495e:	2308      	movs	r3, #8
 8004960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004964:	e0a1      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004966:	2310      	movs	r3, #16
 8004968:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800496c:	e09d      	b.n	8004aaa <UART_SetConfig+0x2e6>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a4a      	ldr	r2, [pc, #296]	@ (8004a9c <UART_SetConfig+0x2d8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d125      	bne.n	80049c4 <UART_SetConfig+0x200>
 8004978:	4b45      	ldr	r3, [pc, #276]	@ (8004a90 <UART_SetConfig+0x2cc>)
 800497a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800497e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004982:	2bc0      	cmp	r3, #192	@ 0xc0
 8004984:	d016      	beq.n	80049b4 <UART_SetConfig+0x1f0>
 8004986:	2bc0      	cmp	r3, #192	@ 0xc0
 8004988:	d818      	bhi.n	80049bc <UART_SetConfig+0x1f8>
 800498a:	2b80      	cmp	r3, #128	@ 0x80
 800498c:	d00a      	beq.n	80049a4 <UART_SetConfig+0x1e0>
 800498e:	2b80      	cmp	r3, #128	@ 0x80
 8004990:	d814      	bhi.n	80049bc <UART_SetConfig+0x1f8>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <UART_SetConfig+0x1d8>
 8004996:	2b40      	cmp	r3, #64	@ 0x40
 8004998:	d008      	beq.n	80049ac <UART_SetConfig+0x1e8>
 800499a:	e00f      	b.n	80049bc <UART_SetConfig+0x1f8>
 800499c:	2300      	movs	r3, #0
 800499e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a2:	e082      	b.n	8004aaa <UART_SetConfig+0x2e6>
 80049a4:	2302      	movs	r3, #2
 80049a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049aa:	e07e      	b.n	8004aaa <UART_SetConfig+0x2e6>
 80049ac:	2304      	movs	r3, #4
 80049ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b2:	e07a      	b.n	8004aaa <UART_SetConfig+0x2e6>
 80049b4:	2308      	movs	r3, #8
 80049b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ba:	e076      	b.n	8004aaa <UART_SetConfig+0x2e6>
 80049bc:	2310      	movs	r3, #16
 80049be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049c2:	e072      	b.n	8004aaa <UART_SetConfig+0x2e6>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a35      	ldr	r2, [pc, #212]	@ (8004aa0 <UART_SetConfig+0x2dc>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d12a      	bne.n	8004a24 <UART_SetConfig+0x260>
 80049ce:	4b30      	ldr	r3, [pc, #192]	@ (8004a90 <UART_SetConfig+0x2cc>)
 80049d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049dc:	d01a      	beq.n	8004a14 <UART_SetConfig+0x250>
 80049de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049e2:	d81b      	bhi.n	8004a1c <UART_SetConfig+0x258>
 80049e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049e8:	d00c      	beq.n	8004a04 <UART_SetConfig+0x240>
 80049ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ee:	d815      	bhi.n	8004a1c <UART_SetConfig+0x258>
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d003      	beq.n	80049fc <UART_SetConfig+0x238>
 80049f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049f8:	d008      	beq.n	8004a0c <UART_SetConfig+0x248>
 80049fa:	e00f      	b.n	8004a1c <UART_SetConfig+0x258>
 80049fc:	2300      	movs	r3, #0
 80049fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a02:	e052      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a04:	2302      	movs	r3, #2
 8004a06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0a:	e04e      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a12:	e04a      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a14:	2308      	movs	r3, #8
 8004a16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a1a:	e046      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a22:	e042      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a17      	ldr	r2, [pc, #92]	@ (8004a88 <UART_SetConfig+0x2c4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d13a      	bne.n	8004aa4 <UART_SetConfig+0x2e0>
 8004a2e:	4b18      	ldr	r3, [pc, #96]	@ (8004a90 <UART_SetConfig+0x2cc>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a34:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a38:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a3c:	d01a      	beq.n	8004a74 <UART_SetConfig+0x2b0>
 8004a3e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a42:	d81b      	bhi.n	8004a7c <UART_SetConfig+0x2b8>
 8004a44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a48:	d00c      	beq.n	8004a64 <UART_SetConfig+0x2a0>
 8004a4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a4e:	d815      	bhi.n	8004a7c <UART_SetConfig+0x2b8>
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <UART_SetConfig+0x298>
 8004a54:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a58:	d008      	beq.n	8004a6c <UART_SetConfig+0x2a8>
 8004a5a:	e00f      	b.n	8004a7c <UART_SetConfig+0x2b8>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a62:	e022      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a64:	2302      	movs	r3, #2
 8004a66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6a:	e01e      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a6c:	2304      	movs	r3, #4
 8004a6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a72:	e01a      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a74:	2308      	movs	r3, #8
 8004a76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a7a:	e016      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a7c:	2310      	movs	r3, #16
 8004a7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a82:	e012      	b.n	8004aaa <UART_SetConfig+0x2e6>
 8004a84:	efff69f3 	.word	0xefff69f3
 8004a88:	40008000 	.word	0x40008000
 8004a8c:	40013800 	.word	0x40013800
 8004a90:	40021000 	.word	0x40021000
 8004a94:	40004400 	.word	0x40004400
 8004a98:	40004800 	.word	0x40004800
 8004a9c:	40004c00 	.word	0x40004c00
 8004aa0:	40005000 	.word	0x40005000
 8004aa4:	2310      	movs	r3, #16
 8004aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a9f      	ldr	r2, [pc, #636]	@ (8004d2c <UART_SetConfig+0x568>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d17a      	bne.n	8004baa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ab4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d824      	bhi.n	8004b06 <UART_SetConfig+0x342>
 8004abc:	a201      	add	r2, pc, #4	@ (adr r2, 8004ac4 <UART_SetConfig+0x300>)
 8004abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac2:	bf00      	nop
 8004ac4:	08004ae9 	.word	0x08004ae9
 8004ac8:	08004b07 	.word	0x08004b07
 8004acc:	08004af1 	.word	0x08004af1
 8004ad0:	08004b07 	.word	0x08004b07
 8004ad4:	08004af7 	.word	0x08004af7
 8004ad8:	08004b07 	.word	0x08004b07
 8004adc:	08004b07 	.word	0x08004b07
 8004ae0:	08004b07 	.word	0x08004b07
 8004ae4:	08004aff 	.word	0x08004aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ae8:	f7fe fa60 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004aec:	61f8      	str	r0, [r7, #28]
        break;
 8004aee:	e010      	b.n	8004b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004af0:	4b8f      	ldr	r3, [pc, #572]	@ (8004d30 <UART_SetConfig+0x56c>)
 8004af2:	61fb      	str	r3, [r7, #28]
        break;
 8004af4:	e00d      	b.n	8004b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004af6:	f7fe f9c1 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8004afa:	61f8      	str	r0, [r7, #28]
        break;
 8004afc:	e009      	b.n	8004b12 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b02:	61fb      	str	r3, [r7, #28]
        break;
 8004b04:	e005      	b.n	8004b12 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b10:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80fb 	beq.w	8004d10 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	69fa      	ldr	r2, [r7, #28]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d305      	bcc.n	8004b36 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	429a      	cmp	r2, r3
 8004b34:	d903      	bls.n	8004b3e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b3c:	e0e8      	b.n	8004d10 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	2200      	movs	r2, #0
 8004b42:	461c      	mov	r4, r3
 8004b44:	4615      	mov	r5, r2
 8004b46:	f04f 0200 	mov.w	r2, #0
 8004b4a:	f04f 0300 	mov.w	r3, #0
 8004b4e:	022b      	lsls	r3, r5, #8
 8004b50:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004b54:	0222      	lsls	r2, r4, #8
 8004b56:	68f9      	ldr	r1, [r7, #12]
 8004b58:	6849      	ldr	r1, [r1, #4]
 8004b5a:	0849      	lsrs	r1, r1, #1
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	4688      	mov	r8, r1
 8004b60:	4681      	mov	r9, r0
 8004b62:	eb12 0a08 	adds.w	sl, r2, r8
 8004b66:	eb43 0b09 	adc.w	fp, r3, r9
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	607a      	str	r2, [r7, #4]
 8004b74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b78:	4650      	mov	r0, sl
 8004b7a:	4659      	mov	r1, fp
 8004b7c:	f7fb fb28 	bl	80001d0 <__aeabi_uldivmod>
 8004b80:	4602      	mov	r2, r0
 8004b82:	460b      	mov	r3, r1
 8004b84:	4613      	mov	r3, r2
 8004b86:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b8e:	d308      	bcc.n	8004ba2 <UART_SetConfig+0x3de>
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b96:	d204      	bcs.n	8004ba2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	60da      	str	r2, [r3, #12]
 8004ba0:	e0b6      	b.n	8004d10 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004ba8:	e0b2      	b.n	8004d10 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bb2:	d15e      	bne.n	8004c72 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004bb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004bb8:	2b08      	cmp	r3, #8
 8004bba:	d828      	bhi.n	8004c0e <UART_SetConfig+0x44a>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <UART_SetConfig+0x400>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	08004c0f 	.word	0x08004c0f
 8004bd4:	08004bff 	.word	0x08004bff
 8004bd8:	08004c0f 	.word	0x08004c0f
 8004bdc:	08004c0f 	.word	0x08004c0f
 8004be0:	08004c0f 	.word	0x08004c0f
 8004be4:	08004c07 	.word	0x08004c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be8:	f7fe f9e0 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004bec:	61f8      	str	r0, [r7, #28]
        break;
 8004bee:	e014      	b.n	8004c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bf0:	f7fe f9f2 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8004bf4:	61f8      	str	r0, [r7, #28]
        break;
 8004bf6:	e010      	b.n	8004c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8004d30 <UART_SetConfig+0x56c>)
 8004bfa:	61fb      	str	r3, [r7, #28]
        break;
 8004bfc:	e00d      	b.n	8004c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bfe:	f7fe f93d 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8004c02:	61f8      	str	r0, [r7, #28]
        break;
 8004c04:	e009      	b.n	8004c1a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c06:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0a:	61fb      	str	r3, [r7, #28]
        break;
 8004c0c:	e005      	b.n	8004c1a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c18:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d077      	beq.n	8004d10 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	005a      	lsls	r2, r3, #1
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	085b      	lsrs	r3, r3, #1
 8004c2a:	441a      	add	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	2b0f      	cmp	r3, #15
 8004c3a:	d916      	bls.n	8004c6a <UART_SetConfig+0x4a6>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c42:	d212      	bcs.n	8004c6a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	f023 030f 	bic.w	r3, r3, #15
 8004c4c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	f003 0307 	and.w	r3, r3, #7
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	8afb      	ldrh	r3, [r7, #22]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	8afa      	ldrh	r2, [r7, #22]
 8004c66:	60da      	str	r2, [r3, #12]
 8004c68:	e052      	b.n	8004d10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004c70:	e04e      	b.n	8004d10 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c72:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c76:	2b08      	cmp	r3, #8
 8004c78:	d827      	bhi.n	8004cca <UART_SetConfig+0x506>
 8004c7a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c80 <UART_SetConfig+0x4bc>)
 8004c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c80:	08004ca5 	.word	0x08004ca5
 8004c84:	08004cad 	.word	0x08004cad
 8004c88:	08004cb5 	.word	0x08004cb5
 8004c8c:	08004ccb 	.word	0x08004ccb
 8004c90:	08004cbb 	.word	0x08004cbb
 8004c94:	08004ccb 	.word	0x08004ccb
 8004c98:	08004ccb 	.word	0x08004ccb
 8004c9c:	08004ccb 	.word	0x08004ccb
 8004ca0:	08004cc3 	.word	0x08004cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ca4:	f7fe f982 	bl	8002fac <HAL_RCC_GetPCLK1Freq>
 8004ca8:	61f8      	str	r0, [r7, #28]
        break;
 8004caa:	e014      	b.n	8004cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cac:	f7fe f994 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8004cb0:	61f8      	str	r0, [r7, #28]
        break;
 8004cb2:	e010      	b.n	8004cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cb4:	4b1e      	ldr	r3, [pc, #120]	@ (8004d30 <UART_SetConfig+0x56c>)
 8004cb6:	61fb      	str	r3, [r7, #28]
        break;
 8004cb8:	e00d      	b.n	8004cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cba:	f7fe f8df 	bl	8002e7c <HAL_RCC_GetSysClockFreq>
 8004cbe:	61f8      	str	r0, [r7, #28]
        break;
 8004cc0:	e009      	b.n	8004cd6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cc6:	61fb      	str	r3, [r7, #28]
        break;
 8004cc8:	e005      	b.n	8004cd6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004cd4:	bf00      	nop
    }

    if (pclk != 0U)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d019      	beq.n	8004d10 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	085a      	lsrs	r2, r3, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	441a      	add	r2, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	2b0f      	cmp	r3, #15
 8004cf4:	d909      	bls.n	8004d0a <UART_SetConfig+0x546>
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cfc:	d205      	bcs.n	8004d0a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60da      	str	r2, [r3, #12]
 8004d08:	e002      	b.n	8004d10 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3728      	adds	r7, #40	@ 0x28
 8004d24:	46bd      	mov	sp, r7
 8004d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40008000 	.word	0x40008000
 8004d30:	00f42400 	.word	0x00f42400

08004d34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d40:	f003 0308 	and.w	r3, r3, #8
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d00a      	beq.n	8004d5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d00a      	beq.n	8004d80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00a      	beq.n	8004da2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00a      	beq.n	8004dc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00a      	beq.n	8004de6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	f003 0320 	and.w	r3, r3, #32
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00a      	beq.n	8004e08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01a      	beq.n	8004e4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e32:	d10a      	bne.n	8004e4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	605a      	str	r2, [r3, #4]
  }
}
 8004e6c:	bf00      	nop
 8004e6e:	370c      	adds	r7, #12
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b098      	sub	sp, #96	@ 0x60
 8004e7c:	af02      	add	r7, sp, #8
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e88:	f7fc ffd8 	bl	8001e3c <HAL_GetTick>
 8004e8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d12e      	bne.n	8004efa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ea0:	9300      	str	r3, [sp, #0]
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f88c 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d021      	beq.n	8004efa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ebe:	e853 3f00 	ldrex	r3, [r3]
 8004ec2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ec4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ec6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eca:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ed4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ed6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004edc:	e841 2300 	strex	r3, r2, [r1]
 8004ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ee2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e6      	bne.n	8004eb6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e062      	b.n	8004fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b04      	cmp	r3, #4
 8004f06:	d149      	bne.n	8004f9c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f0c:	9300      	str	r3, [sp, #0]
 8004f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f10:	2200      	movs	r2, #0
 8004f12:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f856 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d03c      	beq.n	8004f9c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2a:	e853 3f00 	ldrex	r3, [r3]
 8004f2e:	623b      	str	r3, [r7, #32]
   return(result);
 8004f30:	6a3b      	ldr	r3, [r7, #32]
 8004f32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f48:	e841 2300 	strex	r3, r2, [r1]
 8004f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e6      	bne.n	8004f22 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	3308      	adds	r3, #8
 8004f5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	e853 3f00 	ldrex	r3, [r3]
 8004f62:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0301 	bic.w	r3, r3, #1
 8004f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3308      	adds	r3, #8
 8004f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f74:	61fa      	str	r2, [r7, #28]
 8004f76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	69b9      	ldr	r1, [r7, #24]
 8004f7a:	69fa      	ldr	r2, [r7, #28]
 8004f7c:	e841 2300 	strex	r3, r2, [r1]
 8004f80:	617b      	str	r3, [r7, #20]
   return(result);
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1e5      	bne.n	8004f54 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e011      	b.n	8004fc0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3758      	adds	r7, #88	@ 0x58
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	e04f      	b.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe0:	d04b      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe2:	f7fc ff2b 	bl	8001e3c <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e04e      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d037      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b80      	cmp	r3, #128	@ 0x80
 800500e:	d034      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d031      	beq.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d110      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2208      	movs	r2, #8
 800502a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f838 	bl	80050a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2208      	movs	r2, #8
 8005036:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e029      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	69db      	ldr	r3, [r3, #28]
 800504c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005054:	d111      	bne.n	800507a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800505e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f000 f81e 	bl	80050a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e00f      	b.n	800509a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69da      	ldr	r2, [r3, #28]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	4013      	ands	r3, r2
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	429a      	cmp	r2, r3
 8005088:	bf0c      	ite	eq
 800508a:	2301      	moveq	r3, #1
 800508c:	2300      	movne	r3, #0
 800508e:	b2db      	uxtb	r3, r3
 8005090:	461a      	mov	r2, r3
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	429a      	cmp	r2, r3
 8005096:	d0a0      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005098:	2300      	movs	r3, #0
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050a2:	b480      	push	{r7}
 80050a4:	b095      	sub	sp, #84	@ 0x54
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	e853 3f00 	ldrex	r3, [r3]
 80050b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80050ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e6      	bne.n	80050aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	3308      	adds	r3, #8
 80050e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	6a3b      	ldr	r3, [r7, #32]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	f023 0301 	bic.w	r3, r3, #1
 80050f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	3308      	adds	r3, #8
 80050fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005102:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800510a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005114:	2b01      	cmp	r3, #1
 8005116:	d118      	bne.n	800514a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	60bb      	str	r3, [r7, #8]
   return(result);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f023 0310 	bic.w	r3, r3, #16
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	461a      	mov	r2, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	61bb      	str	r3, [r7, #24]
 8005138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	613b      	str	r3, [r7, #16]
   return(result);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e6      	bne.n	8005118 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800515e:	bf00      	nop
 8005160:	3754      	adds	r7, #84	@ 0x54
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <__NVIC_SetPriority>:
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	6039      	str	r1, [r7, #0]
 8005176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517c:	2b00      	cmp	r3, #0
 800517e:	db0a      	blt.n	8005196 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	b2da      	uxtb	r2, r3
 8005184:	490c      	ldr	r1, [pc, #48]	@ (80051b8 <__NVIC_SetPriority+0x4c>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	0112      	lsls	r2, r2, #4
 800518c:	b2d2      	uxtb	r2, r2
 800518e:	440b      	add	r3, r1
 8005190:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005194:	e00a      	b.n	80051ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	b2da      	uxtb	r2, r3
 800519a:	4908      	ldr	r1, [pc, #32]	@ (80051bc <__NVIC_SetPriority+0x50>)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	f003 030f 	and.w	r3, r3, #15
 80051a2:	3b04      	subs	r3, #4
 80051a4:	0112      	lsls	r2, r2, #4
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	440b      	add	r3, r1
 80051aa:	761a      	strb	r2, [r3, #24]
}
 80051ac:	bf00      	nop
 80051ae:	370c      	adds	r7, #12
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	e000e100 	.word	0xe000e100
 80051bc:	e000ed00 	.word	0xe000ed00

080051c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80051c0:	b580      	push	{r7, lr}
 80051c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80051c4:	4b05      	ldr	r3, [pc, #20]	@ (80051dc <SysTick_Handler+0x1c>)
 80051c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80051c8:	f002 fae6 	bl	8007798 <xTaskGetSchedulerState>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d001      	beq.n	80051d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80051d2:	f003 fc09 	bl	80089e8 <xPortSysTickHandler>
  }
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	e000e010 	.word	0xe000e010

080051e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80051e4:	2100      	movs	r1, #0
 80051e6:	f06f 0004 	mvn.w	r0, #4
 80051ea:	f7ff ffbf 	bl	800516c <__NVIC_SetPriority>
#endif
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051fa:	f3ef 8305 	mrs	r3, IPSR
 80051fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005200:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005206:	f06f 0305 	mvn.w	r3, #5
 800520a:	607b      	str	r3, [r7, #4]
 800520c:	e00c      	b.n	8005228 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <osKernelInitialize+0x44>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d105      	bne.n	8005222 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <osKernelInitialize+0x44>)
 8005218:	2201      	movs	r2, #1
 800521a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800521c:	2300      	movs	r3, #0
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	e002      	b.n	8005228 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005222:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005228:	687b      	ldr	r3, [r7, #4]
}
 800522a:	4618      	mov	r0, r3
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	200001fc 	.word	0x200001fc

0800523c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b082      	sub	sp, #8
 8005240:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005242:	f3ef 8305 	mrs	r3, IPSR
 8005246:	603b      	str	r3, [r7, #0]
  return(result);
 8005248:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800524a:	2b00      	cmp	r3, #0
 800524c:	d003      	beq.n	8005256 <osKernelStart+0x1a>
    stat = osErrorISR;
 800524e:	f06f 0305 	mvn.w	r3, #5
 8005252:	607b      	str	r3, [r7, #4]
 8005254:	e010      	b.n	8005278 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005256:	4b0b      	ldr	r3, [pc, #44]	@ (8005284 <osKernelStart+0x48>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b01      	cmp	r3, #1
 800525c:	d109      	bne.n	8005272 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800525e:	f7ff ffbf 	bl	80051e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005262:	4b08      	ldr	r3, [pc, #32]	@ (8005284 <osKernelStart+0x48>)
 8005264:	2202      	movs	r2, #2
 8005266:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005268:	f001 fe22 	bl	8006eb0 <vTaskStartScheduler>
      stat = osOK;
 800526c:	2300      	movs	r3, #0
 800526e:	607b      	str	r3, [r7, #4]
 8005270:	e002      	b.n	8005278 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005276:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005278:	687b      	ldr	r3, [r7, #4]
}
 800527a:	4618      	mov	r0, r3
 800527c:	3708      	adds	r7, #8
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	200001fc 	.word	0x200001fc

08005288 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b08e      	sub	sp, #56	@ 0x38
 800528c:	af04      	add	r7, sp, #16
 800528e:	60f8      	str	r0, [r7, #12]
 8005290:	60b9      	str	r1, [r7, #8]
 8005292:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005298:	f3ef 8305 	mrs	r3, IPSR
 800529c:	617b      	str	r3, [r7, #20]
  return(result);
 800529e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d17e      	bne.n	80053a2 <osThreadNew+0x11a>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d07b      	beq.n	80053a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80052aa:	2380      	movs	r3, #128	@ 0x80
 80052ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80052ae:	2318      	movs	r3, #24
 80052b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80052b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d045      	beq.n	800534e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d002      	beq.n	80052d0 <osThreadNew+0x48>
        name = attr->name;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <osThreadNew+0x6e>
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	2b38      	cmp	r3, #56	@ 0x38
 80052e8:	d805      	bhi.n	80052f6 <osThreadNew+0x6e>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <osThreadNew+0x72>
        return (NULL);
 80052f6:	2300      	movs	r3, #0
 80052f8:	e054      	b.n	80053a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d003      	beq.n	800530a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	089b      	lsrs	r3, r3, #2
 8005308:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <osThreadNew+0xa8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2ba7      	cmp	r3, #167	@ 0xa7
 8005318:	d90a      	bls.n	8005330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800531e:	2b00      	cmp	r3, #0
 8005320:	d006      	beq.n	8005330 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <osThreadNew+0xa8>
        mem = 1;
 800532a:	2301      	movs	r3, #1
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e010      	b.n	8005352 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10c      	bne.n	8005352 <osThreadNew+0xca>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d108      	bne.n	8005352 <osThreadNew+0xca>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <osThreadNew+0xca>
          mem = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	61bb      	str	r3, [r7, #24]
 800534c:	e001      	b.n	8005352 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800534e:	2300      	movs	r3, #0
 8005350:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d110      	bne.n	800537a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800535c:	687a      	ldr	r2, [r7, #4]
 800535e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005360:	9202      	str	r2, [sp, #8]
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	9300      	str	r3, [sp, #0]
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	6a3a      	ldr	r2, [r7, #32]
 800536c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f001 fb2b 	bl	80069ca <xTaskCreateStatic>
 8005374:	4603      	mov	r3, r0
 8005376:	613b      	str	r3, [r7, #16]
 8005378:	e013      	b.n	80053a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d110      	bne.n	80053a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	b29a      	uxth	r2, r3
 8005384:	f107 0310 	add.w	r3, r7, #16
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f001 fb79 	bl	8006a8a <xTaskCreate>
 8005398:	4603      	mov	r3, r0
 800539a:	2b01      	cmp	r3, #1
 800539c:	d001      	beq.n	80053a2 <osThreadNew+0x11a>
            hTask = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053a2:	693b      	ldr	r3, [r7, #16]
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3728      	adds	r7, #40	@ 0x28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053b4:	f3ef 8305 	mrs	r3, IPSR
 80053b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80053ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <osDelay+0x1c>
    stat = osErrorISR;
 80053c0:	f06f 0305 	mvn.w	r3, #5
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e007      	b.n	80053d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f001 fd36 	bl	8006e44 <vTaskDelay>
    }
  }

  return (stat);
 80053d8:	68fb      	ldr	r3, [r7, #12]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4a07      	ldr	r2, [pc, #28]	@ (8005410 <vApplicationGetIdleTaskMemory+0x2c>)
 80053f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	4a06      	ldr	r2, [pc, #24]	@ (8005414 <vApplicationGetIdleTaskMemory+0x30>)
 80053fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2280      	movs	r2, #128	@ 0x80
 8005400:	601a      	str	r2, [r3, #0]
}
 8005402:	bf00      	nop
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	20000200 	.word	0x20000200
 8005414:	200002a8 	.word	0x200002a8

08005418 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4a07      	ldr	r2, [pc, #28]	@ (8005444 <vApplicationGetTimerTaskMemory+0x2c>)
 8005428:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a06      	ldr	r2, [pc, #24]	@ (8005448 <vApplicationGetTimerTaskMemory+0x30>)
 800542e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005436:	601a      	str	r2, [r3, #0]
}
 8005438:	bf00      	nop
 800543a:	3714      	adds	r7, #20
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	200004a8 	.word	0x200004a8
 8005448:	20000550 	.word	0x20000550

0800544c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f103 0208 	add.w	r2, r3, #8
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005464:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f103 0208 	add.w	r2, r3, #8
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f103 0208 	add.w	r2, r3, #8
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005480:	bf00      	nop
 8005482:	370c      	adds	r7, #12
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054a6:	b480      	push	{r7}
 80054a8:	b085      	sub	sp, #20
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	1c5a      	adds	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	601a      	str	r2, [r3, #0]
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054ee:	b480      	push	{r7}
 80054f0:	b085      	sub	sp, #20
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005504:	d103      	bne.n	800550e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	60fb      	str	r3, [r7, #12]
 800550c:	e00c      	b.n	8005528 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	3308      	adds	r3, #8
 8005512:	60fb      	str	r3, [r7, #12]
 8005514:	e002      	b.n	800551c <vListInsert+0x2e>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	d2f6      	bcs.n	8005516 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	601a      	str	r2, [r3, #0]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	691b      	ldr	r3, [r3, #16]
 800556c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6892      	ldr	r2, [r2, #8]
 8005576:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6852      	ldr	r2, [r2, #4]
 8005580:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d103      	bne.n	8005594 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	1e5a      	subs	r2, r3, #1
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80055e0:	f003 f972 	bl	80088c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ec:	68f9      	ldr	r1, [r7, #12]
 80055ee:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80055f0:	fb01 f303 	mul.w	r3, r1, r3
 80055f4:	441a      	add	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005610:	3b01      	subs	r3, #1
 8005612:	68f9      	ldr	r1, [r7, #12]
 8005614:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005616:	fb01 f303 	mul.w	r3, r1, r3
 800561a:	441a      	add	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	22ff      	movs	r2, #255	@ 0xff
 8005624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	22ff      	movs	r2, #255	@ 0xff
 800562c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d114      	bne.n	8005660 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01a      	beq.n	8005674 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	3310      	adds	r3, #16
 8005642:	4618      	mov	r0, r3
 8005644:	f001 fed2 	bl	80073ec <xTaskRemoveFromEventList>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d012      	beq.n	8005674 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <xQueueGenericReset+0xd0>)
 8005650:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005654:	601a      	str	r2, [r3, #0]
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	f3bf 8f6f 	isb	sy
 800565e:	e009      	b.n	8005674 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3310      	adds	r3, #16
 8005664:	4618      	mov	r0, r3
 8005666:	f7ff fef1 	bl	800544c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3324      	adds	r3, #36	@ 0x24
 800566e:	4618      	mov	r0, r3
 8005670:	f7ff feec 	bl	800544c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005674:	f003 f95a 	bl	800892c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005678:	2301      	movs	r3, #1
}
 800567a:	4618      	mov	r0, r3
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	e000ed04 	.word	0xe000ed04

08005688 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08e      	sub	sp, #56	@ 0x38
 800568c:	af02      	add	r7, sp, #8
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	607a      	str	r2, [r7, #4]
 8005694:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10b      	bne.n	80056b4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800569c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056ae:	bf00      	nop
 80056b0:	bf00      	nop
 80056b2:	e7fd      	b.n	80056b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10b      	bne.n	80056d2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80056cc:	bf00      	nop
 80056ce:	bf00      	nop
 80056d0:	e7fd      	b.n	80056ce <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <xQueueGenericCreateStatic+0x56>
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <xQueueGenericCreateStatic+0x5a>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueGenericCreateStatic+0x5c>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	623b      	str	r3, [r7, #32]
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	e7fd      	b.n	80056fc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d102      	bne.n	800570c <xQueueGenericCreateStatic+0x84>
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d101      	bne.n	8005710 <xQueueGenericCreateStatic+0x88>
 800570c:	2301      	movs	r3, #1
 800570e:	e000      	b.n	8005712 <xQueueGenericCreateStatic+0x8a>
 8005710:	2300      	movs	r3, #0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10b      	bne.n	800572e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	61fb      	str	r3, [r7, #28]
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	e7fd      	b.n	800572a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800572e:	2350      	movs	r3, #80	@ 0x50
 8005730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b50      	cmp	r3, #80	@ 0x50
 8005736:	d00b      	beq.n	8005750 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	61bb      	str	r3, [r7, #24]
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	e7fd      	b.n	800574c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005750:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00d      	beq.n	8005778 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005764:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	4613      	mov	r3, r2
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f840 	bl	80057f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800577a:	4618      	mov	r0, r3
 800577c:	3730      	adds	r7, #48	@ 0x30
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005782:	b580      	push	{r7, lr}
 8005784:	b08a      	sub	sp, #40	@ 0x28
 8005786:	af02      	add	r7, sp, #8
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	4613      	mov	r3, r2
 800578e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10b      	bne.n	80057ae <xQueueGenericCreate+0x2c>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	613b      	str	r3, [r7, #16]
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	e7fd      	b.n	80057aa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	68ba      	ldr	r2, [r7, #8]
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3350      	adds	r3, #80	@ 0x50
 80057bc:	4618      	mov	r0, r3
 80057be:	f003 f9a5 	bl	8008b0c <pvPortMalloc>
 80057c2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80057c4:	69bb      	ldr	r3, [r7, #24]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	3350      	adds	r3, #80	@ 0x50
 80057d2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057dc:	79fa      	ldrb	r2, [r7, #7]
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	9300      	str	r3, [sp, #0]
 80057e2:	4613      	mov	r3, r2
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	68b9      	ldr	r1, [r7, #8]
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 f805 	bl	80057f8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057ee:	69bb      	ldr	r3, [r7, #24]
	}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
 8005804:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	e002      	b.n	800581a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005826:	2101      	movs	r1, #1
 8005828:	69b8      	ldr	r0, [r7, #24]
 800582a:	f7ff fec3 	bl	80055b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	78fa      	ldrb	r2, [r7, #3]
 8005832:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005836:	bf00      	nop
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800583e:	b580      	push	{r7, lr}
 8005840:	b082      	sub	sp, #8
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00e      	beq.n	800586a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800585e:	2300      	movs	r3, #0
 8005860:	2200      	movs	r2, #0
 8005862:	2100      	movs	r1, #0
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f81d 	bl	80058a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800586a:	bf00      	nop
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005872:	b580      	push	{r7, lr}
 8005874:	b086      	sub	sp, #24
 8005876:	af00      	add	r7, sp, #0
 8005878:	4603      	mov	r3, r0
 800587a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800587c:	2301      	movs	r3, #1
 800587e:	617b      	str	r3, [r7, #20]
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005884:	79fb      	ldrb	r3, [r7, #7]
 8005886:	461a      	mov	r2, r3
 8005888:	6939      	ldr	r1, [r7, #16]
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f7ff ff79 	bl	8005782 <xQueueGenericCreate>
 8005890:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f7ff ffd3 	bl	800583e <prvInitialiseMutex>

		return xNewQueue;
 8005898:	68fb      	ldr	r3, [r7, #12]
	}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
	...

080058a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08e      	sub	sp, #56	@ 0x38
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058b2:	2300      	movs	r3, #0
 80058b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <xQueueGenericSend+0x34>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <xQueueGenericSend+0x42>
 80058de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <xQueueGenericSend+0x46>
 80058e6:	2301      	movs	r3, #1
 80058e8:	e000      	b.n	80058ec <xQueueGenericSend+0x48>
 80058ea:	2300      	movs	r3, #0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10b      	bne.n	8005908 <xQueueGenericSend+0x64>
	__asm volatile
 80058f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f4:	f383 8811 	msr	BASEPRI, r3
 80058f8:	f3bf 8f6f 	isb	sy
 80058fc:	f3bf 8f4f 	dsb	sy
 8005900:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005902:	bf00      	nop
 8005904:	bf00      	nop
 8005906:	e7fd      	b.n	8005904 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b02      	cmp	r3, #2
 800590c:	d103      	bne.n	8005916 <xQueueGenericSend+0x72>
 800590e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005910:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005912:	2b01      	cmp	r3, #1
 8005914:	d101      	bne.n	800591a <xQueueGenericSend+0x76>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <xQueueGenericSend+0x78>
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <xQueueGenericSend+0x94>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	623b      	str	r3, [r7, #32]
}
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005938:	f001 ff2e 	bl	8007798 <xTaskGetSchedulerState>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d102      	bne.n	8005948 <xQueueGenericSend+0xa4>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <xQueueGenericSend+0xa8>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <xQueueGenericSend+0xaa>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <xQueueGenericSend+0xc6>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	61fb      	str	r3, [r7, #28]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800596a:	f002 ffad 	bl	80088c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <xQueueGenericSend+0xdc>
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	2b02      	cmp	r3, #2
 800597e:	d129      	bne.n	80059d4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005980:	683a      	ldr	r2, [r7, #0]
 8005982:	68b9      	ldr	r1, [r7, #8]
 8005984:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005986:	f000 fb37 	bl	8005ff8 <prvCopyDataToQueue>
 800598a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800598c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d010      	beq.n	80059b6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005996:	3324      	adds	r3, #36	@ 0x24
 8005998:	4618      	mov	r0, r3
 800599a:	f001 fd27 	bl	80073ec <xTaskRemoveFromEventList>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d013      	beq.n	80059cc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059a4:	4b3f      	ldr	r3, [pc, #252]	@ (8005aa4 <xQueueGenericSend+0x200>)
 80059a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059aa:	601a      	str	r2, [r3, #0]
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	e00a      	b.n	80059cc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80059b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80059bc:	4b39      	ldr	r3, [pc, #228]	@ (8005aa4 <xQueueGenericSend+0x200>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80059cc:	f002 ffae 	bl	800892c <vPortExitCritical>
				return pdPASS;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e063      	b.n	8005a9c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059da:	f002 ffa7 	bl	800892c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	e05c      	b.n	8005a9c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059e8:	f107 0314 	add.w	r3, r7, #20
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fd61 	bl	80074b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059f6:	f002 ff99 	bl	800892c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059fa:	f001 fac9 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059fe:	f002 ff63 	bl	80088c8 <vPortEnterCritical>
 8005a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a0e:	d103      	bne.n	8005a18 <xQueueGenericSend+0x174>
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a24:	d103      	bne.n	8005a2e <xQueueGenericSend+0x18a>
 8005a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a2e:	f002 ff7d 	bl	800892c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a32:	1d3a      	adds	r2, r7, #4
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fd50 	bl	80074e0 <xTaskCheckForTimeOut>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d124      	bne.n	8005a90 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a46:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a48:	f000 fbce 	bl	80061e8 <prvIsQueueFull>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d018      	beq.n	8005a84 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	3310      	adds	r3, #16
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f001 fc74 	bl	8007348 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005a60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a62:	f000 fb59 	bl	8006118 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005a66:	f001 faa1 	bl	8006fac <xTaskResumeAll>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f47f af7c 	bne.w	800596a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005a72:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa4 <xQueueGenericSend+0x200>)
 8005a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	f3bf 8f4f 	dsb	sy
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	e772      	b.n	800596a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a86:	f000 fb47 	bl	8006118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a8a:	f001 fa8f 	bl	8006fac <xTaskResumeAll>
 8005a8e:	e76c      	b.n	800596a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005a90:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a92:	f000 fb41 	bl	8006118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a96:	f001 fa89 	bl	8006fac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005a9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3738      	adds	r7, #56	@ 0x38
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}
 8005aa4:	e000ed04 	.word	0xe000ed04

08005aa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b090      	sub	sp, #64	@ 0x40
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10b      	bne.n	8005ad8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	e7fd      	b.n	8005ad4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d103      	bne.n	8005ae6 <xQueueGenericSendFromISR+0x3e>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <xQueueGenericSendFromISR+0x42>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e000      	b.n	8005aec <xQueueGenericSendFromISR+0x44>
 8005aea:	2300      	movs	r3, #0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d10b      	bne.n	8005b08 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af4:	f383 8811 	msr	BASEPRI, r3
 8005af8:	f3bf 8f6f 	isb	sy
 8005afc:	f3bf 8f4f 	dsb	sy
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b02:	bf00      	nop
 8005b04:	bf00      	nop
 8005b06:	e7fd      	b.n	8005b04 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSendFromISR+0x6e>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <xQueueGenericSendFromISR+0x72>
 8005b16:	2301      	movs	r3, #1
 8005b18:	e000      	b.n	8005b1c <xQueueGenericSendFromISR+0x74>
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	623b      	str	r3, [r7, #32]
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b38:	f002 ffa6 	bl	8008a88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b3c:	f3ef 8211 	mrs	r2, BASEPRI
 8005b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	61fa      	str	r2, [r7, #28]
 8005b52:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005b54:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005b56:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d302      	bcc.n	8005b6a <xQueueGenericSendFromISR+0xc2>
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d12f      	bne.n	8005bca <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b70:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005b80:	f000 fa3a 	bl	8005ff8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005b84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b8c:	d112      	bne.n	8005bb4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d016      	beq.n	8005bc4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b98:	3324      	adds	r3, #36	@ 0x24
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f001 fc26 	bl	80073ec <xTaskRemoveFromEventList>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00e      	beq.n	8005bc4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	e007      	b.n	8005bc4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005bb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005bb8:	3301      	adds	r3, #1
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	b25a      	sxtb	r2, r3
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005bc8:	e001      	b.n	8005bce <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bd0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005bd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005bda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3740      	adds	r7, #64	@ 0x40
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08c      	sub	sp, #48	@ 0x30
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d10b      	bne.n	8005c16 <xQueueReceive+0x32>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	623b      	str	r3, [r7, #32]
}
 8005c10:	bf00      	nop
 8005c12:	bf00      	nop
 8005c14:	e7fd      	b.n	8005c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d103      	bne.n	8005c24 <xQueueReceive+0x40>
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <xQueueReceive+0x44>
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <xQueueReceive+0x46>
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10b      	bne.n	8005c46 <xQueueReceive+0x62>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61fb      	str	r3, [r7, #28]
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	e7fd      	b.n	8005c42 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c46:	f001 fda7 	bl	8007798 <xTaskGetSchedulerState>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d102      	bne.n	8005c56 <xQueueReceive+0x72>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <xQueueReceive+0x76>
 8005c56:	2301      	movs	r3, #1
 8005c58:	e000      	b.n	8005c5c <xQueueReceive+0x78>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10b      	bne.n	8005c78 <xQueueReceive+0x94>
	__asm volatile
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	61bb      	str	r3, [r7, #24]
}
 8005c72:	bf00      	nop
 8005c74:	bf00      	nop
 8005c76:	e7fd      	b.n	8005c74 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c78:	f002 fe26 	bl	80088c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c80:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d01f      	beq.n	8005cc8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c8c:	f000 fa1e 	bl	80060cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c92:	1e5a      	subs	r2, r3, #1
 8005c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c96:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00f      	beq.n	8005cc0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	3310      	adds	r3, #16
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 fba1 	bl	80073ec <xTaskRemoveFromEventList>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d007      	beq.n	8005cc0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cb0:	4b3c      	ldr	r3, [pc, #240]	@ (8005da4 <xQueueReceive+0x1c0>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005cc0:	f002 fe34 	bl	800892c <vPortExitCritical>
				return pdPASS;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e069      	b.n	8005d9c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d103      	bne.n	8005cd6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cce:	f002 fe2d 	bl	800892c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e062      	b.n	8005d9c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d106      	bne.n	8005cea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cdc:	f107 0310 	add.w	r3, r7, #16
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f001 fbe7 	bl	80074b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cea:	f002 fe1f 	bl	800892c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005cee:	f001 f94f 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005cf2:	f002 fde9 	bl	80088c8 <vPortEnterCritical>
 8005cf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d02:	d103      	bne.n	8005d0c <xQueueReceive+0x128>
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d12:	b25b      	sxtb	r3, r3
 8005d14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d18:	d103      	bne.n	8005d22 <xQueueReceive+0x13e>
 8005d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d22:	f002 fe03 	bl	800892c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d26:	1d3a      	adds	r2, r7, #4
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f001 fbd6 	bl	80074e0 <xTaskCheckForTimeOut>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d123      	bne.n	8005d82 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d3c:	f000 fa3e 	bl	80061bc <prvIsQueueEmpty>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d017      	beq.n	8005d76 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	3324      	adds	r3, #36	@ 0x24
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	4611      	mov	r1, r2
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fafa 	bl	8007348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005d54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d56:	f000 f9df 	bl	8006118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005d5a:	f001 f927 	bl	8006fac <xTaskResumeAll>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d189      	bne.n	8005c78 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005d64:	4b0f      	ldr	r3, [pc, #60]	@ (8005da4 <xQueueReceive+0x1c0>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	e780      	b.n	8005c78 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d78:	f000 f9ce 	bl	8006118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d7c:	f001 f916 	bl	8006fac <xTaskResumeAll>
 8005d80:	e77a      	b.n	8005c78 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005d82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d84:	f000 f9c8 	bl	8006118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d88:	f001 f910 	bl	8006fac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d8e:	f000 fa15 	bl	80061bc <prvIsQueueEmpty>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f43f af6f 	beq.w	8005c78 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005d9a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3730      	adds	r7, #48	@ 0x30
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	e000ed04 	.word	0xe000ed04

08005da8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08e      	sub	sp, #56	@ 0x38
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10b      	bne.n	8005ddc <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	623b      	str	r3, [r7, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	bf00      	nop
 8005dda:	e7fd      	b.n	8005dd8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	61fb      	str	r3, [r7, #28]
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005dfc:	f001 fccc 	bl	8007798 <xTaskGetSchedulerState>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d102      	bne.n	8005e0c <xQueueSemaphoreTake+0x64>
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <xQueueSemaphoreTake+0x68>
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <xQueueSemaphoreTake+0x6a>
 8005e10:	2300      	movs	r3, #0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	61bb      	str	r3, [r7, #24]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e2e:	f002 fd4b 	bl	80088c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e36:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d024      	beq.n	8005e88 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e40:	1e5a      	subs	r2, r3, #1
 8005e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e44:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d104      	bne.n	8005e58 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e4e:	f001 fe1d 	bl	8007a8c <pvTaskIncrementMutexHeldCount>
 8005e52:	4602      	mov	r2, r0
 8005e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e56:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d00f      	beq.n	8005e80 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e62:	3310      	adds	r3, #16
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 fac1 	bl	80073ec <xTaskRemoveFromEventList>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d007      	beq.n	8005e80 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e70:	4b54      	ldr	r3, [pc, #336]	@ (8005fc4 <xQueueSemaphoreTake+0x21c>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e80:	f002 fd54 	bl	800892c <vPortExitCritical>
				return pdPASS;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e098      	b.n	8005fba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d112      	bne.n	8005eb4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	617b      	str	r3, [r7, #20]
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005eac:	f002 fd3e 	bl	800892c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e082      	b.n	8005fba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005eba:	f107 030c 	add.w	r3, r7, #12
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f001 faf8 	bl	80074b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ec8:	f002 fd30 	bl	800892c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ecc:	f001 f860 	bl	8006f90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ed0:	f002 fcfa 	bl	80088c8 <vPortEnterCritical>
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005eda:	b25b      	sxtb	r3, r3
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ee0:	d103      	bne.n	8005eea <xQueueSemaphoreTake+0x142>
 8005ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ef0:	b25b      	sxtb	r3, r3
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ef6:	d103      	bne.n	8005f00 <xQueueSemaphoreTake+0x158>
 8005ef8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f00:	f002 fd14 	bl	800892c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f04:	463a      	mov	r2, r7
 8005f06:	f107 030c 	add.w	r3, r7, #12
 8005f0a:	4611      	mov	r1, r2
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f001 fae7 	bl	80074e0 <xTaskCheckForTimeOut>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d132      	bne.n	8005f7e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f1a:	f000 f94f 	bl	80061bc <prvIsQueueEmpty>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d026      	beq.n	8005f72 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005f2c:	f002 fccc 	bl	80088c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f001 fc4d 	bl	80077d4 <xTaskPriorityInherit>
 8005f3a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005f3c:	f002 fcf6 	bl	800892c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f42:	3324      	adds	r3, #36	@ 0x24
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	4611      	mov	r1, r2
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 f9fd 	bl	8007348 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f50:	f000 f8e2 	bl	8006118 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f54:	f001 f82a 	bl	8006fac <xTaskResumeAll>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f47f af67 	bne.w	8005e2e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005f60:	4b18      	ldr	r3, [pc, #96]	@ (8005fc4 <xQueueSemaphoreTake+0x21c>)
 8005f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	f3bf 8f4f 	dsb	sy
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	e75d      	b.n	8005e2e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005f72:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f74:	f000 f8d0 	bl	8006118 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f78:	f001 f818 	bl	8006fac <xTaskResumeAll>
 8005f7c:	e757      	b.n	8005e2e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005f7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f80:	f000 f8ca 	bl	8006118 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f84:	f001 f812 	bl	8006fac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f8a:	f000 f917 	bl	80061bc <prvIsQueueEmpty>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f43f af4c 	beq.w	8005e2e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d00d      	beq.n	8005fb8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005f9c:	f002 fc94 	bl	80088c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fa2:	f000 f811 	bl	8005fc8 <prvGetDisinheritPriorityAfterTimeout>
 8005fa6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 fce8 	bl	8007984 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005fb4:	f002 fcba 	bl	800892c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005fb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3738      	adds	r7, #56	@ 0x38
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	e000ed04 	.word	0xe000ed04

08005fc8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005fc8:	b480      	push	{r7}
 8005fca:	b085      	sub	sp, #20
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	e001      	b.n	8005fea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005fea:	68fb      	ldr	r3, [r7, #12]
	}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3714      	adds	r7, #20
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b086      	sub	sp, #24
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800600c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10d      	bne.n	8006032 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d14d      	bne.n	80060ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f001 fc3e 	bl	80078a4 <xTaskPriorityDisinherit>
 8006028:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2200      	movs	r2, #0
 800602e:	609a      	str	r2, [r3, #8]
 8006030:	e043      	b.n	80060ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d119      	bne.n	800606c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6858      	ldr	r0, [r3, #4]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006040:	461a      	mov	r2, r3
 8006042:	68b9      	ldr	r1, [r7, #8]
 8006044:	f002 ffd4 	bl	8008ff0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685a      	ldr	r2, [r3, #4]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689b      	ldr	r3, [r3, #8]
 800605e:	429a      	cmp	r2, r3
 8006060:	d32b      	bcc.n	80060ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	e026      	b.n	80060ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	68d8      	ldr	r0, [r3, #12]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006074:	461a      	mov	r2, r3
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	f002 ffba 	bl	8008ff0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	425b      	negs	r3, r3
 8006086:	441a      	add	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d207      	bcs.n	80060a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	689a      	ldr	r2, [r3, #8]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a0:	425b      	negs	r3, r3
 80060a2:	441a      	add	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d105      	bne.n	80060ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	3b01      	subs	r3, #1
 80060b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80060c2:	697b      	ldr	r3, [r7, #20]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d018      	beq.n	8006110 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68da      	ldr	r2, [r3, #12]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	441a      	add	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68da      	ldr	r2, [r3, #12]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d303      	bcc.n	8006100 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68d9      	ldr	r1, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006108:	461a      	mov	r2, r3
 800610a:	6838      	ldr	r0, [r7, #0]
 800610c:	f002 ff70 	bl	8008ff0 <memcpy>
	}
}
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006120:	f002 fbd2 	bl	80088c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800612a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800612c:	e011      	b.n	8006152 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006132:	2b00      	cmp	r3, #0
 8006134:	d012      	beq.n	800615c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3324      	adds	r3, #36	@ 0x24
 800613a:	4618      	mov	r0, r3
 800613c:	f001 f956 	bl	80073ec <xTaskRemoveFromEventList>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d001      	beq.n	800614a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006146:	f001 fa2f 	bl	80075a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	3b01      	subs	r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006156:	2b00      	cmp	r3, #0
 8006158:	dce9      	bgt.n	800612e <prvUnlockQueue+0x16>
 800615a:	e000      	b.n	800615e <prvUnlockQueue+0x46>
					break;
 800615c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	22ff      	movs	r2, #255	@ 0xff
 8006162:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006166:	f002 fbe1 	bl	800892c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800616a:	f002 fbad 	bl	80088c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006174:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006176:	e011      	b.n	800619c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d012      	beq.n	80061a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	3310      	adds	r3, #16
 8006184:	4618      	mov	r0, r3
 8006186:	f001 f931 	bl	80073ec <xTaskRemoveFromEventList>
 800618a:	4603      	mov	r3, r0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006190:	f001 fa0a 	bl	80075a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006194:	7bbb      	ldrb	r3, [r7, #14]
 8006196:	3b01      	subs	r3, #1
 8006198:	b2db      	uxtb	r3, r3
 800619a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800619c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	dce9      	bgt.n	8006178 <prvUnlockQueue+0x60>
 80061a4:	e000      	b.n	80061a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	22ff      	movs	r2, #255	@ 0xff
 80061ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80061b0:	f002 fbbc 	bl	800892c <vPortExitCritical>
}
 80061b4:	bf00      	nop
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061c4:	f002 fb80 	bl	80088c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d102      	bne.n	80061d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	e001      	b.n	80061da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061da:	f002 fba7 	bl	800892c <vPortExitCritical>

	return xReturn;
 80061de:	68fb      	ldr	r3, [r7, #12]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061f0:	f002 fb6a 	bl	80088c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d102      	bne.n	8006206 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006200:	2301      	movs	r3, #1
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e001      	b.n	800620a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800620a:	f002 fb8f 	bl	800892c <vPortExitCritical>

	return xReturn;
 800620e:	68fb      	ldr	r3, [r7, #12]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006218:	b480      	push	{r7}
 800621a:	b085      	sub	sp, #20
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
 8006226:	e014      	b.n	8006252 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006228:	4a0f      	ldr	r2, [pc, #60]	@ (8006268 <vQueueAddToRegistry+0x50>)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006234:	490c      	ldr	r1, [pc, #48]	@ (8006268 <vQueueAddToRegistry+0x50>)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800623e:	4a0a      	ldr	r2, [pc, #40]	@ (8006268 <vQueueAddToRegistry+0x50>)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	00db      	lsls	r3, r3, #3
 8006244:	4413      	add	r3, r2
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800624a:	e006      	b.n	800625a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2b07      	cmp	r3, #7
 8006256:	d9e7      	bls.n	8006228 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	20000950 	.word	0x20000950

0800626c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800627c:	f002 fb24 	bl	80088c8 <vPortEnterCritical>
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006286:	b25b      	sxtb	r3, r3
 8006288:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800628c:	d103      	bne.n	8006296 <vQueueWaitForMessageRestricted+0x2a>
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800629c:	b25b      	sxtb	r3, r3
 800629e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062a2:	d103      	bne.n	80062ac <vQueueWaitForMessageRestricted+0x40>
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2200      	movs	r2, #0
 80062a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062ac:	f002 fb3e 	bl	800892c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d106      	bne.n	80062c6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3324      	adds	r3, #36	@ 0x24
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 f867 	bl	8007394 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062c6:	6978      	ldr	r0, [r7, #20]
 80062c8:	f7ff ff26 	bl	8006118 <prvUnlockQueue>
	}
 80062cc:	bf00      	nop
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b08c      	sub	sp, #48	@ 0x30
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d111      	bne.n	800630a <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80062e6:	2301      	movs	r3, #1
 80062e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b04      	cmp	r3, #4
 80062f0:	d81d      	bhi.n	800632e <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	61fb      	str	r3, [r7, #28]
}
 8006304:	bf00      	nop
 8006306:	bf00      	nop
 8006308:	e7fd      	b.n	8006306 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800630a:	2300      	movs	r3, #0
 800630c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10b      	bne.n	800632e <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631a:	f383 8811 	msr	BASEPRI, r3
 800631e:	f3bf 8f6f 	isb	sy
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	61bb      	str	r3, [r7, #24]
}
 8006328:	bf00      	nop
 800632a:	bf00      	nop
 800632c:	e7fd      	b.n	800632a <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	429a      	cmp	r2, r3
 8006334:	d90b      	bls.n	800634e <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8006336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633a:	f383 8811 	msr	BASEPRI, r3
 800633e:	f3bf 8f6f 	isb	sy
 8006342:	f3bf 8f4f 	dsb	sy
 8006346:	617b      	str	r3, [r7, #20]
}
 8006348:	bf00      	nop
 800634a:	bf00      	nop
 800634c:	e7fd      	b.n	800634a <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8006354:	2301      	movs	r3, #1
 8006356:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3301      	adds	r3, #1
 800635c:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	3324      	adds	r3, #36	@ 0x24
 8006362:	4618      	mov	r0, r3
 8006364:	f002 fbd2 	bl	8008b0c <pvPortMalloc>
 8006368:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00a      	beq.n	8006386 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006376:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	6a38      	ldr	r0, [r7, #32]
 8006382:	f000 faee 	bl	8006962 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8006386:	6a3b      	ldr	r3, [r7, #32]
	}
 8006388:	4618      	mov	r0, r3
 800638a:	3728      	adds	r7, #40	@ 0x28
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d10b      	bne.n	80063ba <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 80063a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
 80063ae:	f3bf 8f4f 	dsb	sy
 80063b2:	60fb      	str	r3, [r7, #12]
}
 80063b4:	bf00      	nop
 80063b6:	bf00      	nop
 80063b8:	e7fd      	b.n	80063b6 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4413      	add	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	1ad3      	subs	r3, r2, r3
 80063ce:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	3b01      	subs	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d304      	bcc.n	80063ea <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80063ea:	697b      	ldr	r3, [r7, #20]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	371c      	adds	r7, #28
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b090      	sub	sp, #64	@ 0x40
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
 8006404:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10b      	bne.n	800642c <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	623b      	str	r3, [r7, #32]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <xStreamBufferSendFromISR+0x52>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	61fb      	str	r3, [r7, #28]
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop
 8006448:	e7fd      	b.n	8006446 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	7f1b      	ldrb	r3, [r3, #28]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8006456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006458:	3304      	adds	r3, #4
 800645a:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 800645c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800645e:	f7ff ff97 	bl	8006390 <xStreamBufferSpacesAvailable>
 8006462:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8006464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006466:	9300      	str	r3, [sp, #0]
 8006468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68b9      	ldr	r1, [r7, #8]
 800646e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006470:	f000 f835 	bl	80064de <prvWriteMessageToBuffer>
 8006474:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8006476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006478:	2b00      	cmp	r3, #0
 800647a:	d02b      	beq.n	80064d4 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800647c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800647e:	f000 fa50 	bl	8006922 <prvBytesInBuffer>
 8006482:	4602      	mov	r2, r0
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	429a      	cmp	r2, r3
 800648a:	d323      	bcc.n	80064d4 <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 800648c:	f3ef 8211 	mrs	r2, BASEPRI
 8006490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	61ba      	str	r2, [r7, #24]
 80064a2:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064a4:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00b      	beq.n	80064c8 <xStreamBufferSendFromISR+0xd0>
 80064b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b2:	6918      	ldr	r0, [r3, #16]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	2300      	movs	r3, #0
 80064ba:	2200      	movs	r2, #0
 80064bc:	2100      	movs	r1, #0
 80064be:	f001 fc1b 	bl	8007cf8 <xTaskGenericNotifyFromISR>
 80064c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c4:	2200      	movs	r2, #0
 80064c6:	611a      	str	r2, [r3, #16]
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	f383 8811 	msr	BASEPRI, r3
}
 80064d2:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3738      	adds	r7, #56	@ 0x38
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b086      	sub	sp, #24
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
 80064ea:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d102      	bne.n	80064f8 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	e01d      	b.n	8006534 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	7f1b      	ldrb	r3, [r3, #28]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d108      	bne.n	8006516 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8006504:	2301      	movs	r3, #1
 8006506:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	4293      	cmp	r3, r2
 800650e:	bf28      	it	cs
 8006510:	4613      	movcs	r3, r2
 8006512:	607b      	str	r3, [r7, #4]
 8006514:	e00e      	b.n	8006534 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	429a      	cmp	r2, r3
 800651c:	d308      	bcc.n	8006530 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800651e:	2301      	movs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	2204      	movs	r2, #4
 8006526:	4619      	mov	r1, r3
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 f908 	bl	800673e <prvWriteBytesToBuffer>
 800652e:	e001      	b.n	8006534 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8006530:	2300      	movs	r3, #0
 8006532:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d007      	beq.n	800654a <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	461a      	mov	r2, r3
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f8fc 	bl	800673e <prvWriteBytesToBuffer>
 8006546:	6138      	str	r0, [r7, #16]
 8006548:	e001      	b.n	800654e <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800654e:	693b      	ldr	r3, [r7, #16]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08e      	sub	sp, #56	@ 0x38
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800656a:	2300      	movs	r3, #0
 800656c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <xStreamBufferReceive+0x34>
	__asm volatile
 8006574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	61fb      	str	r3, [r7, #28]
}
 8006586:	bf00      	nop
 8006588:	bf00      	nop
 800658a:	e7fd      	b.n	8006588 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d10b      	bne.n	80065aa <xStreamBufferReceive+0x52>
	__asm volatile
 8006592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006596:	f383 8811 	msr	BASEPRI, r3
 800659a:	f3bf 8f6f 	isb	sy
 800659e:	f3bf 8f4f 	dsb	sy
 80065a2:	61bb      	str	r3, [r7, #24]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	7f1b      	ldrb	r3, [r3, #28]
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80065b6:	2304      	movs	r3, #4
 80065b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ba:	e001      	b.n	80065c0 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d035      	beq.n	8006632 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80065c6:	f002 f97f 	bl	80088c8 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80065ca:	6a38      	ldr	r0, [r7, #32]
 80065cc:	f000 f9a9 	bl	8006922 <prvBytesInBuffer>
 80065d0:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80065d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d817      	bhi.n	800660a <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80065da:	2000      	movs	r0, #0
 80065dc:	f001 fc72 	bl	8007ec4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80065e0:	6a3b      	ldr	r3, [r7, #32]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d00b      	beq.n	8006600 <xStreamBufferReceive+0xa8>
	__asm volatile
 80065e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	617b      	str	r3, [r7, #20]
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	e7fd      	b.n	80065fc <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8006600:	f001 f8ba 	bl	8007778 <xTaskGetCurrentTaskHandle>
 8006604:	4602      	mov	r2, r0
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800660a:	f002 f98f 	bl	800892c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800660e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	429a      	cmp	r2, r3
 8006614:	d811      	bhi.n	800663a <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2200      	movs	r2, #0
 800661a:	2100      	movs	r1, #0
 800661c:	2000      	movs	r0, #0
 800661e:	f001 fa49 	bl	8007ab4 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	2200      	movs	r2, #0
 8006626:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006628:	6a38      	ldr	r0, [r7, #32]
 800662a:	f000 f97a 	bl	8006922 <prvBytesInBuffer>
 800662e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006630:	e003      	b.n	800663a <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006632:	6a38      	ldr	r0, [r7, #32]
 8006634:	f000 f975 	bl	8006922 <prvBytesInBuffer>
 8006638:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800663a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800663c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663e:	429a      	cmp	r2, r3
 8006640:	d91d      	bls.n	800667e <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8006642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	6a38      	ldr	r0, [r7, #32]
 800664e:	f000 f81b 	bl	8006688 <prvReadMessageFromBuffer>
 8006652:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8006654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d011      	beq.n	800667e <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800665a:	f000 fc99 	bl	8006f90 <vTaskSuspendAll>
 800665e:	6a3b      	ldr	r3, [r7, #32]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d009      	beq.n	800667a <xStreamBufferReceive+0x122>
 8006666:	6a3b      	ldr	r3, [r7, #32]
 8006668:	6958      	ldr	r0, [r3, #20]
 800666a:	2300      	movs	r3, #0
 800666c:	2200      	movs	r2, #0
 800666e:	2100      	movs	r1, #0
 8006670:	f001 fa80 	bl	8007b74 <xTaskGenericNotify>
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2200      	movs	r2, #0
 8006678:	615a      	str	r2, [r3, #20]
 800667a:	f000 fc97 	bl	8006fac <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8006680:	4618      	mov	r0, r3
 8006682:	3730      	adds	r7, #48	@ 0x30
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
 8006694:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8006696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	d019      	beq.n	80066d0 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80066a2:	f107 0110 	add.w	r1, r7, #16
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066aa:	68f8      	ldr	r0, [r7, #12]
 80066ac:	f000 f8bc 	bl	8006828 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80066b4:	683a      	ldr	r2, [r7, #0]
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d907      	bls.n	80066d4 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	69ba      	ldr	r2, [r7, #24]
 80066c8:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80066ca:	2300      	movs	r3, #0
 80066cc:	61fb      	str	r3, [r7, #28]
 80066ce:	e001      	b.n	80066d4 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	69fa      	ldr	r2, [r7, #28]
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f8a4 	bl	8006828 <prvReadBytesFromBuffer>
 80066e0:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80066e2:	697b      	ldr	r3, [r7, #20]
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3720      	adds	r7, #32
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}

080066ec <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10b      	bne.n	8006716 <xStreamBufferIsEmpty+0x2a>
	__asm volatile
 80066fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006702:	f383 8811 	msr	BASEPRI, r3
 8006706:	f3bf 8f6f 	isb	sy
 800670a:	f3bf 8f4f 	dsb	sy
 800670e:	60bb      	str	r3, [r7, #8]
}
 8006710:	bf00      	nop
 8006712:	bf00      	nop
 8006714:	e7fd      	b.n	8006712 <xStreamBufferIsEmpty+0x26>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	429a      	cmp	r2, r3
 8006724:	d102      	bne.n	800672c <xStreamBufferIsEmpty+0x40>
	{
		xReturn = pdTRUE;
 8006726:	2301      	movs	r3, #1
 8006728:	617b      	str	r3, [r7, #20]
 800672a:	e001      	b.n	8006730 <xStreamBufferIsEmpty+0x44>
	}
	else
	{
		xReturn = pdFALSE;
 800672c:	2300      	movs	r3, #0
 800672e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006730:	697b      	ldr	r3, [r7, #20]
}
 8006732:	4618      	mov	r0, r3
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b08a      	sub	sp, #40	@ 0x28
 8006742:	af00      	add	r7, sp, #0
 8006744:	60f8      	str	r0, [r7, #12]
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d10b      	bne.n	8006768 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8006750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006754:	f383 8811 	msr	BASEPRI, r3
 8006758:	f3bf 8f6f 	isb	sy
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	61fb      	str	r3, [r7, #28]
}
 8006762:	bf00      	nop
 8006764:	bf00      	nop
 8006766:	e7fd      	b.n	8006764 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	689a      	ldr	r2, [r3, #8]
 8006772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4293      	cmp	r3, r2
 800677a:	bf28      	it	cs
 800677c:	4613      	movcs	r3, r2
 800677e:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8006780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	429a      	cmp	r2, r3
 800678c:	d90b      	bls.n	80067a6 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 800678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006792:	f383 8811 	msr	BASEPRI, r3
 8006796:	f3bf 8f6f 	isb	sy
 800679a:	f3bf 8f4f 	dsb	sy
 800679e:	61bb      	str	r3, [r7, #24]
}
 80067a0:	bf00      	nop
 80067a2:	bf00      	nop
 80067a4:	e7fd      	b.n	80067a2 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	699a      	ldr	r2, [r3, #24]
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ac:	4413      	add	r3, r2
 80067ae:	6a3a      	ldr	r2, [r7, #32]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f002 fc1c 	bl	8008ff0 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d91d      	bls.n	80067fc <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6a3b      	ldr	r3, [r7, #32]
 80067c4:	1ad2      	subs	r2, r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d90b      	bls.n	80067e6 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 80067ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	f3bf 8f6f 	isb	sy
 80067da:	f3bf 8f4f 	dsb	sy
 80067de:	617b      	str	r3, [r7, #20]
}
 80067e0:	bf00      	nop
 80067e2:	bf00      	nop
 80067e4:	e7fd      	b.n	80067e2 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6998      	ldr	r0, [r3, #24]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	18d1      	adds	r1, r2, r3
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	461a      	mov	r2, r3
 80067f8:	f002 fbfa 	bl	8008ff0 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80067fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800680a:	429a      	cmp	r2, r3
 800680c:	d304      	bcc.n	8006818 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681c:	605a      	str	r2, [r3, #4]

	return xCount;
 800681e:	687b      	ldr	r3, [r7, #4]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3728      	adds	r7, #40	@ 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b08a      	sub	sp, #40	@ 0x28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	4293      	cmp	r3, r2
 800683c:	bf28      	it	cs
 800683e:	4613      	movcs	r3, r2
 8006840:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8006842:	6a3b      	ldr	r3, [r7, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d067      	beq.n	8006918 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	689a      	ldr	r2, [r3, #8]
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	6a3a      	ldr	r2, [r7, #32]
 8006858:	4293      	cmp	r3, r2
 800685a:	bf28      	it	cs
 800685c:	4613      	movcs	r3, r2
 800685e:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8006860:	69fa      	ldr	r2, [r7, #28]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	d90b      	bls.n	8006880 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8006868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	61bb      	str	r3, [r7, #24]
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	e7fd      	b.n	800687c <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8006880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	d90b      	bls.n	80068a6 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	bf00      	nop
 80068a4:	e7fd      	b.n	80068a2 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	699a      	ldr	r2, [r3, #24]
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	4413      	add	r3, r2
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	4619      	mov	r1, r3
 80068b2:	68b8      	ldr	r0, [r7, #8]
 80068b4:	f002 fb9c 	bl	8008ff0 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d91a      	bls.n	80068f6 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d90b      	bls.n	80068e0 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	613b      	str	r3, [r7, #16]
}
 80068da:	bf00      	nop
 80068dc:	bf00      	nop
 80068de:	e7fd      	b.n	80068dc <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	18d0      	adds	r0, r2, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	6999      	ldr	r1, [r3, #24]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	1ad3      	subs	r3, r2, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	f002 fb7d 	bl	8008ff0 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80068f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	4413      	add	r3, r2
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	689b      	ldr	r3, [r3, #8]
 8006902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006904:	429a      	cmp	r2, r3
 8006906:	d304      	bcc.n	8006912 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006916:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8006918:	6a3b      	ldr	r3, [r7, #32]
}
 800691a:	4618      	mov	r0, r3
 800691c:	3728      	adds	r7, #40	@ 0x28
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}

08006922 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8006922:	b480      	push	{r7}
 8006924:	b085      	sub	sp, #20
 8006926:	af00      	add	r7, sp, #0
 8006928:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4413      	add	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	429a      	cmp	r2, r3
 8006948:	d304      	bcc.n	8006954 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8006954:	68fb      	ldr	r3, [r7, #12]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr

08006962 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b086      	sub	sp, #24
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	607a      	str	r2, [r7, #4]
 800696e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8006970:	2355      	movs	r3, #85	@ 0x55
 8006972:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	6979      	ldr	r1, [r7, #20]
 8006978:	68b8      	ldr	r0, [r7, #8]
 800697a:	f002 fab5 	bl	8008ee8 <memset>
 800697e:	4602      	mov	r2, r0
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4293      	cmp	r3, r2
 8006984:	d00b      	beq.n	800699e <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	613b      	str	r3, [r7, #16]
}
 8006998:	bf00      	nop
 800699a:	bf00      	nop
 800699c:	e7fd      	b.n	800699a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800699e:	2224      	movs	r2, #36	@ 0x24
 80069a0:	2100      	movs	r1, #0
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f002 faa0 	bl	8008ee8 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80069c0:	771a      	strb	r2, [r3, #28]
}
 80069c2:	bf00      	nop
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b08e      	sub	sp, #56	@ 0x38
 80069ce:	af04      	add	r7, sp, #16
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xTaskCreateStatic+0x2c>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	623b      	str	r3, [r7, #32]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10b      	bne.n	8006a14 <xTaskCreateStatic+0x4a>
	__asm volatile
 80069fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a00:	f383 8811 	msr	BASEPRI, r3
 8006a04:	f3bf 8f6f 	isb	sy
 8006a08:	f3bf 8f4f 	dsb	sy
 8006a0c:	61fb      	str	r3, [r7, #28]
}
 8006a0e:	bf00      	nop
 8006a10:	bf00      	nop
 8006a12:	e7fd      	b.n	8006a10 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a14:	23a8      	movs	r3, #168	@ 0xa8
 8006a16:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a1c:	d00b      	beq.n	8006a36 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	61bb      	str	r3, [r7, #24]
}
 8006a30:	bf00      	nop
 8006a32:	bf00      	nop
 8006a34:	e7fd      	b.n	8006a32 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a36:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d01e      	beq.n	8006a7c <xTaskCreateStatic+0xb2>
 8006a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01b      	beq.n	8006a7c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a46:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a4c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	2202      	movs	r2, #2
 8006a52:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a56:	2300      	movs	r3, #0
 8006a58:	9303      	str	r3, [sp, #12]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	9302      	str	r3, [sp, #8]
 8006a5e:	f107 0314 	add.w	r3, r7, #20
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f000 f850 	bl	8006b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a76:	f000 f8f5 	bl	8006c64 <prvAddNewTaskToReadyList>
 8006a7a:	e001      	b.n	8006a80 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a80:	697b      	ldr	r3, [r7, #20]
	}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3728      	adds	r7, #40	@ 0x28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b08c      	sub	sp, #48	@ 0x30
 8006a8e:	af04      	add	r7, sp, #16
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	603b      	str	r3, [r7, #0]
 8006a96:	4613      	mov	r3, r2
 8006a98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a9a:	88fb      	ldrh	r3, [r7, #6]
 8006a9c:	009b      	lsls	r3, r3, #2
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f002 f834 	bl	8008b0c <pvPortMalloc>
 8006aa4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00e      	beq.n	8006aca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aac:	20a8      	movs	r0, #168	@ 0xa8
 8006aae:	f002 f82d 	bl	8008b0c <pvPortMalloc>
 8006ab2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006aba:	69fb      	ldr	r3, [r7, #28]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006ac0:	e005      	b.n	8006ace <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006ac2:	6978      	ldr	r0, [r7, #20]
 8006ac4:	f002 f8f0 	bl	8008ca8 <vPortFree>
 8006ac8:	e001      	b.n	8006ace <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d017      	beq.n	8006b04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006adc:	88fa      	ldrh	r2, [r7, #6]
 8006ade:	2300      	movs	r3, #0
 8006ae0:	9303      	str	r3, [sp, #12]
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	9302      	str	r3, [sp, #8]
 8006ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ae8:	9301      	str	r3, [sp, #4]
 8006aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f80e 	bl	8006b14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006af8:	69f8      	ldr	r0, [r7, #28]
 8006afa:	f000 f8b3 	bl	8006c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006afe:	2301      	movs	r3, #1
 8006b00:	61bb      	str	r3, [r7, #24]
 8006b02:	e002      	b.n	8006b0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b0a:	69bb      	ldr	r3, [r7, #24]
	}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3720      	adds	r7, #32
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b088      	sub	sp, #32
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
 8006b20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	21a5      	movs	r1, #165	@ 0xa5
 8006b2e:	f002 f9db 	bl	8008ee8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	f023 0307 	bic.w	r3, r3, #7
 8006b4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	f003 0307 	and.w	r3, r3, #7
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00b      	beq.n	8006b6e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b5a:	f383 8811 	msr	BASEPRI, r3
 8006b5e:	f3bf 8f6f 	isb	sy
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	617b      	str	r3, [r7, #20]
}
 8006b68:	bf00      	nop
 8006b6a:	bf00      	nop
 8006b6c:	e7fd      	b.n	8006b6a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d01f      	beq.n	8006bb4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b74:	2300      	movs	r3, #0
 8006b76:	61fb      	str	r3, [r7, #28]
 8006b78:	e012      	b.n	8006ba0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	4413      	add	r3, r2
 8006b80:	7819      	ldrb	r1, [r3, #0]
 8006b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	4413      	add	r3, r2
 8006b88:	3334      	adds	r3, #52	@ 0x34
 8006b8a:	460a      	mov	r2, r1
 8006b8c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b8e:	68ba      	ldr	r2, [r7, #8]
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d006      	beq.n	8006ba8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	61fb      	str	r3, [r7, #28]
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	2b0f      	cmp	r3, #15
 8006ba4:	d9e9      	bls.n	8006b7a <prvInitialiseNewTask+0x66>
 8006ba6:	e000      	b.n	8006baa <prvInitialiseNewTask+0x96>
			{
				break;
 8006ba8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bb2:	e003      	b.n	8006bbc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	2b37      	cmp	r3, #55	@ 0x37
 8006bc0:	d901      	bls.n	8006bc6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bc2:	2337      	movs	r3, #55	@ 0x37
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bca:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe fc55 	bl	800548c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be4:	3318      	adds	r3, #24
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7fe fc50 	bl	800548c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c00:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	3354      	adds	r3, #84	@ 0x54
 8006c16:	224c      	movs	r2, #76	@ 0x4c
 8006c18:	2100      	movs	r1, #0
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f002 f964 	bl	8008ee8 <memset>
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	4a0d      	ldr	r2, [pc, #52]	@ (8006c58 <prvInitialiseNewTask+0x144>)
 8006c24:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	4a0c      	ldr	r2, [pc, #48]	@ (8006c5c <prvInitialiseNewTask+0x148>)
 8006c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8006c60 <prvInitialiseNewTask+0x14c>)
 8006c30:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	69b8      	ldr	r0, [r7, #24]
 8006c38:	f001 fd18 	bl	800866c <pxPortInitialiseStack>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c40:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4e:	bf00      	nop
 8006c50:	3720      	adds	r7, #32
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20003ec4 	.word	0x20003ec4
 8006c5c:	20003f2c 	.word	0x20003f2c
 8006c60:	20003f94 	.word	0x20003f94

08006c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c6c:	f001 fe2c 	bl	80088c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c70:	4b2d      	ldr	r3, [pc, #180]	@ (8006d28 <prvAddNewTaskToReadyList+0xc4>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	3301      	adds	r3, #1
 8006c76:	4a2c      	ldr	r2, [pc, #176]	@ (8006d28 <prvAddNewTaskToReadyList+0xc4>)
 8006c78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d2c <prvAddNewTaskToReadyList+0xc8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c82:	4a2a      	ldr	r2, [pc, #168]	@ (8006d2c <prvAddNewTaskToReadyList+0xc8>)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c88:	4b27      	ldr	r3, [pc, #156]	@ (8006d28 <prvAddNewTaskToReadyList+0xc4>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d110      	bne.n	8006cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c90:	f000 fcae 	bl	80075f0 <prvInitialiseTaskLists>
 8006c94:	e00d      	b.n	8006cb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c96:	4b26      	ldr	r3, [pc, #152]	@ (8006d30 <prvAddNewTaskToReadyList+0xcc>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d109      	bne.n	8006cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c9e:	4b23      	ldr	r3, [pc, #140]	@ (8006d2c <prvAddNewTaskToReadyList+0xc8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d802      	bhi.n	8006cb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cac:	4a1f      	ldr	r2, [pc, #124]	@ (8006d2c <prvAddNewTaskToReadyList+0xc8>)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cb2:	4b20      	ldr	r3, [pc, #128]	@ (8006d34 <prvAddNewTaskToReadyList+0xd0>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d34 <prvAddNewTaskToReadyList+0xd0>)
 8006cba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d34 <prvAddNewTaskToReadyList+0xd0>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d38 <prvAddNewTaskToReadyList+0xd4>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d903      	bls.n	8006cd8 <prvAddNewTaskToReadyList+0x74>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd4:	4a18      	ldr	r2, [pc, #96]	@ (8006d38 <prvAddNewTaskToReadyList+0xd4>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cdc:	4613      	mov	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4413      	add	r3, r2
 8006ce2:	009b      	lsls	r3, r3, #2
 8006ce4:	4a15      	ldr	r2, [pc, #84]	@ (8006d3c <prvAddNewTaskToReadyList+0xd8>)
 8006ce6:	441a      	add	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3304      	adds	r3, #4
 8006cec:	4619      	mov	r1, r3
 8006cee:	4610      	mov	r0, r2
 8006cf0:	f7fe fbd9 	bl	80054a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cf4:	f001 fe1a 	bl	800892c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8006d30 <prvAddNewTaskToReadyList+0xcc>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00e      	beq.n	8006d1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d00:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <prvAddNewTaskToReadyList+0xc8>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d207      	bcs.n	8006d1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <prvAddNewTaskToReadyList+0xdc>)
 8006d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d1e:	bf00      	nop
 8006d20:	3708      	adds	r7, #8
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000e64 	.word	0x20000e64
 8006d2c:	20000990 	.word	0x20000990
 8006d30:	20000e70 	.word	0x20000e70
 8006d34:	20000e80 	.word	0x20000e80
 8006d38:	20000e6c 	.word	0x20000e6c
 8006d3c:	20000994 	.word	0x20000994
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	@ 0x28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d10b      	bne.n	8006d70 <vTaskDelayUntil+0x2c>
	__asm volatile
 8006d58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d5c:	f383 8811 	msr	BASEPRI, r3
 8006d60:	f3bf 8f6f 	isb	sy
 8006d64:	f3bf 8f4f 	dsb	sy
 8006d68:	617b      	str	r3, [r7, #20]
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	e7fd      	b.n	8006d6c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <vTaskDelayUntil+0x4a>
	__asm volatile
 8006d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7a:	f383 8811 	msr	BASEPRI, r3
 8006d7e:	f3bf 8f6f 	isb	sy
 8006d82:	f3bf 8f4f 	dsb	sy
 8006d86:	613b      	str	r3, [r7, #16]
}
 8006d88:	bf00      	nop
 8006d8a:	bf00      	nop
 8006d8c:	e7fd      	b.n	8006d8a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8006e38 <vTaskDelayUntil+0xf4>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <vTaskDelayUntil+0x6a>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60fb      	str	r3, [r7, #12]
}
 8006da8:	bf00      	nop
 8006daa:	bf00      	nop
 8006dac:	e7fd      	b.n	8006daa <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006dae:	f000 f8ef 	bl	8006f90 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006db2:	4b22      	ldr	r3, [pc, #136]	@ (8006e3c <vTaskDelayUntil+0xf8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	683a      	ldr	r2, [r7, #0]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6a3a      	ldr	r2, [r7, #32]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d20b      	bcs.n	8006de4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	69fa      	ldr	r2, [r7, #28]
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d211      	bcs.n	8006dfa <vTaskDelayUntil+0xb6>
 8006dd6:	69fa      	ldr	r2, [r7, #28]
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d90d      	bls.n	8006dfa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006de2:	e00a      	b.n	8006dfa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d303      	bcc.n	8006df6 <vTaskDelayUntil+0xb2>
 8006dee:	69fa      	ldr	r2, [r7, #28]
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d901      	bls.n	8006dfa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006df6:	2301      	movs	r3, #1
 8006df8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d006      	beq.n	8006e14 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006e06:	69fa      	ldr	r2, [r7, #28]
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	1ad3      	subs	r3, r2, r3
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 f87e 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006e14:	f000 f8ca 	bl	8006fac <xTaskResumeAll>
 8006e18:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006e20:	4b07      	ldr	r3, [pc, #28]	@ (8006e40 <vTaskDelayUntil+0xfc>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e30:	bf00      	nop
 8006e32:	3728      	adds	r7, #40	@ 0x28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000e8c 	.word	0x20000e8c
 8006e3c:	20000e68 	.word	0x20000e68
 8006e40:	e000ed04 	.word	0xe000ed04

08006e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d018      	beq.n	8006e88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e56:	4b14      	ldr	r3, [pc, #80]	@ (8006ea8 <vTaskDelay+0x64>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00b      	beq.n	8006e76 <vTaskDelay+0x32>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	60bb      	str	r3, [r7, #8]
}
 8006e70:	bf00      	nop
 8006e72:	bf00      	nop
 8006e74:	e7fd      	b.n	8006e72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e76:	f000 f88b 	bl	8006f90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 f847 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e82:	f000 f893 	bl	8006fac <xTaskResumeAll>
 8006e86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006e8e:	4b07      	ldr	r3, [pc, #28]	@ (8006eac <vTaskDelay+0x68>)
 8006e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000e8c 	.word	0x20000e8c
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	@ 0x28
 8006eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	1d39      	adds	r1, r7, #4
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe fa8c 	bl	80053e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	9202      	str	r2, [sp, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	460a      	mov	r2, r1
 8006ede:	4924      	ldr	r1, [pc, #144]	@ (8006f70 <vTaskStartScheduler+0xc0>)
 8006ee0:	4824      	ldr	r0, [pc, #144]	@ (8006f74 <vTaskStartScheduler+0xc4>)
 8006ee2:	f7ff fd72 	bl	80069ca <xTaskCreateStatic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4a23      	ldr	r2, [pc, #140]	@ (8006f78 <vTaskStartScheduler+0xc8>)
 8006eea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006eec:	4b22      	ldr	r3, [pc, #136]	@ (8006f78 <vTaskStartScheduler+0xc8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e001      	b.n	8006efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f04:	f001 f858 	bl	8007fb8 <xTimerCreateTimerTask>
 8006f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d11b      	bne.n	8006f48 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
}
 8006f22:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f24:	4b15      	ldr	r3, [pc, #84]	@ (8006f7c <vTaskStartScheduler+0xcc>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3354      	adds	r3, #84	@ 0x54
 8006f2a:	4a15      	ldr	r2, [pc, #84]	@ (8006f80 <vTaskStartScheduler+0xd0>)
 8006f2c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f2e:	4b15      	ldr	r3, [pc, #84]	@ (8006f84 <vTaskStartScheduler+0xd4>)
 8006f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f36:	4b14      	ldr	r3, [pc, #80]	@ (8006f88 <vTaskStartScheduler+0xd8>)
 8006f38:	2201      	movs	r2, #1
 8006f3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f3c:	4b13      	ldr	r3, [pc, #76]	@ (8006f8c <vTaskStartScheduler+0xdc>)
 8006f3e:	2200      	movs	r2, #0
 8006f40:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f42:	f001 fc1d 	bl	8008780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f46:	e00f      	b.n	8006f68 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f4e:	d10b      	bne.n	8006f68 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60fb      	str	r3, [r7, #12]
}
 8006f62:	bf00      	nop
 8006f64:	bf00      	nop
 8006f66:	e7fd      	b.n	8006f64 <vTaskStartScheduler+0xb4>
}
 8006f68:	bf00      	nop
 8006f6a:	3718      	adds	r7, #24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	08009118 	.word	0x08009118
 8006f74:	080075c1 	.word	0x080075c1
 8006f78:	20000e88 	.word	0x20000e88
 8006f7c:	20000990 	.word	0x20000990
 8006f80:	20000018 	.word	0x20000018
 8006f84:	20000e84 	.word	0x20000e84
 8006f88:	20000e70 	.word	0x20000e70
 8006f8c:	20000e68 	.word	0x20000e68

08006f90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f94:	4b04      	ldr	r3, [pc, #16]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3301      	adds	r3, #1
 8006f9a:	4a03      	ldr	r2, [pc, #12]	@ (8006fa8 <vTaskSuspendAll+0x18>)
 8006f9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f9e:	bf00      	nop
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	20000e8c 	.word	0x20000e8c

08006fac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fba:	4b42      	ldr	r3, [pc, #264]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d10b      	bne.n	8006fda <xTaskResumeAll+0x2e>
	__asm volatile
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	603b      	str	r3, [r7, #0]
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	e7fd      	b.n	8006fd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fda:	f001 fc75 	bl	80088c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fde:	4b39      	ldr	r3, [pc, #228]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	4a37      	ldr	r2, [pc, #220]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fe6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fe8:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <xTaskResumeAll+0x118>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d162      	bne.n	80070b6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ff0:	4b35      	ldr	r3, [pc, #212]	@ (80070c8 <xTaskResumeAll+0x11c>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d05e      	beq.n	80070b6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ff8:	e02f      	b.n	800705a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ffa:	4b34      	ldr	r3, [pc, #208]	@ (80070cc <xTaskResumeAll+0x120>)
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	3318      	adds	r3, #24
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe faaa 	bl	8005560 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fe faa5 	bl	8005560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800701a:	4b2d      	ldr	r3, [pc, #180]	@ (80070d0 <xTaskResumeAll+0x124>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	429a      	cmp	r2, r3
 8007020:	d903      	bls.n	800702a <xTaskResumeAll+0x7e>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007026:	4a2a      	ldr	r2, [pc, #168]	@ (80070d0 <xTaskResumeAll+0x124>)
 8007028:	6013      	str	r3, [r2, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	4a27      	ldr	r2, [pc, #156]	@ (80070d4 <xTaskResumeAll+0x128>)
 8007038:	441a      	add	r2, r3
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe fa30 	bl	80054a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800704a:	4b23      	ldr	r3, [pc, #140]	@ (80070d8 <xTaskResumeAll+0x12c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	429a      	cmp	r2, r3
 8007052:	d302      	bcc.n	800705a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007054:	4b21      	ldr	r3, [pc, #132]	@ (80070dc <xTaskResumeAll+0x130>)
 8007056:	2201      	movs	r2, #1
 8007058:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800705a:	4b1c      	ldr	r3, [pc, #112]	@ (80070cc <xTaskResumeAll+0x120>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1cb      	bne.n	8006ffa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007068:	f000 fb66 	bl	8007738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800706c:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <xTaskResumeAll+0x134>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d010      	beq.n	800709a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007078:	f000 f846 	bl	8007108 <xTaskIncrementTick>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007082:	4b16      	ldr	r3, [pc, #88]	@ (80070dc <xTaskResumeAll+0x130>)
 8007084:	2201      	movs	r2, #1
 8007086:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	3b01      	subs	r3, #1
 800708c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d1f1      	bne.n	8007078 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007094:	4b12      	ldr	r3, [pc, #72]	@ (80070e0 <xTaskResumeAll+0x134>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800709a:	4b10      	ldr	r3, [pc, #64]	@ (80070dc <xTaskResumeAll+0x130>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d009      	beq.n	80070b6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070a6:	4b0f      	ldr	r3, [pc, #60]	@ (80070e4 <xTaskResumeAll+0x138>)
 80070a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070ac:	601a      	str	r2, [r3, #0]
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070b6:	f001 fc39 	bl	800892c <vPortExitCritical>

	return xAlreadyYielded;
 80070ba:	68bb      	ldr	r3, [r7, #8]
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3710      	adds	r7, #16
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	20000e8c 	.word	0x20000e8c
 80070c8:	20000e64 	.word	0x20000e64
 80070cc:	20000e24 	.word	0x20000e24
 80070d0:	20000e6c 	.word	0x20000e6c
 80070d4:	20000994 	.word	0x20000994
 80070d8:	20000990 	.word	0x20000990
 80070dc:	20000e78 	.word	0x20000e78
 80070e0:	20000e74 	.word	0x20000e74
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070ee:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <xTaskGetTickCount+0x1c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070f4:	687b      	ldr	r3, [r7, #4]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	370c      	adds	r7, #12
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
 8007102:	bf00      	nop
 8007104:	20000e68 	.word	0x20000e68

08007108 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800710e:	2300      	movs	r3, #0
 8007110:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007112:	4b4f      	ldr	r3, [pc, #316]	@ (8007250 <xTaskIncrementTick+0x148>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f040 8090 	bne.w	800723c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800711c:	4b4d      	ldr	r3, [pc, #308]	@ (8007254 <xTaskIncrementTick+0x14c>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	3301      	adds	r3, #1
 8007122:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007124:	4a4b      	ldr	r2, [pc, #300]	@ (8007254 <xTaskIncrementTick+0x14c>)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d121      	bne.n	8007174 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007130:	4b49      	ldr	r3, [pc, #292]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <xTaskIncrementTick+0x4a>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	603b      	str	r3, [r7, #0]
}
 800714c:	bf00      	nop
 800714e:	bf00      	nop
 8007150:	e7fd      	b.n	800714e <xTaskIncrementTick+0x46>
 8007152:	4b41      	ldr	r3, [pc, #260]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	60fb      	str	r3, [r7, #12]
 8007158:	4b40      	ldr	r3, [pc, #256]	@ (800725c <xTaskIncrementTick+0x154>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3e      	ldr	r2, [pc, #248]	@ (8007258 <xTaskIncrementTick+0x150>)
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	4a3e      	ldr	r2, [pc, #248]	@ (800725c <xTaskIncrementTick+0x154>)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	4b3e      	ldr	r3, [pc, #248]	@ (8007260 <xTaskIncrementTick+0x158>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3301      	adds	r3, #1
 800716c:	4a3c      	ldr	r2, [pc, #240]	@ (8007260 <xTaskIncrementTick+0x158>)
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	f000 fae2 	bl	8007738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007174:	4b3b      	ldr	r3, [pc, #236]	@ (8007264 <xTaskIncrementTick+0x15c>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	693a      	ldr	r2, [r7, #16]
 800717a:	429a      	cmp	r2, r3
 800717c:	d349      	bcc.n	8007212 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800717e:	4b36      	ldr	r3, [pc, #216]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d104      	bne.n	8007192 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007188:	4b36      	ldr	r3, [pc, #216]	@ (8007264 <xTaskIncrementTick+0x15c>)
 800718a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800718e:	601a      	str	r2, [r3, #0]
					break;
 8007190:	e03f      	b.n	8007212 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007192:	4b31      	ldr	r3, [pc, #196]	@ (8007258 <xTaskIncrementTick+0x150>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	d203      	bcs.n	80071b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007264 <xTaskIncrementTick+0x15c>)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071b0:	e02f      	b.n	8007212 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	3304      	adds	r3, #4
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7fe f9d2 	bl	8005560 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d004      	beq.n	80071ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	3318      	adds	r3, #24
 80071c8:	4618      	mov	r0, r3
 80071ca:	f7fe f9c9 	bl	8005560 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d2:	4b25      	ldr	r3, [pc, #148]	@ (8007268 <xTaskIncrementTick+0x160>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d903      	bls.n	80071e2 <xTaskIncrementTick+0xda>
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	4a22      	ldr	r2, [pc, #136]	@ (8007268 <xTaskIncrementTick+0x160>)
 80071e0:	6013      	str	r3, [r2, #0]
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4a1f      	ldr	r2, [pc, #124]	@ (800726c <xTaskIncrementTick+0x164>)
 80071f0:	441a      	add	r2, r3
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3304      	adds	r3, #4
 80071f6:	4619      	mov	r1, r3
 80071f8:	4610      	mov	r0, r2
 80071fa:	f7fe f954 	bl	80054a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007202:	4b1b      	ldr	r3, [pc, #108]	@ (8007270 <xTaskIncrementTick+0x168>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007208:	429a      	cmp	r2, r3
 800720a:	d3b8      	bcc.n	800717e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800720c:	2301      	movs	r3, #1
 800720e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007210:	e7b5      	b.n	800717e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007212:	4b17      	ldr	r3, [pc, #92]	@ (8007270 <xTaskIncrementTick+0x168>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007218:	4914      	ldr	r1, [pc, #80]	@ (800726c <xTaskIncrementTick+0x164>)
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	440b      	add	r3, r1
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b01      	cmp	r3, #1
 8007228:	d901      	bls.n	800722e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800722a:	2301      	movs	r3, #1
 800722c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800722e:	4b11      	ldr	r3, [pc, #68]	@ (8007274 <xTaskIncrementTick+0x16c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d007      	beq.n	8007246 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007236:	2301      	movs	r3, #1
 8007238:	617b      	str	r3, [r7, #20]
 800723a:	e004      	b.n	8007246 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800723c:	4b0e      	ldr	r3, [pc, #56]	@ (8007278 <xTaskIncrementTick+0x170>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3301      	adds	r3, #1
 8007242:	4a0d      	ldr	r2, [pc, #52]	@ (8007278 <xTaskIncrementTick+0x170>)
 8007244:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007246:	697b      	ldr	r3, [r7, #20]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3718      	adds	r7, #24
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}
 8007250:	20000e8c 	.word	0x20000e8c
 8007254:	20000e68 	.word	0x20000e68
 8007258:	20000e1c 	.word	0x20000e1c
 800725c:	20000e20 	.word	0x20000e20
 8007260:	20000e7c 	.word	0x20000e7c
 8007264:	20000e84 	.word	0x20000e84
 8007268:	20000e6c 	.word	0x20000e6c
 800726c:	20000994 	.word	0x20000994
 8007270:	20000990 	.word	0x20000990
 8007274:	20000e78 	.word	0x20000e78
 8007278:	20000e74 	.word	0x20000e74

0800727c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007282:	4b2b      	ldr	r3, [pc, #172]	@ (8007330 <vTaskSwitchContext+0xb4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800728a:	4b2a      	ldr	r3, [pc, #168]	@ (8007334 <vTaskSwitchContext+0xb8>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007290:	e047      	b.n	8007322 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007292:	4b28      	ldr	r3, [pc, #160]	@ (8007334 <vTaskSwitchContext+0xb8>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007298:	4b27      	ldr	r3, [pc, #156]	@ (8007338 <vTaskSwitchContext+0xbc>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e011      	b.n	80072c4 <vTaskSwitchContext+0x48>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10b      	bne.n	80072be <vTaskSwitchContext+0x42>
	__asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
}
 80072b8:	bf00      	nop
 80072ba:	bf00      	nop
 80072bc:	e7fd      	b.n	80072ba <vTaskSwitchContext+0x3e>
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3b01      	subs	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]
 80072c4:	491d      	ldr	r1, [pc, #116]	@ (800733c <vTaskSwitchContext+0xc0>)
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	440b      	add	r3, r1
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d0e3      	beq.n	80072a0 <vTaskSwitchContext+0x24>
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4a16      	ldr	r2, [pc, #88]	@ (800733c <vTaskSwitchContext+0xc0>)
 80072e4:	4413      	add	r3, r2
 80072e6:	60bb      	str	r3, [r7, #8]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	685a      	ldr	r2, [r3, #4]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	3308      	adds	r3, #8
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d104      	bne.n	8007308 <vTaskSwitchContext+0x8c>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	605a      	str	r2, [r3, #4]
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	4a0c      	ldr	r2, [pc, #48]	@ (8007340 <vTaskSwitchContext+0xc4>)
 8007310:	6013      	str	r3, [r2, #0]
 8007312:	4a09      	ldr	r2, [pc, #36]	@ (8007338 <vTaskSwitchContext+0xbc>)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007318:	4b09      	ldr	r3, [pc, #36]	@ (8007340 <vTaskSwitchContext+0xc4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3354      	adds	r3, #84	@ 0x54
 800731e:	4a09      	ldr	r2, [pc, #36]	@ (8007344 <vTaskSwitchContext+0xc8>)
 8007320:	6013      	str	r3, [r2, #0]
}
 8007322:	bf00      	nop
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	20000e8c 	.word	0x20000e8c
 8007334:	20000e78 	.word	0x20000e78
 8007338:	20000e6c 	.word	0x20000e6c
 800733c:	20000994 	.word	0x20000994
 8007340:	20000990 	.word	0x20000990
 8007344:	20000018 	.word	0x20000018

08007348 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b084      	sub	sp, #16
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d10b      	bne.n	8007370 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800735c:	f383 8811 	msr	BASEPRI, r3
 8007360:	f3bf 8f6f 	isb	sy
 8007364:	f3bf 8f4f 	dsb	sy
 8007368:	60fb      	str	r3, [r7, #12]
}
 800736a:	bf00      	nop
 800736c:	bf00      	nop
 800736e:	e7fd      	b.n	800736c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007370:	4b07      	ldr	r3, [pc, #28]	@ (8007390 <vTaskPlaceOnEventList+0x48>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3318      	adds	r3, #24
 8007376:	4619      	mov	r1, r3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7fe f8b8 	bl	80054ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800737e:	2101      	movs	r1, #1
 8007380:	6838      	ldr	r0, [r7, #0]
 8007382:	f000 fdc5 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
}
 8007386:	bf00      	nop
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	20000990 	.word	0x20000990

08007394 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10b      	bne.n	80073be <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	617b      	str	r3, [r7, #20]
}
 80073b8:	bf00      	nop
 80073ba:	bf00      	nop
 80073bc:	e7fd      	b.n	80073ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073be:	4b0a      	ldr	r3, [pc, #40]	@ (80073e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	3318      	adds	r3, #24
 80073c4:	4619      	mov	r1, r3
 80073c6:	68f8      	ldr	r0, [r7, #12]
 80073c8:	f7fe f86d 	bl	80054a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80073d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073d6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	68b8      	ldr	r0, [r7, #8]
 80073dc:	f000 fd98 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
	}
 80073e0:	bf00      	nop
 80073e2:	3718      	adds	r7, #24
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	20000990 	.word	0x20000990

080073ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60fb      	str	r3, [r7, #12]
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	e7fd      	b.n	8007416 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3318      	adds	r3, #24
 800741e:	4618      	mov	r0, r3
 8007420:	f7fe f89e 	bl	8005560 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007424:	4b1d      	ldr	r3, [pc, #116]	@ (800749c <xTaskRemoveFromEventList+0xb0>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d11d      	bne.n	8007468 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	3304      	adds	r3, #4
 8007430:	4618      	mov	r0, r3
 8007432:	f7fe f895 	bl	8005560 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743a:	4b19      	ldr	r3, [pc, #100]	@ (80074a0 <xTaskRemoveFromEventList+0xb4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d903      	bls.n	800744a <xTaskRemoveFromEventList+0x5e>
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007446:	4a16      	ldr	r2, [pc, #88]	@ (80074a0 <xTaskRemoveFromEventList+0xb4>)
 8007448:	6013      	str	r3, [r2, #0]
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4a13      	ldr	r2, [pc, #76]	@ (80074a4 <xTaskRemoveFromEventList+0xb8>)
 8007458:	441a      	add	r2, r3
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f7fe f820 	bl	80054a6 <vListInsertEnd>
 8007466:	e005      	b.n	8007474 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	3318      	adds	r3, #24
 800746c:	4619      	mov	r1, r3
 800746e:	480e      	ldr	r0, [pc, #56]	@ (80074a8 <xTaskRemoveFromEventList+0xbc>)
 8007470:	f7fe f819 	bl	80054a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007478:	4b0c      	ldr	r3, [pc, #48]	@ (80074ac <xTaskRemoveFromEventList+0xc0>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800747e:	429a      	cmp	r2, r3
 8007480:	d905      	bls.n	800748e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007482:	2301      	movs	r3, #1
 8007484:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007486:	4b0a      	ldr	r3, [pc, #40]	@ (80074b0 <xTaskRemoveFromEventList+0xc4>)
 8007488:	2201      	movs	r2, #1
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	e001      	b.n	8007492 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007492:	697b      	ldr	r3, [r7, #20]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20000e8c 	.word	0x20000e8c
 80074a0:	20000e6c 	.word	0x20000e6c
 80074a4:	20000994 	.word	0x20000994
 80074a8:	20000e24 	.word	0x20000e24
 80074ac:	20000990 	.word	0x20000990
 80074b0:	20000e78 	.word	0x20000e78

080074b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074bc:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <vTaskInternalSetTimeOutState+0x24>)
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074c4:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <vTaskInternalSetTimeOutState+0x28>)
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	605a      	str	r2, [r3, #4]
}
 80074cc:	bf00      	nop
 80074ce:	370c      	adds	r7, #12
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000e7c 	.word	0x20000e7c
 80074dc:	20000e68 	.word	0x20000e68

080074e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b088      	sub	sp, #32
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	613b      	str	r3, [r7, #16]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	e7fd      	b.n	8007522 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007526:	f001 f9cf 	bl	80088c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800752a:	4b1d      	ldr	r3, [pc, #116]	@ (80075a0 <xTaskCheckForTimeOut+0xc0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	69ba      	ldr	r2, [r7, #24]
 8007536:	1ad3      	subs	r3, r2, r3
 8007538:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007542:	d102      	bne.n	800754a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007544:	2300      	movs	r3, #0
 8007546:	61fb      	str	r3, [r7, #28]
 8007548:	e023      	b.n	8007592 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b15      	ldr	r3, [pc, #84]	@ (80075a4 <xTaskCheckForTimeOut+0xc4>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	429a      	cmp	r2, r3
 8007554:	d007      	beq.n	8007566 <xTaskCheckForTimeOut+0x86>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	69ba      	ldr	r2, [r7, #24]
 800755c:	429a      	cmp	r2, r3
 800755e:	d302      	bcc.n	8007566 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007560:	2301      	movs	r3, #1
 8007562:	61fb      	str	r3, [r7, #28]
 8007564:	e015      	b.n	8007592 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	429a      	cmp	r2, r3
 800756e:	d20b      	bcs.n	8007588 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1ad2      	subs	r2, r2, r3
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f7ff ff99 	bl	80074b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007582:	2300      	movs	r3, #0
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e004      	b.n	8007592 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800758e:	2301      	movs	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007592:	f001 f9cb 	bl	800892c <vPortExitCritical>

	return xReturn;
 8007596:	69fb      	ldr	r3, [r7, #28]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3720      	adds	r7, #32
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000e68 	.word	0x20000e68
 80075a4:	20000e7c 	.word	0x20000e7c

080075a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075a8:	b480      	push	{r7}
 80075aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075ac:	4b03      	ldr	r3, [pc, #12]	@ (80075bc <vTaskMissedYield+0x14>)
 80075ae:	2201      	movs	r2, #1
 80075b0:	601a      	str	r2, [r3, #0]
}
 80075b2:	bf00      	nop
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	20000e78 	.word	0x20000e78

080075c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b082      	sub	sp, #8
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075c8:	f000 f852 	bl	8007670 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075cc:	4b06      	ldr	r3, [pc, #24]	@ (80075e8 <prvIdleTask+0x28>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	d9f9      	bls.n	80075c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075d4:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <prvIdleTask+0x2c>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075e4:	e7f0      	b.n	80075c8 <prvIdleTask+0x8>
 80075e6:	bf00      	nop
 80075e8:	20000994 	.word	0x20000994
 80075ec:	e000ed04 	.word	0xe000ed04

080075f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075f6:	2300      	movs	r3, #0
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	e00c      	b.n	8007616 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4613      	mov	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	4a12      	ldr	r2, [pc, #72]	@ (8007650 <prvInitialiseTaskLists+0x60>)
 8007608:	4413      	add	r3, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd ff1e 	bl	800544c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3301      	adds	r3, #1
 8007614:	607b      	str	r3, [r7, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b37      	cmp	r3, #55	@ 0x37
 800761a:	d9ef      	bls.n	80075fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800761c:	480d      	ldr	r0, [pc, #52]	@ (8007654 <prvInitialiseTaskLists+0x64>)
 800761e:	f7fd ff15 	bl	800544c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007622:	480d      	ldr	r0, [pc, #52]	@ (8007658 <prvInitialiseTaskLists+0x68>)
 8007624:	f7fd ff12 	bl	800544c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007628:	480c      	ldr	r0, [pc, #48]	@ (800765c <prvInitialiseTaskLists+0x6c>)
 800762a:	f7fd ff0f 	bl	800544c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800762e:	480c      	ldr	r0, [pc, #48]	@ (8007660 <prvInitialiseTaskLists+0x70>)
 8007630:	f7fd ff0c 	bl	800544c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007634:	480b      	ldr	r0, [pc, #44]	@ (8007664 <prvInitialiseTaskLists+0x74>)
 8007636:	f7fd ff09 	bl	800544c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800763a:	4b0b      	ldr	r3, [pc, #44]	@ (8007668 <prvInitialiseTaskLists+0x78>)
 800763c:	4a05      	ldr	r2, [pc, #20]	@ (8007654 <prvInitialiseTaskLists+0x64>)
 800763e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007640:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <prvInitialiseTaskLists+0x7c>)
 8007642:	4a05      	ldr	r2, [pc, #20]	@ (8007658 <prvInitialiseTaskLists+0x68>)
 8007644:	601a      	str	r2, [r3, #0]
}
 8007646:	bf00      	nop
 8007648:	3708      	adds	r7, #8
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000994 	.word	0x20000994
 8007654:	20000df4 	.word	0x20000df4
 8007658:	20000e08 	.word	0x20000e08
 800765c:	20000e24 	.word	0x20000e24
 8007660:	20000e38 	.word	0x20000e38
 8007664:	20000e50 	.word	0x20000e50
 8007668:	20000e1c 	.word	0x20000e1c
 800766c:	20000e20 	.word	0x20000e20

08007670 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007676:	e019      	b.n	80076ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007678:	f001 f926 	bl	80088c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767c:	4b10      	ldr	r3, [pc, #64]	@ (80076c0 <prvCheckTasksWaitingTermination+0x50>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	4618      	mov	r0, r3
 800768a:	f7fd ff69 	bl	8005560 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800768e:	4b0d      	ldr	r3, [pc, #52]	@ (80076c4 <prvCheckTasksWaitingTermination+0x54>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	3b01      	subs	r3, #1
 8007694:	4a0b      	ldr	r2, [pc, #44]	@ (80076c4 <prvCheckTasksWaitingTermination+0x54>)
 8007696:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007698:	4b0b      	ldr	r3, [pc, #44]	@ (80076c8 <prvCheckTasksWaitingTermination+0x58>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	3b01      	subs	r3, #1
 800769e:	4a0a      	ldr	r2, [pc, #40]	@ (80076c8 <prvCheckTasksWaitingTermination+0x58>)
 80076a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076a2:	f001 f943 	bl	800892c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f810 	bl	80076cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076ac:	4b06      	ldr	r3, [pc, #24]	@ (80076c8 <prvCheckTasksWaitingTermination+0x58>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d1e1      	bne.n	8007678 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80076b4:	bf00      	nop
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000e38 	.word	0x20000e38
 80076c4:	20000e64 	.word	0x20000e64
 80076c8:	20000e4c 	.word	0x20000e4c

080076cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	3354      	adds	r3, #84	@ 0x54
 80076d8:	4618      	mov	r0, r3
 80076da:	f001 fc0d 	bl	8008ef8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d108      	bne.n	80076fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 fadb 	bl	8008ca8 <vPortFree>
				vPortFree( pxTCB );
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fad8 	bl	8008ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076f8:	e019      	b.n	800772e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007700:	2b01      	cmp	r3, #1
 8007702:	d103      	bne.n	800770c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f001 facf 	bl	8008ca8 <vPortFree>
	}
 800770a:	e010      	b.n	800772e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007712:	2b02      	cmp	r3, #2
 8007714:	d00b      	beq.n	800772e <prvDeleteTCB+0x62>
	__asm volatile
 8007716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800771a:	f383 8811 	msr	BASEPRI, r3
 800771e:	f3bf 8f6f 	isb	sy
 8007722:	f3bf 8f4f 	dsb	sy
 8007726:	60fb      	str	r3, [r7, #12]
}
 8007728:	bf00      	nop
 800772a:	bf00      	nop
 800772c:	e7fd      	b.n	800772a <prvDeleteTCB+0x5e>
	}
 800772e:	bf00      	nop
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800773e:	4b0c      	ldr	r3, [pc, #48]	@ (8007770 <prvResetNextTaskUnblockTime+0x38>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d104      	bne.n	8007752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007748:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <prvResetNextTaskUnblockTime+0x3c>)
 800774a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800774e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007750:	e008      	b.n	8007764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007752:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <prvResetNextTaskUnblockTime+0x38>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	4a04      	ldr	r2, [pc, #16]	@ (8007774 <prvResetNextTaskUnblockTime+0x3c>)
 8007762:	6013      	str	r3, [r2, #0]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	20000e1c 	.word	0x20000e1c
 8007774:	20000e84 	.word	0x20000e84

08007778 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800777e:	4b05      	ldr	r3, [pc, #20]	@ (8007794 <xTaskGetCurrentTaskHandle+0x1c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007784:	687b      	ldr	r3, [r7, #4]
	}
 8007786:	4618      	mov	r0, r3
 8007788:	370c      	adds	r7, #12
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	20000990 	.word	0x20000990

08007798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800779e:	4b0b      	ldr	r3, [pc, #44]	@ (80077cc <xTaskGetSchedulerState+0x34>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d102      	bne.n	80077ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077a6:	2301      	movs	r3, #1
 80077a8:	607b      	str	r3, [r7, #4]
 80077aa:	e008      	b.n	80077be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077ac:	4b08      	ldr	r3, [pc, #32]	@ (80077d0 <xTaskGetSchedulerState+0x38>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80077b4:	2302      	movs	r3, #2
 80077b6:	607b      	str	r3, [r7, #4]
 80077b8:	e001      	b.n	80077be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80077be:	687b      	ldr	r3, [r7, #4]
	}
 80077c0:	4618      	mov	r0, r3
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr
 80077cc:	20000e70 	.word	0x20000e70
 80077d0:	20000e8c 	.word	0x20000e8c

080077d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d051      	beq.n	800788e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ee:	4b2a      	ldr	r3, [pc, #168]	@ (8007898 <xTaskPriorityInherit+0xc4>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d241      	bcs.n	800787c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	db06      	blt.n	800780e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007800:	4b25      	ldr	r3, [pc, #148]	@ (8007898 <xTaskPriorityInherit+0xc4>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007806:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	6959      	ldr	r1, [r3, #20]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007816:	4613      	mov	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4413      	add	r3, r2
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	4a1f      	ldr	r2, [pc, #124]	@ (800789c <xTaskPriorityInherit+0xc8>)
 8007820:	4413      	add	r3, r2
 8007822:	4299      	cmp	r1, r3
 8007824:	d122      	bne.n	800786c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	3304      	adds	r3, #4
 800782a:	4618      	mov	r0, r3
 800782c:	f7fd fe98 	bl	8005560 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007830:	4b19      	ldr	r3, [pc, #100]	@ (8007898 <xTaskPriorityInherit+0xc4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783e:	4b18      	ldr	r3, [pc, #96]	@ (80078a0 <xTaskPriorityInherit+0xcc>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d903      	bls.n	800784e <xTaskPriorityInherit+0x7a>
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800784a:	4a15      	ldr	r2, [pc, #84]	@ (80078a0 <xTaskPriorityInherit+0xcc>)
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007852:	4613      	mov	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4413      	add	r3, r2
 8007858:	009b      	lsls	r3, r3, #2
 800785a:	4a10      	ldr	r2, [pc, #64]	@ (800789c <xTaskPriorityInherit+0xc8>)
 800785c:	441a      	add	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	3304      	adds	r3, #4
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f7fd fe1e 	bl	80054a6 <vListInsertEnd>
 800786a:	e004      	b.n	8007876 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800786c:	4b0a      	ldr	r3, [pc, #40]	@ (8007898 <xTaskPriorityInherit+0xc4>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007876:	2301      	movs	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
 800787a:	e008      	b.n	800788e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007880:	4b05      	ldr	r3, [pc, #20]	@ (8007898 <xTaskPriorityInherit+0xc4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007886:	429a      	cmp	r2, r3
 8007888:	d201      	bcs.n	800788e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800788a:	2301      	movs	r3, #1
 800788c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800788e:	68fb      	ldr	r3, [r7, #12]
	}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}
 8007898:	20000990 	.word	0x20000990
 800789c:	20000994 	.word	0x20000994
 80078a0:	20000e6c 	.word	0x20000e6c

080078a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d058      	beq.n	800796c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007978 <xTaskPriorityDisinherit+0xd4>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	693a      	ldr	r2, [r7, #16]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d00b      	beq.n	80078dc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c8:	f383 8811 	msr	BASEPRI, r3
 80078cc:	f3bf 8f6f 	isb	sy
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	60fb      	str	r3, [r7, #12]
}
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
 80078da:	e7fd      	b.n	80078d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d10b      	bne.n	80078fc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	60bb      	str	r3, [r7, #8]
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	e7fd      	b.n	80078f8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007900:	1e5a      	subs	r2, r3, #1
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800790e:	429a      	cmp	r2, r3
 8007910:	d02c      	beq.n	800796c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007916:	2b00      	cmp	r3, #0
 8007918:	d128      	bne.n	800796c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	3304      	adds	r3, #4
 800791e:	4618      	mov	r0, r3
 8007920:	f7fd fe1e 	bl	8005560 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007924:	693b      	ldr	r3, [r7, #16]
 8007926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007930:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793c:	4b0f      	ldr	r3, [pc, #60]	@ (800797c <xTaskPriorityDisinherit+0xd8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	429a      	cmp	r2, r3
 8007942:	d903      	bls.n	800794c <xTaskPriorityDisinherit+0xa8>
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007948:	4a0c      	ldr	r2, [pc, #48]	@ (800797c <xTaskPriorityDisinherit+0xd8>)
 800794a:	6013      	str	r3, [r2, #0]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007950:	4613      	mov	r3, r2
 8007952:	009b      	lsls	r3, r3, #2
 8007954:	4413      	add	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4a09      	ldr	r2, [pc, #36]	@ (8007980 <xTaskPriorityDisinherit+0xdc>)
 800795a:	441a      	add	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f7fd fd9f 	bl	80054a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007968:	2301      	movs	r3, #1
 800796a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800796c:	697b      	ldr	r3, [r7, #20]
	}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20000990 	.word	0x20000990
 800797c:	20000e6c 	.word	0x20000e6c
 8007980:	20000994 	.word	0x20000994

08007984 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007992:	2301      	movs	r3, #1
 8007994:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d06c      	beq.n	8007a76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10b      	bne.n	80079bc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	60fb      	str	r3, [r7, #12]
}
 80079b6:	bf00      	nop
 80079b8:	bf00      	nop
 80079ba:	e7fd      	b.n	80079b8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079c0:	683a      	ldr	r2, [r7, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d902      	bls.n	80079cc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	61fb      	str	r3, [r7, #28]
 80079ca:	e002      	b.n	80079d2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80079cc:	69bb      	ldr	r3, [r7, #24]
 80079ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079d0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d6:	69fa      	ldr	r2, [r7, #28]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d04c      	beq.n	8007a76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079e0:	697a      	ldr	r2, [r7, #20]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d147      	bne.n	8007a76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80079e6:	4b26      	ldr	r3, [pc, #152]	@ (8007a80 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d10b      	bne.n	8007a08 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	60bb      	str	r3, [r7, #8]
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	e7fd      	b.n	8007a04 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a0c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	db04      	blt.n	8007a26 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	6959      	ldr	r1, [r3, #20]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	4a13      	ldr	r2, [pc, #76]	@ (8007a84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a36:	4413      	add	r3, r2
 8007a38:	4299      	cmp	r1, r3
 8007a3a:	d11c      	bne.n	8007a76 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	3304      	adds	r3, #4
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fd fd8d 	bl	8005560 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4a:	4b0f      	ldr	r3, [pc, #60]	@ (8007a88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d903      	bls.n	8007a5a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	4a0c      	ldr	r2, [pc, #48]	@ (8007a88 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4a07      	ldr	r2, [pc, #28]	@ (8007a84 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a68:	441a      	add	r2, r3
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f7fd fd18 	bl	80054a6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a76:	bf00      	nop
 8007a78:	3720      	adds	r7, #32
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop
 8007a80:	20000990 	.word	0x20000990
 8007a84:	20000994 	.word	0x20000994
 8007a88:	20000e6c 	.word	0x20000e6c

08007a8c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007a90:	4b07      	ldr	r3, [pc, #28]	@ (8007ab0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d004      	beq.n	8007aa2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007a9e:	3201      	adds	r2, #1
 8007aa0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007aa2:	4b03      	ldr	r3, [pc, #12]	@ (8007ab0 <pvTaskIncrementMutexHeldCount+0x24>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
	}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	20000990 	.word	0x20000990

08007ab4 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007ac2:	f000 ff01 	bl	80088c8 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007ac6:	4b29      	ldr	r3, [pc, #164]	@ (8007b6c <xTaskNotifyWait+0xb8>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b02      	cmp	r3, #2
 8007ad2:	d01c      	beq.n	8007b0e <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007ad4:	4b25      	ldr	r3, [pc, #148]	@ (8007b6c <xTaskNotifyWait+0xb8>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	43d2      	mvns	r2, r2
 8007ae0:	400a      	ands	r2, r1
 8007ae2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007ae6:	4b21      	ldr	r3, [pc, #132]	@ (8007b6c <xTaskNotifyWait+0xb8>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2201      	movs	r2, #1
 8007aec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d00b      	beq.n	8007b0e <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007af6:	2101      	movs	r1, #1
 8007af8:	6838      	ldr	r0, [r7, #0]
 8007afa:	f000 fa09 	bl	8007f10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007afe:	4b1c      	ldr	r3, [pc, #112]	@ (8007b70 <xTaskNotifyWait+0xbc>)
 8007b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b0e:	f000 ff0d 	bl	800892c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b12:	f000 fed9 	bl	80088c8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007b1c:	4b13      	ldr	r3, [pc, #76]	@ (8007b6c <xTaskNotifyWait+0xb8>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b28:	4b10      	ldr	r3, [pc, #64]	@ (8007b6c <xTaskNotifyWait+0xb8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d002      	beq.n	8007b3c <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007b36:	2300      	movs	r3, #0
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	e00a      	b.n	8007b52 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <xTaskNotifyWait+0xb8>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	43d2      	mvns	r2, r2
 8007b48:	400a      	ands	r2, r1
 8007b4a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b52:	4b06      	ldr	r3, [pc, #24]	@ (8007b6c <xTaskNotifyWait+0xb8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8007b5c:	f000 fee6 	bl	800892c <vPortExitCritical>

		return xReturn;
 8007b60:	697b      	ldr	r3, [r7, #20]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3718      	adds	r7, #24
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20000990 	.word	0x20000990
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b08a      	sub	sp, #40	@ 0x28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	603b      	str	r3, [r7, #0]
 8007b80:	4613      	mov	r3, r2
 8007b82:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007b84:	2301      	movs	r3, #1
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10b      	bne.n	8007ba6 <xTaskGenericNotify+0x32>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	61bb      	str	r3, [r7, #24]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007baa:	f000 fe8d 	bl	80088c8 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d004      	beq.n	8007bbe <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007bc4:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007bc6:	6a3b      	ldr	r3, [r7, #32]
 8007bc8:	2202      	movs	r2, #2
 8007bca:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007bce:	79fb      	ldrb	r3, [r7, #7]
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d82e      	bhi.n	8007c32 <xTaskGenericNotify+0xbe>
 8007bd4:	a201      	add	r2, pc, #4	@ (adr r2, 8007bdc <xTaskGenericNotify+0x68>)
 8007bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bda:	bf00      	nop
 8007bdc:	08007c57 	.word	0x08007c57
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007c03 	.word	0x08007c03
 8007be8:	08007c13 	.word	0x08007c13
 8007bec:	08007c1d 	.word	0x08007c1d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	431a      	orrs	r2, r3
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007c00:	e02c      	b.n	8007c5c <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c08:	1c5a      	adds	r2, r3, #1
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007c10:	e024      	b.n	8007c5c <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007c1a:	e01f      	b.n	8007c5c <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007c1c:	7ffb      	ldrb	r3, [r7, #31]
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d004      	beq.n	8007c2c <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	68ba      	ldr	r2, [r7, #8]
 8007c26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007c2a:	e017      	b.n	8007c5c <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007c30:	e014      	b.n	8007c5c <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007c32:	6a3b      	ldr	r3, [r7, #32]
 8007c34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c3c:	d00d      	beq.n	8007c5a <xTaskGenericNotify+0xe6>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	617b      	str	r3, [r7, #20]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <xTaskGenericNotify+0xde>
					break;
 8007c56:	bf00      	nop
 8007c58:	e000      	b.n	8007c5c <xTaskGenericNotify+0xe8>

					break;
 8007c5a:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007c5c:	7ffb      	ldrb	r3, [r7, #31]
 8007c5e:	2b01      	cmp	r3, #1
 8007c60:	d13b      	bne.n	8007cda <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fd fc7a 	bl	8005560 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007c6c:	6a3b      	ldr	r3, [r7, #32]
 8007c6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c70:	4b1d      	ldr	r3, [pc, #116]	@ (8007ce8 <xTaskGenericNotify+0x174>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d903      	bls.n	8007c80 <xTaskGenericNotify+0x10c>
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce8 <xTaskGenericNotify+0x174>)
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	4a17      	ldr	r2, [pc, #92]	@ (8007cec <xTaskGenericNotify+0x178>)
 8007c8e:	441a      	add	r2, r3
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	3304      	adds	r3, #4
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7fd fc05 	bl	80054a6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007c9c:	6a3b      	ldr	r3, [r7, #32]
 8007c9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <xTaskGenericNotify+0x148>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	613b      	str	r3, [r7, #16]
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	e7fd      	b.n	8007cb8 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf0 <xTaskGenericNotify+0x17c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d907      	bls.n	8007cda <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007cca:	4b0a      	ldr	r3, [pc, #40]	@ (8007cf4 <xTaskGenericNotify+0x180>)
 8007ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cd0:	601a      	str	r2, [r3, #0]
 8007cd2:	f3bf 8f4f 	dsb	sy
 8007cd6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007cda:	f000 fe27 	bl	800892c <vPortExitCritical>

		return xReturn;
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3728      	adds	r7, #40	@ 0x28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	20000e6c 	.word	0x20000e6c
 8007cec:	20000994 	.word	0x20000994
 8007cf0:	20000990 	.word	0x20000990
 8007cf4:	e000ed04 	.word	0xe000ed04

08007cf8 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08e      	sub	sp, #56	@ 0x38
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	603b      	str	r3, [r7, #0]
 8007d04:	4613      	mov	r3, r2
 8007d06:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10b      	bne.n	8007d2a <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	e7fd      	b.n	8007d26 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d2a:	f000 fead 	bl	8008a88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007d32:	f3ef 8211 	mrs	r2, BASEPRI
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	623a      	str	r2, [r7, #32]
 8007d48:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007d4a:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d004      	beq.n	8007d5e <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d56:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d60:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007d64:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	2b04      	cmp	r3, #4
 8007d74:	d82e      	bhi.n	8007dd4 <xTaskGenericNotifyFromISR+0xdc>
 8007d76:	a201      	add	r2, pc, #4	@ (adr r2, 8007d7c <xTaskGenericNotifyFromISR+0x84>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007df9 	.word	0x08007df9
 8007d80:	08007d91 	.word	0x08007d91
 8007d84:	08007da3 	.word	0x08007da3
 8007d88:	08007db3 	.word	0x08007db3
 8007d8c:	08007dbd 	.word	0x08007dbd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007d90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d92:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007da0:	e02d      	b.n	8007dfe <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007db0:	e025      	b.n	8007dfe <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007dba:	e020      	b.n	8007dfe <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007dbc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d004      	beq.n	8007dce <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc6:	68ba      	ldr	r2, [r7, #8]
 8007dc8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007dcc:	e017      	b.n	8007dfe <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007dd2:	e014      	b.n	8007dfe <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dde:	d00d      	beq.n	8007dfc <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8007de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007de4:	f383 8811 	msr	BASEPRI, r3
 8007de8:	f3bf 8f6f 	isb	sy
 8007dec:	f3bf 8f4f 	dsb	sy
 8007df0:	61bb      	str	r3, [r7, #24]
}
 8007df2:	bf00      	nop
 8007df4:	bf00      	nop
 8007df6:	e7fd      	b.n	8007df4 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <xTaskGenericNotifyFromISR+0x106>
					break;
 8007dfc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d147      	bne.n	8007e96 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	617b      	str	r3, [r7, #20]
}
 8007e20:	bf00      	nop
 8007e22:	bf00      	nop
 8007e24:	e7fd      	b.n	8007e22 <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e26:	4b21      	ldr	r3, [pc, #132]	@ (8007eac <xTaskGenericNotifyFromISR+0x1b4>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d11d      	bne.n	8007e6a <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e30:	3304      	adds	r3, #4
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fb94 	bl	8005560 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8007eb0 <xTaskGenericNotifyFromISR+0x1b8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d903      	bls.n	8007e4c <xTaskGenericNotifyFromISR+0x154>
 8007e44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	4a19      	ldr	r2, [pc, #100]	@ (8007eb0 <xTaskGenericNotifyFromISR+0x1b8>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e50:	4613      	mov	r3, r2
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	4a16      	ldr	r2, [pc, #88]	@ (8007eb4 <xTaskGenericNotifyFromISR+0x1bc>)
 8007e5a:	441a      	add	r2, r3
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e5e:	3304      	adds	r3, #4
 8007e60:	4619      	mov	r1, r3
 8007e62:	4610      	mov	r0, r2
 8007e64:	f7fd fb1f 	bl	80054a6 <vListInsertEnd>
 8007e68:	e005      	b.n	8007e76 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e6c:	3318      	adds	r3, #24
 8007e6e:	4619      	mov	r1, r3
 8007e70:	4811      	ldr	r0, [pc, #68]	@ (8007eb8 <xTaskGenericNotifyFromISR+0x1c0>)
 8007e72:	f7fd fb18 	bl	80054a6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7a:	4b10      	ldr	r3, [pc, #64]	@ (8007ebc <xTaskGenericNotifyFromISR+0x1c4>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d908      	bls.n	8007e96 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007e84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007e90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ec0 <xTaskGenericNotifyFromISR+0x1c8>)
 8007e92:	2201      	movs	r2, #1
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f383 8811 	msr	BASEPRI, r3
}
 8007ea0:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3738      	adds	r7, #56	@ 0x38
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	20000e8c 	.word	0x20000e8c
 8007eb0:	20000e6c 	.word	0x20000e6c
 8007eb4:	20000994 	.word	0x20000994
 8007eb8:	20000e24 	.word	0x20000e24
 8007ebc:	20000990 	.word	0x20000990
 8007ec0:	20000e78 	.word	0x20000e78

08007ec4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <xTaskNotifyStateClear+0x14>
 8007ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f0c <xTaskNotifyStateClear+0x48>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	e000      	b.n	8007eda <xTaskNotifyStateClear+0x16>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8007edc:	f000 fcf4 	bl	80088c8 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d106      	bne.n	8007efa <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	60fb      	str	r3, [r7, #12]
 8007ef8:	e001      	b.n	8007efe <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8007efe:	f000 fd15 	bl	800892c <vPortExitCritical>

		return xReturn;
 8007f02:	68fb      	ldr	r3, [r7, #12]
	}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	20000990 	.word	0x20000990

08007f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f1a:	4b21      	ldr	r3, [pc, #132]	@ (8007fa0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f20:	4b20      	ldr	r3, [pc, #128]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fd fb1a 	bl	8005560 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f32:	d10a      	bne.n	8007f4a <prvAddCurrentTaskToDelayedList+0x3a>
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d007      	beq.n	8007f4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4819      	ldr	r0, [pc, #100]	@ (8007fa8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f44:	f7fd faaf 	bl	80054a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f48:	e026      	b.n	8007f98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4413      	add	r3, r2
 8007f50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f52:	4b14      	ldr	r3, [pc, #80]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68ba      	ldr	r2, [r7, #8]
 8007f58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d209      	bcs.n	8007f76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f62:	4b12      	ldr	r3, [pc, #72]	@ (8007fac <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3304      	adds	r3, #4
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	4610      	mov	r0, r2
 8007f70:	f7fd fabd 	bl	80054ee <vListInsert>
}
 8007f74:	e010      	b.n	8007f98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f76:	4b0e      	ldr	r3, [pc, #56]	@ (8007fb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	3304      	adds	r3, #4
 8007f80:	4619      	mov	r1, r3
 8007f82:	4610      	mov	r0, r2
 8007f84:	f7fd fab3 	bl	80054ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f88:	4b0a      	ldr	r3, [pc, #40]	@ (8007fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d202      	bcs.n	8007f98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f92:	4a08      	ldr	r2, [pc, #32]	@ (8007fb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	6013      	str	r3, [r2, #0]
}
 8007f98:	bf00      	nop
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20000e68 	.word	0x20000e68
 8007fa4:	20000990 	.word	0x20000990
 8007fa8:	20000e50 	.word	0x20000e50
 8007fac:	20000e20 	.word	0x20000e20
 8007fb0:	20000e1c 	.word	0x20000e1c
 8007fb4:	20000e84 	.word	0x20000e84

08007fb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08a      	sub	sp, #40	@ 0x28
 8007fbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fc2:	f000 fb13 	bl	80085ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800803c <xTimerCreateTimerTask+0x84>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d021      	beq.n	8008012 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fd6:	1d3a      	adds	r2, r7, #4
 8007fd8:	f107 0108 	add.w	r1, r7, #8
 8007fdc:	f107 030c 	add.w	r3, r7, #12
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7fd fa19 	bl	8005418 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	9202      	str	r2, [sp, #8]
 8007fee:	9301      	str	r3, [sp, #4]
 8007ff0:	2302      	movs	r3, #2
 8007ff2:	9300      	str	r3, [sp, #0]
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	460a      	mov	r2, r1
 8007ff8:	4911      	ldr	r1, [pc, #68]	@ (8008040 <xTimerCreateTimerTask+0x88>)
 8007ffa:	4812      	ldr	r0, [pc, #72]	@ (8008044 <xTimerCreateTimerTask+0x8c>)
 8007ffc:	f7fe fce5 	bl	80069ca <xTaskCreateStatic>
 8008000:	4603      	mov	r3, r0
 8008002:	4a11      	ldr	r2, [pc, #68]	@ (8008048 <xTimerCreateTimerTask+0x90>)
 8008004:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008006:	4b10      	ldr	r3, [pc, #64]	@ (8008048 <xTimerCreateTimerTask+0x90>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800800e:	2301      	movs	r3, #1
 8008010:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008012:	697b      	ldr	r3, [r7, #20]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d10b      	bne.n	8008030 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800801c:	f383 8811 	msr	BASEPRI, r3
 8008020:	f3bf 8f6f 	isb	sy
 8008024:	f3bf 8f4f 	dsb	sy
 8008028:	613b      	str	r3, [r7, #16]
}
 800802a:	bf00      	nop
 800802c:	bf00      	nop
 800802e:	e7fd      	b.n	800802c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008030:	697b      	ldr	r3, [r7, #20]
}
 8008032:	4618      	mov	r0, r3
 8008034:	3718      	adds	r7, #24
 8008036:	46bd      	mov	sp, r7
 8008038:	bd80      	pop	{r7, pc}
 800803a:	bf00      	nop
 800803c:	20000ec0 	.word	0x20000ec0
 8008040:	08009120 	.word	0x08009120
 8008044:	08008185 	.word	0x08008185
 8008048:	20000ec4 	.word	0x20000ec4

0800804c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08a      	sub	sp, #40	@ 0x28
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800805a:	2300      	movs	r3, #0
 800805c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10b      	bne.n	800807c <xTimerGenericCommand+0x30>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	623b      	str	r3, [r7, #32]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800807c:	4b19      	ldr	r3, [pc, #100]	@ (80080e4 <xTimerGenericCommand+0x98>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d02a      	beq.n	80080da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	2b05      	cmp	r3, #5
 8008094:	dc18      	bgt.n	80080c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008096:	f7ff fb7f 	bl	8007798 <xTaskGetSchedulerState>
 800809a:	4603      	mov	r3, r0
 800809c:	2b02      	cmp	r3, #2
 800809e:	d109      	bne.n	80080b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080a0:	4b10      	ldr	r3, [pc, #64]	@ (80080e4 <xTimerGenericCommand+0x98>)
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	f107 0110 	add.w	r1, r7, #16
 80080a8:	2300      	movs	r3, #0
 80080aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ac:	f7fd fbfa 	bl	80058a4 <xQueueGenericSend>
 80080b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80080b2:	e012      	b.n	80080da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080b4:	4b0b      	ldr	r3, [pc, #44]	@ (80080e4 <xTimerGenericCommand+0x98>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	f107 0110 	add.w	r1, r7, #16
 80080bc:	2300      	movs	r3, #0
 80080be:	2200      	movs	r2, #0
 80080c0:	f7fd fbf0 	bl	80058a4 <xQueueGenericSend>
 80080c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80080c6:	e008      	b.n	80080da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080c8:	4b06      	ldr	r3, [pc, #24]	@ (80080e4 <xTimerGenericCommand+0x98>)
 80080ca:	6818      	ldr	r0, [r3, #0]
 80080cc:	f107 0110 	add.w	r1, r7, #16
 80080d0:	2300      	movs	r3, #0
 80080d2:	683a      	ldr	r2, [r7, #0]
 80080d4:	f7fd fce8 	bl	8005aa8 <xQueueGenericSendFromISR>
 80080d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3728      	adds	r7, #40	@ 0x28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	20000ec0 	.word	0x20000ec0

080080e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b088      	sub	sp, #32
 80080ec:	af02      	add	r7, sp, #8
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f2:	4b23      	ldr	r3, [pc, #140]	@ (8008180 <prvProcessExpiredTimer+0x98>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	68db      	ldr	r3, [r3, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	3304      	adds	r3, #4
 8008100:	4618      	mov	r0, r3
 8008102:	f7fd fa2d 	bl	8005560 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800810c:	f003 0304 	and.w	r3, r3, #4
 8008110:	2b00      	cmp	r3, #0
 8008112:	d023      	beq.n	800815c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	699a      	ldr	r2, [r3, #24]
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	18d1      	adds	r1, r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	6978      	ldr	r0, [r7, #20]
 8008122:	f000 f8d5 	bl	80082d0 <prvInsertTimerInActiveList>
 8008126:	4603      	mov	r3, r0
 8008128:	2b00      	cmp	r3, #0
 800812a:	d020      	beq.n	800816e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800812c:	2300      	movs	r3, #0
 800812e:	9300      	str	r3, [sp, #0]
 8008130:	2300      	movs	r3, #0
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	2100      	movs	r1, #0
 8008136:	6978      	ldr	r0, [r7, #20]
 8008138:	f7ff ff88 	bl	800804c <xTimerGenericCommand>
 800813c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d114      	bne.n	800816e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008148:	f383 8811 	msr	BASEPRI, r3
 800814c:	f3bf 8f6f 	isb	sy
 8008150:	f3bf 8f4f 	dsb	sy
 8008154:	60fb      	str	r3, [r7, #12]
}
 8008156:	bf00      	nop
 8008158:	bf00      	nop
 800815a:	e7fd      	b.n	8008158 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008162:	f023 0301 	bic.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	6978      	ldr	r0, [r7, #20]
 8008174:	4798      	blx	r3
}
 8008176:	bf00      	nop
 8008178:	3718      	adds	r7, #24
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	20000eb8 	.word	0x20000eb8

08008184 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b084      	sub	sp, #16
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800818c:	f107 0308 	add.w	r3, r7, #8
 8008190:	4618      	mov	r0, r3
 8008192:	f000 f859 	bl	8008248 <prvGetNextExpireTime>
 8008196:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	4619      	mov	r1, r3
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f805 	bl	80081ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081a2:	f000 f8d7 	bl	8008354 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a6:	bf00      	nop
 80081a8:	e7f0      	b.n	800818c <prvTimerTask+0x8>
	...

080081ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081b6:	f7fe feeb 	bl	8006f90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081ba:	f107 0308 	add.w	r3, r7, #8
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 f866 	bl	8008290 <prvSampleTimeNow>
 80081c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d130      	bne.n	800822e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <prvProcessTimerOrBlockTask+0x3c>
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d806      	bhi.n	80081e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081da:	f7fe fee7 	bl	8006fac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081de:	68f9      	ldr	r1, [r7, #12]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7ff ff81 	bl	80080e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081e6:	e024      	b.n	8008232 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d008      	beq.n	8008200 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081ee:	4b13      	ldr	r3, [pc, #76]	@ (800823c <prvProcessTimerOrBlockTask+0x90>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d101      	bne.n	80081fc <prvProcessTimerOrBlockTask+0x50>
 80081f8:	2301      	movs	r3, #1
 80081fa:	e000      	b.n	80081fe <prvProcessTimerOrBlockTask+0x52>
 80081fc:	2300      	movs	r3, #0
 80081fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008200:	4b0f      	ldr	r3, [pc, #60]	@ (8008240 <prvProcessTimerOrBlockTask+0x94>)
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	f7fe f82d 	bl	800626c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008212:	f7fe fecb 	bl	8006fac <xTaskResumeAll>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10a      	bne.n	8008232 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800821c:	4b09      	ldr	r3, [pc, #36]	@ (8008244 <prvProcessTimerOrBlockTask+0x98>)
 800821e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	f3bf 8f6f 	isb	sy
}
 800822c:	e001      	b.n	8008232 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800822e:	f7fe febd 	bl	8006fac <xTaskResumeAll>
}
 8008232:	bf00      	nop
 8008234:	3710      	adds	r7, #16
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20000ebc 	.word	0x20000ebc
 8008240:	20000ec0 	.word	0x20000ec0
 8008244:	e000ed04 	.word	0xe000ed04

08008248 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008250:	4b0e      	ldr	r3, [pc, #56]	@ (800828c <prvGetNextExpireTime+0x44>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <prvGetNextExpireTime+0x16>
 800825a:	2201      	movs	r2, #1
 800825c:	e000      	b.n	8008260 <prvGetNextExpireTime+0x18>
 800825e:	2200      	movs	r2, #0
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d105      	bne.n	8008278 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800826c:	4b07      	ldr	r3, [pc, #28]	@ (800828c <prvGetNextExpireTime+0x44>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	e001      	b.n	800827c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800827c:	68fb      	ldr	r3, [r7, #12]
}
 800827e:	4618      	mov	r0, r3
 8008280:	3714      	adds	r7, #20
 8008282:	46bd      	mov	sp, r7
 8008284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	20000eb8 	.word	0x20000eb8

08008290 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b084      	sub	sp, #16
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008298:	f7fe ff26 	bl	80070e8 <xTaskGetTickCount>
 800829c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800829e:	4b0b      	ldr	r3, [pc, #44]	@ (80082cc <prvSampleTimeNow+0x3c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	429a      	cmp	r2, r3
 80082a6:	d205      	bcs.n	80082b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082a8:	f000 f93a 	bl	8008520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	601a      	str	r2, [r3, #0]
 80082b2:	e002      	b.n	80082ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082ba:	4a04      	ldr	r2, [pc, #16]	@ (80082cc <prvSampleTimeNow+0x3c>)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082c0:	68fb      	ldr	r3, [r7, #12]
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3710      	adds	r7, #16
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	20000ec8 	.word	0x20000ec8

080082d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	60f8      	str	r0, [r7, #12]
 80082d8:	60b9      	str	r1, [r7, #8]
 80082da:	607a      	str	r2, [r7, #4]
 80082dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082de:	2300      	movs	r3, #0
 80082e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	68ba      	ldr	r2, [r7, #8]
 80082e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	68fa      	ldr	r2, [r7, #12]
 80082ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d812      	bhi.n	800831c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	1ad2      	subs	r2, r2, r3
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	699b      	ldr	r3, [r3, #24]
 8008300:	429a      	cmp	r2, r3
 8008302:	d302      	bcc.n	800830a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e01b      	b.n	8008342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800830a:	4b10      	ldr	r3, [pc, #64]	@ (800834c <prvInsertTimerInActiveList+0x7c>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3304      	adds	r3, #4
 8008312:	4619      	mov	r1, r3
 8008314:	4610      	mov	r0, r2
 8008316:	f7fd f8ea 	bl	80054ee <vListInsert>
 800831a:	e012      	b.n	8008342 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	429a      	cmp	r2, r3
 8008322:	d206      	bcs.n	8008332 <prvInsertTimerInActiveList+0x62>
 8008324:	68ba      	ldr	r2, [r7, #8]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d302      	bcc.n	8008332 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	617b      	str	r3, [r7, #20]
 8008330:	e007      	b.n	8008342 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008332:	4b07      	ldr	r3, [pc, #28]	@ (8008350 <prvInsertTimerInActiveList+0x80>)
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3304      	adds	r3, #4
 800833a:	4619      	mov	r1, r3
 800833c:	4610      	mov	r0, r2
 800833e:	f7fd f8d6 	bl	80054ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008342:	697b      	ldr	r3, [r7, #20]
}
 8008344:	4618      	mov	r0, r3
 8008346:	3718      	adds	r7, #24
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}
 800834c:	20000ebc 	.word	0x20000ebc
 8008350:	20000eb8 	.word	0x20000eb8

08008354 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08e      	sub	sp, #56	@ 0x38
 8008358:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800835a:	e0ce      	b.n	80084fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2b00      	cmp	r3, #0
 8008360:	da19      	bge.n	8008396 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008362:	1d3b      	adds	r3, r7, #4
 8008364:	3304      	adds	r3, #4
 8008366:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10b      	bne.n	8008386 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800836e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008372:	f383 8811 	msr	BASEPRI, r3
 8008376:	f3bf 8f6f 	isb	sy
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	61fb      	str	r3, [r7, #28]
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	e7fd      	b.n	8008382 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800838c:	6850      	ldr	r0, [r2, #4]
 800838e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008390:	6892      	ldr	r2, [r2, #8]
 8008392:	4611      	mov	r1, r2
 8008394:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f2c0 80ae 	blt.w	80084fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	695b      	ldr	r3, [r3, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d004      	beq.n	80083b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	3304      	adds	r3, #4
 80083ae:	4618      	mov	r0, r3
 80083b0:	f7fd f8d6 	bl	8005560 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80083b4:	463b      	mov	r3, r7
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7ff ff6a 	bl	8008290 <prvSampleTimeNow>
 80083bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2b09      	cmp	r3, #9
 80083c2:	f200 8097 	bhi.w	80084f4 <prvProcessReceivedCommands+0x1a0>
 80083c6:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <prvProcessReceivedCommands+0x78>)
 80083c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083cc:	080083f5 	.word	0x080083f5
 80083d0:	080083f5 	.word	0x080083f5
 80083d4:	080083f5 	.word	0x080083f5
 80083d8:	0800846b 	.word	0x0800846b
 80083dc:	0800847f 	.word	0x0800847f
 80083e0:	080084cb 	.word	0x080084cb
 80083e4:	080083f5 	.word	0x080083f5
 80083e8:	080083f5 	.word	0x080083f5
 80083ec:	0800846b 	.word	0x0800846b
 80083f0:	0800847f 	.word	0x0800847f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083fa:	f043 0301 	orr.w	r3, r3, #1
 80083fe:	b2da      	uxtb	r2, r3
 8008400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008402:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840a:	699b      	ldr	r3, [r3, #24]
 800840c:	18d1      	adds	r1, r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008412:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008414:	f7ff ff5c 	bl	80082d0 <prvInsertTimerInActiveList>
 8008418:	4603      	mov	r3, r0
 800841a:	2b00      	cmp	r3, #0
 800841c:	d06c      	beq.n	80084f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008424:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800842c:	f003 0304 	and.w	r3, r3, #4
 8008430:	2b00      	cmp	r3, #0
 8008432:	d061      	beq.n	80084f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	441a      	add	r2, r3
 800843c:	2300      	movs	r3, #0
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	2300      	movs	r3, #0
 8008442:	2100      	movs	r1, #0
 8008444:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008446:	f7ff fe01 	bl	800804c <xTimerGenericCommand>
 800844a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d152      	bne.n	80084f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	61bb      	str	r3, [r7, #24]
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop
 8008468:	e7fd      	b.n	8008466 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008470:	f023 0301 	bic.w	r3, r3, #1
 8008474:	b2da      	uxtb	r2, r3
 8008476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008478:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800847c:	e03d      	b.n	80084fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	b2da      	uxtb	r2, r3
 800848a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008490:	68ba      	ldr	r2, [r7, #8]
 8008492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008494:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d10b      	bne.n	80084b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	617b      	str	r3, [r7, #20]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	699a      	ldr	r2, [r3, #24]
 80084ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084bc:	18d1      	adds	r1, r2, r3
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084c4:	f7ff ff04 	bl	80082d0 <prvInsertTimerInActiveList>
					break;
 80084c8:	e017      	b.n	80084fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d103      	bne.n	80084e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80084d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084da:	f000 fbe5 	bl	8008ca8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084de:	e00c      	b.n	80084fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084e6:	f023 0301 	bic.w	r3, r3, #1
 80084ea:	b2da      	uxtb	r2, r3
 80084ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084f2:	e002      	b.n	80084fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80084f4:	bf00      	nop
 80084f6:	e000      	b.n	80084fa <prvProcessReceivedCommands+0x1a6>
					break;
 80084f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084fa:	4b08      	ldr	r3, [pc, #32]	@ (800851c <prvProcessReceivedCommands+0x1c8>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	1d39      	adds	r1, r7, #4
 8008500:	2200      	movs	r2, #0
 8008502:	4618      	mov	r0, r3
 8008504:	f7fd fb6e 	bl	8005be4 <xQueueReceive>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	f47f af26 	bne.w	800835c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008510:	bf00      	nop
 8008512:	bf00      	nop
 8008514:	3730      	adds	r7, #48	@ 0x30
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20000ec0 	.word	0x20000ec0

08008520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b088      	sub	sp, #32
 8008524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008526:	e049      	b.n	80085bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008528:	4b2e      	ldr	r3, [pc, #184]	@ (80085e4 <prvSwitchTimerLists+0xc4>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008532:	4b2c      	ldr	r3, [pc, #176]	@ (80085e4 <prvSwitchTimerLists+0xc4>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	3304      	adds	r3, #4
 8008540:	4618      	mov	r0, r3
 8008542:	f7fd f80d 	bl	8005560 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d02f      	beq.n	80085bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	699b      	ldr	r3, [r3, #24]
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	4413      	add	r3, r2
 8008564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008566:	68ba      	ldr	r2, [r7, #8]
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	429a      	cmp	r2, r3
 800856c:	d90e      	bls.n	800858c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800857a:	4b1a      	ldr	r3, [pc, #104]	@ (80085e4 <prvSwitchTimerLists+0xc4>)
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3304      	adds	r3, #4
 8008582:	4619      	mov	r1, r3
 8008584:	4610      	mov	r0, r2
 8008586:	f7fc ffb2 	bl	80054ee <vListInsert>
 800858a:	e017      	b.n	80085bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800858c:	2300      	movs	r3, #0
 800858e:	9300      	str	r3, [sp, #0]
 8008590:	2300      	movs	r3, #0
 8008592:	693a      	ldr	r2, [r7, #16]
 8008594:	2100      	movs	r1, #0
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f7ff fd58 	bl	800804c <xTimerGenericCommand>
 800859c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10b      	bne.n	80085bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	603b      	str	r3, [r7, #0]
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085bc:	4b09      	ldr	r3, [pc, #36]	@ (80085e4 <prvSwitchTimerLists+0xc4>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d1b0      	bne.n	8008528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085c6:	4b07      	ldr	r3, [pc, #28]	@ (80085e4 <prvSwitchTimerLists+0xc4>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085cc:	4b06      	ldr	r3, [pc, #24]	@ (80085e8 <prvSwitchTimerLists+0xc8>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a04      	ldr	r2, [pc, #16]	@ (80085e4 <prvSwitchTimerLists+0xc4>)
 80085d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085d4:	4a04      	ldr	r2, [pc, #16]	@ (80085e8 <prvSwitchTimerLists+0xc8>)
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	6013      	str	r3, [r2, #0]
}
 80085da:	bf00      	nop
 80085dc:	3718      	adds	r7, #24
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	20000eb8 	.word	0x20000eb8
 80085e8:	20000ebc 	.word	0x20000ebc

080085ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085f2:	f000 f969 	bl	80088c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085f6:	4b15      	ldr	r3, [pc, #84]	@ (800864c <prvCheckForValidListAndQueue+0x60>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d120      	bne.n	8008640 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085fe:	4814      	ldr	r0, [pc, #80]	@ (8008650 <prvCheckForValidListAndQueue+0x64>)
 8008600:	f7fc ff24 	bl	800544c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008604:	4813      	ldr	r0, [pc, #76]	@ (8008654 <prvCheckForValidListAndQueue+0x68>)
 8008606:	f7fc ff21 	bl	800544c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800860a:	4b13      	ldr	r3, [pc, #76]	@ (8008658 <prvCheckForValidListAndQueue+0x6c>)
 800860c:	4a10      	ldr	r2, [pc, #64]	@ (8008650 <prvCheckForValidListAndQueue+0x64>)
 800860e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008610:	4b12      	ldr	r3, [pc, #72]	@ (800865c <prvCheckForValidListAndQueue+0x70>)
 8008612:	4a10      	ldr	r2, [pc, #64]	@ (8008654 <prvCheckForValidListAndQueue+0x68>)
 8008614:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008616:	2300      	movs	r3, #0
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4b11      	ldr	r3, [pc, #68]	@ (8008660 <prvCheckForValidListAndQueue+0x74>)
 800861c:	4a11      	ldr	r2, [pc, #68]	@ (8008664 <prvCheckForValidListAndQueue+0x78>)
 800861e:	2110      	movs	r1, #16
 8008620:	200a      	movs	r0, #10
 8008622:	f7fd f831 	bl	8005688 <xQueueGenericCreateStatic>
 8008626:	4603      	mov	r3, r0
 8008628:	4a08      	ldr	r2, [pc, #32]	@ (800864c <prvCheckForValidListAndQueue+0x60>)
 800862a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800862c:	4b07      	ldr	r3, [pc, #28]	@ (800864c <prvCheckForValidListAndQueue+0x60>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d005      	beq.n	8008640 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008634:	4b05      	ldr	r3, [pc, #20]	@ (800864c <prvCheckForValidListAndQueue+0x60>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	490b      	ldr	r1, [pc, #44]	@ (8008668 <prvCheckForValidListAndQueue+0x7c>)
 800863a:	4618      	mov	r0, r3
 800863c:	f7fd fdec 	bl	8006218 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008640:	f000 f974 	bl	800892c <vPortExitCritical>
}
 8008644:	bf00      	nop
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000ec0 	.word	0x20000ec0
 8008650:	20000e90 	.word	0x20000e90
 8008654:	20000ea4 	.word	0x20000ea4
 8008658:	20000eb8 	.word	0x20000eb8
 800865c:	20000ebc 	.word	0x20000ebc
 8008660:	20000f6c 	.word	0x20000f6c
 8008664:	20000ecc 	.word	0x20000ecc
 8008668:	08009128 	.word	0x08009128

0800866c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800866c:	b480      	push	{r7}
 800866e:	b085      	sub	sp, #20
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	3b04      	subs	r3, #4
 800867c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008684:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3b04      	subs	r3, #4
 800868a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	3b04      	subs	r3, #4
 800869a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800869c:	4a0c      	ldr	r2, [pc, #48]	@ (80086d0 <pxPortInitialiseStack+0x64>)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3b14      	subs	r3, #20
 80086a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3b04      	subs	r3, #4
 80086b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f06f 0202 	mvn.w	r2, #2
 80086ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3b20      	subs	r3, #32
 80086c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80086c2:	68fb      	ldr	r3, [r7, #12]
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3714      	adds	r7, #20
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr
 80086d0:	080086d5 	.word	0x080086d5

080086d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80086d4:	b480      	push	{r7}
 80086d6:	b085      	sub	sp, #20
 80086d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80086da:	2300      	movs	r3, #0
 80086dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086de:	4b13      	ldr	r3, [pc, #76]	@ (800872c <prvTaskExitError+0x58>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80086e6:	d00b      	beq.n	8008700 <prvTaskExitError+0x2c>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	60fb      	str	r3, [r7, #12]
}
 80086fa:	bf00      	nop
 80086fc:	bf00      	nop
 80086fe:	e7fd      	b.n	80086fc <prvTaskExitError+0x28>
	__asm volatile
 8008700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008704:	f383 8811 	msr	BASEPRI, r3
 8008708:	f3bf 8f6f 	isb	sy
 800870c:	f3bf 8f4f 	dsb	sy
 8008710:	60bb      	str	r3, [r7, #8]
}
 8008712:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008714:	bf00      	nop
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0fc      	beq.n	8008716 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	3714      	adds	r7, #20
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
 800872a:	bf00      	nop
 800872c:	20000014 	.word	0x20000014

08008730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008730:	4b07      	ldr	r3, [pc, #28]	@ (8008750 <pxCurrentTCBConst2>)
 8008732:	6819      	ldr	r1, [r3, #0]
 8008734:	6808      	ldr	r0, [r1, #0]
 8008736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873a:	f380 8809 	msr	PSP, r0
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f04f 0000 	mov.w	r0, #0
 8008746:	f380 8811 	msr	BASEPRI, r0
 800874a:	4770      	bx	lr
 800874c:	f3af 8000 	nop.w

08008750 <pxCurrentTCBConst2>:
 8008750:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008754:	bf00      	nop
 8008756:	bf00      	nop

08008758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008758:	4808      	ldr	r0, [pc, #32]	@ (800877c <prvPortStartFirstTask+0x24>)
 800875a:	6800      	ldr	r0, [r0, #0]
 800875c:	6800      	ldr	r0, [r0, #0]
 800875e:	f380 8808 	msr	MSP, r0
 8008762:	f04f 0000 	mov.w	r0, #0
 8008766:	f380 8814 	msr	CONTROL, r0
 800876a:	b662      	cpsie	i
 800876c:	b661      	cpsie	f
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	df00      	svc	0
 8008778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800877a:	bf00      	nop
 800877c:	e000ed08 	.word	0xe000ed08

08008780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b086      	sub	sp, #24
 8008784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008786:	4b47      	ldr	r3, [pc, #284]	@ (80088a4 <xPortStartScheduler+0x124>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a47      	ldr	r2, [pc, #284]	@ (80088a8 <xPortStartScheduler+0x128>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d10b      	bne.n	80087a8 <xPortStartScheduler+0x28>
	__asm volatile
 8008790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008794:	f383 8811 	msr	BASEPRI, r3
 8008798:	f3bf 8f6f 	isb	sy
 800879c:	f3bf 8f4f 	dsb	sy
 80087a0:	613b      	str	r3, [r7, #16]
}
 80087a2:	bf00      	nop
 80087a4:	bf00      	nop
 80087a6:	e7fd      	b.n	80087a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087a8:	4b3e      	ldr	r3, [pc, #248]	@ (80088a4 <xPortStartScheduler+0x124>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a3f      	ldr	r2, [pc, #252]	@ (80088ac <xPortStartScheduler+0x12c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d10b      	bne.n	80087ca <xPortStartScheduler+0x4a>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	60fb      	str	r3, [r7, #12]
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop
 80087c8:	e7fd      	b.n	80087c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80087ca:	4b39      	ldr	r3, [pc, #228]	@ (80088b0 <xPortStartScheduler+0x130>)
 80087cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	22ff      	movs	r2, #255	@ 0xff
 80087da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	781b      	ldrb	r3, [r3, #0]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	b2db      	uxtb	r3, r3
 80087e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80087ec:	b2da      	uxtb	r2, r3
 80087ee:	4b31      	ldr	r3, [pc, #196]	@ (80088b4 <xPortStartScheduler+0x134>)
 80087f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087f2:	4b31      	ldr	r3, [pc, #196]	@ (80088b8 <xPortStartScheduler+0x138>)
 80087f4:	2207      	movs	r2, #7
 80087f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087f8:	e009      	b.n	800880e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80087fa:	4b2f      	ldr	r3, [pc, #188]	@ (80088b8 <xPortStartScheduler+0x138>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3b01      	subs	r3, #1
 8008800:	4a2d      	ldr	r2, [pc, #180]	@ (80088b8 <xPortStartScheduler+0x138>)
 8008802:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008804:	78fb      	ldrb	r3, [r7, #3]
 8008806:	b2db      	uxtb	r3, r3
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	b2db      	uxtb	r3, r3
 800880c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	b2db      	uxtb	r3, r3
 8008812:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008816:	2b80      	cmp	r3, #128	@ 0x80
 8008818:	d0ef      	beq.n	80087fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800881a:	4b27      	ldr	r3, [pc, #156]	@ (80088b8 <xPortStartScheduler+0x138>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f1c3 0307 	rsb	r3, r3, #7
 8008822:	2b04      	cmp	r3, #4
 8008824:	d00b      	beq.n	800883e <xPortStartScheduler+0xbe>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	60bb      	str	r3, [r7, #8]
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800883e:	4b1e      	ldr	r3, [pc, #120]	@ (80088b8 <xPortStartScheduler+0x138>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	021b      	lsls	r3, r3, #8
 8008844:	4a1c      	ldr	r2, [pc, #112]	@ (80088b8 <xPortStartScheduler+0x138>)
 8008846:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008848:	4b1b      	ldr	r3, [pc, #108]	@ (80088b8 <xPortStartScheduler+0x138>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008850:	4a19      	ldr	r2, [pc, #100]	@ (80088b8 <xPortStartScheduler+0x138>)
 8008852:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	b2da      	uxtb	r2, r3
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800885c:	4b17      	ldr	r3, [pc, #92]	@ (80088bc <xPortStartScheduler+0x13c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a16      	ldr	r2, [pc, #88]	@ (80088bc <xPortStartScheduler+0x13c>)
 8008862:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008866:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008868:	4b14      	ldr	r3, [pc, #80]	@ (80088bc <xPortStartScheduler+0x13c>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a13      	ldr	r2, [pc, #76]	@ (80088bc <xPortStartScheduler+0x13c>)
 800886e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008872:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008874:	f000 f8da 	bl	8008a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008878:	4b11      	ldr	r3, [pc, #68]	@ (80088c0 <xPortStartScheduler+0x140>)
 800887a:	2200      	movs	r2, #0
 800887c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800887e:	f000 f8f9 	bl	8008a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008882:	4b10      	ldr	r3, [pc, #64]	@ (80088c4 <xPortStartScheduler+0x144>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a0f      	ldr	r2, [pc, #60]	@ (80088c4 <xPortStartScheduler+0x144>)
 8008888:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800888c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800888e:	f7ff ff63 	bl	8008758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008892:	f7fe fcf3 	bl	800727c <vTaskSwitchContext>
	prvTaskExitError();
 8008896:	f7ff ff1d 	bl	80086d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800889a:	2300      	movs	r3, #0
}
 800889c:	4618      	mov	r0, r3
 800889e:	3718      	adds	r7, #24
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}
 80088a4:	e000ed00 	.word	0xe000ed00
 80088a8:	410fc271 	.word	0x410fc271
 80088ac:	410fc270 	.word	0x410fc270
 80088b0:	e000e400 	.word	0xe000e400
 80088b4:	20000fbc 	.word	0x20000fbc
 80088b8:	20000fc0 	.word	0x20000fc0
 80088bc:	e000ed20 	.word	0xe000ed20
 80088c0:	20000014 	.word	0x20000014
 80088c4:	e000ef34 	.word	0xe000ef34

080088c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	607b      	str	r3, [r7, #4]
}
 80088e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088e2:	4b10      	ldr	r3, [pc, #64]	@ (8008924 <vPortEnterCritical+0x5c>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3301      	adds	r3, #1
 80088e8:	4a0e      	ldr	r2, [pc, #56]	@ (8008924 <vPortEnterCritical+0x5c>)
 80088ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008924 <vPortEnterCritical+0x5c>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d110      	bne.n	8008916 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008928 <vPortEnterCritical+0x60>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00b      	beq.n	8008916 <vPortEnterCritical+0x4e>
	__asm volatile
 80088fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008902:	f383 8811 	msr	BASEPRI, r3
 8008906:	f3bf 8f6f 	isb	sy
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	603b      	str	r3, [r7, #0]
}
 8008910:	bf00      	nop
 8008912:	bf00      	nop
 8008914:	e7fd      	b.n	8008912 <vPortEnterCritical+0x4a>
	}
}
 8008916:	bf00      	nop
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
 8008922:	bf00      	nop
 8008924:	20000014 	.word	0x20000014
 8008928:	e000ed04 	.word	0xe000ed04

0800892c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008932:	4b12      	ldr	r3, [pc, #72]	@ (800897c <vPortExitCritical+0x50>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <vPortExitCritical+0x26>
	__asm volatile
 800893a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893e:	f383 8811 	msr	BASEPRI, r3
 8008942:	f3bf 8f6f 	isb	sy
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	607b      	str	r3, [r7, #4]
}
 800894c:	bf00      	nop
 800894e:	bf00      	nop
 8008950:	e7fd      	b.n	800894e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008952:	4b0a      	ldr	r3, [pc, #40]	@ (800897c <vPortExitCritical+0x50>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3b01      	subs	r3, #1
 8008958:	4a08      	ldr	r2, [pc, #32]	@ (800897c <vPortExitCritical+0x50>)
 800895a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800895c:	4b07      	ldr	r3, [pc, #28]	@ (800897c <vPortExitCritical+0x50>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <vPortExitCritical+0x44>
 8008964:	2300      	movs	r3, #0
 8008966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	f383 8811 	msr	BASEPRI, r3
}
 800896e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr
 800897c:	20000014 	.word	0x20000014

08008980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008980:	f3ef 8009 	mrs	r0, PSP
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	4b15      	ldr	r3, [pc, #84]	@ (80089e0 <pxCurrentTCBConst>)
 800898a:	681a      	ldr	r2, [r3, #0]
 800898c:	f01e 0f10 	tst.w	lr, #16
 8008990:	bf08      	it	eq
 8008992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899a:	6010      	str	r0, [r2, #0]
 800899c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089a4:	f380 8811 	msr	BASEPRI, r0
 80089a8:	f3bf 8f4f 	dsb	sy
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f7fe fc64 	bl	800727c <vTaskSwitchContext>
 80089b4:	f04f 0000 	mov.w	r0, #0
 80089b8:	f380 8811 	msr	BASEPRI, r0
 80089bc:	bc09      	pop	{r0, r3}
 80089be:	6819      	ldr	r1, [r3, #0]
 80089c0:	6808      	ldr	r0, [r1, #0]
 80089c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c6:	f01e 0f10 	tst.w	lr, #16
 80089ca:	bf08      	it	eq
 80089cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089d0:	f380 8809 	msr	PSP, r0
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop
 80089dc:	f3af 8000 	nop.w

080089e0 <pxCurrentTCBConst>:
 80089e0:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089e4:	bf00      	nop
 80089e6:	bf00      	nop

080089e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b082      	sub	sp, #8
 80089ec:	af00      	add	r7, sp, #0
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	607b      	str	r3, [r7, #4]
}
 8008a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a02:	f7fe fb81 	bl	8007108 <xTaskIncrementTick>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a0c:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <xPortSysTickHandler+0x40>)
 8008a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a12:	601a      	str	r2, [r3, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	f383 8811 	msr	BASEPRI, r3
}
 8008a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	e000ed04 	.word	0xe000ed04

08008a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a30:	4b0b      	ldr	r3, [pc, #44]	@ (8008a60 <vPortSetupTimerInterrupt+0x34>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a36:	4b0b      	ldr	r3, [pc, #44]	@ (8008a64 <vPortSetupTimerInterrupt+0x38>)
 8008a38:	2200      	movs	r2, #0
 8008a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a68 <vPortSetupTimerInterrupt+0x3c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a0a      	ldr	r2, [pc, #40]	@ (8008a6c <vPortSetupTimerInterrupt+0x40>)
 8008a42:	fba2 2303 	umull	r2, r3, r2, r3
 8008a46:	099b      	lsrs	r3, r3, #6
 8008a48:	4a09      	ldr	r2, [pc, #36]	@ (8008a70 <vPortSetupTimerInterrupt+0x44>)
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a4e:	4b04      	ldr	r3, [pc, #16]	@ (8008a60 <vPortSetupTimerInterrupt+0x34>)
 8008a50:	2207      	movs	r2, #7
 8008a52:	601a      	str	r2, [r3, #0]
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	e000e010 	.word	0xe000e010
 8008a64:	e000e018 	.word	0xe000e018
 8008a68:	20000008 	.word	0x20000008
 8008a6c:	10624dd3 	.word	0x10624dd3
 8008a70:	e000e014 	.word	0xe000e014

08008a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a84 <vPortEnableVFP+0x10>
 8008a78:	6801      	ldr	r1, [r0, #0]
 8008a7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a7e:	6001      	str	r1, [r0, #0]
 8008a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a82:	bf00      	nop
 8008a84:	e000ed88 	.word	0xe000ed88

08008a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a8e:	f3ef 8305 	mrs	r3, IPSR
 8008a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b0f      	cmp	r3, #15
 8008a98:	d915      	bls.n	8008ac6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a9a:	4a18      	ldr	r2, [pc, #96]	@ (8008afc <vPortValidateInterruptPriority+0x74>)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008aa4:	4b16      	ldr	r3, [pc, #88]	@ (8008b00 <vPortValidateInterruptPriority+0x78>)
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	7afa      	ldrb	r2, [r7, #11]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d20b      	bcs.n	8008ac6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
 8008ac2:	bf00      	nop
 8008ac4:	e7fd      	b.n	8008ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ac6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b04 <vPortValidateInterruptPriority+0x7c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008ace:	4b0e      	ldr	r3, [pc, #56]	@ (8008b08 <vPortValidateInterruptPriority+0x80>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d90b      	bls.n	8008aee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ada:	f383 8811 	msr	BASEPRI, r3
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f3bf 8f4f 	dsb	sy
 8008ae6:	603b      	str	r3, [r7, #0]
}
 8008ae8:	bf00      	nop
 8008aea:	bf00      	nop
 8008aec:	e7fd      	b.n	8008aea <vPortValidateInterruptPriority+0x62>
	}
 8008aee:	bf00      	nop
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	e000e3f0 	.word	0xe000e3f0
 8008b00:	20000fbc 	.word	0x20000fbc
 8008b04:	e000ed0c 	.word	0xe000ed0c
 8008b08:	20000fc0 	.word	0x20000fc0

08008b0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08a      	sub	sp, #40	@ 0x28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b14:	2300      	movs	r3, #0
 8008b16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b18:	f7fe fa3a 	bl	8006f90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b1c:	4b5c      	ldr	r3, [pc, #368]	@ (8008c90 <pvPortMalloc+0x184>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d101      	bne.n	8008b28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b24:	f000 f924 	bl	8008d70 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b28:	4b5a      	ldr	r3, [pc, #360]	@ (8008c94 <pvPortMalloc+0x188>)
 8008b2a:	681a      	ldr	r2, [r3, #0]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f040 8095 	bne.w	8008c60 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d01e      	beq.n	8008b7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b3c:	2208      	movs	r2, #8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4413      	add	r3, r2
 8008b42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f003 0307 	and.w	r3, r3, #7
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d015      	beq.n	8008b7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f023 0307 	bic.w	r3, r3, #7
 8008b54:	3308      	adds	r3, #8
 8008b56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00b      	beq.n	8008b7a <pvPortMalloc+0x6e>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	617b      	str	r3, [r7, #20]
}
 8008b74:	bf00      	nop
 8008b76:	bf00      	nop
 8008b78:	e7fd      	b.n	8008b76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d06f      	beq.n	8008c60 <pvPortMalloc+0x154>
 8008b80:	4b45      	ldr	r3, [pc, #276]	@ (8008c98 <pvPortMalloc+0x18c>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d86a      	bhi.n	8008c60 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b8a:	4b44      	ldr	r3, [pc, #272]	@ (8008c9c <pvPortMalloc+0x190>)
 8008b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b8e:	4b43      	ldr	r3, [pc, #268]	@ (8008c9c <pvPortMalloc+0x190>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b94:	e004      	b.n	8008ba0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	687a      	ldr	r2, [r7, #4]
 8008ba6:	429a      	cmp	r2, r3
 8008ba8:	d903      	bls.n	8008bb2 <pvPortMalloc+0xa6>
 8008baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d1f1      	bne.n	8008b96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008bb2:	4b37      	ldr	r3, [pc, #220]	@ (8008c90 <pvPortMalloc+0x184>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d051      	beq.n	8008c60 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008bbc:	6a3b      	ldr	r3, [r7, #32]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2208      	movs	r2, #8
 8008bc2:	4413      	add	r3, r2
 8008bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	681a      	ldr	r2, [r3, #0]
 8008bca:	6a3b      	ldr	r3, [r7, #32]
 8008bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	1ad2      	subs	r2, r2, r3
 8008bd6:	2308      	movs	r3, #8
 8008bd8:	005b      	lsls	r3, r3, #1
 8008bda:	429a      	cmp	r2, r3
 8008bdc:	d920      	bls.n	8008c20 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4413      	add	r3, r2
 8008be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	f003 0307 	and.w	r3, r3, #7
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00b      	beq.n	8008c08 <pvPortMalloc+0xfc>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	613b      	str	r3, [r7, #16]
}
 8008c02:	bf00      	nop
 8008c04:	bf00      	nop
 8008c06:	e7fd      	b.n	8008c04 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	1ad2      	subs	r2, r2, r3
 8008c10:	69bb      	ldr	r3, [r7, #24]
 8008c12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c1a:	69b8      	ldr	r0, [r7, #24]
 8008c1c:	f000 f90a 	bl	8008e34 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c20:	4b1d      	ldr	r3, [pc, #116]	@ (8008c98 <pvPortMalloc+0x18c>)
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	1ad3      	subs	r3, r2, r3
 8008c2a:	4a1b      	ldr	r2, [pc, #108]	@ (8008c98 <pvPortMalloc+0x18c>)
 8008c2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c2e:	4b1a      	ldr	r3, [pc, #104]	@ (8008c98 <pvPortMalloc+0x18c>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca0 <pvPortMalloc+0x194>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d203      	bcs.n	8008c42 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c3a:	4b17      	ldr	r3, [pc, #92]	@ (8008c98 <pvPortMalloc+0x18c>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	4a18      	ldr	r2, [pc, #96]	@ (8008ca0 <pvPortMalloc+0x194>)
 8008c40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	4b13      	ldr	r3, [pc, #76]	@ (8008c94 <pvPortMalloc+0x188>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c52:	2200      	movs	r2, #0
 8008c54:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c56:	4b13      	ldr	r3, [pc, #76]	@ (8008ca4 <pvPortMalloc+0x198>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	3301      	adds	r3, #1
 8008c5c:	4a11      	ldr	r2, [pc, #68]	@ (8008ca4 <pvPortMalloc+0x198>)
 8008c5e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c60:	f7fe f9a4 	bl	8006fac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c64:	69fb      	ldr	r3, [r7, #28]
 8008c66:	f003 0307 	and.w	r3, r3, #7
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00b      	beq.n	8008c86 <pvPortMalloc+0x17a>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	60fb      	str	r3, [r7, #12]
}
 8008c80:	bf00      	nop
 8008c82:	bf00      	nop
 8008c84:	e7fd      	b.n	8008c82 <pvPortMalloc+0x176>
	return pvReturn;
 8008c86:	69fb      	ldr	r3, [r7, #28]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3728      	adds	r7, #40	@ 0x28
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	20003eac 	.word	0x20003eac
 8008c94:	20003ec0 	.word	0x20003ec0
 8008c98:	20003eb0 	.word	0x20003eb0
 8008c9c:	20003ea4 	.word	0x20003ea4
 8008ca0:	20003eb4 	.word	0x20003eb4
 8008ca4:	20003eb8 	.word	0x20003eb8

08008ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d04f      	beq.n	8008d5a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008cba:	2308      	movs	r3, #8
 8008cbc:	425b      	negs	r3, r3
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	4b25      	ldr	r3, [pc, #148]	@ (8008d64 <vPortFree+0xbc>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d10b      	bne.n	8008cee <vPortFree+0x46>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	60fb      	str	r3, [r7, #12]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00b      	beq.n	8008d0e <vPortFree+0x66>
	__asm volatile
 8008cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cfa:	f383 8811 	msr	BASEPRI, r3
 8008cfe:	f3bf 8f6f 	isb	sy
 8008d02:	f3bf 8f4f 	dsb	sy
 8008d06:	60bb      	str	r3, [r7, #8]
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	e7fd      	b.n	8008d0a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	685a      	ldr	r2, [r3, #4]
 8008d12:	4b14      	ldr	r3, [pc, #80]	@ (8008d64 <vPortFree+0xbc>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4013      	ands	r3, r2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01e      	beq.n	8008d5a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d11a      	bne.n	8008d5a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	685a      	ldr	r2, [r3, #4]
 8008d28:	4b0e      	ldr	r3, [pc, #56]	@ (8008d64 <vPortFree+0xbc>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	401a      	ands	r2, r3
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d34:	f7fe f92c 	bl	8006f90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	685a      	ldr	r2, [r3, #4]
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <vPortFree+0xc0>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4413      	add	r3, r2
 8008d42:	4a09      	ldr	r2, [pc, #36]	@ (8008d68 <vPortFree+0xc0>)
 8008d44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d46:	6938      	ldr	r0, [r7, #16]
 8008d48:	f000 f874 	bl	8008e34 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d4c:	4b07      	ldr	r3, [pc, #28]	@ (8008d6c <vPortFree+0xc4>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	3301      	adds	r3, #1
 8008d52:	4a06      	ldr	r2, [pc, #24]	@ (8008d6c <vPortFree+0xc4>)
 8008d54:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d56:	f7fe f929 	bl	8006fac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d5a:	bf00      	nop
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20003ec0 	.word	0x20003ec0
 8008d68:	20003eb0 	.word	0x20003eb0
 8008d6c:	20003ebc 	.word	0x20003ebc

08008d70 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d70:	b480      	push	{r7}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d76:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8008d7a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d7c:	4b27      	ldr	r3, [pc, #156]	@ (8008e1c <prvHeapInit+0xac>)
 8008d7e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f003 0307 	and.w	r3, r3, #7
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00c      	beq.n	8008da4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	3307      	adds	r3, #7
 8008d8e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0307 	bic.w	r3, r3, #7
 8008d96:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d98:	68ba      	ldr	r2, [r7, #8]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	1ad3      	subs	r3, r2, r3
 8008d9e:	4a1f      	ldr	r2, [pc, #124]	@ (8008e1c <prvHeapInit+0xac>)
 8008da0:	4413      	add	r3, r2
 8008da2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008da8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e20 <prvHeapInit+0xb0>)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dae:	4b1c      	ldr	r3, [pc, #112]	@ (8008e20 <prvHeapInit+0xb0>)
 8008db0:	2200      	movs	r2, #0
 8008db2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	68ba      	ldr	r2, [r7, #8]
 8008db8:	4413      	add	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008dbc:	2208      	movs	r2, #8
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	1a9b      	subs	r3, r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f023 0307 	bic.w	r3, r3, #7
 8008dca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	4a15      	ldr	r2, [pc, #84]	@ (8008e24 <prvHeapInit+0xb4>)
 8008dd0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008dd2:	4b14      	ldr	r3, [pc, #80]	@ (8008e24 <prvHeapInit+0xb4>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008dda:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <prvHeapInit+0xb4>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008df0:	4b0c      	ldr	r3, [pc, #48]	@ (8008e24 <prvHeapInit+0xb4>)
 8008df2:	681a      	ldr	r2, [r3, #0]
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8008e28 <prvHeapInit+0xb8>)
 8008dfe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	4a09      	ldr	r2, [pc, #36]	@ (8008e2c <prvHeapInit+0xbc>)
 8008e06:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e08:	4b09      	ldr	r3, [pc, #36]	@ (8008e30 <prvHeapInit+0xc0>)
 8008e0a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e0e:	601a      	str	r2, [r3, #0]
}
 8008e10:	bf00      	nop
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	20000fc4 	.word	0x20000fc4
 8008e20:	20003ea4 	.word	0x20003ea4
 8008e24:	20003eac 	.word	0x20003eac
 8008e28:	20003eb4 	.word	0x20003eb4
 8008e2c:	20003eb0 	.word	0x20003eb0
 8008e30:	20003ec0 	.word	0x20003ec0

08008e34 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e34:	b480      	push	{r7}
 8008e36:	b085      	sub	sp, #20
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e3c:	4b28      	ldr	r3, [pc, #160]	@ (8008ee0 <prvInsertBlockIntoFreeList+0xac>)
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	e002      	b.n	8008e48 <prvInsertBlockIntoFreeList+0x14>
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d8f7      	bhi.n	8008e42 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d108      	bne.n	8008e76 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	685a      	ldr	r2, [r3, #4]
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	441a      	add	r2, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	441a      	add	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d118      	bne.n	8008ebc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	4b15      	ldr	r3, [pc, #84]	@ (8008ee4 <prvInsertBlockIntoFreeList+0xb0>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d00d      	beq.n	8008eb2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	685a      	ldr	r2, [r3, #4]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	441a      	add	r2, r3
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	681a      	ldr	r2, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	e008      	b.n	8008ec4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <prvInsertBlockIntoFreeList+0xb0>)
 8008eb4:	681a      	ldr	r2, [r3, #0]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	601a      	str	r2, [r3, #0]
 8008eba:	e003      	b.n	8008ec4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d002      	beq.n	8008ed2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	687a      	ldr	r2, [r7, #4]
 8008ed0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ed2:	bf00      	nop
 8008ed4:	3714      	adds	r7, #20
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008edc:	4770      	bx	lr
 8008ede:	bf00      	nop
 8008ee0:	20003ea4 	.word	0x20003ea4
 8008ee4:	20003eac 	.word	0x20003eac

08008ee8 <memset>:
 8008ee8:	4402      	add	r2, r0
 8008eea:	4603      	mov	r3, r0
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d100      	bne.n	8008ef2 <memset+0xa>
 8008ef0:	4770      	bx	lr
 8008ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ef6:	e7f9      	b.n	8008eec <memset+0x4>

08008ef8 <_reclaim_reent>:
 8008ef8:	4b29      	ldr	r3, [pc, #164]	@ (8008fa0 <_reclaim_reent+0xa8>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4283      	cmp	r3, r0
 8008efe:	b570      	push	{r4, r5, r6, lr}
 8008f00:	4604      	mov	r4, r0
 8008f02:	d04b      	beq.n	8008f9c <_reclaim_reent+0xa4>
 8008f04:	69c3      	ldr	r3, [r0, #28]
 8008f06:	b1ab      	cbz	r3, 8008f34 <_reclaim_reent+0x3c>
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	b16b      	cbz	r3, 8008f28 <_reclaim_reent+0x30>
 8008f0c:	2500      	movs	r5, #0
 8008f0e:	69e3      	ldr	r3, [r4, #28]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	5959      	ldr	r1, [r3, r5]
 8008f14:	2900      	cmp	r1, #0
 8008f16:	d13b      	bne.n	8008f90 <_reclaim_reent+0x98>
 8008f18:	3504      	adds	r5, #4
 8008f1a:	2d80      	cmp	r5, #128	@ 0x80
 8008f1c:	d1f7      	bne.n	8008f0e <_reclaim_reent+0x16>
 8008f1e:	69e3      	ldr	r3, [r4, #28]
 8008f20:	4620      	mov	r0, r4
 8008f22:	68d9      	ldr	r1, [r3, #12]
 8008f24:	f000 f872 	bl	800900c <_free_r>
 8008f28:	69e3      	ldr	r3, [r4, #28]
 8008f2a:	6819      	ldr	r1, [r3, #0]
 8008f2c:	b111      	cbz	r1, 8008f34 <_reclaim_reent+0x3c>
 8008f2e:	4620      	mov	r0, r4
 8008f30:	f000 f86c 	bl	800900c <_free_r>
 8008f34:	6961      	ldr	r1, [r4, #20]
 8008f36:	b111      	cbz	r1, 8008f3e <_reclaim_reent+0x46>
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 f867 	bl	800900c <_free_r>
 8008f3e:	69e1      	ldr	r1, [r4, #28]
 8008f40:	b111      	cbz	r1, 8008f48 <_reclaim_reent+0x50>
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 f862 	bl	800900c <_free_r>
 8008f48:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008f4a:	b111      	cbz	r1, 8008f52 <_reclaim_reent+0x5a>
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f000 f85d 	bl	800900c <_free_r>
 8008f52:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f54:	b111      	cbz	r1, 8008f5c <_reclaim_reent+0x64>
 8008f56:	4620      	mov	r0, r4
 8008f58:	f000 f858 	bl	800900c <_free_r>
 8008f5c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008f5e:	b111      	cbz	r1, 8008f66 <_reclaim_reent+0x6e>
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 f853 	bl	800900c <_free_r>
 8008f66:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008f68:	b111      	cbz	r1, 8008f70 <_reclaim_reent+0x78>
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 f84e 	bl	800900c <_free_r>
 8008f70:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008f72:	b111      	cbz	r1, 8008f7a <_reclaim_reent+0x82>
 8008f74:	4620      	mov	r0, r4
 8008f76:	f000 f849 	bl	800900c <_free_r>
 8008f7a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008f7c:	b111      	cbz	r1, 8008f84 <_reclaim_reent+0x8c>
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 f844 	bl	800900c <_free_r>
 8008f84:	6a23      	ldr	r3, [r4, #32]
 8008f86:	b14b      	cbz	r3, 8008f9c <_reclaim_reent+0xa4>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008f8e:	4718      	bx	r3
 8008f90:	680e      	ldr	r6, [r1, #0]
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 f83a 	bl	800900c <_free_r>
 8008f98:	4631      	mov	r1, r6
 8008f9a:	e7bb      	b.n	8008f14 <_reclaim_reent+0x1c>
 8008f9c:	bd70      	pop	{r4, r5, r6, pc}
 8008f9e:	bf00      	nop
 8008fa0:	20000018 	.word	0x20000018

08008fa4 <__libc_init_array>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4d0d      	ldr	r5, [pc, #52]	@ (8008fdc <__libc_init_array+0x38>)
 8008fa8:	4c0d      	ldr	r4, [pc, #52]	@ (8008fe0 <__libc_init_array+0x3c>)
 8008faa:	1b64      	subs	r4, r4, r5
 8008fac:	10a4      	asrs	r4, r4, #2
 8008fae:	2600      	movs	r6, #0
 8008fb0:	42a6      	cmp	r6, r4
 8008fb2:	d109      	bne.n	8008fc8 <__libc_init_array+0x24>
 8008fb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008fe4 <__libc_init_array+0x40>)
 8008fb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008fe8 <__libc_init_array+0x44>)
 8008fb8:	f000 f87e 	bl	80090b8 <_init>
 8008fbc:	1b64      	subs	r4, r4, r5
 8008fbe:	10a4      	asrs	r4, r4, #2
 8008fc0:	2600      	movs	r6, #0
 8008fc2:	42a6      	cmp	r6, r4
 8008fc4:	d105      	bne.n	8008fd2 <__libc_init_array+0x2e>
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fcc:	4798      	blx	r3
 8008fce:	3601      	adds	r6, #1
 8008fd0:	e7ee      	b.n	8008fb0 <__libc_init_array+0xc>
 8008fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd6:	4798      	blx	r3
 8008fd8:	3601      	adds	r6, #1
 8008fda:	e7f2      	b.n	8008fc2 <__libc_init_array+0x1e>
 8008fdc:	08009234 	.word	0x08009234
 8008fe0:	08009234 	.word	0x08009234
 8008fe4:	08009234 	.word	0x08009234
 8008fe8:	08009238 	.word	0x08009238

08008fec <__retarget_lock_acquire_recursive>:
 8008fec:	4770      	bx	lr

08008fee <__retarget_lock_release_recursive>:
 8008fee:	4770      	bx	lr

08008ff0 <memcpy>:
 8008ff0:	440a      	add	r2, r1
 8008ff2:	4291      	cmp	r1, r2
 8008ff4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008ff8:	d100      	bne.n	8008ffc <memcpy+0xc>
 8008ffa:	4770      	bx	lr
 8008ffc:	b510      	push	{r4, lr}
 8008ffe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009006:	4291      	cmp	r1, r2
 8009008:	d1f9      	bne.n	8008ffe <memcpy+0xe>
 800900a:	bd10      	pop	{r4, pc}

0800900c <_free_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4605      	mov	r5, r0
 8009010:	2900      	cmp	r1, #0
 8009012:	d041      	beq.n	8009098 <_free_r+0x8c>
 8009014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009018:	1f0c      	subs	r4, r1, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	bfb8      	it	lt
 800901e:	18e4      	addlt	r4, r4, r3
 8009020:	f000 f83e 	bl	80090a0 <__malloc_lock>
 8009024:	4a1d      	ldr	r2, [pc, #116]	@ (800909c <_free_r+0x90>)
 8009026:	6813      	ldr	r3, [r2, #0]
 8009028:	b933      	cbnz	r3, 8009038 <_free_r+0x2c>
 800902a:	6063      	str	r3, [r4, #4]
 800902c:	6014      	str	r4, [r2, #0]
 800902e:	4628      	mov	r0, r5
 8009030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009034:	f000 b83a 	b.w	80090ac <__malloc_unlock>
 8009038:	42a3      	cmp	r3, r4
 800903a:	d908      	bls.n	800904e <_free_r+0x42>
 800903c:	6820      	ldr	r0, [r4, #0]
 800903e:	1821      	adds	r1, r4, r0
 8009040:	428b      	cmp	r3, r1
 8009042:	bf01      	itttt	eq
 8009044:	6819      	ldreq	r1, [r3, #0]
 8009046:	685b      	ldreq	r3, [r3, #4]
 8009048:	1809      	addeq	r1, r1, r0
 800904a:	6021      	streq	r1, [r4, #0]
 800904c:	e7ed      	b.n	800902a <_free_r+0x1e>
 800904e:	461a      	mov	r2, r3
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	b10b      	cbz	r3, 8009058 <_free_r+0x4c>
 8009054:	42a3      	cmp	r3, r4
 8009056:	d9fa      	bls.n	800904e <_free_r+0x42>
 8009058:	6811      	ldr	r1, [r2, #0]
 800905a:	1850      	adds	r0, r2, r1
 800905c:	42a0      	cmp	r0, r4
 800905e:	d10b      	bne.n	8009078 <_free_r+0x6c>
 8009060:	6820      	ldr	r0, [r4, #0]
 8009062:	4401      	add	r1, r0
 8009064:	1850      	adds	r0, r2, r1
 8009066:	4283      	cmp	r3, r0
 8009068:	6011      	str	r1, [r2, #0]
 800906a:	d1e0      	bne.n	800902e <_free_r+0x22>
 800906c:	6818      	ldr	r0, [r3, #0]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	6053      	str	r3, [r2, #4]
 8009072:	4408      	add	r0, r1
 8009074:	6010      	str	r0, [r2, #0]
 8009076:	e7da      	b.n	800902e <_free_r+0x22>
 8009078:	d902      	bls.n	8009080 <_free_r+0x74>
 800907a:	230c      	movs	r3, #12
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	e7d6      	b.n	800902e <_free_r+0x22>
 8009080:	6820      	ldr	r0, [r4, #0]
 8009082:	1821      	adds	r1, r4, r0
 8009084:	428b      	cmp	r3, r1
 8009086:	bf04      	itt	eq
 8009088:	6819      	ldreq	r1, [r3, #0]
 800908a:	685b      	ldreq	r3, [r3, #4]
 800908c:	6063      	str	r3, [r4, #4]
 800908e:	bf04      	itt	eq
 8009090:	1809      	addeq	r1, r1, r0
 8009092:	6021      	streq	r1, [r4, #0]
 8009094:	6054      	str	r4, [r2, #4]
 8009096:	e7ca      	b.n	800902e <_free_r+0x22>
 8009098:	bd38      	pop	{r3, r4, r5, pc}
 800909a:	bf00      	nop
 800909c:	20004000 	.word	0x20004000

080090a0 <__malloc_lock>:
 80090a0:	4801      	ldr	r0, [pc, #4]	@ (80090a8 <__malloc_lock+0x8>)
 80090a2:	f7ff bfa3 	b.w	8008fec <__retarget_lock_acquire_recursive>
 80090a6:	bf00      	nop
 80090a8:	20003ffc 	.word	0x20003ffc

080090ac <__malloc_unlock>:
 80090ac:	4801      	ldr	r0, [pc, #4]	@ (80090b4 <__malloc_unlock+0x8>)
 80090ae:	f7ff bf9e 	b.w	8008fee <__retarget_lock_release_recursive>
 80090b2:	bf00      	nop
 80090b4:	20003ffc 	.word	0x20003ffc

080090b8 <_init>:
 80090b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ba:	bf00      	nop
 80090bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090be:	bc08      	pop	{r3}
 80090c0:	469e      	mov	lr, r3
 80090c2:	4770      	bx	lr

080090c4 <_fini>:
 80090c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c6:	bf00      	nop
 80090c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ca:	bc08      	pop	{r3}
 80090cc:	469e      	mov	lr, r3
 80090ce:	4770      	bx	lr
