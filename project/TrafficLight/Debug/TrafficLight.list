
TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f90  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08009120  08009120  0000a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800927c  0800927c  0000b068  2**0
                  CONTENTS
  4 .ARM          00000008  0800927c  0800927c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009284  08009284  0000b068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009284  08009284  0000a284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009288  08009288  0000a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800928c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f9c  20000068  080092f4  0000b068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004004  080092f4  0000c004  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f727  00000000  00000000  0000b098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000456f  00000000  00000000  0002a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000149c  00000000  00000000  000307c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e30  00000000  00000000  00031c5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7be  00000000  00000000  0005ba8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010097f  00000000  00000000  0007a24a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017abc9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000721c  00000000  00000000  0017ac0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  00181e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009108 	.word	0x08009108

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08009108 	.word	0x08009108

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	led_registers_init(&leds);
 80004c4:	482b      	ldr	r0, [pc, #172]	@ (8000574 <MX_FREERTOS_Init+0xb4>)
 80004c6:	f000 fd65 	bl	8000f94 <led_registers_init>
	traffic_state_init(&traffic);
 80004ca:	482b      	ldr	r0, [pc, #172]	@ (8000578 <MX_FREERTOS_Init+0xb8>)
 80004cc:	f000 fd8b 	bl	8000fe6 <traffic_state_init>
  /* USER CODE END Init */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
	ledBlock = xSemaphoreCreateMutex();
 80004d0:	2001      	movs	r0, #1
 80004d2:	f005 f9f4 	bl	80058be <xQueueCreateMutex>
 80004d6:	4603      	mov	r3, r0
 80004d8:	4a28      	ldr	r2, [pc, #160]	@ (800057c <MX_FREERTOS_Init+0xbc>)
 80004da:	6013      	str	r3, [r2, #0]
	trafficBlock = xSemaphoreCreateMutex();
 80004dc:	2001      	movs	r0, #1
 80004de:	f005 f9ee 	bl	80058be <xQueueCreateMutex>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a26      	ldr	r2, [pc, #152]	@ (8000580 <MX_FREERTOS_Init+0xc0>)
 80004e6:	6013      	str	r3, [r2, #0]
	northPedestrianBlinkFlagBlock = xSemaphoreCreateMutex();
 80004e8:	2001      	movs	r0, #1
 80004ea:	f005 f9e8 	bl	80058be <xQueueCreateMutex>
 80004ee:	4603      	mov	r3, r0
 80004f0:	4a24      	ldr	r2, [pc, #144]	@ (8000584 <MX_FREERTOS_Init+0xc4>)
 80004f2:	6013      	str	r3, [r2, #0]
	westPedestrianBlinkFlagBlock = xSemaphoreCreateMutex();
 80004f4:	2001      	movs	r0, #1
 80004f6:	f005 f9e2 	bl	80058be <xQueueCreateMutex>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a22      	ldr	r2, [pc, #136]	@ (8000588 <MX_FREERTOS_Init+0xc8>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

	/*using message buffer to be able to get message from ISR*/
	message_pedestrian_north = xMessageBufferCreate( 10 );
 8000500:	2201      	movs	r2, #1
 8000502:	2100      	movs	r1, #0
 8000504:	200a      	movs	r0, #10
 8000506:	f005 ff0b 	bl	8006320 <xStreamBufferGenericCreate>
 800050a:	4603      	mov	r3, r0
 800050c:	4a1f      	ldr	r2, [pc, #124]	@ (800058c <MX_FREERTOS_Init+0xcc>)
 800050e:	6013      	str	r3, [r2, #0]
	message_pedestrian_west = xMessageBufferCreate( 10 );
 8000510:	2201      	movs	r2, #1
 8000512:	2100      	movs	r1, #0
 8000514:	200a      	movs	r0, #10
 8000516:	f005 ff03 	bl	8006320 <xStreamBufferGenericCreate>
 800051a:	4603      	mov	r3, r0
 800051c:	4a1c      	ldr	r2, [pc, #112]	@ (8000590 <MX_FREERTOS_Init+0xd0>)
 800051e:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000520:	4a1c      	ldr	r2, [pc, #112]	@ (8000594 <MX_FREERTOS_Init+0xd4>)
 8000522:	2100      	movs	r1, #0
 8000524:	481c      	ldr	r0, [pc, #112]	@ (8000598 <MX_FREERTOS_Init+0xd8>)
 8000526:	f004 fed5 	bl	80052d4 <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a1b      	ldr	r2, [pc, #108]	@ (800059c <MX_FREERTOS_Init+0xdc>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of pollSwitchesTas */
  pollSwitchesTasHandle = osThreadNew(PollSwitchesTask, NULL, &pollSwitchesTas_attributes);
 8000530:	4a1b      	ldr	r2, [pc, #108]	@ (80005a0 <MX_FREERTOS_Init+0xe0>)
 8000532:	2100      	movs	r1, #0
 8000534:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <MX_FREERTOS_Init+0xe4>)
 8000536:	f004 fecd 	bl	80052d4 <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a1a      	ldr	r2, [pc, #104]	@ (80005a8 <MX_FREERTOS_Init+0xe8>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of updateLedsTask */
  updateLedsTaskHandle = osThreadNew(UpdateLedsTask, NULL, &updateLedsTask_attributes);
 8000540:	4a1a      	ldr	r2, [pc, #104]	@ (80005ac <MX_FREERTOS_Init+0xec>)
 8000542:	2100      	movs	r1, #0
 8000544:	481a      	ldr	r0, [pc, #104]	@ (80005b0 <MX_FREERTOS_Init+0xf0>)
 8000546:	f004 fec5 	bl	80052d4 <osThreadNew>
 800054a:	4603      	mov	r3, r0
 800054c:	4a19      	ldr	r2, [pc, #100]	@ (80005b4 <MX_FREERTOS_Init+0xf4>)
 800054e:	6013      	str	r3, [r2, #0]

  /* creation of logicTask */
  logicTaskHandle = osThreadNew(LogicTask, NULL, &logicTask_attributes);
 8000550:	4a19      	ldr	r2, [pc, #100]	@ (80005b8 <MX_FREERTOS_Init+0xf8>)
 8000552:	2100      	movs	r1, #0
 8000554:	4819      	ldr	r0, [pc, #100]	@ (80005bc <MX_FREERTOS_Init+0xfc>)
 8000556:	f004 febd 	bl	80052d4 <osThreadNew>
 800055a:	4603      	mov	r3, r0
 800055c:	4a18      	ldr	r2, [pc, #96]	@ (80005c0 <MX_FREERTOS_Init+0x100>)
 800055e:	6013      	str	r3, [r2, #0]

  /* creation of blinkNorthTask */
  blinkNorthTaskHandle = osThreadNew(BlinkNorthTask, NULL, &blinkNorthTask_attributes);
 8000560:	4a18      	ldr	r2, [pc, #96]	@ (80005c4 <MX_FREERTOS_Init+0x104>)
 8000562:	2100      	movs	r1, #0
 8000564:	4818      	ldr	r0, [pc, #96]	@ (80005c8 <MX_FREERTOS_Init+0x108>)
 8000566:	f004 feb5 	bl	80052d4 <osThreadNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a17      	ldr	r2, [pc, #92]	@ (80005cc <MX_FREERTOS_Init+0x10c>)
 800056e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000084 	.word	0x20000084
 8000578:	20000088 	.word	0x20000088
 800057c:	20000090 	.word	0x20000090
 8000580:	20000094 	.word	0x20000094
 8000584:	20000098 	.word	0x20000098
 8000588:	2000009c 	.word	0x2000009c
 800058c:	200000a4 	.word	0x200000a4
 8000590:	200000a0 	.word	0x200000a0
 8000594:	08009180 	.word	0x08009180
 8000598:	080005d1 	.word	0x080005d1
 800059c:	200000ac 	.word	0x200000ac
 80005a0:	080091a4 	.word	0x080091a4
 80005a4:	080005e1 	.word	0x080005e1
 80005a8:	200000b0 	.word	0x200000b0
 80005ac:	080091c8 	.word	0x080091c8
 80005b0:	080006b9 	.word	0x080006b9
 80005b4:	200000b4 	.word	0x200000b4
 80005b8:	080091ec 	.word	0x080091ec
 80005bc:	08000709 	.word	0x08000709
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	08009210 	.word	0x08009210
 80005c8:	08000745 	.word	0x08000745
 80005cc:	200000bc 	.word	0x200000bc

080005d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005d8:	2001      	movs	r0, #1
 80005da:	f004 ff0d 	bl	80053f8 <osDelay>
 80005de:	e7fb      	b.n	80005d8 <StartDefaultTask+0x8>

080005e0 <PollSwitchesTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_PollSwitchesTask */
void PollSwitchesTask(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	@ 0x28
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PollSwitchesTask */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(10);
 80005e8:	230a      	movs	r3, #10
 80005ea:	627b      	str	r3, [r7, #36]	@ 0x24
	xLastWakeTime = xTaskGetTickCount();
 80005ec:	f006 fda2 	bl	8007134 <xTaskGetTickCount>
 80005f0:	4603      	mov	r3, r0
 80005f2:	623b      	str	r3, [r7, #32]

	/* Infinite loop */
	for(;;)
	{

		if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 80005f4:	4b2c      	ldr	r3, [pc, #176]	@ (80006a8 <PollSwitchesTask+0xc8>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	210a      	movs	r1, #10
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fbfa 	bl	8005df4 <xQueueSemaphoreTake>
 8000600:	4603      	mov	r3, r0
 8000602:	2b01      	cmp	r3, #1
 8000604:	d148      	bne.n	8000698 <PollSwitchesTask+0xb8>

			//actually pool switches
			traffic.north_car = check_car(NORTH);
 8000606:	2003      	movs	r0, #3
 8000608:	f000 fd18 	bl	800103c <check_car>
 800060c:	4603      	mov	r3, r0
 800060e:	461a      	mov	r2, r3
 8000610:	4b26      	ldr	r3, [pc, #152]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000612:	701a      	strb	r2, [r3, #0]
			traffic.west_car = check_car(WEST);
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fd11 	bl	800103c <check_car>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	4b23      	ldr	r3, [pc, #140]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000620:	705a      	strb	r2, [r3, #1]
			traffic.south_car = check_car(SOUTH);
 8000622:	2001      	movs	r0, #1
 8000624:	f000 fd0a 	bl	800103c <check_car>
 8000628:	4603      	mov	r3, r0
 800062a:	461a      	mov	r2, r3
 800062c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ac <PollSwitchesTask+0xcc>)
 800062e:	709a      	strb	r2, [r3, #2]
			traffic.east_car = check_car(EAST);
 8000630:	2002      	movs	r0, #2
 8000632:	f000 fd03 	bl	800103c <check_car>
 8000636:	4603      	mov	r3, r0
 8000638:	461a      	mov	r2, r3
 800063a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ac <PollSwitchesTask+0xcc>)
 800063c:	70da      	strb	r2, [r3, #3]

			//check message buffers from ISR (we don't care about the message itself just whether or not there is a message in the queue)
			if( xMessageBufferIsEmpty( message_pedestrian_north ) == pdFALSE ){
 800063e:	4b1c      	ldr	r3, [pc, #112]	@ (80006b0 <PollSwitchesTask+0xd0>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4618      	mov	r0, r3
 8000644:	f006 f878 	bl	8006738 <xStreamBufferIsEmpty>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d10a      	bne.n	8000664 <PollSwitchesTask+0x84>
				xMessageBufferReceive( message_pedestrian_north, north_buf, 10, 1);
 800064e:	4b18      	ldr	r3, [pc, #96]	@ (80006b0 <PollSwitchesTask+0xd0>)
 8000650:	6818      	ldr	r0, [r3, #0]
 8000652:	f107 0114 	add.w	r1, r7, #20
 8000656:	2301      	movs	r3, #1
 8000658:	220a      	movs	r2, #10
 800065a:	f005 ffa3 	bl	80065a4 <xStreamBufferReceive>
				traffic.north_pedestrian = true;
 800065e:	4b13      	ldr	r3, [pc, #76]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000660:	2201      	movs	r2, #1
 8000662:	711a      	strb	r2, [r3, #4]
//				xMessageBufferReset( message_pedestrian_north );
			}

			if( xMessageBufferIsEmpty( message_pedestrian_west ) == pdFALSE ){
 8000664:	4b13      	ldr	r3, [pc, #76]	@ (80006b4 <PollSwitchesTask+0xd4>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4618      	mov	r0, r3
 800066a:	f006 f865 	bl	8006738 <xStreamBufferIsEmpty>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d10a      	bne.n	800068a <PollSwitchesTask+0xaa>
				xMessageBufferReceive( message_pedestrian_west, west_buf, 10, 1);
 8000674:	4b0f      	ldr	r3, [pc, #60]	@ (80006b4 <PollSwitchesTask+0xd4>)
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	f107 0108 	add.w	r1, r7, #8
 800067c:	2301      	movs	r3, #1
 800067e:	220a      	movs	r2, #10
 8000680:	f005 ff90 	bl	80065a4 <xStreamBufferReceive>
				traffic.west_pedestrian = true;
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <PollSwitchesTask+0xcc>)
 8000686:	2201      	movs	r2, #1
 8000688:	715a      	strb	r2, [r3, #5]
//				xMessageBufferReset( message_pedestrian_west );
			}



			xSemaphoreGive(trafficBlock);
 800068a:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <PollSwitchesTask+0xc8>)
 800068c:	6818      	ldr	r0, [r3, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	2200      	movs	r2, #0
 8000692:	2100      	movs	r1, #0
 8000694:	f005 f92c 	bl	80058f0 <xQueueGenericSend>
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 8000698:	f107 0320 	add.w	r3, r7, #32
 800069c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 fb76 	bl	8006d90 <vTaskDelayUntil>
		if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 80006a4:	e7a6      	b.n	80005f4 <PollSwitchesTask+0x14>
 80006a6:	bf00      	nop
 80006a8:	20000094 	.word	0x20000094
 80006ac:	20000088 	.word	0x20000088
 80006b0:	200000a4 	.word	0x200000a4
 80006b4:	200000a0 	.word	0x200000a0

080006b8 <UpdateLedsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UpdateLedsTask */
void UpdateLedsTask(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UpdateLedsTask */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20);
 80006c0:	2314      	movs	r3, #20
 80006c2:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 80006c4:	f006 fd36 	bl	8007134 <xTaskGetTickCount>
 80006c8:	4603      	mov	r3, r0
 80006ca:	60bb      	str	r3, [r7, #8]

  /* Infinite loop */
	for(;;)
	{

		if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <UpdateLedsTask+0x48>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	210a      	movs	r1, #10
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fb8e 	bl	8005df4 <xQueueSemaphoreTake>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d109      	bne.n	80006f2 <UpdateLedsTask+0x3a>
			update_leds(&leds);
 80006de:	4809      	ldr	r0, [pc, #36]	@ (8000704 <UpdateLedsTask+0x4c>)
 80006e0:	f000 fc6b 	bl	8000fba <update_leds>
			xSemaphoreGive(ledBlock);
 80006e4:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <UpdateLedsTask+0x48>)
 80006e6:	6818      	ldr	r0, [r3, #0]
 80006e8:	2300      	movs	r3, #0
 80006ea:	2200      	movs	r2, #0
 80006ec:	2100      	movs	r1, #0
 80006ee:	f005 f8ff 	bl	80058f0 <xQueueGenericSend>
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	68f9      	ldr	r1, [r7, #12]
 80006f8:	4618      	mov	r0, r3
 80006fa:	f006 fb49 	bl	8006d90 <vTaskDelayUntil>
		if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 80006fe:	e7e5      	b.n	80006cc <UpdateLedsTask+0x14>
 8000700:	20000090 	.word	0x20000090
 8000704:	20000084 	.word	0x20000084

08000708 <LogicTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LogicTask */
void LogicTask(void *argument)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LogicTask */

	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(20);
 8000710:	2314      	movs	r3, #20
 8000712:	60fb      	str	r3, [r7, #12]
	xLastWakeTime = xTaskGetTickCount();
 8000714:	f006 fd0e 	bl	8007134 <xTaskGetTickCount>
 8000718:	4603      	mov	r3, r0
 800071a:	60bb      	str	r3, [r7, #8]

	state = START;
 800071c:	4b07      	ldr	r3, [pc, #28]	@ (800073c <LogicTask+0x34>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
	nextState = START;
 8000722:	4b07      	ldr	r3, [pc, #28]	@ (8000740 <LogicTask+0x38>)
 8000724:	2200      	movs	r2, #0
 8000726:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
	for(;;)
	{
//		test_logic(); //function used to test functionality of different tasks
		task1_logic();
 8000728:	f000 f864 	bl	80007f4 <task1_logic>
		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	68f9      	ldr	r1, [r7, #12]
 8000732:	4618      	mov	r0, r3
 8000734:	f006 fb2c 	bl	8006d90 <vTaskDelayUntil>
		task1_logic();
 8000738:	bf00      	nop
 800073a:	e7f5      	b.n	8000728 <LogicTask+0x20>
 800073c:	2000008e 	.word	0x2000008e
 8000740:	2000008f 	.word	0x2000008f

08000744 <BlinkNorthTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlinkNorthTask */
void BlinkNorthTask(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af02      	add	r7, sp, #8
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlinkNorthTask */
	TickType_t xLastWakeTime;
	const TickType_t xPeriod = pdMS_TO_TICKS(toggleFreq);
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <BlinkNorthTask+0x98>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000756:	fb02 f303 	mul.w	r3, r2, r3
 800075a:	4a21      	ldr	r2, [pc, #132]	@ (80007e0 <BlinkNorthTask+0x9c>)
 800075c:	fba2 2303 	umull	r2, r3, r2, r3
 8000760:	099b      	lsrs	r3, r3, #6
 8000762:	613b      	str	r3, [r7, #16]
	xLastWakeTime = xTaskGetTickCount();
 8000764:	f006 fce6 	bl	8007134 <xTaskGetTickCount>
 8000768:	4603      	mov	r3, r0
 800076a:	60fb      	str	r3, [r7, #12]
	bool tempFlag = false;
 800076c:	2300      	movs	r3, #0
 800076e:	75fb      	strb	r3, [r7, #23]

  /* Infinite loop */
	for(;;)
	{
		//check flag (use tempFlag to avoid a little bit of nesting)
		if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 8000770:	4b1c      	ldr	r3, [pc, #112]	@ (80007e4 <BlinkNorthTask+0xa0>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	210a      	movs	r1, #10
 8000776:	4618      	mov	r0, r3
 8000778:	f005 fb3c 	bl	8005df4 <xQueueSemaphoreTake>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d109      	bne.n	8000796 <BlinkNorthTask+0x52>
			tempFlag = northPedestrianBlinkFlag;
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <BlinkNorthTask+0xa4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	75fb      	strb	r3, [r7, #23]
			xSemaphoreGive(northPedestrianBlinkFlagBlock);
 8000788:	4b16      	ldr	r3, [pc, #88]	@ (80007e4 <BlinkNorthTask+0xa0>)
 800078a:	6818      	ldr	r0, [r3, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	f005 f8ad 	bl	80058f0 <xQueueGenericSend>
		}

		//if flag true -> toggle led
		if(tempFlag == true){
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d018      	beq.n	80007ce <BlinkNorthTask+0x8a>
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 800079c:	4b13      	ldr	r3, [pc, #76]	@ (80007ec <BlinkNorthTask+0xa8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	210a      	movs	r1, #10
 80007a2:	4618      	mov	r0, r3
 80007a4:	f005 fb26 	bl	8005df4 <xQueueSemaphoreTake>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10f      	bne.n	80007ce <BlinkNorthTask+0x8a>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, INDICATOR, TOGGLE);
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2303      	movs	r3, #3
 80007b6:	2201      	movs	r2, #1
 80007b8:	2103      	movs	r1, #3
 80007ba:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <BlinkNorthTask+0xac>)
 80007bc:	f000 fcb4 	bl	8001128 <set_led>
				xSemaphoreGive(ledBlock);
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <BlinkNorthTask+0xa8>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	2300      	movs	r3, #0
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	f005 f891 	bl	80058f0 <xQueueGenericSend>
			}
		}

		vTaskDelayUntil(&xLastWakeTime, xPeriod);
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	6939      	ldr	r1, [r7, #16]
 80007d4:	4618      	mov	r0, r3
 80007d6:	f006 fadb 	bl	8006d90 <vTaskDelayUntil>
		if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 80007da:	e7c9      	b.n	8000770 <BlinkNorthTask+0x2c>
 80007dc:	20000000 	.word	0x20000000
 80007e0:	10624dd3 	.word	0x10624dd3
 80007e4:	20000098 	.word	0x20000098
 80007e8:	200000a8 	.word	0x200000a8
 80007ec:	20000090 	.word	0x20000090
 80007f0:	20000084 	.word	0x20000084

080007f4 <task1_logic>:
/* USER CODE BEGIN Application */

/**
 * @brief : function containing the state machine used to handle the logic of task 1
 */
void task1_logic(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af02      	add	r7, sp, #8

	//used to delay within state machine
	TickType_t time;
	TickType_t period;

	state = nextState;
 80007fa:	4bac      	ldr	r3, [pc, #688]	@ (8000aac <task1_logic+0x2b8>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
 80007fe:	4bac      	ldr	r3, [pc, #688]	@ (8000ab0 <task1_logic+0x2bc>)
 8000800:	701a      	strb	r2, [r3, #0]

	switch (state){
 8000802:	4bab      	ldr	r3, [pc, #684]	@ (8000ab0 <task1_logic+0x2bc>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b04      	cmp	r3, #4
 8000808:	f200 81c4 	bhi.w	8000b94 <task1_logic+0x3a0>
 800080c:	a201      	add	r2, pc, #4	@ (adr r2, 8000814 <task1_logic+0x20>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000829 	.word	0x08000829
 8000818:	08000889 	.word	0x08000889
 800081c:	08000913 	.word	0x08000913
 8000820:	08000a23 	.word	0x08000a23
 8000824:	08000add 	.word	0x08000add
		case START:
			//init for CAR_GO state
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000828:	4ba2      	ldr	r3, [pc, #648]	@ (8000ab4 <task1_logic+0x2c0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	210a      	movs	r1, #10
 800082e:	4618      	mov	r0, r3
 8000830:	f005 fae0 	bl	8005df4 <xQueueSemaphoreTake>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d122      	bne.n	8000880 <task1_logic+0x8c>
				set_led_all(&leds, OFF);
 800083a:	2100      	movs	r1, #0
 800083c:	489e      	ldr	r0, [pc, #632]	@ (8000ab8 <task1_logic+0x2c4>)
 800083e:	f000 fc4b 	bl	80010d8 <set_led_all>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, GREEN, ON);
 8000842:	2301      	movs	r3, #1
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2302      	movs	r3, #2
 8000848:	2200      	movs	r2, #0
 800084a:	2103      	movs	r1, #3
 800084c:	489a      	ldr	r0, [pc, #616]	@ (8000ab8 <task1_logic+0x2c4>)
 800084e:	f000 fc6b 	bl	8001128 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, GREEN, ON);
 8000852:	2301      	movs	r3, #1
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2302      	movs	r3, #2
 8000858:	2200      	movs	r2, #0
 800085a:	2101      	movs	r1, #1
 800085c:	4896      	ldr	r0, [pc, #600]	@ (8000ab8 <task1_logic+0x2c4>)
 800085e:	f000 fc63 	bl	8001128 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, RED, ON);
 8000862:	2301      	movs	r3, #1
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2300      	movs	r3, #0
 8000868:	2201      	movs	r2, #1
 800086a:	2103      	movs	r1, #3
 800086c:	4892      	ldr	r0, [pc, #584]	@ (8000ab8 <task1_logic+0x2c4>)
 800086e:	f000 fc5b 	bl	8001128 <set_led>
				xSemaphoreGive(ledBlock);
 8000872:	4b90      	ldr	r3, [pc, #576]	@ (8000ab4 <task1_logic+0x2c0>)
 8000874:	6818      	ldr	r0, [r3, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	f005 f838 	bl	80058f0 <xQueueGenericSend>
			}
			nextState = CAR_GO;
 8000880:	4b8a      	ldr	r3, [pc, #552]	@ (8000aac <task1_logic+0x2b8>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
			break;
 8000886:	e188      	b.n	8000b9a <task1_logic+0x3a6>
		case CAR_GO:
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000888:	4b8a      	ldr	r3, [pc, #552]	@ (8000ab4 <task1_logic+0x2c0>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	210a      	movs	r1, #10
 800088e:	4618      	mov	r0, r3
 8000890:	f005 fab0 	bl	8005df4 <xQueueSemaphoreTake>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d122      	bne.n	80008e0 <task1_logic+0xec>
				set_led_all(&leds, OFF);
 800089a:	2100      	movs	r1, #0
 800089c:	4886      	ldr	r0, [pc, #536]	@ (8000ab8 <task1_logic+0x2c4>)
 800089e:	f000 fc1b 	bl	80010d8 <set_led_all>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, GREEN, ON);
 80008a2:	2301      	movs	r3, #1
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2302      	movs	r3, #2
 80008a8:	2200      	movs	r2, #0
 80008aa:	2103      	movs	r1, #3
 80008ac:	4882      	ldr	r0, [pc, #520]	@ (8000ab8 <task1_logic+0x2c4>)
 80008ae:	f000 fc3b 	bl	8001128 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, GREEN, ON);
 80008b2:	2301      	movs	r3, #1
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2302      	movs	r3, #2
 80008b8:	2200      	movs	r2, #0
 80008ba:	2101      	movs	r1, #1
 80008bc:	487e      	ldr	r0, [pc, #504]	@ (8000ab8 <task1_logic+0x2c4>)
 80008be:	f000 fc33 	bl	8001128 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, RED, ON);
 80008c2:	2301      	movs	r3, #1
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	2201      	movs	r2, #1
 80008ca:	2103      	movs	r1, #3
 80008cc:	487a      	ldr	r0, [pc, #488]	@ (8000ab8 <task1_logic+0x2c4>)
 80008ce:	f000 fc2b 	bl	8001128 <set_led>
				xSemaphoreGive(ledBlock);
 80008d2:	4b78      	ldr	r3, [pc, #480]	@ (8000ab4 <task1_logic+0x2c0>)
 80008d4:	6818      	ldr	r0, [r3, #0]
 80008d6:	2300      	movs	r3, #0
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	f005 f808 	bl	80058f0 <xQueueGenericSend>
			}

			//if pedestrian button has been pressed, go to CAR_TO_PEDESTRIAN state
			if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 80008e0:	4b76      	ldr	r3, [pc, #472]	@ (8000abc <task1_logic+0x2c8>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	210a      	movs	r1, #10
 80008e6:	4618      	mov	r0, r3
 80008e8:	f005 fa84 	bl	8005df4 <xQueueSemaphoreTake>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	f040 8152 	bne.w	8000b98 <task1_logic+0x3a4>
				if(traffic.north_pedestrian == true){
 80008f4:	4b72      	ldr	r3, [pc, #456]	@ (8000ac0 <task1_logic+0x2cc>)
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d002      	beq.n	8000902 <task1_logic+0x10e>
					nextState = CAR_TO_PEDESTRIAN;
 80008fc:	4b6b      	ldr	r3, [pc, #428]	@ (8000aac <task1_logic+0x2b8>)
 80008fe:	2202      	movs	r2, #2
 8000900:	701a      	strb	r2, [r3, #0]
				}

				xSemaphoreGive(trafficBlock);
 8000902:	4b6e      	ldr	r3, [pc, #440]	@ (8000abc <task1_logic+0x2c8>)
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	2300      	movs	r3, #0
 8000908:	2200      	movs	r2, #0
 800090a:	2100      	movs	r1, #0
 800090c:	f004 fff0 	bl	80058f0 <xQueueGenericSend>
			}
			break;
 8000910:	e142      	b.n	8000b98 <task1_logic+0x3a4>
		case CAR_TO_PEDESTRIAN:
			//start blinking pedestrian indicator
			if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 8000912:	4b6c      	ldr	r3, [pc, #432]	@ (8000ac4 <task1_logic+0x2d0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	210a      	movs	r1, #10
 8000918:	4618      	mov	r0, r3
 800091a:	f005 fa6b 	bl	8005df4 <xQueueSemaphoreTake>
 800091e:	4603      	mov	r3, r0
 8000920:	2b01      	cmp	r3, #1
 8000922:	d109      	bne.n	8000938 <task1_logic+0x144>
				northPedestrianBlinkFlag = true;
 8000924:	4b68      	ldr	r3, [pc, #416]	@ (8000ac8 <task1_logic+0x2d4>)
 8000926:	2201      	movs	r2, #1
 8000928:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(northPedestrianBlinkFlagBlock);
 800092a:	4b66      	ldr	r3, [pc, #408]	@ (8000ac4 <task1_logic+0x2d0>)
 800092c:	6818      	ldr	r0, [r3, #0]
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	f004 ffdc 	bl	80058f0 <xQueueGenericSend>
			}

			//delay for  pedestrianDelay-orangeDelay ms
			period = pdMS_TO_TICKS(pedestrianDelay - orangeDelay);
 8000938:	4b64      	ldr	r3, [pc, #400]	@ (8000acc <task1_logic+0x2d8>)
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	461a      	mov	r2, r3
 800093e:	4b64      	ldr	r3, [pc, #400]	@ (8000ad0 <task1_logic+0x2dc>)
 8000940:	881b      	ldrh	r3, [r3, #0]
 8000942:	1ad3      	subs	r3, r2, r3
 8000944:	461a      	mov	r2, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	fb02 f303 	mul.w	r3, r2, r3
 800094e:	4a61      	ldr	r2, [pc, #388]	@ (8000ad4 <task1_logic+0x2e0>)
 8000950:	fba2 2303 	umull	r2, r3, r2, r3
 8000954:	099b      	lsrs	r3, r3, #6
 8000956:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 8000958:	f006 fbec 	bl	8007134 <xTaskGetTickCount>
 800095c:	4603      	mov	r3, r0
 800095e:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 8000960:	463b      	mov	r3, r7
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	4618      	mov	r0, r3
 8000966:	f006 fa13 	bl	8006d90 <vTaskDelayUntil>

			//light orange car led, turn off red car led
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 800096a:	4b52      	ldr	r3, [pc, #328]	@ (8000ab4 <task1_logic+0x2c0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	210a      	movs	r1, #10
 8000970:	4618      	mov	r0, r3
 8000972:	f005 fa3f 	bl	8005df4 <xQueueSemaphoreTake>
 8000976:	4603      	mov	r3, r0
 8000978:	2b01      	cmp	r3, #1
 800097a:	d126      	bne.n	80009ca <task1_logic+0x1d6>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, GREEN, OFF);
 800097c:	2300      	movs	r3, #0
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2302      	movs	r3, #2
 8000982:	2200      	movs	r2, #0
 8000984:	2103      	movs	r1, #3
 8000986:	484c      	ldr	r0, [pc, #304]	@ (8000ab8 <task1_logic+0x2c4>)
 8000988:	f000 fbce 	bl	8001128 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, GREEN, OFF);
 800098c:	2300      	movs	r3, #0
 800098e:	9300      	str	r3, [sp, #0]
 8000990:	2302      	movs	r3, #2
 8000992:	2200      	movs	r2, #0
 8000994:	2101      	movs	r1, #1
 8000996:	4848      	ldr	r0, [pc, #288]	@ (8000ab8 <task1_logic+0x2c4>)
 8000998:	f000 fbc6 	bl	8001128 <set_led>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, ORANGE, ON);
 800099c:	2301      	movs	r3, #1
 800099e:	9300      	str	r3, [sp, #0]
 80009a0:	2301      	movs	r3, #1
 80009a2:	2200      	movs	r2, #0
 80009a4:	2103      	movs	r1, #3
 80009a6:	4844      	ldr	r0, [pc, #272]	@ (8000ab8 <task1_logic+0x2c4>)
 80009a8:	f000 fbbe 	bl	8001128 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, ORANGE, ON);
 80009ac:	2301      	movs	r3, #1
 80009ae:	9300      	str	r3, [sp, #0]
 80009b0:	2301      	movs	r3, #1
 80009b2:	2200      	movs	r2, #0
 80009b4:	2101      	movs	r1, #1
 80009b6:	4840      	ldr	r0, [pc, #256]	@ (8000ab8 <task1_logic+0x2c4>)
 80009b8:	f000 fbb6 	bl	8001128 <set_led>
				xSemaphoreGive(ledBlock);
 80009bc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ab4 <task1_logic+0x2c0>)
 80009be:	6818      	ldr	r0, [r3, #0]
 80009c0:	2300      	movs	r3, #0
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	f004 ff93 	bl	80058f0 <xQueueGenericSend>
			}

			//delay for orangeDelay ms
			period = pdMS_TO_TICKS(orangeDelay);
 80009ca:	4b41      	ldr	r3, [pc, #260]	@ (8000ad0 <task1_logic+0x2dc>)
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	461a      	mov	r2, r3
 80009d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009d4:	fb02 f303 	mul.w	r3, r2, r3
 80009d8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ad4 <task1_logic+0x2e0>)
 80009da:	fba2 2303 	umull	r2, r3, r2, r3
 80009de:	099b      	lsrs	r3, r3, #6
 80009e0:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 80009e2:	f006 fba7 	bl	8007134 <xTaskGetTickCount>
 80009e6:	4603      	mov	r3, r0
 80009e8:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 80009ea:	463b      	mov	r3, r7
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	4618      	mov	r0, r3
 80009f0:	f006 f9ce 	bl	8006d90 <vTaskDelayUntil>

			//stop blinking pedestrian indicator
			if( xSemaphoreTake(northPedestrianBlinkFlagBlock, (TickType_t)10) == pdTRUE ){
 80009f4:	4b33      	ldr	r3, [pc, #204]	@ (8000ac4 <task1_logic+0x2d0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	210a      	movs	r1, #10
 80009fa:	4618      	mov	r0, r3
 80009fc:	f005 f9fa 	bl	8005df4 <xQueueSemaphoreTake>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d109      	bne.n	8000a1a <task1_logic+0x226>
				northPedestrianBlinkFlag = false;
 8000a06:	4b30      	ldr	r3, [pc, #192]	@ (8000ac8 <task1_logic+0x2d4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(northPedestrianBlinkFlagBlock);
 8000a0c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac4 <task1_logic+0x2d0>)
 8000a0e:	6818      	ldr	r0, [r3, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	2100      	movs	r1, #0
 8000a16:	f004 ff6b 	bl	80058f0 <xQueueGenericSend>
			}

			//go to next state
			nextState = PEDESTRIAN_GO;
 8000a1a:	4b24      	ldr	r3, [pc, #144]	@ (8000aac <task1_logic+0x2b8>)
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	701a      	strb	r2, [r3, #0]
			break;
 8000a20:	e0bb      	b.n	8000b9a <task1_logic+0x3a6>
		case PEDESTRIAN_GO:

			//light correct leds
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000a22:	4b24      	ldr	r3, [pc, #144]	@ (8000ab4 <task1_logic+0x2c0>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	210a      	movs	r1, #10
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f005 f9e3 	bl	8005df4 <xQueueSemaphoreTake>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d122      	bne.n	8000a7a <task1_logic+0x286>
				set_led_all(&leds, OFF);
 8000a34:	2100      	movs	r1, #0
 8000a36:	4820      	ldr	r0, [pc, #128]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a38:	f000 fb4e 	bl	80010d8 <set_led_all>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, RED, ON);
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	9300      	str	r3, [sp, #0]
 8000a40:	2300      	movs	r3, #0
 8000a42:	2200      	movs	r2, #0
 8000a44:	2103      	movs	r1, #3
 8000a46:	481c      	ldr	r0, [pc, #112]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a48:	f000 fb6e 	bl	8001128 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, RED, ON);
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2300      	movs	r3, #0
 8000a52:	2200      	movs	r2, #0
 8000a54:	2101      	movs	r1, #1
 8000a56:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a58:	f000 fb66 	bl	8001128 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, GREEN, ON);
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	9300      	str	r3, [sp, #0]
 8000a60:	2302      	movs	r3, #2
 8000a62:	2201      	movs	r2, #1
 8000a64:	2103      	movs	r1, #3
 8000a66:	4814      	ldr	r0, [pc, #80]	@ (8000ab8 <task1_logic+0x2c4>)
 8000a68:	f000 fb5e 	bl	8001128 <set_led>
				xSemaphoreGive(ledBlock);
 8000a6c:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <task1_logic+0x2c0>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	2300      	movs	r3, #0
 8000a72:	2200      	movs	r2, #0
 8000a74:	2100      	movs	r1, #0
 8000a76:	f004 ff3b 	bl	80058f0 <xQueueGenericSend>
			}

			//delay for walkingDelay ms
			period = pdMS_TO_TICKS(walkingDelay);
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <task1_logic+0x2e4>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a84:	fb02 f303 	mul.w	r3, r2, r3
 8000a88:	4a12      	ldr	r2, [pc, #72]	@ (8000ad4 <task1_logic+0x2e0>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	099b      	lsrs	r3, r3, #6
 8000a90:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 8000a92:	f006 fb4f 	bl	8007134 <xTaskGetTickCount>
 8000a96:	4603      	mov	r3, r0
 8000a98:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 8000a9a:	463b      	mov	r3, r7
 8000a9c:	6879      	ldr	r1, [r7, #4]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f006 f976 	bl	8006d90 <vTaskDelayUntil>

			nextState = PEDESTRIAN_TO_CAR;
 8000aa4:	4b01      	ldr	r3, [pc, #4]	@ (8000aac <task1_logic+0x2b8>)
 8000aa6:	2204      	movs	r2, #4
 8000aa8:	701a      	strb	r2, [r3, #0]
			break;
 8000aaa:	e076      	b.n	8000b9a <task1_logic+0x3a6>
 8000aac:	2000008f 	.word	0x2000008f
 8000ab0:	2000008e 	.word	0x2000008e
 8000ab4:	20000090 	.word	0x20000090
 8000ab8:	20000084 	.word	0x20000084
 8000abc:	20000094 	.word	0x20000094
 8000ac0:	20000088 	.word	0x20000088
 8000ac4:	20000098 	.word	0x20000098
 8000ac8:	200000a8 	.word	0x200000a8
 8000acc:	20000002 	.word	0x20000002
 8000ad0:	20000006 	.word	0x20000006
 8000ad4:	10624dd3 	.word	0x10624dd3
 8000ad8:	20000004 	.word	0x20000004
		case PEDESTRIAN_TO_CAR:

			//turn off pedestrian green leds and light orange car leds and red pedestrian leds
			if( xSemaphoreTake(ledBlock, (TickType_t)10) == pdTRUE ){
 8000adc:	4b31      	ldr	r3, [pc, #196]	@ (8000ba4 <task1_logic+0x3b0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	210a      	movs	r1, #10
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f005 f986 	bl	8005df4 <xQueueSemaphoreTake>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d126      	bne.n	8000b3c <task1_logic+0x348>
				set_led(&leds, NORTH, TRAFFIC_LIGHT, ORANGE, ON);
 8000aee:	2301      	movs	r3, #1
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	2200      	movs	r2, #0
 8000af6:	2103      	movs	r1, #3
 8000af8:	482b      	ldr	r0, [pc, #172]	@ (8000ba8 <task1_logic+0x3b4>)
 8000afa:	f000 fb15 	bl	8001128 <set_led>
				set_led(&leds, SOUTH, TRAFFIC_LIGHT, ORANGE, ON);
 8000afe:	2301      	movs	r3, #1
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	2200      	movs	r2, #0
 8000b06:	2101      	movs	r1, #1
 8000b08:	4827      	ldr	r0, [pc, #156]	@ (8000ba8 <task1_logic+0x3b4>)
 8000b0a:	f000 fb0d 	bl	8001128 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, GREEN, OFF);
 8000b0e:	2300      	movs	r3, #0
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	2302      	movs	r3, #2
 8000b14:	2201      	movs	r2, #1
 8000b16:	2103      	movs	r1, #3
 8000b18:	4823      	ldr	r0, [pc, #140]	@ (8000ba8 <task1_logic+0x3b4>)
 8000b1a:	f000 fb05 	bl	8001128 <set_led>
				set_led(&leds, NORTH, PEDESTRIAN_LIGHT, RED, ON);
 8000b1e:	2301      	movs	r3, #1
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	2300      	movs	r3, #0
 8000b24:	2201      	movs	r2, #1
 8000b26:	2103      	movs	r1, #3
 8000b28:	481f      	ldr	r0, [pc, #124]	@ (8000ba8 <task1_logic+0x3b4>)
 8000b2a:	f000 fafd 	bl	8001128 <set_led>
				xSemaphoreGive(ledBlock);
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <task1_logic+0x3b0>)
 8000b30:	6818      	ldr	r0, [r3, #0]
 8000b32:	2300      	movs	r3, #0
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	f004 feda 	bl	80058f0 <xQueueGenericSend>
			/*
			assert that pedestrian flag is cleared
			effectively disregard any button presses made
			when pedestrian light was green or waiting to turn green
			*/
			if( xSemaphoreTake(trafficBlock, (TickType_t)10) == pdTRUE ){
 8000b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bac <task1_logic+0x3b8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	210a      	movs	r1, #10
 8000b42:	4618      	mov	r0, r3
 8000b44:	f005 f956 	bl	8005df4 <xQueueSemaphoreTake>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d109      	bne.n	8000b62 <task1_logic+0x36e>
				traffic.north_pedestrian = false;
 8000b4e:	4b18      	ldr	r3, [pc, #96]	@ (8000bb0 <task1_logic+0x3bc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	711a      	strb	r2, [r3, #4]
				xSemaphoreGive(trafficBlock);
 8000b54:	4b15      	ldr	r3, [pc, #84]	@ (8000bac <task1_logic+0x3b8>)
 8000b56:	6818      	ldr	r0, [r3, #0]
 8000b58:	2300      	movs	r3, #0
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f004 fec7 	bl	80058f0 <xQueueGenericSend>
			}

			//delay for orangeDelay ms
			period = pdMS_TO_TICKS(orangeDelay);
 8000b62:	4b14      	ldr	r3, [pc, #80]	@ (8000bb4 <task1_logic+0x3c0>)
 8000b64:	881b      	ldrh	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6c:	fb02 f303 	mul.w	r3, r2, r3
 8000b70:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <task1_logic+0x3c4>)
 8000b72:	fba2 2303 	umull	r2, r3, r2, r3
 8000b76:	099b      	lsrs	r3, r3, #6
 8000b78:	607b      	str	r3, [r7, #4]
			time = xTaskGetTickCount();
 8000b7a:	f006 fadb 	bl	8007134 <xTaskGetTickCount>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	603b      	str	r3, [r7, #0]
			vTaskDelayUntil(&time, period);
 8000b82:	463b      	mov	r3, r7
 8000b84:	6879      	ldr	r1, [r7, #4]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f006 f902 	bl	8006d90 <vTaskDelayUntil>

			nextState = CAR_GO;
 8000b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bbc <task1_logic+0x3c8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
			break;
 8000b92:	e002      	b.n	8000b9a <task1_logic+0x3a6>
		default:
			break;
 8000b94:	bf00      	nop
 8000b96:	e000      	b.n	8000b9a <task1_logic+0x3a6>
			break;
 8000b98:	bf00      	nop
	}

}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000090 	.word	0x20000090
 8000ba8:	20000084 	.word	0x20000084
 8000bac:	20000094 	.word	0x20000094
 8000bb0:	20000088 	.word	0x20000088
 8000bb4:	20000006 	.word	0x20000006
 8000bb8:	10624dd3 	.word	0x10624dd3
 8000bbc:	2000008f 	.word	0x2000008f

08000bc0 <HAL_GPIO_EXTI_Callback>:


/**
 * @brief: redefinition of callback for external interrupt
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	80fb      	strh	r3, [r7, #6]
	uint8_t message[1];
	message[0] = 0x1;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	733b      	strb	r3, [r7, #12]

	switch( GPIO_Pin ){
 8000bce:	88fb      	ldrh	r3, [r7, #6]
 8000bd0:	2b80      	cmp	r3, #128	@ 0x80
 8000bd2:	d017      	beq.n	8000c04 <HAL_GPIO_EXTI_Callback+0x44>
 8000bd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000bd8:	d12a      	bne.n	8000c30 <HAL_GPIO_EXTI_Callback+0x70>
		case PL1_Switch_Pin:
			HAL_GPIO_TogglePin(USR_LED1_GPIO_Port, USR_LED1_Pin);
 8000bda:	2104      	movs	r1, #4
 8000bdc:	4819      	ldr	r0, [pc, #100]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x84>)
 8000bde:	f001 fc01 	bl	80023e4 <HAL_GPIO_TogglePin>

			if( xMessageBufferIsEmpty( message_pedestrian_west ) == pdTRUE ){
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x88>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f005 fda6 	bl	8006738 <xStreamBufferIsEmpty>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d120      	bne.n	8000c34 <HAL_GPIO_EXTI_Callback+0x74>
				xMessageBufferSendFromISR( message_pedestrian_west, message, 1 , NULL);
 8000bf2:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <HAL_GPIO_EXTI_Callback+0x88>)
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	f107 010c 	add.w	r1, r7, #12
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f005 fc21 	bl	8006444 <xStreamBufferSendFromISR>
			}

			break;
 8000c02:	e017      	b.n	8000c34 <HAL_GPIO_EXTI_Callback+0x74>
		case PL2_Switch_Pin:
			HAL_GPIO_TogglePin(USR_LED2_GPIO_Port, USR_LED2_Pin);
 8000c04:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c08:	480e      	ldr	r0, [pc, #56]	@ (8000c44 <HAL_GPIO_EXTI_Callback+0x84>)
 8000c0a:	f001 fbeb 	bl	80023e4 <HAL_GPIO_TogglePin>

			if( xMessageBufferIsEmpty( message_pedestrian_north ) == pdTRUE ){
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c4c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f005 fd90 	bl	8006738 <xStreamBufferIsEmpty>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10c      	bne.n	8000c38 <HAL_GPIO_EXTI_Callback+0x78>
				xMessageBufferSendFromISR( message_pedestrian_north, message, 1 , NULL);
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	f107 010c 	add.w	r1, r7, #12
 8000c26:	2300      	movs	r3, #0
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f005 fc0b 	bl	8006444 <xStreamBufferSendFromISR>
			}

			break;
 8000c2e:	e003      	b.n	8000c38 <HAL_GPIO_EXTI_Callback+0x78>
		default:
			break;
 8000c30:	bf00      	nop
 8000c32:	e002      	b.n	8000c3a <HAL_GPIO_EXTI_Callback+0x7a>
			break;
 8000c34:	bf00      	nop
 8000c36:	e000      	b.n	8000c3a <HAL_GPIO_EXTI_Callback+0x7a>
			break;
 8000c38:	bf00      	nop
	}

}
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	48000400 	.word	0x48000400
 8000c48:	200000a0 	.word	0x200000a0
 8000c4c:	200000a4 	.word	0x200000a4

08000c50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	@ 0x28
 8000c54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	4b63      	ldr	r3, [pc, #396]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c6a:	4a62      	ldr	r2, [pc, #392]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c6c:	f043 0304 	orr.w	r3, r3, #4
 8000c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c72:	4b60      	ldr	r3, [pc, #384]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c76:	f003 0304 	and.w	r3, r3, #4
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7e:	4b5d      	ldr	r3, [pc, #372]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c82:	4a5c      	ldr	r2, [pc, #368]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c8a:	4b5a      	ldr	r3, [pc, #360]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	4b57      	ldr	r3, [pc, #348]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c9a:	4a56      	ldr	r2, [pc, #344]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ca2:	4b54      	ldr	r3, [pc, #336]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cae:	4b51      	ldr	r3, [pc, #324]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb2:	4a50      	ldr	r2, [pc, #320]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cba:	4b4e      	ldr	r3, [pc, #312]	@ (8000df4 <MX_GPIO_Init+0x1a4>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SR_RESET_Pin, GPIO_PIN_RESET);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8000ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cd0:	f001 fb70 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_LED1_Pin|SR_STCP_Pin|USR_LED2_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f249 0104 	movw	r1, #36868	@ 0x9004
 8000cda:	4847      	ldr	r0, [pc, #284]	@ (8000df8 <MX_GPIO_Init+0x1a8>)
 8000cdc:	f001 fb6a 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SR_ENABLE_GPIO_Port, SR_ENABLE_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2180      	movs	r1, #128	@ 0x80
 8000ce4:	4845      	ldr	r0, [pc, #276]	@ (8000dfc <MX_GPIO_Init+0x1ac>)
 8000ce6:	f001 fb65 	bl	80023b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SR_RESET_Pin;
 8000cea:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d06:	f001 f993 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL1_CAR_Pin;
 8000d0a:	2310      	movs	r3, #16
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL1_CAR_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4837      	ldr	r0, [pc, #220]	@ (8000dfc <MX_GPIO_Init+0x1ac>)
 8000d1e:	f001 f987 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = USR_LED1_Pin|SR_STCP_Pin|USR_LED2_Pin;
 8000d22:	f249 0304 	movw	r3, #36868	@ 0x9004
 8000d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d30:	2300      	movs	r3, #0
 8000d32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	4619      	mov	r1, r3
 8000d3a:	482f      	ldr	r0, [pc, #188]	@ (8000df8 <MX_GPIO_Init+0x1a8>)
 8000d3c:	f001 f978 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = TL2_CAR_Pin|TL3_CAR_Pin;
 8000d40:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	4828      	ldr	r0, [pc, #160]	@ (8000df8 <MX_GPIO_Init+0x1a8>)
 8000d56:	f001 f96b 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SR_ENABLE_Pin;
 8000d5a:	2380      	movs	r3, #128	@ 0x80
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d66:	2300      	movs	r3, #0
 8000d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SR_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4822      	ldr	r0, [pc, #136]	@ (8000dfc <MX_GPIO_Init+0x1ac>)
 8000d72:	f001 f95d 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TL4_CAR_Pin;
 8000d76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TL4_CAR_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d8e:	f001 f94f 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL1_Switch_Pin;
 8000d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d98:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL1_Switch_GPIO_Port, &GPIO_InitStruct);
 8000da2:	f107 0314 	add.w	r3, r7, #20
 8000da6:	4619      	mov	r1, r3
 8000da8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dac:	f001 f940 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PL2_Switch_Pin;
 8000db0:	2380      	movs	r3, #128	@ 0x80
 8000db2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000db4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PL2_Switch_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <MX_GPIO_Init+0x1a8>)
 8000dc6:	f001 f933 	bl	8002030 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2017      	movs	r0, #23
 8000dd0:	f001 f904 	bl	8001fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000dd4:	2017      	movs	r0, #23
 8000dd6:	f001 f91d 	bl	8002014 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	2028      	movs	r0, #40	@ 0x28
 8000de0:	f001 f8fc 	bl	8001fdc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000de4:	2028      	movs	r0, #40	@ 0x28
 8000de6:	f001 f915 	bl	8002014 <HAL_NVIC_EnableIRQ>

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000
 8000df8:	48000400 	.word	0x48000400
 8000dfc:	48000800 	.word	0x48000800

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e04:	f000 fff2 	bl	8001dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e08:	f000 f810 	bl	8000e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e0c:	f7ff ff20 	bl	8000c50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e10:	f000 ff36 	bl	8001c80 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000e14:	f000 fdb8 	bl	8001988 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  SR_Init(); //initialize shift registers (probably unnecessary)
 8000e18:	f000 f89a 	bl	8000f50 <SR_Init>

//  test_low_level(); //run tests
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000e1c:	f004 fa10 	bl	8005240 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000e20:	f7ff fb4e 	bl	80004c0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000e24:	f004 fa30 	bl	8005288 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <main+0x28>

08000e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b096      	sub	sp, #88	@ 0x58
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	2244      	movs	r2, #68	@ 0x44
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f008 f87c 	bl	8008f38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e4e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000e52:	f001 fb07 	bl	8002464 <HAL_PWREx_ControlVoltageScaling>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e5c:	f000 f84a 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2302      	movs	r3, #2
 8000e62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e6a:	2310      	movs	r3, #16
 8000e6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e72:	2302      	movs	r3, #2
 8000e74:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e76:	2301      	movs	r3, #1
 8000e78:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000e7a:	230a      	movs	r3, #10
 8000e7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e82:	2302      	movs	r3, #2
 8000e84:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e86:	2302      	movs	r3, #2
 8000e88:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f001 fb3e 	bl	8002510 <HAL_RCC_OscConfig>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e9a:	f000 f82b 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e9e:	230f      	movs	r3, #15
 8000ea0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eb2:	463b      	mov	r3, r7
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 ff06 	bl	8002cc8 <HAL_RCC_ClockConfig>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ec2:	f000 f817 	bl	8000ef4 <Error_Handler>
  }
}
 8000ec6:	bf00      	nop
 8000ec8:	3758      	adds	r7, #88	@ 0x58
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ee2:	f000 ffa3 	bl	8001e2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40012c00 	.word	0x40012c00

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <Error_Handler+0x8>

08000f00 <SR_Send>:
 * 					bytes[0] respresents Shift regsiter3
 * 					bytes[1] respresents Shift regsiter2
 * 					bytes[2] respresents Shift regsiter1
 *
 */
int8_t SR_Send(uint8_t bytes[]){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status;
	status = HAL_SPI_Transmit(&hspi3, bytes, 3, 1000);
 8000f08:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	6879      	ldr	r1, [r7, #4]
 8000f10:	480d      	ldr	r0, [pc, #52]	@ (8000f48 <SR_Send+0x48>)
 8000f12:	f002 fe8e 	bl	8003c32 <HAL_SPI_Transmit>
 8000f16:	4603      	mov	r3, r0
 8000f18:	73fb      	strb	r3, [r7, #15]

	if(status == HAL_OK){
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d10d      	bne.n	8000f3c <SR_Send+0x3c>
		HAL_GPIO_WritePin(SR_STCP_GPIO_Port, SR_STCP_Pin, GPIO_PIN_SET); //toggle stcp to put it to the output
 8000f20:	2201      	movs	r2, #1
 8000f22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f26:	4809      	ldr	r0, [pc, #36]	@ (8000f4c <SR_Send+0x4c>)
 8000f28:	f001 fa44 	bl	80023b4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SR_STCP_GPIO_Port, SR_STCP_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f32:	4806      	ldr	r0, [pc, #24]	@ (8000f4c <SR_Send+0x4c>)
 8000f34:	f001 fa3e 	bl	80023b4 <HAL_GPIO_WritePin>
		return 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e001      	b.n	8000f40 <SR_Send+0x40>
	}

	return -1;
 8000f3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	200000c0 	.word	0x200000c0
 8000f4c:	48000400 	.word	0x48000400

08000f50 <SR_Init>:
/**
 * @brief	:	function for initializing shift register
 * @param	:	void
 * @return	:	void
 */
void SR_Init(void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
	//set SR_reset high (active low)
	HAL_GPIO_WritePin(SR_RESET_GPIO_PORT, SR_RESET_Pin, GPIO_PIN_RESET);
 8000f54:	2200      	movs	r2, #0
 8000f56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f5e:	f001 fa29 	bl	80023b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SR_RESET_GPIO_PORT, SR_RESET_Pin, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f68:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f6c:	f001 fa22 	bl	80023b4 <HAL_GPIO_WritePin>

	//set SR_ENABLE low (output enable is active low)
	HAL_GPIO_WritePin(SR_ENABLE_GPIO_Port, SR_ENABLE_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	2180      	movs	r1, #128	@ 0x80
 8000f74:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <SR_Init+0x3c>)
 8000f76:	f001 fa1d 	bl	80023b4 <HAL_GPIO_WritePin>

	//set SR_STCP low (data transferred to storage register on rising edge)
	HAL_GPIO_WritePin(SR_STCP_GPIO_Port, SR_STCP_Pin, GPIO_PIN_RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f80:	4803      	ldr	r0, [pc, #12]	@ (8000f90 <SR_Init+0x40>)
 8000f82:	f001 fa17 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	48000800 	.word	0x48000800
 8000f90:	48000400 	.word	0x48000400

08000f94 <led_registers_init>:
#include "shield_abstraction.h"

/**
 * @brief : initialization of led register struct
 */
void led_registers_init(led_registers_t* registers){
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	registers->sr1 = 0x00;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	701a      	strb	r2, [r3, #0]
	registers->sr2 = 0x00;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	705a      	strb	r2, [r3, #1]
	registers->sr3 = 0x00;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	709a      	strb	r2, [r3, #2]
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr

08000fba <update_leds>:

/**
 * @brief : re-package contents of a ledregister struct and send it to shift registers
 */
void update_leds(led_registers_t* registers){
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
	uint8_t buf[3];

	buf[0] = registers->sr3;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	789b      	ldrb	r3, [r3, #2]
 8000fc6:	733b      	strb	r3, [r7, #12]
	buf[1] = registers->sr2;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	785b      	ldrb	r3, [r3, #1]
 8000fcc:	737b      	strb	r3, [r7, #13]
	buf[2] = registers->sr1;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	73bb      	strb	r3, [r7, #14]
	SR_Send(buf);
 8000fd4:	f107 030c 	add.w	r3, r7, #12
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff91 	bl	8000f00 <SR_Send>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <traffic_state_init>:


int8_t traffic_state_init(traffic_state_t* state){
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	state->north_pedestrian = false;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	711a      	strb	r2, [r3, #4]
	state->west_pedestrian = false;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	715a      	strb	r2, [r3, #5]

	state->north_car = check_car(NORTH);
 8000ffa:	2003      	movs	r0, #3
 8000ffc:	f000 f81e 	bl	800103c <check_car>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	701a      	strb	r2, [r3, #0]
	state->west_car = check_car(WEST);
 8001008:	2000      	movs	r0, #0
 800100a:	f000 f817 	bl	800103c <check_car>
 800100e:	4603      	mov	r3, r0
 8001010:	461a      	mov	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	705a      	strb	r2, [r3, #1]
	state->south_car = check_car(SOUTH);
 8001016:	2001      	movs	r0, #1
 8001018:	f000 f810 	bl	800103c <check_car>
 800101c:	4603      	mov	r3, r0
 800101e:	461a      	mov	r2, r3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	709a      	strb	r2, [r3, #2]
	state->east_car = check_car(EAST);
 8001024:	2002      	movs	r0, #2
 8001026:	f000 f809 	bl	800103c <check_car>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	70da      	strb	r2, [r3, #3]

	return 0;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <check_car>:
/**
 * @brief : check switch status at a given position in the junction
 * @param : junction_position_t position, position in junction
 * @return : boolean, true if switch active
 */
bool check_car(junction_position_t position){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	switch (position){
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b03      	cmp	r3, #3
 800104a:	d833      	bhi.n	80010b4 <check_car+0x78>
 800104c:	a201      	add	r2, pc, #4	@ (adr r2, 8001054 <check_car+0x18>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	0800107b 	.word	0x0800107b
 8001058:	0800108d 	.word	0x0800108d
 800105c:	080010a1 	.word	0x080010a1
 8001060:	08001065 	.word	0x08001065
		case NORTH:
			if( HAL_GPIO_ReadPin(TL4_CAR_GPIO_Port, TL4_CAR_Pin) == GPIO_PIN_SET ){
 8001064:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001068:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800106c:	f001 f98a 	bl	8002384 <HAL_GPIO_ReadPin>
 8001070:	4603      	mov	r3, r0
 8001072:	2b01      	cmp	r3, #1
 8001074:	d120      	bne.n	80010b8 <check_car+0x7c>
				return true;
 8001076:	2301      	movs	r3, #1
 8001078:	e026      	b.n	80010c8 <check_car+0x8c>
			}
			break;
		case WEST:
			if( HAL_GPIO_ReadPin(TL1_CAR_GPIO_Port, TL1_CAR_Pin) == GPIO_PIN_SET ){
 800107a:	2110      	movs	r1, #16
 800107c:	4814      	ldr	r0, [pc, #80]	@ (80010d0 <check_car+0x94>)
 800107e:	f001 f981 	bl	8002384 <HAL_GPIO_ReadPin>
 8001082:	4603      	mov	r3, r0
 8001084:	2b01      	cmp	r3, #1
 8001086:	d119      	bne.n	80010bc <check_car+0x80>
				return true;
 8001088:	2301      	movs	r3, #1
 800108a:	e01d      	b.n	80010c8 <check_car+0x8c>
			}
			break;
		case SOUTH:
			if( HAL_GPIO_ReadPin(TL2_CAR_GPIO_Port, TL2_CAR_Pin) == GPIO_PIN_SET ){
 800108c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001090:	4810      	ldr	r0, [pc, #64]	@ (80010d4 <check_car+0x98>)
 8001092:	f001 f977 	bl	8002384 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	d111      	bne.n	80010c0 <check_car+0x84>
				return true;
 800109c:	2301      	movs	r3, #1
 800109e:	e013      	b.n	80010c8 <check_car+0x8c>
			}
			break;
		case EAST:
			if( HAL_GPIO_ReadPin(TL3_CAR_GPIO_Port, TL3_CAR_Pin) == GPIO_PIN_SET ){
 80010a0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010a4:	480b      	ldr	r0, [pc, #44]	@ (80010d4 <check_car+0x98>)
 80010a6:	f001 f96d 	bl	8002384 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d109      	bne.n	80010c4 <check_car+0x88>
				return true;
 80010b0:	2301      	movs	r3, #1
 80010b2:	e009      	b.n	80010c8 <check_car+0x8c>
			}
			break;
		default:
			return false;
 80010b4:	2300      	movs	r3, #0
 80010b6:	e007      	b.n	80010c8 <check_car+0x8c>
			break;
 80010b8:	bf00      	nop
 80010ba:	e004      	b.n	80010c6 <check_car+0x8a>
			break;
 80010bc:	bf00      	nop
 80010be:	e002      	b.n	80010c6 <check_car+0x8a>
			break;
 80010c0:	bf00      	nop
 80010c2:	e000      	b.n	80010c6 <check_car+0x8a>
			break;
 80010c4:	bf00      	nop
			break;
	}
	return false;
 80010c6:	2300      	movs	r3, #0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	48000800 	.word	0x48000800
 80010d4:	48000400 	.word	0x48000400

080010d8 <set_led_all>:

void set_led_all(led_registers_t* leds, led_state_t led_state){
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	460b      	mov	r3, r1
 80010e2:	70fb      	strb	r3, [r7, #3]
	switch (led_state){
 80010e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d00b      	beq.n	8001104 <set_led_all+0x2c>
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d113      	bne.n	8001118 <set_led_all+0x40>
		case ON:
			leds->sr3 = 0xff;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	22ff      	movs	r2, #255	@ 0xff
 80010f4:	709a      	strb	r2, [r3, #2]
			leds->sr2 = 0xff;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	22ff      	movs	r2, #255	@ 0xff
 80010fa:	705a      	strb	r2, [r3, #1]
			leds->sr1 = 0xff;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	22ff      	movs	r2, #255	@ 0xff
 8001100:	701a      	strb	r2, [r3, #0]
			break;
 8001102:	e00a      	b.n	800111a <set_led_all+0x42>
		case OFF:
			leds->sr3 = 0x00;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	709a      	strb	r2, [r3, #2]
			leds->sr2 = 0x00;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	705a      	strb	r2, [r3, #1]
			leds->sr1 = 0x00;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
			break;
 8001116:	e000      	b.n	800111a <set_led_all+0x42>
		default:
			break;
 8001118:	bf00      	nop
	}
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <set_led>:


void set_led(led_registers_t* leds, junction_position_t position, light_type_t light_type, light_color_t color, led_state_t led_state){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	70fb      	strb	r3, [r7, #3]
 800113a:	460b      	mov	r3, r1
 800113c:	70bb      	strb	r3, [r7, #2]
 800113e:	4613      	mov	r3, r2
 8001140:	707b      	strb	r3, [r7, #1]

	//reroute to help functions instead of indentation hell
	switch (position){
 8001142:	78fb      	ldrb	r3, [r7, #3]
 8001144:	2b03      	cmp	r3, #3
 8001146:	d82b      	bhi.n	80011a0 <set_led+0x78>
 8001148:	a201      	add	r2, pc, #4	@ (adr r2, 8001150 <set_led+0x28>)
 800114a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800114e:	bf00      	nop
 8001150:	08001171 	.word	0x08001171
 8001154:	08001181 	.word	0x08001181
 8001158:	08001191 	.word	0x08001191
 800115c:	08001161 	.word	0x08001161
		case NORTH:
			north_leds(leds, light_type, color, led_state);
 8001160:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001164:	787a      	ldrb	r2, [r7, #1]
 8001166:	78b9      	ldrb	r1, [r7, #2]
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f81f 	bl	80011ac <north_leds>
			break;
 800116e:	e018      	b.n	80011a2 <set_led+0x7a>
		case WEST:
			west_leds(leds, light_type, color, led_state);
 8001170:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001174:	787a      	ldrb	r2, [r7, #1]
 8001176:	78b9      	ldrb	r1, [r7, #2]
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f000 f83e 	bl	80011fa <west_leds>
			break;
 800117e:	e010      	b.n	80011a2 <set_led+0x7a>
		case SOUTH:
			south_leds(leds, light_type, color, led_state);
 8001180:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001184:	787a      	ldrb	r2, [r7, #1]
 8001186:	78b9      	ldrb	r1, [r7, #2]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 f85d 	bl	8001248 <south_leds>
			break;
 800118e:	e008      	b.n	80011a2 <set_led+0x7a>
		case EAST:
			east_leds(leds, light_type, color, led_state);
 8001190:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001194:	787a      	ldrb	r2, [r7, #1]
 8001196:	78b9      	ldrb	r1, [r7, #2]
 8001198:	6878      	ldr	r0, [r7, #4]
 800119a:	f000 f875 	bl	8001288 <east_leds>
			break;
 800119e:	e000      	b.n	80011a2 <set_led+0x7a>
		default:
			break;
 80011a0:	bf00      	nop
	}
}
 80011a2:	bf00      	nop
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop

080011ac <north_leds>:

//help functions
void north_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	4608      	mov	r0, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	461a      	mov	r2, r3
 80011ba:	4603      	mov	r3, r0
 80011bc:	70fb      	strb	r3, [r7, #3]
 80011be:	460b      	mov	r3, r1
 80011c0:	70bb      	strb	r3, [r7, #2]
 80011c2:	4613      	mov	r3, r2
 80011c4:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d002      	beq.n	80011d2 <north_leds+0x26>
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d008      	beq.n	80011e2 <north_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			north_pedestrian_light(leds, color, led_state);
			break;
		default:
			break;
 80011d0:	e00f      	b.n	80011f2 <north_leds+0x46>
			north_traffic_light(leds, color, led_state);
 80011d2:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80011d6:	78bb      	ldrb	r3, [r7, #2]
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 f874 	bl	80012c8 <north_traffic_light>
			break;
 80011e0:	e007      	b.n	80011f2 <north_leds+0x46>
			north_pedestrian_light(leds, color, led_state);
 80011e2:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80011e6:	78bb      	ldrb	r3, [r7, #2]
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 faac 	bl	8001748 <north_pedestrian_light>
			break;
 80011f0:	bf00      	nop
	}
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <west_leds>:
void west_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	4608      	mov	r0, r1
 8001204:	4611      	mov	r1, r2
 8001206:	461a      	mov	r2, r3
 8001208:	4603      	mov	r3, r0
 800120a:	70fb      	strb	r3, [r7, #3]
 800120c:	460b      	mov	r3, r1
 800120e:	70bb      	strb	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d002      	beq.n	8001220 <west_leds+0x26>
 800121a:	2b01      	cmp	r3, #1
 800121c:	d008      	beq.n	8001230 <west_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			west_pedestrian_light(leds, color, led_state);
			break;
		default:
			break;
 800121e:	e00f      	b.n	8001240 <west_leds+0x46>
			west_traffic_light(leds, color, led_state);
 8001220:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001224:	78bb      	ldrb	r3, [r7, #2]
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f000 f8dd 	bl	80013e8 <west_traffic_light>
			break;
 800122e:	e007      	b.n	8001240 <west_leds+0x46>
			west_pedestrian_light(leds, color, led_state);
 8001230:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001234:	78bb      	ldrb	r3, [r7, #2]
 8001236:	4619      	mov	r1, r3
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fb15 	bl	8001868 <west_pedestrian_light>
			break;
 800123e:	bf00      	nop
	}
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <south_leds>:
void south_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	4608      	mov	r0, r1
 8001252:	4611      	mov	r1, r2
 8001254:	461a      	mov	r2, r3
 8001256:	4603      	mov	r3, r0
 8001258:	70fb      	strb	r3, [r7, #3]
 800125a:	460b      	mov	r3, r1
 800125c:	70bb      	strb	r3, [r7, #2]
 800125e:	4613      	mov	r3, r2
 8001260:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 8001262:	78fb      	ldrb	r3, [r7, #3]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <south_leds+0x26>
 8001268:	2b01      	cmp	r3, #1
 800126a:	d008      	beq.n	800127e <south_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			//do nothing (no pedestrian lights)
			break;
		default:
			break;
 800126c:	e008      	b.n	8001280 <south_leds+0x38>
			south_traffic_light(leds, color, led_state);
 800126e:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001272:	78bb      	ldrb	r3, [r7, #2]
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 f946 	bl	8001508 <south_traffic_light>
			break;
 800127c:	e000      	b.n	8001280 <south_leds+0x38>
			break;
 800127e:	bf00      	nop
	}
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <east_leds>:
void east_leds(led_registers_t* leds, light_type_t light_type, light_color_t color, led_state_t led_state){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	70fb      	strb	r3, [r7, #3]
 800129a:	460b      	mov	r3, r1
 800129c:	70bb      	strb	r3, [r7, #2]
 800129e:	4613      	mov	r3, r2
 80012a0:	707b      	strb	r3, [r7, #1]
	switch (light_type){
 80012a2:	78fb      	ldrb	r3, [r7, #3]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <east_leds+0x26>
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d008      	beq.n	80012be <east_leds+0x36>
			break;
		case PEDESTRIAN_LIGHT:
			//do nothing (no pedestrian lights)
			break;
		default:
			break;
 80012ac:	e008      	b.n	80012c0 <east_leds+0x38>
			east_traffic_light(leds, color, led_state);
 80012ae:	f997 2001 	ldrsb.w	r2, [r7, #1]
 80012b2:	78bb      	ldrb	r3, [r7, #2]
 80012b4:	4619      	mov	r1, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f000 f9b6 	bl	8001628 <east_traffic_light>
			break;
 80012bc:	e000      	b.n	80012c0 <east_leds+0x38>
			break;
 80012be:	bf00      	nop
	}
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <north_traffic_light>:


//more help functions
void north_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
 80012d4:	4613      	mov	r3, r2
 80012d6:	70bb      	strb	r3, [r7, #2]
	switch (color){
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d87c      	bhi.n	80013d8 <north_traffic_light+0x110>
 80012de:	a201      	add	r2, pc, #4	@ (adr r2, 80012e4 <north_traffic_light+0x1c>)
 80012e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	08001341 	.word	0x08001341
 80012ec:	0800138d 	.word	0x0800138d
 80012f0:	080013d9 	.word	0x080013d9
		case RED:
			switch (led_state){
 80012f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d007      	beq.n	800130c <north_traffic_light+0x44>
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	dc1d      	bgt.n	800133c <north_traffic_light+0x74>
 8001300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001304:	d012      	beq.n	800132c <north_traffic_light+0x64>
 8001306:	2b00      	cmp	r3, #0
 8001308:	d008      	beq.n	800131c <north_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL4_RED;
					break;
				default:
					break;
 800130a:	e017      	b.n	800133c <north_traffic_light+0x74>
					leds->sr3 = leds->sr3 | TL4_RED;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	b2da      	uxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	709a      	strb	r2, [r3, #2]
					break;
 800131a:	e010      	b.n	800133e <north_traffic_light+0x76>
					leds->sr3 = leds->sr3 & ~TL4_RED;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	f023 0308 	bic.w	r3, r3, #8
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	709a      	strb	r2, [r3, #2]
					break;
 800132a:	e008      	b.n	800133e <north_traffic_light+0x76>
					leds->sr3 = leds->sr3 ^ TL4_RED;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	789b      	ldrb	r3, [r3, #2]
 8001330:	f083 0308 	eor.w	r3, r3, #8
 8001334:	b2da      	uxtb	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	709a      	strb	r2, [r3, #2]
					break;
 800133a:	e000      	b.n	800133e <north_traffic_light+0x76>
					break;
 800133c:	bf00      	nop
			}
			break;
 800133e:	e04c      	b.n	80013da <north_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 8001340:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d007      	beq.n	8001358 <north_traffic_light+0x90>
 8001348:	2b01      	cmp	r3, #1
 800134a:	dc1d      	bgt.n	8001388 <north_traffic_light+0xc0>
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001350:	d012      	beq.n	8001378 <north_traffic_light+0xb0>
 8001352:	2b00      	cmp	r3, #0
 8001354:	d008      	beq.n	8001368 <north_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL4_YELLOW;
					break;
				default:
					break;
 8001356:	e017      	b.n	8001388 <north_traffic_light+0xc0>
					leds->sr3 = leds->sr3 | TL4_YELLOW;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	789b      	ldrb	r3, [r3, #2]
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	b2da      	uxtb	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	709a      	strb	r2, [r3, #2]
					break;
 8001366:	e010      	b.n	800138a <north_traffic_light+0xc2>
					leds->sr3 = leds->sr3 & ~TL4_YELLOW;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	789b      	ldrb	r3, [r3, #2]
 800136c:	f023 0310 	bic.w	r3, r3, #16
 8001370:	b2da      	uxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	709a      	strb	r2, [r3, #2]
					break;
 8001376:	e008      	b.n	800138a <north_traffic_light+0xc2>
					leds->sr3 = leds->sr3 ^ TL4_YELLOW;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	789b      	ldrb	r3, [r3, #2]
 800137c:	f083 0310 	eor.w	r3, r3, #16
 8001380:	b2da      	uxtb	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	709a      	strb	r2, [r3, #2]
					break;
 8001386:	e000      	b.n	800138a <north_traffic_light+0xc2>
					break;
 8001388:	bf00      	nop
			}
			break;
 800138a:	e026      	b.n	80013da <north_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 800138c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d007      	beq.n	80013a4 <north_traffic_light+0xdc>
 8001394:	2b01      	cmp	r3, #1
 8001396:	dc1d      	bgt.n	80013d4 <north_traffic_light+0x10c>
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800139c:	d012      	beq.n	80013c4 <north_traffic_light+0xfc>
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d008      	beq.n	80013b4 <north_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL4_GREEN;
					break;
				default:
					break;
 80013a2:	e017      	b.n	80013d4 <north_traffic_light+0x10c>
					leds->sr3 = leds->sr3 | TL4_GREEN;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	789b      	ldrb	r3, [r3, #2]
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	b2da      	uxtb	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	709a      	strb	r2, [r3, #2]
					break;
 80013b2:	e010      	b.n	80013d6 <north_traffic_light+0x10e>
					leds->sr3 = leds->sr3 & ~TL4_GREEN;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	789b      	ldrb	r3, [r3, #2]
 80013b8:	f023 0320 	bic.w	r3, r3, #32
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	709a      	strb	r2, [r3, #2]
					break;
 80013c2:	e008      	b.n	80013d6 <north_traffic_light+0x10e>
					leds->sr3 = leds->sr3 ^ TL4_GREEN;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	f083 0320 	eor.w	r3, r3, #32
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	709a      	strb	r2, [r3, #2]
					break;
 80013d2:	e000      	b.n	80013d6 <north_traffic_light+0x10e>
					break;
 80013d4:	bf00      	nop
			}
			break;
 80013d6:	e000      	b.n	80013da <north_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 80013d8:	bf00      	nop
	}
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop

080013e8 <west_traffic_light>:

void west_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
 80013f4:	4613      	mov	r3, r2
 80013f6:	70bb      	strb	r3, [r7, #2]
	switch (color){
 80013f8:	78fb      	ldrb	r3, [r7, #3]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d87c      	bhi.n	80014f8 <west_traffic_light+0x110>
 80013fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001404 <west_traffic_light+0x1c>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	08001415 	.word	0x08001415
 8001408:	08001461 	.word	0x08001461
 800140c:	080014ad 	.word	0x080014ad
 8001410:	080014f9 	.word	0x080014f9
		case RED:
			switch (led_state){
 8001414:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d007      	beq.n	800142c <west_traffic_light+0x44>
 800141c:	2b01      	cmp	r3, #1
 800141e:	dc1d      	bgt.n	800145c <west_traffic_light+0x74>
 8001420:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001424:	d012      	beq.n	800144c <west_traffic_light+0x64>
 8001426:	2b00      	cmp	r3, #0
 8001428:	d008      	beq.n	800143c <west_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ TL1_RED;
					break;
				default:
					break;
 800142a:	e017      	b.n	800145c <west_traffic_light+0x74>
					leds->sr1 = leds->sr1 | TL1_RED;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	b2da      	uxtb	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	701a      	strb	r2, [r3, #0]
					break;
 800143a:	e010      	b.n	800145e <west_traffic_light+0x76>
					leds->sr1 = leds->sr1 & ~TL1_RED;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f023 0301 	bic.w	r3, r3, #1
 8001444:	b2da      	uxtb	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	701a      	strb	r2, [r3, #0]
					break;
 800144a:	e008      	b.n	800145e <west_traffic_light+0x76>
					leds->sr1 = leds->sr1 ^ TL1_RED;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	f083 0301 	eor.w	r3, r3, #1
 8001454:	b2da      	uxtb	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	701a      	strb	r2, [r3, #0]
					break;
 800145a:	e000      	b.n	800145e <west_traffic_light+0x76>
					break;
 800145c:	bf00      	nop
			}
			break;
 800145e:	e04c      	b.n	80014fa <west_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 8001460:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d007      	beq.n	8001478 <west_traffic_light+0x90>
 8001468:	2b01      	cmp	r3, #1
 800146a:	dc1d      	bgt.n	80014a8 <west_traffic_light+0xc0>
 800146c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001470:	d012      	beq.n	8001498 <west_traffic_light+0xb0>
 8001472:	2b00      	cmp	r3, #0
 8001474:	d008      	beq.n	8001488 <west_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ TL1_YELLOW;
					break;
				default:
					break;
 8001476:	e017      	b.n	80014a8 <west_traffic_light+0xc0>
					leds->sr1 = leds->sr1 | TL1_YELLOW;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	701a      	strb	r2, [r3, #0]
					break;
 8001486:	e010      	b.n	80014aa <west_traffic_light+0xc2>
					leds->sr1 = leds->sr1 & ~TL1_YELLOW;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	f023 0302 	bic.w	r3, r3, #2
 8001490:	b2da      	uxtb	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	701a      	strb	r2, [r3, #0]
					break;
 8001496:	e008      	b.n	80014aa <west_traffic_light+0xc2>
					leds->sr1 = leds->sr1 ^ TL1_YELLOW;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f083 0302 	eor.w	r3, r3, #2
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	701a      	strb	r2, [r3, #0]
					break;
 80014a6:	e000      	b.n	80014aa <west_traffic_light+0xc2>
					break;
 80014a8:	bf00      	nop
			}
			break;
 80014aa:	e026      	b.n	80014fa <west_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 80014ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d007      	beq.n	80014c4 <west_traffic_light+0xdc>
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	dc1d      	bgt.n	80014f4 <west_traffic_light+0x10c>
 80014b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014bc:	d012      	beq.n	80014e4 <west_traffic_light+0xfc>
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d008      	beq.n	80014d4 <west_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ TL1_GREEN;
					break;
				default:
					break;
 80014c2:	e017      	b.n	80014f4 <west_traffic_light+0x10c>
					leds->sr1 = leds->sr1 | TL1_GREEN;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	f043 0304 	orr.w	r3, r3, #4
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]
					break;
 80014d2:	e010      	b.n	80014f6 <west_traffic_light+0x10e>
					leds->sr1 = leds->sr1 & ~TL1_GREEN;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	f023 0304 	bic.w	r3, r3, #4
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	701a      	strb	r2, [r3, #0]
					break;
 80014e2:	e008      	b.n	80014f6 <west_traffic_light+0x10e>
					leds->sr1 = leds->sr1 ^ TL1_GREEN;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f083 0304 	eor.w	r3, r3, #4
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	701a      	strb	r2, [r3, #0]
					break;
 80014f2:	e000      	b.n	80014f6 <west_traffic_light+0x10e>
					break;
 80014f4:	bf00      	nop
			}
			break;
 80014f6:	e000      	b.n	80014fa <west_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 80014f8:	bf00      	nop
	}
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop

08001508 <south_traffic_light>:
void south_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	70fb      	strb	r3, [r7, #3]
 8001514:	4613      	mov	r3, r2
 8001516:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001518:	78fb      	ldrb	r3, [r7, #3]
 800151a:	2b03      	cmp	r3, #3
 800151c:	d87c      	bhi.n	8001618 <south_traffic_light+0x110>
 800151e:	a201      	add	r2, pc, #4	@ (adr r2, 8001524 <south_traffic_light+0x1c>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001535 	.word	0x08001535
 8001528:	08001581 	.word	0x08001581
 800152c:	080015cd 	.word	0x080015cd
 8001530:	08001619 	.word	0x08001619
		case RED:
			switch (led_state){
 8001534:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d007      	beq.n	800154c <south_traffic_light+0x44>
 800153c:	2b01      	cmp	r3, #1
 800153e:	dc1d      	bgt.n	800157c <south_traffic_light+0x74>
 8001540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001544:	d012      	beq.n	800156c <south_traffic_light+0x64>
 8001546:	2b00      	cmp	r3, #0
 8001548:	d008      	beq.n	800155c <south_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ TL2_RED;
					break;
				default:
					break;
 800154a:	e017      	b.n	800157c <south_traffic_light+0x74>
					leds->sr2 = leds->sr2 | TL2_RED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	785b      	ldrb	r3, [r3, #1]
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	b2da      	uxtb	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	705a      	strb	r2, [r3, #1]
					break;
 800155a:	e010      	b.n	800157e <south_traffic_light+0x76>
					leds->sr2 = leds->sr2 & ~TL2_RED;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	785b      	ldrb	r3, [r3, #1]
 8001560:	f023 0301 	bic.w	r3, r3, #1
 8001564:	b2da      	uxtb	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	705a      	strb	r2, [r3, #1]
					break;
 800156a:	e008      	b.n	800157e <south_traffic_light+0x76>
					leds->sr2 = leds->sr2 ^ TL2_RED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	785b      	ldrb	r3, [r3, #1]
 8001570:	f083 0301 	eor.w	r3, r3, #1
 8001574:	b2da      	uxtb	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	705a      	strb	r2, [r3, #1]
					break;
 800157a:	e000      	b.n	800157e <south_traffic_light+0x76>
					break;
 800157c:	bf00      	nop
			}
			break;
 800157e:	e04c      	b.n	800161a <south_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 8001580:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d007      	beq.n	8001598 <south_traffic_light+0x90>
 8001588:	2b01      	cmp	r3, #1
 800158a:	dc1d      	bgt.n	80015c8 <south_traffic_light+0xc0>
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001590:	d012      	beq.n	80015b8 <south_traffic_light+0xb0>
 8001592:	2b00      	cmp	r3, #0
 8001594:	d008      	beq.n	80015a8 <south_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ TL2_YELLOW;
					break;
				default:
					break;
 8001596:	e017      	b.n	80015c8 <south_traffic_light+0xc0>
					leds->sr2 = leds->sr2 | TL2_YELLOW;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	f043 0302 	orr.w	r3, r3, #2
 80015a0:	b2da      	uxtb	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	705a      	strb	r2, [r3, #1]
					break;
 80015a6:	e010      	b.n	80015ca <south_traffic_light+0xc2>
					leds->sr2 = leds->sr2 & ~TL2_YELLOW;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	785b      	ldrb	r3, [r3, #1]
 80015ac:	f023 0302 	bic.w	r3, r3, #2
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	705a      	strb	r2, [r3, #1]
					break;
 80015b6:	e008      	b.n	80015ca <south_traffic_light+0xc2>
					leds->sr2 = leds->sr2 ^ TL2_YELLOW;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	785b      	ldrb	r3, [r3, #1]
 80015bc:	f083 0302 	eor.w	r3, r3, #2
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	705a      	strb	r2, [r3, #1]
					break;
 80015c6:	e000      	b.n	80015ca <south_traffic_light+0xc2>
					break;
 80015c8:	bf00      	nop
			}
			break;
 80015ca:	e026      	b.n	800161a <south_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 80015cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d007      	beq.n	80015e4 <south_traffic_light+0xdc>
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	dc1d      	bgt.n	8001614 <south_traffic_light+0x10c>
 80015d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80015dc:	d012      	beq.n	8001604 <south_traffic_light+0xfc>
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d008      	beq.n	80015f4 <south_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ TL2_GREEN;
					break;
				default:
					break;
 80015e2:	e017      	b.n	8001614 <south_traffic_light+0x10c>
					leds->sr2 = leds->sr2 | TL2_GREEN;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	b2da      	uxtb	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	705a      	strb	r2, [r3, #1]
					break;
 80015f2:	e010      	b.n	8001616 <south_traffic_light+0x10e>
					leds->sr2 = leds->sr2 & ~TL2_GREEN;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	785b      	ldrb	r3, [r3, #1]
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	b2da      	uxtb	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	705a      	strb	r2, [r3, #1]
					break;
 8001602:	e008      	b.n	8001616 <south_traffic_light+0x10e>
					leds->sr2 = leds->sr2 ^ TL2_GREEN;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	f083 0304 	eor.w	r3, r3, #4
 800160c:	b2da      	uxtb	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	705a      	strb	r2, [r3, #1]
					break;
 8001612:	e000      	b.n	8001616 <south_traffic_light+0x10e>
					break;
 8001614:	bf00      	nop
			}
			break;
 8001616:	e000      	b.n	800161a <south_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 8001618:	bf00      	nop
	}
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop

08001628 <east_traffic_light>:
void east_traffic_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	460b      	mov	r3, r1
 8001632:	70fb      	strb	r3, [r7, #3]
 8001634:	4613      	mov	r3, r2
 8001636:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001638:	78fb      	ldrb	r3, [r7, #3]
 800163a:	2b03      	cmp	r3, #3
 800163c:	d87c      	bhi.n	8001738 <east_traffic_light+0x110>
 800163e:	a201      	add	r2, pc, #4	@ (adr r2, 8001644 <east_traffic_light+0x1c>)
 8001640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001644:	08001655 	.word	0x08001655
 8001648:	080016a1 	.word	0x080016a1
 800164c:	080016ed 	.word	0x080016ed
 8001650:	08001739 	.word	0x08001739
		case RED:
			switch (led_state){
 8001654:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d007      	beq.n	800166c <east_traffic_light+0x44>
 800165c:	2b01      	cmp	r3, #1
 800165e:	dc1d      	bgt.n	800169c <east_traffic_light+0x74>
 8001660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001664:	d012      	beq.n	800168c <east_traffic_light+0x64>
 8001666:	2b00      	cmp	r3, #0
 8001668:	d008      	beq.n	800167c <east_traffic_light+0x54>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL3_RED;
					break;
				default:
					break;
 800166a:	e017      	b.n	800169c <east_traffic_light+0x74>
					leds->sr3 = leds->sr3 | TL3_RED;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	789b      	ldrb	r3, [r3, #2]
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	709a      	strb	r2, [r3, #2]
					break;
 800167a:	e010      	b.n	800169e <east_traffic_light+0x76>
					leds->sr3 = leds->sr3 & ~TL3_RED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	789b      	ldrb	r3, [r3, #2]
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	709a      	strb	r2, [r3, #2]
					break;
 800168a:	e008      	b.n	800169e <east_traffic_light+0x76>
					leds->sr3 = leds->sr3 ^ TL3_RED;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	789b      	ldrb	r3, [r3, #2]
 8001690:	f083 0301 	eor.w	r3, r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	709a      	strb	r2, [r3, #2]
					break;
 800169a:	e000      	b.n	800169e <east_traffic_light+0x76>
					break;
 800169c:	bf00      	nop
			}
			break;
 800169e:	e04c      	b.n	800173a <east_traffic_light+0x112>
		case YELLOW:
			switch (led_state){
 80016a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d007      	beq.n	80016b8 <east_traffic_light+0x90>
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	dc1d      	bgt.n	80016e8 <east_traffic_light+0xc0>
 80016ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016b0:	d012      	beq.n	80016d8 <east_traffic_light+0xb0>
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <east_traffic_light+0xa0>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL3_YELLOW;
					break;
				default:
					break;
 80016b6:	e017      	b.n	80016e8 <east_traffic_light+0xc0>
					leds->sr3 = leds->sr3 | TL3_YELLOW;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	709a      	strb	r2, [r3, #2]
					break;
 80016c6:	e010      	b.n	80016ea <east_traffic_light+0xc2>
					leds->sr3 = leds->sr3 & ~TL3_YELLOW;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	789b      	ldrb	r3, [r3, #2]
 80016cc:	f023 0302 	bic.w	r3, r3, #2
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	709a      	strb	r2, [r3, #2]
					break;
 80016d6:	e008      	b.n	80016ea <east_traffic_light+0xc2>
					leds->sr3 = leds->sr3 ^ TL3_YELLOW;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	789b      	ldrb	r3, [r3, #2]
 80016dc:	f083 0302 	eor.w	r3, r3, #2
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	709a      	strb	r2, [r3, #2]
					break;
 80016e6:	e000      	b.n	80016ea <east_traffic_light+0xc2>
					break;
 80016e8:	bf00      	nop
			}
			break;
 80016ea:	e026      	b.n	800173a <east_traffic_light+0x112>
		case GREEN:
			switch (led_state){
 80016ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d007      	beq.n	8001704 <east_traffic_light+0xdc>
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	dc1d      	bgt.n	8001734 <east_traffic_light+0x10c>
 80016f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80016fc:	d012      	beq.n	8001724 <east_traffic_light+0xfc>
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d008      	beq.n	8001714 <east_traffic_light+0xec>
					break;
				case TOGGLE:
					leds->sr3 = leds->sr3 ^ TL3_GREEN;
					break;
				default:
					break;
 8001702:	e017      	b.n	8001734 <east_traffic_light+0x10c>
					leds->sr3 = leds->sr3 | TL3_GREEN;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	789b      	ldrb	r3, [r3, #2]
 8001708:	f043 0304 	orr.w	r3, r3, #4
 800170c:	b2da      	uxtb	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	709a      	strb	r2, [r3, #2]
					break;
 8001712:	e010      	b.n	8001736 <east_traffic_light+0x10e>
					leds->sr3 = leds->sr3 & ~TL3_GREEN;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	789b      	ldrb	r3, [r3, #2]
 8001718:	f023 0304 	bic.w	r3, r3, #4
 800171c:	b2da      	uxtb	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	709a      	strb	r2, [r3, #2]
					break;
 8001722:	e008      	b.n	8001736 <east_traffic_light+0x10e>
					leds->sr3 = leds->sr3 ^ TL3_GREEN;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	789b      	ldrb	r3, [r3, #2]
 8001728:	f083 0304 	eor.w	r3, r3, #4
 800172c:	b2da      	uxtb	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	709a      	strb	r2, [r3, #2]
					break;
 8001732:	e000      	b.n	8001736 <east_traffic_light+0x10e>
					break;
 8001734:	bf00      	nop
			}
			break;
 8001736:	e000      	b.n	800173a <east_traffic_light+0x112>
		case INDICATOR:
			//do nothing (no indicator for traffic light)
			break;
		default:
			break;
 8001738:	bf00      	nop
	}
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop

08001748 <north_pedestrian_light>:

void north_pedestrian_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	460b      	mov	r3, r1
 8001752:	70fb      	strb	r3, [r7, #3]
 8001754:	4613      	mov	r3, r2
 8001756:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	2b03      	cmp	r3, #3
 800175c:	d87c      	bhi.n	8001858 <north_pedestrian_light+0x110>
 800175e:	a201      	add	r2, pc, #4	@ (adr r2, 8001764 <north_pedestrian_light+0x1c>)
 8001760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001764:	08001775 	.word	0x08001775
 8001768:	08001859 	.word	0x08001859
 800176c:	080017c1 	.word	0x080017c1
 8001770:	0800180d 	.word	0x0800180d
		case RED:
			switch (led_state){
 8001774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d007      	beq.n	800178c <north_pedestrian_light+0x44>
 800177c:	2b01      	cmp	r3, #1
 800177e:	dc1d      	bgt.n	80017bc <north_pedestrian_light+0x74>
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001784:	d012      	beq.n	80017ac <north_pedestrian_light+0x64>
 8001786:	2b00      	cmp	r3, #0
 8001788:	d008      	beq.n	800179c <north_pedestrian_light+0x54>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ PL2_RED;
					break;
				default:
					break;
 800178a:	e017      	b.n	80017bc <north_pedestrian_light+0x74>
					leds->sr2 = leds->sr2 | PL2_RED;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	785b      	ldrb	r3, [r3, #1]
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	b2da      	uxtb	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	705a      	strb	r2, [r3, #1]
					break;
 800179a:	e010      	b.n	80017be <north_pedestrian_light+0x76>
					leds->sr2 = leds->sr2 & ~PL2_RED;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	f023 0308 	bic.w	r3, r3, #8
 80017a4:	b2da      	uxtb	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	705a      	strb	r2, [r3, #1]
					break;
 80017aa:	e008      	b.n	80017be <north_pedestrian_light+0x76>
					leds->sr2 = leds->sr2 ^ PL2_RED;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	785b      	ldrb	r3, [r3, #1]
 80017b0:	f083 0308 	eor.w	r3, r3, #8
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	705a      	strb	r2, [r3, #1]
					break;
 80017ba:	e000      	b.n	80017be <north_pedestrian_light+0x76>
					break;
 80017bc:	bf00      	nop
			}
			break;
 80017be:	e04c      	b.n	800185a <north_pedestrian_light+0x112>
		case YELLOW:
			//do nothing
			break;
		case GREEN:
			switch (led_state){
 80017c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d007      	beq.n	80017d8 <north_pedestrian_light+0x90>
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	dc1d      	bgt.n	8001808 <north_pedestrian_light+0xc0>
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017d0:	d012      	beq.n	80017f8 <north_pedestrian_light+0xb0>
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <north_pedestrian_light+0xa0>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ PL2_GREEN;
					break;
				default:
					break;
 80017d6:	e017      	b.n	8001808 <north_pedestrian_light+0xc0>
					leds->sr2 = leds->sr2 | PL2_GREEN;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	785b      	ldrb	r3, [r3, #1]
 80017dc:	f043 0310 	orr.w	r3, r3, #16
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	705a      	strb	r2, [r3, #1]
					break;
 80017e6:	e010      	b.n	800180a <north_pedestrian_light+0xc2>
					leds->sr2 = leds->sr2 & ~PL2_GREEN;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	785b      	ldrb	r3, [r3, #1]
 80017ec:	f023 0310 	bic.w	r3, r3, #16
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	705a      	strb	r2, [r3, #1]
					break;
 80017f6:	e008      	b.n	800180a <north_pedestrian_light+0xc2>
					leds->sr2 = leds->sr2 ^ PL2_GREEN;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	785b      	ldrb	r3, [r3, #1]
 80017fc:	f083 0310 	eor.w	r3, r3, #16
 8001800:	b2da      	uxtb	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	705a      	strb	r2, [r3, #1]
					break;
 8001806:	e000      	b.n	800180a <north_pedestrian_light+0xc2>
					break;
 8001808:	bf00      	nop
			}
			break;
 800180a:	e026      	b.n	800185a <north_pedestrian_light+0x112>
		case INDICATOR:
			switch (led_state){
 800180c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d007      	beq.n	8001824 <north_pedestrian_light+0xdc>
 8001814:	2b01      	cmp	r3, #1
 8001816:	dc1d      	bgt.n	8001854 <north_pedestrian_light+0x10c>
 8001818:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800181c:	d012      	beq.n	8001844 <north_pedestrian_light+0xfc>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d008      	beq.n	8001834 <north_pedestrian_light+0xec>
					break;
				case TOGGLE:
					leds->sr2 = leds->sr2 ^ PL2_BLUE;
					break;
				default:
					break;
 8001822:	e017      	b.n	8001854 <north_pedestrian_light+0x10c>
					leds->sr2 = leds->sr2 | PL2_BLUE;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	b2da      	uxtb	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	705a      	strb	r2, [r3, #1]
					break;
 8001832:	e010      	b.n	8001856 <north_pedestrian_light+0x10e>
					leds->sr2 = leds->sr2 & ~PL2_BLUE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	785b      	ldrb	r3, [r3, #1]
 8001838:	f023 0320 	bic.w	r3, r3, #32
 800183c:	b2da      	uxtb	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	705a      	strb	r2, [r3, #1]
					break;
 8001842:	e008      	b.n	8001856 <north_pedestrian_light+0x10e>
					leds->sr2 = leds->sr2 ^ PL2_BLUE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	785b      	ldrb	r3, [r3, #1]
 8001848:	f083 0320 	eor.w	r3, r3, #32
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	705a      	strb	r2, [r3, #1]
					break;
 8001852:	e000      	b.n	8001856 <north_pedestrian_light+0x10e>
					break;
 8001854:	bf00      	nop
			}
			break;
 8001856:	e000      	b.n	800185a <north_pedestrian_light+0x112>
		default:
			break;
 8001858:	bf00      	nop
	}
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop

08001868 <west_pedestrian_light>:
void west_pedestrian_light(led_registers_t* leds, light_color_t color, led_state_t led_state){
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
 8001874:	4613      	mov	r3, r2
 8001876:	70bb      	strb	r3, [r7, #2]
	switch (color){
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d87c      	bhi.n	8001978 <west_pedestrian_light+0x110>
 800187e:	a201      	add	r2, pc, #4	@ (adr r2, 8001884 <west_pedestrian_light+0x1c>)
 8001880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001884:	08001895 	.word	0x08001895
 8001888:	08001979 	.word	0x08001979
 800188c:	080018e1 	.word	0x080018e1
 8001890:	0800192d 	.word	0x0800192d
		case RED:
			switch (led_state){
 8001894:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d007      	beq.n	80018ac <west_pedestrian_light+0x44>
 800189c:	2b01      	cmp	r3, #1
 800189e:	dc1d      	bgt.n	80018dc <west_pedestrian_light+0x74>
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018a4:	d012      	beq.n	80018cc <west_pedestrian_light+0x64>
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d008      	beq.n	80018bc <west_pedestrian_light+0x54>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ PL1_RED;
					break;
				default:
					break;
 80018aa:	e017      	b.n	80018dc <west_pedestrian_light+0x74>
					leds->sr1 = leds->sr1 | PL1_RED;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	701a      	strb	r2, [r3, #0]
					break;
 80018ba:	e010      	b.n	80018de <west_pedestrian_light+0x76>
					leds->sr1 = leds->sr1 & ~PL1_RED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	f023 0308 	bic.w	r3, r3, #8
 80018c4:	b2da      	uxtb	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	701a      	strb	r2, [r3, #0]
					break;
 80018ca:	e008      	b.n	80018de <west_pedestrian_light+0x76>
					leds->sr1 = leds->sr1 ^ PL1_RED;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	f083 0308 	eor.w	r3, r3, #8
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	701a      	strb	r2, [r3, #0]
					break;
 80018da:	e000      	b.n	80018de <west_pedestrian_light+0x76>
					break;
 80018dc:	bf00      	nop
			}
			break;
 80018de:	e04c      	b.n	800197a <west_pedestrian_light+0x112>
		case YELLOW:
			//do nothing
			break;
		case GREEN:
			switch (led_state){
 80018e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d007      	beq.n	80018f8 <west_pedestrian_light+0x90>
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	dc1d      	bgt.n	8001928 <west_pedestrian_light+0xc0>
 80018ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80018f0:	d012      	beq.n	8001918 <west_pedestrian_light+0xb0>
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <west_pedestrian_light+0xa0>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ PL1_GREEN;
					break;
				default:
					break;
 80018f6:	e017      	b.n	8001928 <west_pedestrian_light+0xc0>
					leds->sr1 = leds->sr1 | PL1_GREEN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	b2da      	uxtb	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	701a      	strb	r2, [r3, #0]
					break;
 8001906:	e010      	b.n	800192a <west_pedestrian_light+0xc2>
					leds->sr1 = leds->sr1 & ~PL1_GREEN;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	f023 0310 	bic.w	r3, r3, #16
 8001910:	b2da      	uxtb	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	701a      	strb	r2, [r3, #0]
					break;
 8001916:	e008      	b.n	800192a <west_pedestrian_light+0xc2>
					leds->sr1 = leds->sr1 ^ PL1_GREEN;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	f083 0310 	eor.w	r3, r3, #16
 8001920:	b2da      	uxtb	r2, r3
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	701a      	strb	r2, [r3, #0]
					break;
 8001926:	e000      	b.n	800192a <west_pedestrian_light+0xc2>
					break;
 8001928:	bf00      	nop
			}
			break;
 800192a:	e026      	b.n	800197a <west_pedestrian_light+0x112>
		case INDICATOR:
			switch (led_state){
 800192c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d007      	beq.n	8001944 <west_pedestrian_light+0xdc>
 8001934:	2b01      	cmp	r3, #1
 8001936:	dc1d      	bgt.n	8001974 <west_pedestrian_light+0x10c>
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800193c:	d012      	beq.n	8001964 <west_pedestrian_light+0xfc>
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <west_pedestrian_light+0xec>
					break;
				case TOGGLE:
					leds->sr1 = leds->sr1 ^ PL1_BLUE;
					break;
				default:
					break;
 8001942:	e017      	b.n	8001974 <west_pedestrian_light+0x10c>
					leds->sr1 = leds->sr1 | PL1_BLUE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	f043 0320 	orr.w	r3, r3, #32
 800194c:	b2da      	uxtb	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	701a      	strb	r2, [r3, #0]
					break;
 8001952:	e010      	b.n	8001976 <west_pedestrian_light+0x10e>
					leds->sr1 = leds->sr1 & ~PL1_BLUE;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	f023 0320 	bic.w	r3, r3, #32
 800195c:	b2da      	uxtb	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	701a      	strb	r2, [r3, #0]
					break;
 8001962:	e008      	b.n	8001976 <west_pedestrian_light+0x10e>
					leds->sr1 = leds->sr1 ^ PL1_BLUE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	f083 0320 	eor.w	r3, r3, #32
 800196c:	b2da      	uxtb	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	701a      	strb	r2, [r3, #0]
					break;
 8001972:	e000      	b.n	8001976 <west_pedestrian_light+0x10e>
					break;
 8001974:	bf00      	nop
			}
			break;
 8001976:	e000      	b.n	800197a <west_pedestrian_light+0x112>
		default:
			break;
 8001978:	bf00      	nop
	}
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop

08001988 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800198c:	4b1b      	ldr	r3, [pc, #108]	@ (80019fc <MX_SPI3_Init+0x74>)
 800198e:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <MX_SPI3_Init+0x78>)
 8001990:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001992:	4b1a      	ldr	r3, [pc, #104]	@ (80019fc <MX_SPI3_Init+0x74>)
 8001994:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001998:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800199a:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <MX_SPI3_Init+0x74>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a0:	4b16      	ldr	r3, [pc, #88]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019a2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80019a6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019a8:	4b14      	ldr	r3, [pc, #80]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ae:	4b13      	ldr	r3, [pc, #76]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019b4:	4b11      	ldr	r3, [pc, #68]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019ba:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80019bc:	4b0f      	ldr	r3, [pc, #60]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019be:	2208      	movs	r2, #8
 80019c0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019d4:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019d6:	2207      	movs	r2, #7
 80019d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019da:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019dc:	2200      	movs	r2, #0
 80019de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019e2:	2208      	movs	r2, #8
 80019e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	@ (80019fc <MX_SPI3_Init+0x74>)
 80019e8:	f002 f880 	bl	8003aec <HAL_SPI_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80019f2:	f7ff fa7f 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200000c0 	.word	0x200000c0
 8001a00:	40003c00 	.word	0x40003c00

08001a04 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	@ 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a25      	ldr	r2, [pc, #148]	@ (8001ab8 <HAL_SPI_MspInit+0xb4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d144      	bne.n	8001ab0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001a26:	4b25      	ldr	r3, [pc, #148]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2a:	4a24      	ldr	r2, [pc, #144]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a32:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a42:	4a1e      	ldr	r2, [pc, #120]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a56:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a5a:	4a18      	ldr	r2, [pc, #96]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a62:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <HAL_SPI_MspInit+0xb8>)
 8001a64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SR_SHCP_Pin;
 8001a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a80:	2306      	movs	r3, #6
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SR_SHCP_GPIO_Port, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480d      	ldr	r0, [pc, #52]	@ (8001ac0 <HAL_SPI_MspInit+0xbc>)
 8001a8c:	f000 fad0 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SR_DS_Pin;
 8001a90:	2320      	movs	r3, #32
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001aa0:	2306      	movs	r3, #6
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SR_DS_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4806      	ldr	r0, [pc, #24]	@ (8001ac4 <HAL_SPI_MspInit+0xc0>)
 8001aac:	f000 fac0 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001ab0:	bf00      	nop
 8001ab2:	3728      	adds	r7, #40	@ 0x28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40003c00 	.word	0x40003c00
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	48000800 	.word	0x48000800
 8001ac4:	48000400 	.word	0x48000400

08001ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001ad0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad2:	4a10      	ldr	r2, [pc, #64]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001ad4:	f043 0301 	orr.w	r3, r3, #1
 8001ad8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001adc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	607b      	str	r3, [r7, #4]
 8001ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	4a0a      	ldr	r2, [pc, #40]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001aec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001af2:	4b08      	ldr	r3, [pc, #32]	@ (8001b14 <HAL_MspInit+0x4c>)
 8001af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001afa:	603b      	str	r3, [r7, #0]
 8001afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001afe:	2200      	movs	r2, #0
 8001b00:	210f      	movs	r1, #15
 8001b02:	f06f 0001 	mvn.w	r0, #1
 8001b06:	f000 fa69 	bl	8001fdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b26:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_InitTick+0xc8>)
 8001b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <HAL_InitTick+0xc8>)
 8001b2c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b30:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b32:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <HAL_InitTick+0xc8>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f001 fa81 	bl	8003050 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b4e:	f001 fa69 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8001b52:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	4a23      	ldr	r2, [pc, #140]	@ (8001be4 <HAL_InitTick+0xcc>)
 8001b58:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5c:	0c9b      	lsrs	r3, r3, #18
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b64:	4a21      	ldr	r2, [pc, #132]	@ (8001bec <HAL_InitTick+0xd4>)
 8001b66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b68:	4b1f      	ldr	r3, [pc, #124]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b6e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b70:	4a1d      	ldr	r2, [pc, #116]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b74:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b76:	4b1c      	ldr	r3, [pc, #112]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b19      	ldr	r3, [pc, #100]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001b88:	4817      	ldr	r0, [pc, #92]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b8a:	f002 fb2d 	bl	80041e8 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b94:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001b9c:	4812      	ldr	r0, [pc, #72]	@ (8001be8 <HAL_InitTick+0xd0>)
 8001b9e:	f002 fb85 	bl	80042ac <HAL_TIM_Base_Start_IT>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d111      	bne.n	8001bd4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001bb0:	2019      	movs	r0, #25
 8001bb2:	f000 fa2f 	bl	8002014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2b0f      	cmp	r3, #15
 8001bba:	d808      	bhi.n	8001bce <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	2019      	movs	r0, #25
 8001bc2:	f000 fa0b 	bl	8001fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <HAL_InitTick+0xd8>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6013      	str	r3, [r2, #0]
 8001bcc:	e002      	b.n	8001bd4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3730      	adds	r7, #48	@ 0x30
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	40021000 	.word	0x40021000
 8001be4:	431bde83 	.word	0x431bde83
 8001be8:	20000124 	.word	0x20000124
 8001bec:	40012c00 	.word	0x40012c00
 8001bf0:	2000000c 	.word	0x2000000c

08001bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <NMI_Handler+0x4>

08001bfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <HardFault_Handler+0x4>

08001c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <MemManage_Handler+0x4>

08001c0c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PL2_Switch_Pin);
 8001c2e:	2080      	movs	r0, #128	@ 0x80
 8001c30:	f000 fbf2 	bl	8002418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c3c:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001c3e:	f002 fba5 	bl	800438c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001c42:	bf00      	nop
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000124 	.word	0x20000124

08001c4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PL1_Switch_Pin);
 8001c50:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001c54:	f000 fbe0 	bl	8002418 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c84:	4b14      	ldr	r3, [pc, #80]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c86:	4a15      	ldr	r2, [pc, #84]	@ (8001cdc <MX_USART2_UART_Init+0x5c>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b0b      	ldr	r3, [pc, #44]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cb0:	4b09      	ldr	r3, [pc, #36]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cbc:	4b06      	ldr	r3, [pc, #24]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cc2:	4805      	ldr	r0, [pc, #20]	@ (8001cd8 <MX_USART2_UART_Init+0x58>)
 8001cc4:	f002 fd56 	bl	8004774 <HAL_UART_Init>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cce:	f7ff f911 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20000170 	.word	0x20000170
 8001cdc:	40004400 	.word	0x40004400

08001ce0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b0ac      	sub	sp, #176	@ 0xb0
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2288      	movs	r2, #136	@ 0x88
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f007 f919 	bl	8008f38 <memset>
  if(uartHandle->Instance==USART2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <HAL_UART_MspInit+0xb0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d13b      	bne.n	8001d88 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001d10:	2302      	movs	r3, #2
 8001d12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f001 fa29 	bl	8003174 <HAL_RCCEx_PeriphCLKConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d28:	f7ff f8e4 	bl	8000ef4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2c:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <HAL_UART_MspInit+0xb4>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	4a18      	ldr	r2, [pc, #96]	@ (8001d94 <HAL_UART_MspInit+0xb4>)
 8001d32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d36:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d38:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <HAL_UART_MspInit+0xb4>)
 8001d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d44:	4b13      	ldr	r3, [pc, #76]	@ (8001d94 <HAL_UART_MspInit+0xb4>)
 8001d46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <HAL_UART_MspInit+0xb4>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d50:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <HAL_UART_MspInit+0xb4>)
 8001d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001d5c:	230c      	movs	r3, #12
 8001d5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d62:	2302      	movs	r3, #2
 8001d64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d74:	2307      	movs	r3, #7
 8001d76:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d84:	f000 f954 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d88:	bf00      	nop
 8001d8a:	37b0      	adds	r7, #176	@ 0xb0
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40004400 	.word	0x40004400
 8001d94:	40021000 	.word	0x40021000

08001d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d9c:	f7ff ff5e 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	@ (8001dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	@ (8001dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	@ (8001ddc <LoopForever+0xe>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	@ (8001de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	@ (8001de4 <LoopForever+0x16>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f007 f915 	bl	8008ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dca:	f7ff f819 	bl	8000e00 <main>

08001dce <LoopForever>:

LoopForever:
    b LoopForever
 8001dce:	e7fe      	b.n	8001dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ddc:	0800928c 	.word	0x0800928c
  ldr r2, =_sbss
 8001de0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001de4:	20004004 	.word	0x20004004

08001de8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <ADC1_2_IRQHandler>
	...

08001dec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001df2:	2300      	movs	r3, #0
 8001df4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001df6:	4b0c      	ldr	r3, [pc, #48]	@ (8001e28 <HAL_Init+0x3c>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a0b      	ldr	r2, [pc, #44]	@ (8001e28 <HAL_Init+0x3c>)
 8001dfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e00:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e02:	2003      	movs	r0, #3
 8001e04:	f000 f8df 	bl	8001fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e08:	200f      	movs	r0, #15
 8001e0a:	f7ff fe85 	bl	8001b18 <HAL_InitTick>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d002      	beq.n	8001e1a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	71fb      	strb	r3, [r7, #7]
 8001e18:	e001      	b.n	8001e1e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e1a:	f7ff fe55 	bl	8001ac8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <HAL_IncTick+0x20>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	461a      	mov	r2, r3
 8001e36:	4b06      	ldr	r3, [pc, #24]	@ (8001e50 <HAL_IncTick+0x24>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <HAL_IncTick+0x24>)
 8001e3e:	6013      	str	r3, [r2, #0]
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000010 	.word	0x20000010
 8001e50:	200001f8 	.word	0x200001f8

08001e54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return uwTick;
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <HAL_GetTick+0x14>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200001f8 	.word	0x200001f8

08001e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b085      	sub	sp, #20
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e88:	4013      	ands	r3, r2
 8001e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9e:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	60d3      	str	r3, [r2, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <__NVIC_GetPriorityGrouping+0x18>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	f003 0307 	and.w	r3, r3, #7
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	e000ed00 	.word	0xe000ed00

08001ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	db0b      	blt.n	8001efa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	f003 021f 	and.w	r2, r3, #31
 8001ee8:	4907      	ldr	r1, [pc, #28]	@ (8001f08 <__NVIC_EnableIRQ+0x38>)
 8001eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001efa:	bf00      	nop
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	e000e100 	.word	0xe000e100

08001f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	6039      	str	r1, [r7, #0]
 8001f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	db0a      	blt.n	8001f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	490c      	ldr	r1, [pc, #48]	@ (8001f58 <__NVIC_SetPriority+0x4c>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	0112      	lsls	r2, r2, #4
 8001f2c:	b2d2      	uxtb	r2, r2
 8001f2e:	440b      	add	r3, r1
 8001f30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f34:	e00a      	b.n	8001f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	4908      	ldr	r1, [pc, #32]	@ (8001f5c <__NVIC_SetPriority+0x50>)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	3b04      	subs	r3, #4
 8001f44:	0112      	lsls	r2, r2, #4
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	440b      	add	r3, r1
 8001f4a:	761a      	strb	r2, [r3, #24]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000e100 	.word	0xe000e100
 8001f5c:	e000ed00 	.word	0xe000ed00

08001f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	@ 0x24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f003 0307 	and.w	r3, r3, #7
 8001f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	f1c3 0307 	rsb	r3, r3, #7
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	bf28      	it	cs
 8001f7e:	2304      	movcs	r3, #4
 8001f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3304      	adds	r3, #4
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d902      	bls.n	8001f90 <NVIC_EncodePriority+0x30>
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	3b03      	subs	r3, #3
 8001f8e:	e000      	b.n	8001f92 <NVIC_EncodePriority+0x32>
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	401a      	ands	r2, r3
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fa8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fb8:	4313      	orrs	r3, r2
         );
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3724      	adds	r7, #36	@ 0x24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff4c 	bl	8001e6c <__NVIC_SetPriorityGrouping>
}
 8001fd4:	bf00      	nop
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
 8001fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fee:	f7ff ff61 	bl	8001eb4 <__NVIC_GetPriorityGrouping>
 8001ff2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	6978      	ldr	r0, [r7, #20]
 8001ffa:	f7ff ffb1 	bl	8001f60 <NVIC_EncodePriority>
 8001ffe:	4602      	mov	r2, r0
 8002000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002004:	4611      	mov	r1, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff ff80 	bl	8001f0c <__NVIC_SetPriority>
}
 800200c:	bf00      	nop
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800201e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff ff54 	bl	8001ed0 <__NVIC_EnableIRQ>
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b087      	sub	sp, #28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800203e:	e17f      	b.n	8002340 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2101      	movs	r1, #1
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa01 f303 	lsl.w	r3, r1, r3
 800204c:	4013      	ands	r3, r2
 800204e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 8171 	beq.w	800233a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b01      	cmp	r3, #1
 8002062:	d005      	beq.n	8002070 <HAL_GPIO_Init+0x40>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d130      	bne.n	80020d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	005b      	lsls	r3, r3, #1
 800207a:	2203      	movs	r2, #3
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	4013      	ands	r3, r2
 8002086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	693a      	ldr	r2, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020a6:	2201      	movs	r2, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f003 0201 	and.w	r2, r3, #1
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	693a      	ldr	r2, [r7, #16]
 80020d0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b03      	cmp	r3, #3
 80020dc:	d118      	bne.n	8002110 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020e4:	2201      	movs	r2, #1
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	43db      	mvns	r3, r3
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	08db      	lsrs	r3, r3, #3
 80020fa:	f003 0201 	and.w	r2, r3, #1
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b03      	cmp	r3, #3
 800211a:	d017      	beq.n	800214c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d123      	bne.n	80021a0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	08da      	lsrs	r2, r3, #3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3208      	adds	r2, #8
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	220f      	movs	r2, #15
 8002170:	fa02 f303 	lsl.w	r3, r2, r3
 8002174:	43db      	mvns	r3, r3
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	4013      	ands	r3, r2
 800217a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	08da      	lsrs	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3208      	adds	r2, #8
 800219a:	6939      	ldr	r1, [r7, #16]
 800219c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	693a      	ldr	r2, [r7, #16]
 80021b4:	4013      	ands	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	f000 80ac 	beq.w	800233a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002360 <HAL_GPIO_Init+0x330>)
 80021e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021e6:	4a5e      	ldr	r2, [pc, #376]	@ (8002360 <HAL_GPIO_Init+0x330>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6613      	str	r3, [r2, #96]	@ 0x60
 80021ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002360 <HAL_GPIO_Init+0x330>)
 80021f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80021fa:	4a5a      	ldr	r2, [pc, #360]	@ (8002364 <HAL_GPIO_Init+0x334>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002206:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002224:	d025      	beq.n	8002272 <HAL_GPIO_Init+0x242>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4f      	ldr	r2, [pc, #316]	@ (8002368 <HAL_GPIO_Init+0x338>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d01f      	beq.n	800226e <HAL_GPIO_Init+0x23e>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a4e      	ldr	r2, [pc, #312]	@ (800236c <HAL_GPIO_Init+0x33c>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d019      	beq.n	800226a <HAL_GPIO_Init+0x23a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a4d      	ldr	r2, [pc, #308]	@ (8002370 <HAL_GPIO_Init+0x340>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_GPIO_Init+0x236>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a4c      	ldr	r2, [pc, #304]	@ (8002374 <HAL_GPIO_Init+0x344>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d00d      	beq.n	8002262 <HAL_GPIO_Init+0x232>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4b      	ldr	r2, [pc, #300]	@ (8002378 <HAL_GPIO_Init+0x348>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d007      	beq.n	800225e <HAL_GPIO_Init+0x22e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a4a      	ldr	r2, [pc, #296]	@ (800237c <HAL_GPIO_Init+0x34c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_GPIO_Init+0x22a>
 8002256:	2306      	movs	r3, #6
 8002258:	e00c      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800225a:	2307      	movs	r3, #7
 800225c:	e00a      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800225e:	2305      	movs	r3, #5
 8002260:	e008      	b.n	8002274 <HAL_GPIO_Init+0x244>
 8002262:	2304      	movs	r3, #4
 8002264:	e006      	b.n	8002274 <HAL_GPIO_Init+0x244>
 8002266:	2303      	movs	r3, #3
 8002268:	e004      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800226a:	2302      	movs	r3, #2
 800226c:	e002      	b.n	8002274 <HAL_GPIO_Init+0x244>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_GPIO_Init+0x244>
 8002272:	2300      	movs	r3, #0
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	f002 0203 	and.w	r2, r2, #3
 800227a:	0092      	lsls	r2, r2, #2
 800227c:	4093      	lsls	r3, r2
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002284:	4937      	ldr	r1, [pc, #220]	@ (8002364 <HAL_GPIO_Init+0x334>)
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	089b      	lsrs	r3, r3, #2
 800228a:	3302      	adds	r3, #2
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002292:	4b3b      	ldr	r3, [pc, #236]	@ (8002380 <HAL_GPIO_Init+0x350>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b6:	4a32      	ldr	r2, [pc, #200]	@ (8002380 <HAL_GPIO_Init+0x350>)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022bc:	4b30      	ldr	r3, [pc, #192]	@ (8002380 <HAL_GPIO_Init+0x350>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d003      	beq.n	80022e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e0:	4a27      	ldr	r2, [pc, #156]	@ (8002380 <HAL_GPIO_Init+0x350>)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <HAL_GPIO_Init+0x350>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	693a      	ldr	r2, [r7, #16]
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4313      	orrs	r3, r2
 8002308:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800230a:	4a1d      	ldr	r2, [pc, #116]	@ (8002380 <HAL_GPIO_Init+0x350>)
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002310:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_GPIO_Init+0x350>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	43db      	mvns	r3, r3
 800231a:	693a      	ldr	r2, [r7, #16]
 800231c:	4013      	ands	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d003      	beq.n	8002334 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002334:	4a12      	ldr	r2, [pc, #72]	@ (8002380 <HAL_GPIO_Init+0x350>)
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3301      	adds	r3, #1
 800233e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	fa22 f303 	lsr.w	r3, r2, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	f47f ae78 	bne.w	8002040 <HAL_GPIO_Init+0x10>
  }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	40021000 	.word	0x40021000
 8002364:	40010000 	.word	0x40010000
 8002368:	48000400 	.word	0x48000400
 800236c:	48000800 	.word	0x48000800
 8002370:	48000c00 	.word	0x48000c00
 8002374:	48001000 	.word	0x48001000
 8002378:	48001400 	.word	0x48001400
 800237c:	48001800 	.word	0x48001800
 8002380:	40010400 	.word	0x40010400

08002384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023d2:	887a      	ldrh	r2, [r7, #2]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023f6:	887a      	ldrh	r2, [r7, #2]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4013      	ands	r3, r2
 80023fc:	041a      	lsls	r2, r3, #16
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	43d9      	mvns	r1, r3
 8002402:	887b      	ldrh	r3, [r7, #2]
 8002404:	400b      	ands	r3, r1
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	619a      	str	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002422:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800242e:	4a05      	ldr	r2, [pc, #20]	@ (8002444 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002430:	88fb      	ldrh	r3, [r7, #6]
 8002432:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	4618      	mov	r0, r3
 8002438:	f7fe fbc2 	bl	8000bc0 <HAL_GPIO_EXTI_Callback>
  }
}
 800243c:	bf00      	nop
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	40010400 	.word	0x40010400

08002448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <HAL_PWREx_GetVoltageRange+0x18>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002472:	d130      	bne.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002474:	4b23      	ldr	r3, [pc, #140]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800247c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002480:	d038      	beq.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800248a:	4a1e      	ldr	r2, [pc, #120]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002492:	4b1d      	ldr	r3, [pc, #116]	@ (8002508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2232      	movs	r2, #50	@ 0x32
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	4a1b      	ldr	r2, [pc, #108]	@ (800250c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	3301      	adds	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a8:	e002      	b.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024bc:	d102      	bne.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f2      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024d0:	d110      	bne.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e00f      	b.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024e2:	d007      	beq.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e4:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024ec:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000
 8002508:	20000008 	.word	0x20000008
 800250c:	431bde83 	.word	0x431bde83

08002510 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b088      	sub	sp, #32
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e3ca      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002522:	4b97      	ldr	r3, [pc, #604]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f003 030c 	and.w	r3, r3, #12
 800252a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800252c:	4b94      	ldr	r3, [pc, #592]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0303 	and.w	r3, r3, #3
 8002534:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80e4 	beq.w	800270c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002544:	69bb      	ldr	r3, [r7, #24]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_RCC_OscConfig+0x4a>
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	2b0c      	cmp	r3, #12
 800254e:	f040 808b 	bne.w	8002668 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b01      	cmp	r3, #1
 8002556:	f040 8087 	bne.w	8002668 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800255a:	4b89      	ldr	r3, [pc, #548]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x62>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e3a2      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1a      	ldr	r2, [r3, #32]
 8002576:	4b82      	ldr	r3, [pc, #520]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d004      	beq.n	800258c <HAL_RCC_OscConfig+0x7c>
 8002582:	4b7f      	ldr	r3, [pc, #508]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800258a:	e005      	b.n	8002598 <HAL_RCC_OscConfig+0x88>
 800258c:	4b7c      	ldr	r3, [pc, #496]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002598:	4293      	cmp	r3, r2
 800259a:	d223      	bcs.n	80025e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f000 fd87 	bl	80030b4 <RCC_SetFlashLatencyFromMSIRange>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e383      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b0:	4b73      	ldr	r3, [pc, #460]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a72      	ldr	r2, [pc, #456]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	4b70      	ldr	r3, [pc, #448]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	496d      	ldr	r1, [pc, #436]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ce:	4b6c      	ldr	r3, [pc, #432]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	4968      	ldr	r1, [pc, #416]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	604b      	str	r3, [r1, #4]
 80025e2:	e025      	b.n	8002630 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025e4:	4b66      	ldr	r3, [pc, #408]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a65      	ldr	r2, [pc, #404]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b63      	ldr	r3, [pc, #396]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	4960      	ldr	r1, [pc, #384]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002602:	4b5f      	ldr	r3, [pc, #380]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	495b      	ldr	r1, [pc, #364]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	4618      	mov	r0, r3
 8002622:	f000 fd47 	bl	80030b4 <RCC_SetFlashLatencyFromMSIRange>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e343      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002630:	f000 fc4a 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002634:	4602      	mov	r2, r0
 8002636:	4b52      	ldr	r3, [pc, #328]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	091b      	lsrs	r3, r3, #4
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	4950      	ldr	r1, [pc, #320]	@ (8002784 <HAL_RCC_OscConfig+0x274>)
 8002642:	5ccb      	ldrb	r3, [r1, r3]
 8002644:	f003 031f 	and.w	r3, r3, #31
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	4a4e      	ldr	r2, [pc, #312]	@ (8002788 <HAL_RCC_OscConfig+0x278>)
 800264e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002650:	4b4e      	ldr	r3, [pc, #312]	@ (800278c <HAL_RCC_OscConfig+0x27c>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fa5f 	bl	8001b18 <HAL_InitTick>
 800265a:	4603      	mov	r3, r0
 800265c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d052      	beq.n	800270a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	e327      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	699b      	ldr	r3, [r3, #24]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d032      	beq.n	80026d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002670:	4b43      	ldr	r3, [pc, #268]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a42      	ldr	r2, [pc, #264]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800267c:	f7ff fbea 	bl	8001e54 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002684:	f7ff fbe6 	bl	8001e54 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e310      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002696:	4b3a      	ldr	r3, [pc, #232]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d0f0      	beq.n	8002684 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a2:	4b37      	ldr	r3, [pc, #220]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a36      	ldr	r2, [pc, #216]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	4b34      	ldr	r3, [pc, #208]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	4931      	ldr	r1, [pc, #196]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	021b      	lsls	r3, r3, #8
 80026ce:	492c      	ldr	r1, [pc, #176]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	604b      	str	r3, [r1, #4]
 80026d4:	e01a      	b.n	800270c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a29      	ldr	r2, [pc, #164]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e2:	f7ff fbb7 	bl	8001e54 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ea:	f7ff fbb3 	bl	8001e54 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e2dd      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026fc:	4b20      	ldr	r3, [pc, #128]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x1da>
 8002708:	e000      	b.n	800270c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800270a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0301 	and.w	r3, r3, #1
 8002714:	2b00      	cmp	r3, #0
 8002716:	d074      	beq.n	8002802 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b08      	cmp	r3, #8
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x21a>
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	d10e      	bne.n	8002742 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d10b      	bne.n	8002742 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272a:	4b15      	ldr	r3, [pc, #84]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d064      	beq.n	8002800 <HAL_RCC_OscConfig+0x2f0>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d160      	bne.n	8002800 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e2ba      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274a:	d106      	bne.n	800275a <HAL_RCC_OscConfig+0x24a>
 800274c:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a0b      	ldr	r2, [pc, #44]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	e026      	b.n	80027a8 <HAL_RCC_OscConfig+0x298>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002762:	d115      	bne.n	8002790 <HAL_RCC_OscConfig+0x280>
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a05      	ldr	r2, [pc, #20]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 800276a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800276e:	6013      	str	r3, [r2, #0]
 8002770:	4b03      	ldr	r3, [pc, #12]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a02      	ldr	r2, [pc, #8]	@ (8002780 <HAL_RCC_OscConfig+0x270>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	e014      	b.n	80027a8 <HAL_RCC_OscConfig+0x298>
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	08009234 	.word	0x08009234
 8002788:	20000008 	.word	0x20000008
 800278c:	2000000c 	.word	0x2000000c
 8002790:	4ba0      	ldr	r3, [pc, #640]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a9f      	ldr	r2, [pc, #636]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b9d      	ldr	r3, [pc, #628]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a9c      	ldr	r2, [pc, #624]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7ff fb50 	bl	8001e54 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff fb4c 	bl	8001e54 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	@ 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e276      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ca:	4b92      	ldr	r3, [pc, #584]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x2a8>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff fb3c 	bl	8001e54 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff fb38 	bl	8001e54 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	@ 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e262      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f2:	4b88      	ldr	r3, [pc, #544]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x2d0>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d060      	beq.n	80028d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	2b04      	cmp	r3, #4
 8002812:	d005      	beq.n	8002820 <HAL_RCC_OscConfig+0x310>
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b0c      	cmp	r3, #12
 8002818:	d119      	bne.n	800284e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d116      	bne.n	800284e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002820:	4b7c      	ldr	r3, [pc, #496]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002828:	2b00      	cmp	r3, #0
 800282a:	d005      	beq.n	8002838 <HAL_RCC_OscConfig+0x328>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d101      	bne.n	8002838 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e23f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002838:	4b76      	ldr	r3, [pc, #472]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	4973      	ldr	r1, [pc, #460]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002848:	4313      	orrs	r3, r2
 800284a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800284c:	e040      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d023      	beq.n	800289e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002856:	4b6f      	ldr	r3, [pc, #444]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6e      	ldr	r2, [pc, #440]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800285c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002860:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7ff faf7 	bl	8001e54 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286a:	f7ff faf3 	bl	8001e54 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e21d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800287c:	4b65      	ldr	r3, [pc, #404]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b62      	ldr	r3, [pc, #392]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	495f      	ldr	r1, [pc, #380]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
 800289c:	e018      	b.n	80028d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b5d      	ldr	r3, [pc, #372]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a5c      	ldr	r2, [pc, #368]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80028a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028aa:	f7ff fad3 	bl	8001e54 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028b0:	e008      	b.n	80028c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b2:	f7ff facf 	bl	8001e54 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e1f9      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028c4:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1f0      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0308 	and.w	r3, r3, #8
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d03c      	beq.n	8002956 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d01c      	beq.n	800291e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028e4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80028e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f4:	f7ff faae 	bl	8001e54 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fc:	f7ff faaa 	bl	8001e54 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1d4      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800290e:	4b41      	ldr	r3, [pc, #260]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002910:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0ef      	beq.n	80028fc <HAL_RCC_OscConfig+0x3ec>
 800291c:	e01b      	b.n	8002956 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002924:	4a3b      	ldr	r2, [pc, #236]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002926:	f023 0301 	bic.w	r3, r3, #1
 800292a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800292e:	f7ff fa91 	bl	8001e54 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002936:	f7ff fa8d 	bl	8001e54 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1b7      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002948:	4b32      	ldr	r3, [pc, #200]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800294a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1ef      	bne.n	8002936 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80a6 	beq.w	8002ab0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002964:	2300      	movs	r3, #0
 8002966:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002968:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10d      	bne.n	8002990 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002974:	4b27      	ldr	r3, [pc, #156]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	4a26      	ldr	r2, [pc, #152]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 800297a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800297e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002980:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002988:	60bb      	str	r3, [r7, #8]
 800298a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298c:	2301      	movs	r3, #1
 800298e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002990:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <HAL_RCC_OscConfig+0x508>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d118      	bne.n	80029ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800299c:	4b1e      	ldr	r3, [pc, #120]	@ (8002a18 <HAL_RCC_OscConfig+0x508>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <HAL_RCC_OscConfig+0x508>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a8:	f7ff fa54 	bl	8001e54 <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7ff fa50 	bl	8001e54 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e17a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x508>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f0      	beq.n	80029b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d108      	bne.n	80029e8 <HAL_RCC_OscConfig+0x4d8>
 80029d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80029d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e6:	e029      	b.n	8002a3c <HAL_RCC_OscConfig+0x52c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b05      	cmp	r3, #5
 80029ee:	d115      	bne.n	8002a1c <HAL_RCC_OscConfig+0x50c>
 80029f0:	4b08      	ldr	r3, [pc, #32]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029f6:	4a07      	ldr	r2, [pc, #28]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 80029f8:	f043 0304 	orr.w	r3, r3, #4
 80029fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a06:	4a03      	ldr	r2, [pc, #12]	@ (8002a14 <HAL_RCC_OscConfig+0x504>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a10:	e014      	b.n	8002a3c <HAL_RCC_OscConfig+0x52c>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40007000 	.word	0x40007000
 8002a1c:	4b9c      	ldr	r3, [pc, #624]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a22:	4a9b      	ldr	r2, [pc, #620]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002a24:	f023 0301 	bic.w	r3, r3, #1
 8002a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a2c:	4b98      	ldr	r3, [pc, #608]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a32:	4a97      	ldr	r2, [pc, #604]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002a34:	f023 0304 	bic.w	r3, r3, #4
 8002a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d016      	beq.n	8002a72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7ff fa06 	bl	8001e54 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7ff fa02 	bl	8001e54 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e12a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a62:	4b8b      	ldr	r3, [pc, #556]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ed      	beq.n	8002a4c <HAL_RCC_OscConfig+0x53c>
 8002a70:	e015      	b.n	8002a9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a72:	f7ff f9ef 	bl	8001e54 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7a:	f7ff f9eb 	bl	8001e54 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e113      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a90:	4b7f      	ldr	r3, [pc, #508]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1ed      	bne.n	8002a7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a9e:	7ffb      	ldrb	r3, [r7, #31]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d105      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa4:	4b7a      	ldr	r3, [pc, #488]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa8:	4a79      	ldr	r2, [pc, #484]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 80fe 	beq.w	8002cb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	f040 80d0 	bne.w	8002c64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ac4:	4b72      	ldr	r3, [pc, #456]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0203 	and.w	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d130      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d127      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d11f      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b04:	2a07      	cmp	r2, #7
 8002b06:	bf14      	ite	ne
 8002b08:	2201      	movne	r2, #1
 8002b0a:	2200      	moveq	r2, #0
 8002b0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d113      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b30:	085b      	lsrs	r3, r3, #1
 8002b32:	3b01      	subs	r3, #1
 8002b34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d06e      	beq.n	8002c18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	2b0c      	cmp	r3, #12
 8002b3e:	d069      	beq.n	8002c14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b40:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b4c:	4b50      	ldr	r3, [pc, #320]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0ad      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a4b      	ldr	r2, [pc, #300]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002b62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b68:	f7ff f974 	bl	8001e54 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b70:	f7ff f970 	bl	8001e54 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e09a      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b82:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8e:	4b40      	ldr	r3, [pc, #256]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	4b40      	ldr	r3, [pc, #256]	@ (8002c94 <HAL_RCC_OscConfig+0x784>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b9e:	3a01      	subs	r2, #1
 8002ba0:	0112      	lsls	r2, r2, #4
 8002ba2:	4311      	orrs	r1, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002ba8:	0212      	lsls	r2, r2, #8
 8002baa:	4311      	orrs	r1, r2
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002bb0:	0852      	lsrs	r2, r2, #1
 8002bb2:	3a01      	subs	r2, #1
 8002bb4:	0552      	lsls	r2, r2, #21
 8002bb6:	4311      	orrs	r1, r2
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002bbc:	0852      	lsrs	r2, r2, #1
 8002bbe:	3a01      	subs	r2, #1
 8002bc0:	0652      	lsls	r2, r2, #25
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bc8:	0912      	lsrs	r2, r2, #4
 8002bca:	0452      	lsls	r2, r2, #17
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	4930      	ldr	r1, [pc, #192]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a2a      	ldr	r2, [pc, #168]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bec:	f7ff f932 	bl	8001e54 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7ff f92e 	bl	8001e54 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e058      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	4b22      	ldr	r3, [pc, #136]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c12:	e050      	b.n	8002cb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e04f      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c18:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d148      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c24:	4b1a      	ldr	r3, [pc, #104]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a19      	ldr	r2, [pc, #100]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c30:	4b17      	ldr	r3, [pc, #92]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	4a16      	ldr	r2, [pc, #88]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c3c:	f7ff f90a 	bl	8001e54 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7ff f906 	bl	8001e54 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e030      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c56:	4b0e      	ldr	r3, [pc, #56]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0f0      	beq.n	8002c44 <HAL_RCC_OscConfig+0x734>
 8002c62:	e028      	b.n	8002cb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c64:	69bb      	ldr	r3, [r7, #24]
 8002c66:	2b0c      	cmp	r3, #12
 8002c68:	d023      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b09      	ldr	r3, [pc, #36]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a08      	ldr	r2, [pc, #32]	@ (8002c90 <HAL_RCC_OscConfig+0x780>)
 8002c70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7ff f8ed 	bl	8001e54 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c7c:	e00c      	b.n	8002c98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c7e:	f7ff f8e9 	bl	8001e54 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d905      	bls.n	8002c98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e013      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
 8002c90:	40021000 	.word	0x40021000
 8002c94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_OscConfig+0x7b0>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1ec      	bne.n	8002c7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ca4:	4b06      	ldr	r3, [pc, #24]	@ (8002cc0 <HAL_RCC_OscConfig+0x7b0>)
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	4905      	ldr	r1, [pc, #20]	@ (8002cc0 <HAL_RCC_OscConfig+0x7b0>)
 8002caa:	4b06      	ldr	r3, [pc, #24]	@ (8002cc4 <HAL_RCC_OscConfig+0x7b4>)
 8002cac:	4013      	ands	r3, r2
 8002cae:	60cb      	str	r3, [r1, #12]
 8002cb0:	e001      	b.n	8002cb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	feeefffc 	.word	0xfeeefffc

08002cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0e7      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b75      	ldr	r3, [pc, #468]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d910      	bls.n	8002d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b72      	ldr	r3, [pc, #456]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f023 0207 	bic.w	r2, r3, #7
 8002cf2:	4970      	ldr	r1, [pc, #448]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfa:	4b6e      	ldr	r3, [pc, #440]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e0cf      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d010      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b66      	ldr	r3, [pc, #408]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d908      	bls.n	8002d3a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d28:	4b63      	ldr	r3, [pc, #396]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	4960      	ldr	r1, [pc, #384]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d04c      	beq.n	8002de0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d121      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e0a6      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d66:	4b54      	ldr	r3, [pc, #336]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d115      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e09a      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d7e:	4b4e      	ldr	r3, [pc, #312]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d109      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e08e      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e086      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d9e:	4b46      	ldr	r3, [pc, #280]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f023 0203 	bic.w	r2, r3, #3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	4943      	ldr	r1, [pc, #268]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002db0:	f7ff f850 	bl	8001e54 <HAL_GetTick>
 8002db4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	e00a      	b.n	8002dce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db8:	f7ff f84c 	bl	8001e54 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e06e      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dce:	4b3a      	ldr	r3, [pc, #232]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 020c 	and.w	r2, r3, #12
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d1eb      	bne.n	8002db8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0302 	and.w	r3, r3, #2
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d010      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d208      	bcs.n	8002e0e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	492b      	ldr	r1, [pc, #172]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0e:	4b29      	ldr	r3, [pc, #164]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d210      	bcs.n	8002e3e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1c:	4b25      	ldr	r3, [pc, #148]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 0207 	bic.w	r2, r3, #7
 8002e24:	4923      	ldr	r1, [pc, #140]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2c:	4b21      	ldr	r3, [pc, #132]	@ (8002eb4 <HAL_RCC_ClockConfig+0x1ec>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d001      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e036      	b.n	8002eac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0304 	and.w	r3, r3, #4
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d008      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	4918      	ldr	r1, [pc, #96]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e68:	4b13      	ldr	r3, [pc, #76]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	00db      	lsls	r3, r3, #3
 8002e76:	4910      	ldr	r1, [pc, #64]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e7c:	f000 f824 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb8 <HAL_RCC_ClockConfig+0x1f0>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	490b      	ldr	r1, [pc, #44]	@ (8002ebc <HAL_RCC_ClockConfig+0x1f4>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
 8002e98:	4a09      	ldr	r2, [pc, #36]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1f8>)
 8002e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e9c:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1fc>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7fe fe39 	bl	8001b18 <HAL_InitTick>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002eaa:	7afb      	ldrb	r3, [r7, #11]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08009234 	.word	0x08009234
 8002ec0:	20000008 	.word	0x20000008
 8002ec4:	2000000c 	.word	0x2000000c

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	@ 0x24
 8002ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d121      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d11e      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002efc:	4b34      	ldr	r3, [pc, #208]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f08:	4b31      	ldr	r3, [pc, #196]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e005      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f18:	4b2d      	ldr	r3, [pc, #180]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f24:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10d      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f40:	4b25      	ldr	r3, [pc, #148]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	e004      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f4c:	4b23      	ldr	r3, [pc, #140]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d134      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f56:	4b1e      	ldr	r3, [pc, #120]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0xac>
 8002f6c:	e005      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	e005      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f74:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f76:	617b      	str	r3, [r7, #20]
      break;
 8002f78:	e002      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	617b      	str	r3, [r7, #20]
      break;
 8002f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f80:	4b13      	ldr	r3, [pc, #76]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	fb03 f202 	mul.w	r2, r3, r2
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	0e5b      	lsrs	r3, r3, #25
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	0800924c 	.word	0x0800924c
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	007a1200 	.word	0x007a1200

08002fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	@ (8002ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000008 	.word	0x20000008

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ffc:	f7ff fff0 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b06      	ldr	r3, [pc, #24]	@ (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4904      	ldr	r1, [pc, #16]	@ (8003020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	08009244 	.word	0x08009244

08003024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003028:	f7ff ffda 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	0adb      	lsrs	r3, r3, #11
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4904      	ldr	r1, [pc, #16]	@ (800304c <HAL_RCC_GetPCLK2Freq+0x28>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	08009244 	.word	0x08009244

08003050 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	220f      	movs	r2, #15
 800305e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0203 	and.w	r2, r3, #3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800306c:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003078:	4b0c      	ldr	r3, [pc, #48]	@ (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003084:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_RCC_GetClockConfig+0x5c>)
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	08db      	lsrs	r3, r3, #3
 800308a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003092:	4b07      	ldr	r3, [pc, #28]	@ (80030b0 <HAL_RCC_GetClockConfig+0x60>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0207 	and.w	r2, r3, #7
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	601a      	str	r2, [r3, #0]
}
 800309e:	bf00      	nop
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40022000 	.word	0x40022000

080030b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030bc:	2300      	movs	r3, #0
 80030be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030c0:	4b2a      	ldr	r3, [pc, #168]	@ (800316c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d003      	beq.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030cc:	f7ff f9bc 	bl	8002448 <HAL_PWREx_GetVoltageRange>
 80030d0:	6178      	str	r0, [r7, #20]
 80030d2:	e014      	b.n	80030fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	4b25      	ldr	r3, [pc, #148]	@ (800316c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d8:	4a24      	ldr	r2, [pc, #144]	@ (800316c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030de:	6593      	str	r3, [r2, #88]	@ 0x58
 80030e0:	4b22      	ldr	r3, [pc, #136]	@ (800316c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030ec:	f7ff f9ac 	bl	8002448 <HAL_PWREx_GetVoltageRange>
 80030f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030f2:	4b1e      	ldr	r3, [pc, #120]	@ (800316c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030f6:	4a1d      	ldr	r2, [pc, #116]	@ (800316c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003104:	d10b      	bne.n	800311e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b80      	cmp	r3, #128	@ 0x80
 800310a:	d919      	bls.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003110:	d902      	bls.n	8003118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003112:	2302      	movs	r3, #2
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	e013      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003118:	2301      	movs	r3, #1
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	e010      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b80      	cmp	r3, #128	@ 0x80
 8003122:	d902      	bls.n	800312a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003124:	2303      	movs	r3, #3
 8003126:	613b      	str	r3, [r7, #16]
 8003128:	e00a      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b80      	cmp	r3, #128	@ 0x80
 800312e:	d102      	bne.n	8003136 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003130:	2302      	movs	r3, #2
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	e004      	b.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b70      	cmp	r3, #112	@ 0x70
 800313a:	d101      	bne.n	8003140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800313c:	2301      	movs	r3, #1
 800313e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 0207 	bic.w	r2, r3, #7
 8003148:	4909      	ldr	r1, [pc, #36]	@ (8003170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003150:	4b07      	ldr	r3, [pc, #28]	@ (8003170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	429a      	cmp	r2, r3
 800315c:	d001      	beq.n	8003162 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	40022000 	.word	0x40022000

08003174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800317c:	2300      	movs	r3, #0
 800317e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003180:	2300      	movs	r3, #0
 8003182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800318c:	2b00      	cmp	r3, #0
 800318e:	d041      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003194:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003198:	d02a      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800319a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800319e:	d824      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031a4:	d008      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80031a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80031aa:	d81e      	bhi.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80031b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031b4:	d010      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80031b6:	e018      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031b8:	4b86      	ldr	r3, [pc, #536]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	4a85      	ldr	r2, [pc, #532]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031c4:	e015      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3304      	adds	r3, #4
 80031ca:	2100      	movs	r1, #0
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fabb 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031d6:	e00c      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3320      	adds	r3, #32
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fba6 	bl	8003930 <RCCEx_PLLSAI2_Config>
 80031e4:	4603      	mov	r3, r0
 80031e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	74fb      	strb	r3, [r7, #19]
      break;
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10b      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031f8:	4b76      	ldr	r3, [pc, #472]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003206:	4973      	ldr	r1, [pc, #460]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800320e:	e001      	b.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	7cfb      	ldrb	r3, [r7, #19]
 8003212:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d041      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003224:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003228:	d02a      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800322a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800322e:	d824      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003230:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003234:	d008      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003236:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800323a:	d81e      	bhi.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003240:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003244:	d010      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003246:	e018      	b.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003248:	4b62      	ldr	r3, [pc, #392]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	4a61      	ldr	r2, [pc, #388]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800324e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003252:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003254:	e015      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3304      	adds	r3, #4
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fa73 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003266:	e00c      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	3320      	adds	r3, #32
 800326c:	2100      	movs	r1, #0
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fb5e 	bl	8003930 <RCCEx_PLLSAI2_Config>
 8003274:	4603      	mov	r3, r0
 8003276:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003278:	e003      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	74fb      	strb	r3, [r7, #19]
      break;
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003280:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003288:	4b52      	ldr	r3, [pc, #328]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003296:	494f      	ldr	r1, [pc, #316]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800329e:	e001      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	7cfb      	ldrb	r3, [r7, #19]
 80032a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a0 	beq.w	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80032b6:	4b47      	ldr	r3, [pc, #284]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80032c6:	2300      	movs	r3, #0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00d      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b41      	ldr	r3, [pc, #260]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	4a40      	ldr	r2, [pc, #256]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	4b3e      	ldr	r3, [pc, #248]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e4:	2301      	movs	r3, #1
 80032e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032e8:	4b3b      	ldr	r3, [pc, #236]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a3a      	ldr	r2, [pc, #232]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032f4:	f7fe fdae 	bl	8001e54 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032fa:	e009      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fc:	f7fe fdaa 	bl	8001e54 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d902      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	74fb      	strb	r3, [r7, #19]
        break;
 800330e:	e005      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003310:	4b31      	ldr	r3, [pc, #196]	@ (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0ef      	beq.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800331c:	7cfb      	ldrb	r3, [r7, #19]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d15c      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003322:	4b2c      	ldr	r3, [pc, #176]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003328:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d01f      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	429a      	cmp	r2, r3
 800333e:	d019      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003340:	4b24      	ldr	r3, [pc, #144]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003346:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800334a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800334c:	4b21      	ldr	r3, [pc, #132]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800334e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003352:	4a20      	ldr	r2, [pc, #128]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003358:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800335c:	4b1d      	ldr	r3, [pc, #116]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003362:	4a1c      	ldr	r2, [pc, #112]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003368:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800336c:	4a19      	ldr	r2, [pc, #100]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d016      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337e:	f7fe fd69 	bl	8001e54 <HAL_GetTick>
 8003382:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003384:	e00b      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003386:	f7fe fd65 	bl	8001e54 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003394:	4293      	cmp	r3, r2
 8003396:	d902      	bls.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	74fb      	strb	r3, [r7, #19]
            break;
 800339c:	e006      	b.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800339e:	4b0d      	ldr	r3, [pc, #52]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a4:	f003 0302 	and.w	r3, r3, #2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0ec      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d10c      	bne.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033b2:	4b08      	ldr	r3, [pc, #32]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033c2:	4904      	ldr	r1, [pc, #16]	@ (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c4:	4313      	orrs	r3, r2
 80033c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80033ca:	e009      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033cc:	7cfb      	ldrb	r3, [r7, #19]
 80033ce:	74bb      	strb	r3, [r7, #18]
 80033d0:	e006      	b.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80033d2:	bf00      	nop
 80033d4:	40021000 	.word	0x40021000
 80033d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e0:	7c7b      	ldrb	r3, [r7, #17]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b9e      	ldr	r3, [pc, #632]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ea:	4a9d      	ldr	r2, [pc, #628]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033fe:	4b98      	ldr	r3, [pc, #608]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f023 0203 	bic.w	r2, r3, #3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800340c:	4994      	ldr	r1, [pc, #592]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003420:	4b8f      	ldr	r3, [pc, #572]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f023 020c 	bic.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342e:	498c      	ldr	r1, [pc, #560]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0304 	and.w	r3, r3, #4
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003442:	4b87      	ldr	r3, [pc, #540]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	4983      	ldr	r1, [pc, #524]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003464:	4b7e      	ldr	r3, [pc, #504]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	497b      	ldr	r1, [pc, #492]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0310 	and.w	r3, r3, #16
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003486:	4b76      	ldr	r3, [pc, #472]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003494:	4972      	ldr	r1, [pc, #456]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80034a8:	4b6d      	ldr	r3, [pc, #436]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034b6:	496a      	ldr	r1, [pc, #424]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034ca:	4b65      	ldr	r3, [pc, #404]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	4961      	ldr	r1, [pc, #388]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034ec:	4b5c      	ldr	r3, [pc, #368]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034fa:	4959      	ldr	r1, [pc, #356]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800350e:	4b54      	ldr	r3, [pc, #336]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003514:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351c:	4950      	ldr	r1, [pc, #320]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003530:	4b4b      	ldr	r3, [pc, #300]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800353e:	4948      	ldr	r1, [pc, #288]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003552:	4b43      	ldr	r3, [pc, #268]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003558:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	493f      	ldr	r1, [pc, #252]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d028      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003574:	4b3a      	ldr	r3, [pc, #232]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003582:	4937      	ldr	r1, [pc, #220]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003584:	4313      	orrs	r3, r2
 8003586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800358e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003592:	d106      	bne.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003594:	4b32      	ldr	r3, [pc, #200]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	4a31      	ldr	r2, [pc, #196]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800359e:	60d3      	str	r3, [r2, #12]
 80035a0:	e011      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035aa:	d10c      	bne.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	2101      	movs	r1, #1
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f8c8 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80035b8:	4603      	mov	r3, r0
 80035ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80035c2:	7cfb      	ldrb	r3, [r7, #19]
 80035c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d028      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035d2:	4b23      	ldr	r3, [pc, #140]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035e0:	491f      	ldr	r1, [pc, #124]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035f0:	d106      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035fc:	60d3      	str	r3, [r2, #12]
 80035fe:	e011      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003604:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f899 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02b      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003636:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800363e:	4908      	ldr	r1, [pc, #32]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800364e:	d109      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003650:	4b03      	ldr	r3, [pc, #12]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4a02      	ldr	r2, [pc, #8]	@ (8003660 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800365a:	60d3      	str	r3, [r2, #12]
 800365c:	e014      	b.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003668:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800366c:	d10c      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3304      	adds	r3, #4
 8003672:	2101      	movs	r1, #1
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f867 	bl	8003748 <RCCEx_PLLSAI1_Config>
 800367a:	4603      	mov	r3, r0
 800367c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800367e:	7cfb      	ldrb	r3, [r7, #19]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d02f      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003694:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036a2:	4928      	ldr	r1, [pc, #160]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036b2:	d10d      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	2102      	movs	r1, #2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f844 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d014      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	74bb      	strb	r3, [r7, #18]
 80036ce:	e011      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d8:	d10c      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	3320      	adds	r3, #32
 80036de:	2102      	movs	r1, #2
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 f925 	bl	8003930 <RCCEx_PLLSAI2_Config>
 80036e6:	4603      	mov	r3, r0
 80036e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036ea:	7cfb      	ldrb	r3, [r7, #19]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d001      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00a      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003700:	4b10      	ldr	r3, [pc, #64]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003706:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800370e:	490d      	ldr	r1, [pc, #52]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003710:	4313      	orrs	r3, r2
 8003712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d00b      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003722:	4b08      	ldr	r3, [pc, #32]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003728:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003732:	4904      	ldr	r1, [pc, #16]	@ (8003744 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003734:	4313      	orrs	r3, r2
 8003736:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800373a:	7cbb      	ldrb	r3, [r7, #18]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40021000 	.word	0x40021000

08003748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003756:	4b75      	ldr	r3, [pc, #468]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003762:	4b72      	ldr	r3, [pc, #456]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0203 	and.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d10d      	bne.n	800378e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
       ||
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800377a:	4b6c      	ldr	r3, [pc, #432]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
       ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d047      	beq.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e044      	b.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d018      	beq.n	80037ce <RCCEx_PLLSAI1_Config+0x86>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d825      	bhi.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d002      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0x62>
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d009      	beq.n	80037bc <RCCEx_PLLSAI1_Config+0x74>
 80037a8:	e020      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037aa:	4b60      	ldr	r3, [pc, #384]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e01a      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037bc:	4b5b      	ldr	r3, [pc, #364]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037cc:	e013      	b.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ce:	4b57      	ldr	r3, [pc, #348]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037da:	4b54      	ldr	r3, [pc, #336]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ea:	e006      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e004      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003802:	4b4a      	ldr	r3, [pc, #296]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	430b      	orrs	r3, r1
 8003818:	4944      	ldr	r1, [pc, #272]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d17d      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003824:	4b41      	ldr	r3, [pc, #260]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a40      	ldr	r2, [pc, #256]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800382e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fe fb10 	bl	8001e54 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003838:	f7fe fb0c 	bl	8001e54 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
        break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384c:	4b37      	ldr	r3, [pc, #220]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d160      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003864:	4b31      	ldr	r3, [pc, #196]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800386c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	0912      	lsrs	r2, r2, #4
 800387c:	0452      	lsls	r2, r2, #17
 800387e:	430a      	orrs	r2, r1
 8003880:	492a      	ldr	r1, [pc, #168]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	610b      	str	r3, [r1, #16]
 8003886:	e027      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	d112      	bne.n	80038b4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388e:	4b27      	ldr	r3, [pc, #156]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003890:	691b      	ldr	r3, [r3, #16]
 8003892:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003896:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	6892      	ldr	r2, [r2, #8]
 800389e:	0211      	lsls	r1, r2, #8
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6912      	ldr	r2, [r2, #16]
 80038a4:	0852      	lsrs	r2, r2, #1
 80038a6:	3a01      	subs	r2, #1
 80038a8:	0552      	lsls	r2, r2, #21
 80038aa:	430a      	orrs	r2, r1
 80038ac:	491f      	ldr	r1, [pc, #124]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	610b      	str	r3, [r1, #16]
 80038b2:	e011      	b.n	80038d8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b4:	4b1d      	ldr	r3, [pc, #116]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80038bc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6892      	ldr	r2, [r2, #8]
 80038c4:	0211      	lsls	r1, r2, #8
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6952      	ldr	r2, [r2, #20]
 80038ca:	0852      	lsrs	r2, r2, #1
 80038cc:	3a01      	subs	r2, #1
 80038ce:	0652      	lsls	r2, r2, #25
 80038d0:	430a      	orrs	r2, r1
 80038d2:	4916      	ldr	r1, [pc, #88]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038d8:	4b14      	ldr	r3, [pc, #80]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a13      	ldr	r2, [pc, #76]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e4:	f7fe fab6 	bl	8001e54 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ec:	f7fe fab2 	bl	8001e54 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
          break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003900:	4b0a      	ldr	r3, [pc, #40]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d0ef      	beq.n	80038ec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d106      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003912:	4b06      	ldr	r3, [pc, #24]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	4904      	ldr	r1, [pc, #16]	@ (800392c <RCCEx_PLLSAI1_Config+0x1e4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	40021000 	.word	0x40021000

08003930 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800393e:	4b6a      	ldr	r3, [pc, #424]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d018      	beq.n	800397c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800394a:	4b67      	ldr	r3, [pc, #412]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	f003 0203 	and.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	429a      	cmp	r2, r3
 8003958:	d10d      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
       ||
 800395e:	2b00      	cmp	r3, #0
 8003960:	d009      	beq.n	8003976 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003962:	4b61      	ldr	r3, [pc, #388]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	1c5a      	adds	r2, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
       ||
 8003972:	429a      	cmp	r2, r3
 8003974:	d047      	beq.n	8003a06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	73fb      	strb	r3, [r7, #15]
 800397a:	e044      	b.n	8003a06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b03      	cmp	r3, #3
 8003982:	d018      	beq.n	80039b6 <RCCEx_PLLSAI2_Config+0x86>
 8003984:	2b03      	cmp	r3, #3
 8003986:	d825      	bhi.n	80039d4 <RCCEx_PLLSAI2_Config+0xa4>
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <RCCEx_PLLSAI2_Config+0x62>
 800398c:	2b02      	cmp	r3, #2
 800398e:	d009      	beq.n	80039a4 <RCCEx_PLLSAI2_Config+0x74>
 8003990:	e020      	b.n	80039d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003992:	4b55      	ldr	r3, [pc, #340]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11d      	bne.n	80039da <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039a2:	e01a      	b.n	80039da <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a4:	4b50      	ldr	r3, [pc, #320]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d116      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b4:	e013      	b.n	80039de <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b6:	4b4c      	ldr	r3, [pc, #304]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10f      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039c2:	4b49      	ldr	r3, [pc, #292]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039d2:	e006      	b.n	80039e2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
      break;
 80039d8:	e004      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039da:	bf00      	nop
 80039dc:	e002      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039de:	bf00      	nop
 80039e0:	e000      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d10d      	bne.n	8003a06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039ea:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6819      	ldr	r1, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	430b      	orrs	r3, r1
 8003a00:	4939      	ldr	r1, [pc, #228]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d167      	bne.n	8003adc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a0c:	4b36      	ldr	r3, [pc, #216]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a35      	ldr	r2, [pc, #212]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fe fa1c 	bl	8001e54 <HAL_GetTick>
 8003a1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a1e:	e009      	b.n	8003a34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a20:	f7fe fa18 	bl	8001e54 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d902      	bls.n	8003a34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	73fb      	strb	r3, [r7, #15]
        break;
 8003a32:	e005      	b.n	8003a40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a34:	4b2c      	ldr	r3, [pc, #176]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1ef      	bne.n	8003a20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d14a      	bne.n	8003adc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d111      	bne.n	8003a70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6892      	ldr	r2, [r2, #8]
 8003a5c:	0211      	lsls	r1, r2, #8
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68d2      	ldr	r2, [r2, #12]
 8003a62:	0912      	lsrs	r2, r2, #4
 8003a64:	0452      	lsls	r2, r2, #17
 8003a66:	430a      	orrs	r2, r1
 8003a68:	491f      	ldr	r1, [pc, #124]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	614b      	str	r3, [r1, #20]
 8003a6e:	e011      	b.n	8003a94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a70:	4b1d      	ldr	r3, [pc, #116]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6892      	ldr	r2, [r2, #8]
 8003a80:	0211      	lsls	r1, r2, #8
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6912      	ldr	r2, [r2, #16]
 8003a86:	0852      	lsrs	r2, r2, #1
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0652      	lsls	r2, r2, #25
 8003a8c:	430a      	orrs	r2, r1
 8003a8e:	4916      	ldr	r1, [pc, #88]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a94:	4b14      	ldr	r3, [pc, #80]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a13      	ldr	r2, [pc, #76]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa0:	f7fe f9d8 	bl	8001e54 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aa6:	e009      	b.n	8003abc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa8:	f7fe f9d4 	bl	8001e54 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d902      	bls.n	8003abc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	73fb      	strb	r3, [r7, #15]
          break;
 8003aba:	e005      	b.n	8003ac8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0ef      	beq.n	8003aa8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	4904      	ldr	r1, [pc, #16]	@ (8003ae8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40021000 	.word	0x40021000

08003aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e095      	b.n	8003c2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b0e:	d009      	beq.n	8003b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fd ff60 	bl	8001a04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b64:	d902      	bls.n	8003b6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003b66:	2300      	movs	r3, #0
 8003b68:	60fb      	str	r3, [r7, #12]
 8003b6a:	e002      	b.n	8003b72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003b6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003b7a:	d007      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	695b      	ldr	r3, [r3, #20]
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	431a      	orrs	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bba:	431a      	orrs	r2, r3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bce:	ea42 0103 	orr.w	r1, r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	430a      	orrs	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	0c1b      	lsrs	r3, r3, #16
 8003be8:	f003 0204 	and.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	431a      	orrs	r2, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003c08:	ea42 0103 	orr.w	r1, r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	430a      	orrs	r2, r1
 8003c18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3710      	adds	r7, #16
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}

08003c32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b088      	sub	sp, #32
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	603b      	str	r3, [r7, #0]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c42:	f7fe f907 	bl	8001e54 <HAL_GetTick>
 8003c46:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d001      	beq.n	8003c5c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e15c      	b.n	8003f16 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <HAL_SPI_Transmit+0x36>
 8003c62:	88fb      	ldrh	r3, [r7, #6]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e154      	b.n	8003f16 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d101      	bne.n	8003c7a <HAL_SPI_Transmit+0x48>
 8003c76:	2302      	movs	r3, #2
 8003c78:	e14d      	b.n	8003f16 <HAL_SPI_Transmit+0x2e4>
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2203      	movs	r2, #3
 8003c86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	88fa      	ldrh	r2, [r7, #6]
 8003c9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	88fa      	ldrh	r2, [r7, #6]
 8003ca0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ccc:	d10f      	bne.n	8003cee <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003cec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b40      	cmp	r3, #64	@ 0x40
 8003cfa:	d007      	beq.n	8003d0c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003d14:	d952      	bls.n	8003dbc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_SPI_Transmit+0xf2>
 8003d1e:	8b7b      	ldrh	r3, [r7, #26]
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	d145      	bne.n	8003db0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d28:	881a      	ldrh	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d34:	1c9a      	adds	r2, r3, #2
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003d48:	e032      	b.n	8003db0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d112      	bne.n	8003d7e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d5c:	881a      	ldrh	r2, [r3, #0]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d68:	1c9a      	adds	r2, r3, #2
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003d7c:	e018      	b.n	8003db0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d7e:	f7fe f869 	bl	8001e54 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d803      	bhi.n	8003d96 <HAL_SPI_Transmit+0x164>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003d94:	d102      	bne.n	8003d9c <HAL_SPI_Transmit+0x16a>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e0b2      	b.n	8003f16 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1c7      	bne.n	8003d4a <HAL_SPI_Transmit+0x118>
 8003dba:	e083      	b.n	8003ec4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_Transmit+0x198>
 8003dc4:	8b7b      	ldrh	r3, [r7, #26]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d177      	bne.n	8003eba <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d912      	bls.n	8003dfa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003de4:	1c9a      	adds	r2, r3, #2
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b02      	subs	r3, #2
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003df8:	e05f      	b.n	8003eba <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	330c      	adds	r3, #12
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003e20:	e04b      	b.n	8003eba <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d12b      	bne.n	8003e88 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d912      	bls.n	8003e60 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3e:	881a      	ldrh	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4a:	1c9a      	adds	r2, r3, #2
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b02      	subs	r3, #2
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e5e:	e02c      	b.n	8003eba <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	330c      	adds	r3, #12
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e86:	e018      	b.n	8003eba <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e88:	f7fd ffe4 	bl	8001e54 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d803      	bhi.n	8003ea0 <HAL_SPI_Transmit+0x26e>
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e9e:	d102      	bne.n	8003ea6 <HAL_SPI_Transmit+0x274>
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d109      	bne.n	8003eba <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e02d      	b.n	8003f16 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ae      	bne.n	8003e22 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec4:	69fa      	ldr	r2, [r7, #28]
 8003ec6:	6839      	ldr	r1, [r7, #0]
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f947 	bl	800415c <SPI_EndRxTxTransaction>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d002      	beq.n	8003eda <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e000      	b.n	8003f16 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003f14:	2300      	movs	r3, #0
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3720      	adds	r7, #32
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
	...

08003f20 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b088      	sub	sp, #32
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	603b      	str	r3, [r7, #0]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f30:	f7fd ff90 	bl	8001e54 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f38:	1a9b      	subs	r3, r3, r2
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f40:	f7fd ff88 	bl	8001e54 <HAL_GetTick>
 8003f44:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f46:	4b39      	ldr	r3, [pc, #228]	@ (800402c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	015b      	lsls	r3, r3, #5
 8003f4c:	0d1b      	lsrs	r3, r3, #20
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	fb02 f303 	mul.w	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f56:	e054      	b.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003f5e:	d050      	beq.n	8004002 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f60:	f7fd ff78 	bl	8001e54 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d902      	bls.n	8003f76 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d13d      	bne.n	8003ff2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003f84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f8e:	d111      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f98:	d004      	beq.n	8003fa4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa2:	d107      	bne.n	8003fb4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fb2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fbc:	d10f      	bne.n	8003fde <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fdc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e017      	b.n	8004022 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	3b01      	subs	r3, #1
 8004000:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	689a      	ldr	r2, [r3, #8]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4013      	ands	r3, r2
 800400c:	68ba      	ldr	r2, [r7, #8]
 800400e:	429a      	cmp	r2, r3
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	429a      	cmp	r2, r3
 800401e:	d19b      	bne.n	8003f58 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004020:	2300      	movs	r3, #0
}
 8004022:	4618      	mov	r0, r3
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000008 	.word	0x20000008

08004030 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	@ 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004042:	f7fd ff07 	bl	8001e54 <HAL_GetTick>
 8004046:	4602      	mov	r2, r0
 8004048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	4413      	add	r3, r2
 8004050:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004052:	f7fd feff 	bl	8001e54 <HAL_GetTick>
 8004056:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	330c      	adds	r3, #12
 800405e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004060:	4b3d      	ldr	r3, [pc, #244]	@ (8004158 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	00da      	lsls	r2, r3, #3
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	0d1b      	lsrs	r3, r3, #20
 8004070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004078:	e060      	b.n	800413c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004080:	d107      	bne.n	8004092 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d104      	bne.n	8004092 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	b2db      	uxtb	r3, r3
 800408e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004090:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004098:	d050      	beq.n	800413c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800409a:	f7fd fedb 	bl	8001e54 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d902      	bls.n	80040b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d13d      	bne.n	800412c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80040be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c8:	d111      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040d2:	d004      	beq.n	80040de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040dc:	d107      	bne.n	80040ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040f6:	d10f      	bne.n	8004118 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004116:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e010      	b.n	800414e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	3b01      	subs	r3, #1
 800413a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689a      	ldr	r2, [r3, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d196      	bne.n	800407a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3728      	adds	r7, #40	@ 0x28
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000008 	.word	0x20000008

0800415c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff ff5b 	bl	8004030 <SPI_WaitFifoStateUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e027      	b.n	80041e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2200      	movs	r2, #0
 8004198:	2180      	movs	r1, #128	@ 0x80
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff fec0 	bl	8003f20 <SPI_WaitFlagStateUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e014      	b.n	80041e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff ff34 	bl	8004030 <SPI_WaitFifoStateUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e000      	b.n	80041e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e049      	b.n	800428e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d106      	bne.n	8004214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f841 	bl	8004296 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	4619      	mov	r1, r3
 8004226:	4610      	mov	r0, r2
 8004228:	f000 f9e0 	bl	80045ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2201      	movs	r2, #1
 8004240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2201      	movs	r2, #1
 8004268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d001      	beq.n	80042c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e04f      	b.n	8004364 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68da      	ldr	r2, [r3, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0201 	orr.w	r2, r2, #1
 80042da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a23      	ldr	r2, [pc, #140]	@ (8004370 <HAL_TIM_Base_Start_IT+0xc4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d01d      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x76>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042ee:	d018      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x76>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004374 <HAL_TIM_Base_Start_IT+0xc8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d013      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x76>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004378 <HAL_TIM_Base_Start_IT+0xcc>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00e      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x76>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1c      	ldr	r2, [pc, #112]	@ (800437c <HAL_TIM_Base_Start_IT+0xd0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d009      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x76>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1b      	ldr	r2, [pc, #108]	@ (8004380 <HAL_TIM_Base_Start_IT+0xd4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d004      	beq.n	8004322 <HAL_TIM_Base_Start_IT+0x76>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_TIM_Base_Start_IT+0xd8>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d115      	bne.n	800434e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <HAL_TIM_Base_Start_IT+0xdc>)
 800432a:	4013      	ands	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b06      	cmp	r3, #6
 8004332:	d015      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0xb4>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800433a:	d011      	beq.n	8004360 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f042 0201 	orr.w	r2, r2, #1
 800434a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434c:	e008      	b.n	8004360 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f042 0201 	orr.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]
 800435e:	e000      	b.n	8004362 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004360:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800
 800437c:	40000c00 	.word	0x40000c00
 8004380:	40013400 	.word	0x40013400
 8004384:	40014000 	.word	0x40014000
 8004388:	00010007 	.word	0x00010007

0800438c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0202 	mvn.w	r2, #2
 80043c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	f003 0303 	and.w	r3, r3, #3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f8e9 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f8db 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f8ec 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0304 	and.w	r3, r3, #4
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d020      	beq.n	800443c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0204 	mvn.w	r2, #4
 800440c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2202      	movs	r2, #2
 8004412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f8c3 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 8004428:	e005      	b.n	8004436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8b5 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8c6 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0308 	and.w	r3, r3, #8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0208 	mvn.w	r2, #8
 8004458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2204      	movs	r2, #4
 800445e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f89d 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f88f 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f8a0 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0310 	and.w	r3, r3, #16
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0210 	mvn.w	r2, #16
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2208      	movs	r2, #8
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69db      	ldr	r3, [r3, #28]
 80044b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f877 	bl	80045ae <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f869 	bl	800459a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f87a 	bl	80045c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d007      	beq.n	80044f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0201 	mvn.w	r2, #1
 80044f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f7fc fcec 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d104      	bne.n	800450c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00c      	beq.n	8004526 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800451e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 f913 	bl	800474c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00c      	beq.n	800454a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f90b 	bl	8004760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00c      	beq.n	800456e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d007      	beq.n	800456e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f834 	bl	80045d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	f003 0320 	and.w	r3, r3, #32
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00c      	beq.n	8004592 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b00      	cmp	r3, #0
 8004580:	d007      	beq.n	8004592 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f06f 0220 	mvn.w	r2, #32
 800458a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f8d3 	bl	8004738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr

080045ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ae:	b480      	push	{r7}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b083      	sub	sp, #12
 80045da:	af00      	add	r7, sp, #0
 80045dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045de:	bf00      	nop
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
	...

080045ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a46      	ldr	r2, [pc, #280]	@ (8004718 <TIM_Base_SetConfig+0x12c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d013      	beq.n	800462c <TIM_Base_SetConfig+0x40>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800460a:	d00f      	beq.n	800462c <TIM_Base_SetConfig+0x40>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a43      	ldr	r2, [pc, #268]	@ (800471c <TIM_Base_SetConfig+0x130>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00b      	beq.n	800462c <TIM_Base_SetConfig+0x40>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a42      	ldr	r2, [pc, #264]	@ (8004720 <TIM_Base_SetConfig+0x134>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d007      	beq.n	800462c <TIM_Base_SetConfig+0x40>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a41      	ldr	r2, [pc, #260]	@ (8004724 <TIM_Base_SetConfig+0x138>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d003      	beq.n	800462c <TIM_Base_SetConfig+0x40>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a40      	ldr	r2, [pc, #256]	@ (8004728 <TIM_Base_SetConfig+0x13c>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d108      	bne.n	800463e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004632:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a35      	ldr	r2, [pc, #212]	@ (8004718 <TIM_Base_SetConfig+0x12c>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01f      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800464c:	d01b      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a32      	ldr	r2, [pc, #200]	@ (800471c <TIM_Base_SetConfig+0x130>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d017      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a31      	ldr	r2, [pc, #196]	@ (8004720 <TIM_Base_SetConfig+0x134>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d013      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a30      	ldr	r2, [pc, #192]	@ (8004724 <TIM_Base_SetConfig+0x138>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00f      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a2f      	ldr	r2, [pc, #188]	@ (8004728 <TIM_Base_SetConfig+0x13c>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00b      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a2e      	ldr	r2, [pc, #184]	@ (800472c <TIM_Base_SetConfig+0x140>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d007      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a2d      	ldr	r2, [pc, #180]	@ (8004730 <TIM_Base_SetConfig+0x144>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <TIM_Base_SetConfig+0x9a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a2c      	ldr	r2, [pc, #176]	@ (8004734 <TIM_Base_SetConfig+0x148>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d108      	bne.n	8004698 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800468c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a16      	ldr	r2, [pc, #88]	@ (8004718 <TIM_Base_SetConfig+0x12c>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0xf8>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a18      	ldr	r2, [pc, #96]	@ (8004728 <TIM_Base_SetConfig+0x13c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0xf8>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a17      	ldr	r2, [pc, #92]	@ (800472c <TIM_Base_SetConfig+0x140>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0xf8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a16      	ldr	r2, [pc, #88]	@ (8004730 <TIM_Base_SetConfig+0x144>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0xf8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a15      	ldr	r2, [pc, #84]	@ (8004734 <TIM_Base_SetConfig+0x148>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	691a      	ldr	r2, [r3, #16]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d105      	bne.n	800470a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	611a      	str	r2, [r3, #16]
  }
}
 800470a:	bf00      	nop
 800470c:	3714      	adds	r7, #20
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40012c00 	.word	0x40012c00
 800471c:	40000400 	.word	0x40000400
 8004720:	40000800 	.word	0x40000800
 8004724:	40000c00 	.word	0x40000c00
 8004728:	40013400 	.word	0x40013400
 800472c:	40014000 	.word	0x40014000
 8004730:	40014400 	.word	0x40014400
 8004734:	40014800 	.word	0x40014800

08004738 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e040      	b.n	8004808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fd faa2 	bl	8001ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2224      	movs	r2, #36	@ 0x24
 80047a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fae0 	bl	8004d80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f825 	bl	8004810 <UART_SetConfig>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e01b      	b.n	8004808 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	685a      	ldr	r2, [r3, #4]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80047ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0201 	orr.w	r2, r2, #1
 80047fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 fb5f 	bl	8004ec4 <UART_CheckIdleState>
 8004806:	4603      	mov	r3, r0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004814:	b08a      	sub	sp, #40	@ 0x28
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	431a      	orrs	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	4313      	orrs	r3, r2
 8004836:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4ba4      	ldr	r3, [pc, #656]	@ (8004ad0 <UART_SetConfig+0x2c0>)
 8004840:	4013      	ands	r3, r2
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004848:	430b      	orrs	r3, r1
 800484a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	68da      	ldr	r2, [r3, #12]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a99      	ldr	r2, [pc, #612]	@ (8004ad4 <UART_SetConfig+0x2c4>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d004      	beq.n	800487c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004878:	4313      	orrs	r3, r2
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800488c:	430a      	orrs	r2, r1
 800488e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a90      	ldr	r2, [pc, #576]	@ (8004ad8 <UART_SetConfig+0x2c8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d126      	bne.n	80048e8 <UART_SetConfig+0xd8>
 800489a:	4b90      	ldr	r3, [pc, #576]	@ (8004adc <UART_SetConfig+0x2cc>)
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	2b03      	cmp	r3, #3
 80048a6:	d81b      	bhi.n	80048e0 <UART_SetConfig+0xd0>
 80048a8:	a201      	add	r2, pc, #4	@ (adr r2, 80048b0 <UART_SetConfig+0xa0>)
 80048aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ae:	bf00      	nop
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048d1 	.word	0x080048d1
 80048b8:	080048c9 	.word	0x080048c9
 80048bc:	080048d9 	.word	0x080048d9
 80048c0:	2301      	movs	r3, #1
 80048c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048c6:	e116      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80048c8:	2302      	movs	r3, #2
 80048ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048ce:	e112      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80048d0:	2304      	movs	r3, #4
 80048d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048d6:	e10e      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80048d8:	2308      	movs	r3, #8
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048de:	e10a      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80048e0:	2310      	movs	r3, #16
 80048e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80048e6:	e106      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a7c      	ldr	r2, [pc, #496]	@ (8004ae0 <UART_SetConfig+0x2d0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d138      	bne.n	8004964 <UART_SetConfig+0x154>
 80048f2:	4b7a      	ldr	r3, [pc, #488]	@ (8004adc <UART_SetConfig+0x2cc>)
 80048f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f8:	f003 030c 	and.w	r3, r3, #12
 80048fc:	2b0c      	cmp	r3, #12
 80048fe:	d82d      	bhi.n	800495c <UART_SetConfig+0x14c>
 8004900:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <UART_SetConfig+0xf8>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800493d 	.word	0x0800493d
 800490c:	0800495d 	.word	0x0800495d
 8004910:	0800495d 	.word	0x0800495d
 8004914:	0800495d 	.word	0x0800495d
 8004918:	0800494d 	.word	0x0800494d
 800491c:	0800495d 	.word	0x0800495d
 8004920:	0800495d 	.word	0x0800495d
 8004924:	0800495d 	.word	0x0800495d
 8004928:	08004945 	.word	0x08004945
 800492c:	0800495d 	.word	0x0800495d
 8004930:	0800495d 	.word	0x0800495d
 8004934:	0800495d 	.word	0x0800495d
 8004938:	08004955 	.word	0x08004955
 800493c:	2300      	movs	r3, #0
 800493e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004942:	e0d8      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004944:	2302      	movs	r3, #2
 8004946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800494a:	e0d4      	b.n	8004af6 <UART_SetConfig+0x2e6>
 800494c:	2304      	movs	r3, #4
 800494e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004952:	e0d0      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004954:	2308      	movs	r3, #8
 8004956:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800495a:	e0cc      	b.n	8004af6 <UART_SetConfig+0x2e6>
 800495c:	2310      	movs	r3, #16
 800495e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004962:	e0c8      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a5e      	ldr	r2, [pc, #376]	@ (8004ae4 <UART_SetConfig+0x2d4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d125      	bne.n	80049ba <UART_SetConfig+0x1aa>
 800496e:	4b5b      	ldr	r3, [pc, #364]	@ (8004adc <UART_SetConfig+0x2cc>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004974:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004978:	2b30      	cmp	r3, #48	@ 0x30
 800497a:	d016      	beq.n	80049aa <UART_SetConfig+0x19a>
 800497c:	2b30      	cmp	r3, #48	@ 0x30
 800497e:	d818      	bhi.n	80049b2 <UART_SetConfig+0x1a2>
 8004980:	2b20      	cmp	r3, #32
 8004982:	d00a      	beq.n	800499a <UART_SetConfig+0x18a>
 8004984:	2b20      	cmp	r3, #32
 8004986:	d814      	bhi.n	80049b2 <UART_SetConfig+0x1a2>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d002      	beq.n	8004992 <UART_SetConfig+0x182>
 800498c:	2b10      	cmp	r3, #16
 800498e:	d008      	beq.n	80049a2 <UART_SetConfig+0x192>
 8004990:	e00f      	b.n	80049b2 <UART_SetConfig+0x1a2>
 8004992:	2300      	movs	r3, #0
 8004994:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004998:	e0ad      	b.n	8004af6 <UART_SetConfig+0x2e6>
 800499a:	2302      	movs	r3, #2
 800499c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a0:	e0a9      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80049a2:	2304      	movs	r3, #4
 80049a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049a8:	e0a5      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80049aa:	2308      	movs	r3, #8
 80049ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b0:	e0a1      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80049b2:	2310      	movs	r3, #16
 80049b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049b8:	e09d      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a4a      	ldr	r2, [pc, #296]	@ (8004ae8 <UART_SetConfig+0x2d8>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d125      	bne.n	8004a10 <UART_SetConfig+0x200>
 80049c4:	4b45      	ldr	r3, [pc, #276]	@ (8004adc <UART_SetConfig+0x2cc>)
 80049c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80049ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d0:	d016      	beq.n	8004a00 <UART_SetConfig+0x1f0>
 80049d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80049d4:	d818      	bhi.n	8004a08 <UART_SetConfig+0x1f8>
 80049d6:	2b80      	cmp	r3, #128	@ 0x80
 80049d8:	d00a      	beq.n	80049f0 <UART_SetConfig+0x1e0>
 80049da:	2b80      	cmp	r3, #128	@ 0x80
 80049dc:	d814      	bhi.n	8004a08 <UART_SetConfig+0x1f8>
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d002      	beq.n	80049e8 <UART_SetConfig+0x1d8>
 80049e2:	2b40      	cmp	r3, #64	@ 0x40
 80049e4:	d008      	beq.n	80049f8 <UART_SetConfig+0x1e8>
 80049e6:	e00f      	b.n	8004a08 <UART_SetConfig+0x1f8>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049ee:	e082      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80049f0:	2302      	movs	r3, #2
 80049f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049f6:	e07e      	b.n	8004af6 <UART_SetConfig+0x2e6>
 80049f8:	2304      	movs	r3, #4
 80049fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80049fe:	e07a      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a00:	2308      	movs	r3, #8
 8004a02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a06:	e076      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a0e:	e072      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a35      	ldr	r2, [pc, #212]	@ (8004aec <UART_SetConfig+0x2dc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d12a      	bne.n	8004a70 <UART_SetConfig+0x260>
 8004a1a:	4b30      	ldr	r3, [pc, #192]	@ (8004adc <UART_SetConfig+0x2cc>)
 8004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a24:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a28:	d01a      	beq.n	8004a60 <UART_SetConfig+0x250>
 8004a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a2e:	d81b      	bhi.n	8004a68 <UART_SetConfig+0x258>
 8004a30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a34:	d00c      	beq.n	8004a50 <UART_SetConfig+0x240>
 8004a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a3a:	d815      	bhi.n	8004a68 <UART_SetConfig+0x258>
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <UART_SetConfig+0x238>
 8004a40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a44:	d008      	beq.n	8004a58 <UART_SetConfig+0x248>
 8004a46:	e00f      	b.n	8004a68 <UART_SetConfig+0x258>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a4e:	e052      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a50:	2302      	movs	r3, #2
 8004a52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a56:	e04e      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a58:	2304      	movs	r3, #4
 8004a5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a5e:	e04a      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a60:	2308      	movs	r3, #8
 8004a62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a66:	e046      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a68:	2310      	movs	r3, #16
 8004a6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004a6e:	e042      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a17      	ldr	r2, [pc, #92]	@ (8004ad4 <UART_SetConfig+0x2c4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d13a      	bne.n	8004af0 <UART_SetConfig+0x2e0>
 8004a7a:	4b18      	ldr	r3, [pc, #96]	@ (8004adc <UART_SetConfig+0x2cc>)
 8004a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a80:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a84:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a88:	d01a      	beq.n	8004ac0 <UART_SetConfig+0x2b0>
 8004a8a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a8e:	d81b      	bhi.n	8004ac8 <UART_SetConfig+0x2b8>
 8004a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a94:	d00c      	beq.n	8004ab0 <UART_SetConfig+0x2a0>
 8004a96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a9a:	d815      	bhi.n	8004ac8 <UART_SetConfig+0x2b8>
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <UART_SetConfig+0x298>
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004aa4:	d008      	beq.n	8004ab8 <UART_SetConfig+0x2a8>
 8004aa6:	e00f      	b.n	8004ac8 <UART_SetConfig+0x2b8>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004aae:	e022      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ab6:	e01e      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004ab8:	2304      	movs	r3, #4
 8004aba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004abe:	e01a      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004ac0:	2308      	movs	r3, #8
 8004ac2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ac6:	e016      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ace:	e012      	b.n	8004af6 <UART_SetConfig+0x2e6>
 8004ad0:	efff69f3 	.word	0xefff69f3
 8004ad4:	40008000 	.word	0x40008000
 8004ad8:	40013800 	.word	0x40013800
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40004400 	.word	0x40004400
 8004ae4:	40004800 	.word	0x40004800
 8004ae8:	40004c00 	.word	0x40004c00
 8004aec:	40005000 	.word	0x40005000
 8004af0:	2310      	movs	r3, #16
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a9f      	ldr	r2, [pc, #636]	@ (8004d78 <UART_SetConfig+0x568>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d17a      	bne.n	8004bf6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d824      	bhi.n	8004b52 <UART_SetConfig+0x342>
 8004b08:	a201      	add	r2, pc, #4	@ (adr r2, 8004b10 <UART_SetConfig+0x300>)
 8004b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0e:	bf00      	nop
 8004b10:	08004b35 	.word	0x08004b35
 8004b14:	08004b53 	.word	0x08004b53
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b53 	.word	0x08004b53
 8004b20:	08004b43 	.word	0x08004b43
 8004b24:	08004b53 	.word	0x08004b53
 8004b28:	08004b53 	.word	0x08004b53
 8004b2c:	08004b53 	.word	0x08004b53
 8004b30:	08004b4b 	.word	0x08004b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b34:	f7fe fa60 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8004b38:	61f8      	str	r0, [r7, #28]
        break;
 8004b3a:	e010      	b.n	8004b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b3c:	4b8f      	ldr	r3, [pc, #572]	@ (8004d7c <UART_SetConfig+0x56c>)
 8004b3e:	61fb      	str	r3, [r7, #28]
        break;
 8004b40:	e00d      	b.n	8004b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b42:	f7fe f9c1 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8004b46:	61f8      	str	r0, [r7, #28]
        break;
 8004b48:	e009      	b.n	8004b5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b4e:	61fb      	str	r3, [r7, #28]
        break;
 8004b50:	e005      	b.n	8004b5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004b5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 80fb 	beq.w	8004d5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	4413      	add	r3, r2
 8004b70:	69fa      	ldr	r2, [r7, #28]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d305      	bcc.n	8004b82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004b7c:	69fa      	ldr	r2, [r7, #28]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d903      	bls.n	8004b8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004b88:	e0e8      	b.n	8004d5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004b8a:	69fb      	ldr	r3, [r7, #28]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	461c      	mov	r4, r3
 8004b90:	4615      	mov	r5, r2
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	022b      	lsls	r3, r5, #8
 8004b9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004ba0:	0222      	lsls	r2, r4, #8
 8004ba2:	68f9      	ldr	r1, [r7, #12]
 8004ba4:	6849      	ldr	r1, [r1, #4]
 8004ba6:	0849      	lsrs	r1, r1, #1
 8004ba8:	2000      	movs	r0, #0
 8004baa:	4688      	mov	r8, r1
 8004bac:	4681      	mov	r9, r0
 8004bae:	eb12 0a08 	adds.w	sl, r2, r8
 8004bb2:	eb43 0b09 	adc.w	fp, r3, r9
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	607a      	str	r2, [r7, #4]
 8004bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bc4:	4650      	mov	r0, sl
 8004bc6:	4659      	mov	r1, fp
 8004bc8:	f7fb fb02 	bl	80001d0 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bda:	d308      	bcc.n	8004bee <UART_SetConfig+0x3de>
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004be2:	d204      	bcs.n	8004bee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	60da      	str	r2, [r3, #12]
 8004bec:	e0b6      	b.n	8004d5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004bf4:	e0b2      	b.n	8004d5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bfe:	d15e      	bne.n	8004cbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004c00:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d828      	bhi.n	8004c5a <UART_SetConfig+0x44a>
 8004c08:	a201      	add	r2, pc, #4	@ (adr r2, 8004c10 <UART_SetConfig+0x400>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c35 	.word	0x08004c35
 8004c14:	08004c3d 	.word	0x08004c3d
 8004c18:	08004c45 	.word	0x08004c45
 8004c1c:	08004c5b 	.word	0x08004c5b
 8004c20:	08004c4b 	.word	0x08004c4b
 8004c24:	08004c5b 	.word	0x08004c5b
 8004c28:	08004c5b 	.word	0x08004c5b
 8004c2c:	08004c5b 	.word	0x08004c5b
 8004c30:	08004c53 	.word	0x08004c53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c34:	f7fe f9e0 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8004c38:	61f8      	str	r0, [r7, #28]
        break;
 8004c3a:	e014      	b.n	8004c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c3c:	f7fe f9f2 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8004c40:	61f8      	str	r0, [r7, #28]
        break;
 8004c42:	e010      	b.n	8004c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c44:	4b4d      	ldr	r3, [pc, #308]	@ (8004d7c <UART_SetConfig+0x56c>)
 8004c46:	61fb      	str	r3, [r7, #28]
        break;
 8004c48:	e00d      	b.n	8004c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c4a:	f7fe f93d 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8004c4e:	61f8      	str	r0, [r7, #28]
        break;
 8004c50:	e009      	b.n	8004c66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c56:	61fb      	str	r3, [r7, #28]
        break;
 8004c58:	e005      	b.n	8004c66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004c64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d077      	beq.n	8004d5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	005a      	lsls	r2, r3, #1
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	441a      	add	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b0f      	cmp	r3, #15
 8004c86:	d916      	bls.n	8004cb6 <UART_SetConfig+0x4a6>
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8e:	d212      	bcs.n	8004cb6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f023 030f 	bic.w	r3, r3, #15
 8004c98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	085b      	lsrs	r3, r3, #1
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	8afb      	ldrh	r3, [r7, #22]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	8afa      	ldrh	r2, [r7, #22]
 8004cb2:	60da      	str	r2, [r3, #12]
 8004cb4:	e052      	b.n	8004d5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004cbc:	e04e      	b.n	8004d5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cc2:	2b08      	cmp	r3, #8
 8004cc4:	d827      	bhi.n	8004d16 <UART_SetConfig+0x506>
 8004cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <UART_SetConfig+0x4bc>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004cf1 	.word	0x08004cf1
 8004cd0:	08004cf9 	.word	0x08004cf9
 8004cd4:	08004d01 	.word	0x08004d01
 8004cd8:	08004d17 	.word	0x08004d17
 8004cdc:	08004d07 	.word	0x08004d07
 8004ce0:	08004d17 	.word	0x08004d17
 8004ce4:	08004d17 	.word	0x08004d17
 8004ce8:	08004d17 	.word	0x08004d17
 8004cec:	08004d0f 	.word	0x08004d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf0:	f7fe f982 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8004cf4:	61f8      	str	r0, [r7, #28]
        break;
 8004cf6:	e014      	b.n	8004d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe f994 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8004cfc:	61f8      	str	r0, [r7, #28]
        break;
 8004cfe:	e010      	b.n	8004d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d00:	4b1e      	ldr	r3, [pc, #120]	@ (8004d7c <UART_SetConfig+0x56c>)
 8004d02:	61fb      	str	r3, [r7, #28]
        break;
 8004d04:	e00d      	b.n	8004d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d06:	f7fe f8df 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8004d0a:	61f8      	str	r0, [r7, #28]
        break;
 8004d0c:	e009      	b.n	8004d22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d12:	61fb      	str	r3, [r7, #28]
        break;
 8004d14:	e005      	b.n	8004d22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004d20:	bf00      	nop
    }

    if (pclk != 0U)
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d019      	beq.n	8004d5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	085a      	lsrs	r2, r3, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	441a      	add	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d909      	bls.n	8004d56 <UART_SetConfig+0x546>
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d48:	d205      	bcs.n	8004d56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e002      	b.n	8004d5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d68:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3728      	adds	r7, #40	@ 0x28
 8004d70:	46bd      	mov	sp, r7
 8004d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d76:	bf00      	nop
 8004d78:	40008000 	.word	0x40008000
 8004d7c:	00f42400 	.word	0x00f42400

08004d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00a      	beq.n	8004daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00a      	beq.n	8004dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e14:	f003 0310 	and.w	r3, r3, #16
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d00a      	beq.n	8004e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00a      	beq.n	8004e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01a      	beq.n	8004e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e7e:	d10a      	bne.n	8004e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00a      	beq.n	8004eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	430a      	orrs	r2, r1
 8004eb6:	605a      	str	r2, [r3, #4]
  }
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b098      	sub	sp, #96	@ 0x60
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed4:	f7fc ffbe 	bl	8001e54 <HAL_GetTick>
 8004ed8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d12e      	bne.n	8004f46 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004eec:	9300      	str	r3, [sp, #0]
 8004eee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f88c 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004efc:	4603      	mov	r3, r0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d021      	beq.n	8004f46 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f16:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f22:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e6      	bne.n	8004f02 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	e062      	b.n	800500c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b04      	cmp	r3, #4
 8004f52:	d149      	bne.n	8004fe8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f856 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d03c      	beq.n	8004fe8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f76:	e853 3f00 	ldrex	r3, [r3]
 8004f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	461a      	mov	r2, r3
 8004f8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f94:	e841 2300 	strex	r3, r2, [r1]
 8004f98:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1e6      	bne.n	8004f6e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0301 	bic.w	r3, r3, #1
 8004fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3308      	adds	r3, #8
 8004fbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fc0:	61fa      	str	r2, [r7, #28]
 8004fc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	69b9      	ldr	r1, [r7, #24]
 8004fc6:	69fa      	ldr	r2, [r7, #28]
 8004fc8:	e841 2300 	strex	r3, r2, [r1]
 8004fcc:	617b      	str	r3, [r7, #20]
   return(result);
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1e5      	bne.n	8004fa0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e011      	b.n	800500c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2220      	movs	r2, #32
 8004fec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3758      	adds	r7, #88	@ 0x58
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005024:	e04f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800502c:	d04b      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fc ff11 	bl	8001e54 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <UART_WaitOnFlagUntilTimeout+0x30>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e04e      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d037      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b80      	cmp	r3, #128	@ 0x80
 800505a:	d034      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d031      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d110      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2208      	movs	r2, #8
 8005076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f838 	bl	80050ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2208      	movs	r2, #8
 8005082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e029      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800509c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050a0:	d111      	bne.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f81e 	bl	80050ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e00f      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4013      	ands	r3, r2
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d0a0      	beq.n	8005026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b095      	sub	sp, #84	@ 0x54
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005114:	643b      	str	r3, [r7, #64]	@ 0x40
 8005116:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800511a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3308      	adds	r3, #8
 800512e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	61fb      	str	r3, [r7, #28]
   return(result);
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	f023 0301 	bic.w	r3, r3, #1
 800513e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005148:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800514e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e5      	bne.n	8005128 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005160:	2b01      	cmp	r3, #1
 8005162:	d118      	bne.n	8005196 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	e853 3f00 	ldrex	r3, [r3]
 8005170:	60bb      	str	r3, [r7, #8]
   return(result);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f023 0310 	bic.w	r3, r3, #16
 8005178:	647b      	str	r3, [r7, #68]	@ 0x44
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	461a      	mov	r2, r3
 8005180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005182:	61bb      	str	r3, [r7, #24]
 8005184:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6979      	ldr	r1, [r7, #20]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	613b      	str	r3, [r7, #16]
   return(result);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e6      	bne.n	8005164 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80051aa:	bf00      	nop
 80051ac:	3754      	adds	r7, #84	@ 0x54
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr
	...

080051b8 <__NVIC_SetPriority>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	6039      	str	r1, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db0a      	blt.n	80051e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	490c      	ldr	r1, [pc, #48]	@ (8005204 <__NVIC_SetPriority+0x4c>)
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	0112      	lsls	r2, r2, #4
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	440b      	add	r3, r1
 80051dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051e0:	e00a      	b.n	80051f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4908      	ldr	r1, [pc, #32]	@ (8005208 <__NVIC_SetPriority+0x50>)
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	3b04      	subs	r3, #4
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	440b      	add	r3, r1
 80051f6:	761a      	strb	r2, [r3, #24]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	e000e100 	.word	0xe000e100
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <SysTick_Handler+0x1c>)
 8005212:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005214:	f002 fae6 	bl	80077e4 <xTaskGetSchedulerState>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d001      	beq.n	8005222 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800521e:	f003 fc0b 	bl	8008a38 <xPortSysTickHandler>
  }
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	e000e010 	.word	0xe000e010

0800522c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005230:	2100      	movs	r1, #0
 8005232:	f06f 0004 	mvn.w	r0, #4
 8005236:	f7ff ffbf 	bl	80051b8 <__NVIC_SetPriority>
#endif
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005246:	f3ef 8305 	mrs	r3, IPSR
 800524a:	603b      	str	r3, [r7, #0]
  return(result);
 800524c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005252:	f06f 0305 	mvn.w	r3, #5
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	e00c      	b.n	8005274 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800525a:	4b0a      	ldr	r3, [pc, #40]	@ (8005284 <osKernelInitialize+0x44>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005262:	4b08      	ldr	r3, [pc, #32]	@ (8005284 <osKernelInitialize+0x44>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005268:	2300      	movs	r3, #0
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	e002      	b.n	8005274 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005274:	687b      	ldr	r3, [r7, #4]
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	200001fc 	.word	0x200001fc

08005288 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800528e:	f3ef 8305 	mrs	r3, IPSR
 8005292:	603b      	str	r3, [r7, #0]
  return(result);
 8005294:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800529a:	f06f 0305 	mvn.w	r3, #5
 800529e:	607b      	str	r3, [r7, #4]
 80052a0:	e010      	b.n	80052c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052a2:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <osKernelStart+0x48>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d109      	bne.n	80052be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052aa:	f7ff ffbf 	bl	800522c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052ae:	4b08      	ldr	r3, [pc, #32]	@ (80052d0 <osKernelStart+0x48>)
 80052b0:	2202      	movs	r2, #2
 80052b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052b4:	f001 fe22 	bl	8006efc <vTaskStartScheduler>
      stat = osOK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	e002      	b.n	80052c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80052be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052c4:	687b      	ldr	r3, [r7, #4]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	200001fc 	.word	0x200001fc

080052d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b08e      	sub	sp, #56	@ 0x38
 80052d8:	af04      	add	r7, sp, #16
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e4:	f3ef 8305 	mrs	r3, IPSR
 80052e8:	617b      	str	r3, [r7, #20]
  return(result);
 80052ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d17e      	bne.n	80053ee <osThreadNew+0x11a>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d07b      	beq.n	80053ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80052f6:	2380      	movs	r3, #128	@ 0x80
 80052f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80052fa:	2318      	movs	r3, #24
 80052fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80052fe:	2300      	movs	r3, #0
 8005300:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005302:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005306:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d045      	beq.n	800539a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <osThreadNew+0x48>
        name = attr->name;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d008      	beq.n	8005342 <osThreadNew+0x6e>
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	2b38      	cmp	r3, #56	@ 0x38
 8005334:	d805      	bhi.n	8005342 <osThreadNew+0x6e>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <osThreadNew+0x72>
        return (NULL);
 8005342:	2300      	movs	r3, #0
 8005344:	e054      	b.n	80053f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	089b      	lsrs	r3, r3, #2
 8005354:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d00e      	beq.n	800537c <osThreadNew+0xa8>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	2ba7      	cmp	r3, #167	@ 0xa7
 8005364:	d90a      	bls.n	800537c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800536a:	2b00      	cmp	r3, #0
 800536c:	d006      	beq.n	800537c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <osThreadNew+0xa8>
        mem = 1;
 8005376:	2301      	movs	r3, #1
 8005378:	61bb      	str	r3, [r7, #24]
 800537a:	e010      	b.n	800539e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10c      	bne.n	800539e <osThreadNew+0xca>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d108      	bne.n	800539e <osThreadNew+0xca>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d104      	bne.n	800539e <osThreadNew+0xca>
          mem = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
 8005398:	e001      	b.n	800539e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d110      	bne.n	80053c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80053a8:	687a      	ldr	r2, [r7, #4]
 80053aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053ac:	9202      	str	r2, [sp, #8]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	6a3a      	ldr	r2, [r7, #32]
 80053b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f001 fb2b 	bl	8006a16 <xTaskCreateStatic>
 80053c0:	4603      	mov	r3, r0
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	e013      	b.n	80053ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d110      	bne.n	80053ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	f107 0310 	add.w	r3, r7, #16
 80053d4:	9301      	str	r3, [sp, #4]
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f001 fb79 	bl	8006ad6 <xTaskCreate>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d001      	beq.n	80053ee <osThreadNew+0x11a>
            hTask = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053ee:	693b      	ldr	r3, [r7, #16]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3728      	adds	r7, #40	@ 0x28
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b084      	sub	sp, #16
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005400:	f3ef 8305 	mrs	r3, IPSR
 8005404:	60bb      	str	r3, [r7, #8]
  return(result);
 8005406:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <osDelay+0x1c>
    stat = osErrorISR;
 800540c:	f06f 0305 	mvn.w	r3, #5
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	e007      	b.n	8005424 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005414:	2300      	movs	r3, #0
 8005416:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <osDelay+0x2c>
      vTaskDelay(ticks);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 fd36 	bl	8006e90 <vTaskDelay>
    }
  }

  return (stat);
 8005424:	68fb      	ldr	r3, [r7, #12]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3710      	adds	r7, #16
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
	...

08005430 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4a07      	ldr	r2, [pc, #28]	@ (800545c <vApplicationGetIdleTaskMemory+0x2c>)
 8005440:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	4a06      	ldr	r2, [pc, #24]	@ (8005460 <vApplicationGetIdleTaskMemory+0x30>)
 8005446:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2280      	movs	r2, #128	@ 0x80
 800544c:	601a      	str	r2, [r3, #0]
}
 800544e:	bf00      	nop
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000200 	.word	0x20000200
 8005460:	200002a8 	.word	0x200002a8

08005464 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a07      	ldr	r2, [pc, #28]	@ (8005490 <vApplicationGetTimerTaskMemory+0x2c>)
 8005474:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4a06      	ldr	r2, [pc, #24]	@ (8005494 <vApplicationGetTimerTaskMemory+0x30>)
 800547a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005482:	601a      	str	r2, [r3, #0]
}
 8005484:	bf00      	nop
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	200004a8 	.word	0x200004a8
 8005494:	20000550 	.word	0x20000550

08005498 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f103 0208 	add.w	r2, r3, #8
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f103 0208 	add.w	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f103 0208 	add.w	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80054e6:	bf00      	nop
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	1c5a      	adds	r2, r3, #1
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	601a      	str	r2, [r3, #0]
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800553a:	b480      	push	{r7}
 800553c:	b085      	sub	sp, #20
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
 8005542:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005550:	d103      	bne.n	800555a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e00c      	b.n	8005574 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	3308      	adds	r3, #8
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	e002      	b.n	8005568 <vListInsert+0x2e>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	d2f6      	bcs.n	8005562 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	683a      	ldr	r2, [r7, #0]
 8005582:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	601a      	str	r2, [r3, #0]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6892      	ldr	r2, [r2, #8]
 80055c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6852      	ldr	r2, [r2, #4]
 80055cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d103      	bne.n	80055e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	1e5a      	subs	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3714      	adds	r7, #20
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10b      	bne.n	800562c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005626:	bf00      	nop
 8005628:	bf00      	nop
 800562a:	e7fd      	b.n	8005628 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800562c:	f003 f974 	bl	8008918 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005638:	68f9      	ldr	r1, [r7, #12]
 800563a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	441a      	add	r2, r3
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800565c:	3b01      	subs	r3, #1
 800565e:	68f9      	ldr	r1, [r7, #12]
 8005660:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005662:	fb01 f303 	mul.w	r3, r1, r3
 8005666:	441a      	add	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	22ff      	movs	r2, #255	@ 0xff
 8005670:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	22ff      	movs	r2, #255	@ 0xff
 8005678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d114      	bne.n	80056ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d01a      	beq.n	80056c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	3310      	adds	r3, #16
 800568e:	4618      	mov	r0, r3
 8005690:	f001 fed2 	bl	8007438 <xTaskRemoveFromEventList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d012      	beq.n	80056c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800569a:	4b0d      	ldr	r3, [pc, #52]	@ (80056d0 <xQueueGenericReset+0xd0>)
 800569c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	e009      	b.n	80056c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3310      	adds	r3, #16
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fef1 	bl	8005498 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3324      	adds	r3, #36	@ 0x24
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff feec 	bl	8005498 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80056c0:	f003 f95c 	bl	800897c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80056c4:	2301      	movs	r3, #1
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	e000ed04 	.word	0xe000ed04

080056d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08e      	sub	sp, #56	@ 0x38
 80056d8:	af02      	add	r7, sp, #8
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
 80056e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10b      	bne.n	8005700 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056fa:	bf00      	nop
 80056fc:	bf00      	nop
 80056fe:	e7fd      	b.n	80056fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <xQueueGenericCreateStatic+0x56>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d001      	beq.n	800572e <xQueueGenericCreateStatic+0x5a>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueGenericCreateStatic+0x5c>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	623b      	str	r3, [r7, #32]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d102      	bne.n	8005758 <xQueueGenericCreateStatic+0x84>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <xQueueGenericCreateStatic+0x88>
 8005758:	2301      	movs	r3, #1
 800575a:	e000      	b.n	800575e <xQueueGenericCreateStatic+0x8a>
 800575c:	2300      	movs	r3, #0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10b      	bne.n	800577a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	61fb      	str	r3, [r7, #28]
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop
 8005778:	e7fd      	b.n	8005776 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800577a:	2350      	movs	r3, #80	@ 0x50
 800577c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	2b50      	cmp	r3, #80	@ 0x50
 8005782:	d00b      	beq.n	800579c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	61bb      	str	r3, [r7, #24]
}
 8005796:	bf00      	nop
 8005798:	bf00      	nop
 800579a:	e7fd      	b.n	8005798 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800579c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00d      	beq.n	80057c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80057a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	9300      	str	r3, [sp, #0]
 80057b8:	4613      	mov	r3, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68b9      	ldr	r1, [r7, #8]
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 f840 	bl	8005844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3730      	adds	r7, #48	@ 0x30
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80057ce:	b580      	push	{r7, lr}
 80057d0:	b08a      	sub	sp, #40	@ 0x28
 80057d2:	af02      	add	r7, sp, #8
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	60b9      	str	r1, [r7, #8]
 80057d8:	4613      	mov	r3, r2
 80057da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d10b      	bne.n	80057fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80057e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e6:	f383 8811 	msr	BASEPRI, r3
 80057ea:	f3bf 8f6f 	isb	sy
 80057ee:	f3bf 8f4f 	dsb	sy
 80057f2:	613b      	str	r3, [r7, #16]
}
 80057f4:	bf00      	nop
 80057f6:	bf00      	nop
 80057f8:	e7fd      	b.n	80057f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	fb02 f303 	mul.w	r3, r2, r3
 8005802:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	3350      	adds	r3, #80	@ 0x50
 8005808:	4618      	mov	r0, r3
 800580a:	f003 f9a7 	bl	8008b5c <pvPortMalloc>
 800580e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d011      	beq.n	800583a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	3350      	adds	r3, #80	@ 0x50
 800581e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005828:	79fa      	ldrb	r2, [r7, #7]
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	9300      	str	r3, [sp, #0]
 800582e:	4613      	mov	r3, r2
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	68b9      	ldr	r1, [r7, #8]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f000 f805 	bl	8005844 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800583a:	69bb      	ldr	r3, [r7, #24]
	}
 800583c:	4618      	mov	r0, r3
 800583e:	3720      	adds	r7, #32
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	69ba      	ldr	r2, [r7, #24]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e002      	b.n	8005866 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005872:	2101      	movs	r1, #1
 8005874:	69b8      	ldr	r0, [r7, #24]
 8005876:	f7ff fec3 	bl	8005600 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005882:	bf00      	nop
 8005884:	3710      	adds	r7, #16
 8005886:	46bd      	mov	sp, r7
 8005888:	bd80      	pop	{r7, pc}

0800588a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800588a:	b580      	push	{r7, lr}
 800588c:	b082      	sub	sp, #8
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00e      	beq.n	80058b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80058aa:	2300      	movs	r3, #0
 80058ac:	2200      	movs	r2, #0
 80058ae:	2100      	movs	r1, #0
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f81d 	bl	80058f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80058b6:	bf00      	nop
 80058b8:	3708      	adds	r7, #8
 80058ba:	46bd      	mov	sp, r7
 80058bc:	bd80      	pop	{r7, pc}

080058be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80058be:	b580      	push	{r7, lr}
 80058c0:	b086      	sub	sp, #24
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	4603      	mov	r3, r0
 80058c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80058c8:	2301      	movs	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	2300      	movs	r3, #0
 80058ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80058d0:	79fb      	ldrb	r3, [r7, #7]
 80058d2:	461a      	mov	r2, r3
 80058d4:	6939      	ldr	r1, [r7, #16]
 80058d6:	6978      	ldr	r0, [r7, #20]
 80058d8:	f7ff ff79 	bl	80057ce <xQueueGenericCreate>
 80058dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f7ff ffd3 	bl	800588a <prvInitialiseMutex>

		return xNewQueue;
 80058e4:	68fb      	ldr	r3, [r7, #12]
	}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08e      	sub	sp, #56	@ 0x38
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80058fe:	2300      	movs	r3, #0
 8005900:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <xQueueGenericSend+0x34>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	e7fd      	b.n	8005920 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d103      	bne.n	8005932 <xQueueGenericSend+0x42>
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <xQueueGenericSend+0x46>
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <xQueueGenericSend+0x48>
 8005936:	2300      	movs	r3, #0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10b      	bne.n	8005954 <xQueueGenericSend+0x64>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	2b02      	cmp	r3, #2
 8005958:	d103      	bne.n	8005962 <xQueueGenericSend+0x72>
 800595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <xQueueGenericSend+0x76>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <xQueueGenericSend+0x78>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <xQueueGenericSend+0x94>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	623b      	str	r3, [r7, #32]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005984:	f001 ff2e 	bl	80077e4 <xTaskGetSchedulerState>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <xQueueGenericSend+0xa4>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d101      	bne.n	8005998 <xQueueGenericSend+0xa8>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <xQueueGenericSend+0xaa>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	61fb      	str	r3, [r7, #28]
}
 80059b0:	bf00      	nop
 80059b2:	bf00      	nop
 80059b4:	e7fd      	b.n	80059b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059b6:	f002 ffaf 	bl	8008918 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d302      	bcc.n	80059cc <xQueueGenericSend+0xdc>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d129      	bne.n	8005a20 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	68b9      	ldr	r1, [r7, #8]
 80059d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059d2:	f000 fb37 	bl	8006044 <prvCopyDataToQueue>
 80059d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d010      	beq.n	8005a02 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e2:	3324      	adds	r3, #36	@ 0x24
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 fd27 	bl	8007438 <xTaskRemoveFromEventList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d013      	beq.n	8005a18 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b3f      	ldr	r3, [pc, #252]	@ (8005af0 <xQueueGenericSend+0x200>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	e00a      	b.n	8005a18 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005a08:	4b39      	ldr	r3, [pc, #228]	@ (8005af0 <xQueueGenericSend+0x200>)
 8005a0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a0e:	601a      	str	r2, [r3, #0]
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005a18:	f002 ffb0 	bl	800897c <vPortExitCritical>
				return pdPASS;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e063      	b.n	8005ae8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a26:	f002 ffa9 	bl	800897c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	e05c      	b.n	8005ae8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d106      	bne.n	8005a42 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a34:	f107 0314 	add.w	r3, r7, #20
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f001 fd61 	bl	8007500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a42:	f002 ff9b 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a46:	f001 fac9 	bl	8006fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a4a:	f002 ff65 	bl	8008918 <vPortEnterCritical>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a54:	b25b      	sxtb	r3, r3
 8005a56:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a5a:	d103      	bne.n	8005a64 <xQueueGenericSend+0x174>
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a6a:	b25b      	sxtb	r3, r3
 8005a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a70:	d103      	bne.n	8005a7a <xQueueGenericSend+0x18a>
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a7a:	f002 ff7f 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a7e:	1d3a      	adds	r2, r7, #4
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	4611      	mov	r1, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fd50 	bl	800752c <xTaskCheckForTimeOut>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d124      	bne.n	8005adc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005a92:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a94:	f000 fbce 	bl	8006234 <prvIsQueueFull>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d018      	beq.n	8005ad0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa0:	3310      	adds	r3, #16
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	4611      	mov	r1, r2
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f001 fc74 	bl	8007394 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aae:	f000 fb59 	bl	8006164 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ab2:	f001 faa1 	bl	8006ff8 <xTaskResumeAll>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f af7c 	bne.w	80059b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005abe:	4b0c      	ldr	r3, [pc, #48]	@ (8005af0 <xQueueGenericSend+0x200>)
 8005ac0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	f3bf 8f6f 	isb	sy
 8005ace:	e772      	b.n	80059b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ad0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ad2:	f000 fb47 	bl	8006164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ad6:	f001 fa8f 	bl	8006ff8 <xTaskResumeAll>
 8005ada:	e76c      	b.n	80059b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005adc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ade:	f000 fb41 	bl	8006164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ae2:	f001 fa89 	bl	8006ff8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005ae6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3738      	adds	r7, #56	@ 0x38
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b090      	sub	sp, #64	@ 0x40
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10b      	bne.n	8005b24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b1e:	bf00      	nop
 8005b20:	bf00      	nop
 8005b22:	e7fd      	b.n	8005b20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d103      	bne.n	8005b32 <xQueueGenericSendFromISR+0x3e>
 8005b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d101      	bne.n	8005b36 <xQueueGenericSendFromISR+0x42>
 8005b32:	2301      	movs	r3, #1
 8005b34:	e000      	b.n	8005b38 <xQueueGenericSendFromISR+0x44>
 8005b36:	2300      	movs	r3, #0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d10b      	bne.n	8005b54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b4e:	bf00      	nop
 8005b50:	bf00      	nop
 8005b52:	e7fd      	b.n	8005b50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d103      	bne.n	8005b62 <xQueueGenericSendFromISR+0x6e>
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <xQueueGenericSendFromISR+0x72>
 8005b62:	2301      	movs	r3, #1
 8005b64:	e000      	b.n	8005b68 <xQueueGenericSendFromISR+0x74>
 8005b66:	2300      	movs	r3, #0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10b      	bne.n	8005b84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	623b      	str	r3, [r7, #32]
}
 8005b7e:	bf00      	nop
 8005b80:	bf00      	nop
 8005b82:	e7fd      	b.n	8005b80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005b84:	f002 ffa8 	bl	8008ad8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005b88:	f3ef 8211 	mrs	r2, BASEPRI
 8005b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	61fa      	str	r2, [r7, #28]
 8005b9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ba0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ba2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ba8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d302      	bcc.n	8005bb6 <xQueueGenericSendFromISR+0xc2>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d12f      	bne.n	8005c16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bbc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005bcc:	f000 fa3a 	bl	8006044 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005bd0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005bd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bd8:	d112      	bne.n	8005c00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d016      	beq.n	8005c10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005be4:	3324      	adds	r3, #36	@ 0x24
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fc26 	bl	8007438 <xTaskRemoveFromEventList>
 8005bec:	4603      	mov	r3, r0
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	e007      	b.n	8005c10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c04:	3301      	adds	r3, #1
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	b25a      	sxtb	r2, r3
 8005c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005c10:	2301      	movs	r3, #1
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005c14:	e001      	b.n	8005c1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005c24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005c26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3740      	adds	r7, #64	@ 0x40
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08c      	sub	sp, #48	@ 0x30
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d10b      	bne.n	8005c62 <xQueueReceive+0x32>
	__asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	623b      	str	r3, [r7, #32]
}
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d103      	bne.n	8005c70 <xQueueReceive+0x40>
 8005c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <xQueueReceive+0x44>
 8005c70:	2301      	movs	r3, #1
 8005c72:	e000      	b.n	8005c76 <xQueueReceive+0x46>
 8005c74:	2300      	movs	r3, #0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10b      	bne.n	8005c92 <xQueueReceive+0x62>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61fb      	str	r3, [r7, #28]
}
 8005c8c:	bf00      	nop
 8005c8e:	bf00      	nop
 8005c90:	e7fd      	b.n	8005c8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c92:	f001 fda7 	bl	80077e4 <xTaskGetSchedulerState>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d102      	bne.n	8005ca2 <xQueueReceive+0x72>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <xQueueReceive+0x76>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e000      	b.n	8005ca8 <xQueueReceive+0x78>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d10b      	bne.n	8005cc4 <xQueueReceive+0x94>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61bb      	str	r3, [r7, #24]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cc4:	f002 fe28 	bl	8008918 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ccc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01f      	beq.n	8005d14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cd8:	f000 fa1e 	bl	8006118 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	1e5a      	subs	r2, r3, #1
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00f      	beq.n	8005d0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cee:	3310      	adds	r3, #16
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 fba1 	bl	8007438 <xTaskRemoveFromEventList>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d007      	beq.n	8005d0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005cfc:	4b3c      	ldr	r3, [pc, #240]	@ (8005df0 <xQueueReceive+0x1c0>)
 8005cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d02:	601a      	str	r2, [r3, #0]
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005d0c:	f002 fe36 	bl	800897c <vPortExitCritical>
				return pdPASS;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e069      	b.n	8005de8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d1a:	f002 fe2f 	bl	800897c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	e062      	b.n	8005de8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d106      	bne.n	8005d36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d28:	f107 0310 	add.w	r3, r7, #16
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fbe7 	bl	8007500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d32:	2301      	movs	r3, #1
 8005d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d36:	f002 fe21 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d3a:	f001 f94f 	bl	8006fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d3e:	f002 fdeb 	bl	8008918 <vPortEnterCritical>
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d48:	b25b      	sxtb	r3, r3
 8005d4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d4e:	d103      	bne.n	8005d58 <xQueueReceive+0x128>
 8005d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d5e:	b25b      	sxtb	r3, r3
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d64:	d103      	bne.n	8005d6e <xQueueReceive+0x13e>
 8005d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d6e:	f002 fe05 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d72:	1d3a      	adds	r2, r7, #4
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	4611      	mov	r1, r2
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f001 fbd6 	bl	800752c <xTaskCheckForTimeOut>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d123      	bne.n	8005dce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d88:	f000 fa3e 	bl	8006208 <prvIsQueueEmpty>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d017      	beq.n	8005dc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d94:	3324      	adds	r3, #36	@ 0x24
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	4611      	mov	r1, r2
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fafa 	bl	8007394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005da0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005da2:	f000 f9df 	bl	8006164 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005da6:	f001 f927 	bl	8006ff8 <xTaskResumeAll>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d189      	bne.n	8005cc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005db0:	4b0f      	ldr	r3, [pc, #60]	@ (8005df0 <xQueueReceive+0x1c0>)
 8005db2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
 8005dc0:	e780      	b.n	8005cc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dc4:	f000 f9ce 	bl	8006164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dc8:	f001 f916 	bl	8006ff8 <xTaskResumeAll>
 8005dcc:	e77a      	b.n	8005cc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005dce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dd0:	f000 f9c8 	bl	8006164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dd4:	f001 f910 	bl	8006ff8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005dd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dda:	f000 fa15 	bl	8006208 <prvIsQueueEmpty>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f43f af6f 	beq.w	8005cc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005de6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3730      	adds	r7, #48	@ 0x30
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	e000ed04 	.word	0xe000ed04

08005df4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08e      	sub	sp, #56	@ 0x38
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d10b      	bne.n	8005e28 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	623b      	str	r3, [r7, #32]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00b      	beq.n	8005e48 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e34:	f383 8811 	msr	BASEPRI, r3
 8005e38:	f3bf 8f6f 	isb	sy
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	61fb      	str	r3, [r7, #28]
}
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	e7fd      	b.n	8005e44 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e48:	f001 fccc 	bl	80077e4 <xTaskGetSchedulerState>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <xQueueSemaphoreTake+0x64>
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d101      	bne.n	8005e5c <xQueueSemaphoreTake+0x68>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <xQueueSemaphoreTake+0x6a>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	61bb      	str	r3, [r7, #24]
}
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e7a:	f002 fd4d 	bl	8008918 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e82:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d024      	beq.n	8005ed4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	1e5a      	subs	r2, r3, #1
 8005e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e90:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d104      	bne.n	8005ea4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005e9a:	f001 fe1d 	bl	8007ad8 <pvTaskIncrementMutexHeldCount>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00f      	beq.n	8005ecc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	3310      	adds	r3, #16
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f001 fac1 	bl	8007438 <xTaskRemoveFromEventList>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d007      	beq.n	8005ecc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ebc:	4b54      	ldr	r3, [pc, #336]	@ (8006010 <xQueueSemaphoreTake+0x21c>)
 8005ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005ecc:	f002 fd56 	bl	800897c <vPortExitCritical>
				return pdPASS;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e098      	b.n	8006006 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d112      	bne.n	8005f00 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00b      	beq.n	8005ef8 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	617b      	str	r3, [r7, #20]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005ef8:	f002 fd40 	bl	800897c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005efc:	2300      	movs	r3, #0
 8005efe:	e082      	b.n	8006006 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f06:	f107 030c 	add.w	r3, r7, #12
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 faf8 	bl	8007500 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f10:	2301      	movs	r3, #1
 8005f12:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f14:	f002 fd32 	bl	800897c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f18:	f001 f860 	bl	8006fdc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f1c:	f002 fcfc 	bl	8008918 <vPortEnterCritical>
 8005f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f22:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f26:	b25b      	sxtb	r3, r3
 8005f28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f2c:	d103      	bne.n	8005f36 <xQueueSemaphoreTake+0x142>
 8005f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f3c:	b25b      	sxtb	r3, r3
 8005f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f42:	d103      	bne.n	8005f4c <xQueueSemaphoreTake+0x158>
 8005f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f4c:	f002 fd16 	bl	800897c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f50:	463a      	mov	r2, r7
 8005f52:	f107 030c 	add.w	r3, r7, #12
 8005f56:	4611      	mov	r1, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f001 fae7 	bl	800752c <xTaskCheckForTimeOut>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d132      	bne.n	8005fca <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f64:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f66:	f000 f94f 	bl	8006208 <prvIsQueueEmpty>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d026      	beq.n	8005fbe <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d109      	bne.n	8005f8c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005f78:	f002 fcce 	bl	8008918 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4618      	mov	r0, r3
 8005f82:	f001 fc4d 	bl	8007820 <xTaskPriorityInherit>
 8005f86:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005f88:	f002 fcf8 	bl	800897c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8e:	3324      	adds	r3, #36	@ 0x24
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	4611      	mov	r1, r2
 8005f94:	4618      	mov	r0, r3
 8005f96:	f001 f9fd 	bl	8007394 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f9a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f9c:	f000 f8e2 	bl	8006164 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fa0:	f001 f82a 	bl	8006ff8 <xTaskResumeAll>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f47f af67 	bne.w	8005e7a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005fac:	4b18      	ldr	r3, [pc, #96]	@ (8006010 <xQueueSemaphoreTake+0x21c>)
 8005fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	f3bf 8f6f 	isb	sy
 8005fbc:	e75d      	b.n	8005e7a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005fbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fc0:	f000 f8d0 	bl	8006164 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fc4:	f001 f818 	bl	8006ff8 <xTaskResumeAll>
 8005fc8:	e757      	b.n	8005e7a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005fca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fcc:	f000 f8ca 	bl	8006164 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fd0:	f001 f812 	bl	8006ff8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fd6:	f000 f917 	bl	8006208 <prvIsQueueEmpty>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f43f af4c 	beq.w	8005e7a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00d      	beq.n	8006004 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005fe8:	f002 fc96 	bl	8008918 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005fec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fee:	f000 f811 	bl	8006014 <prvGetDisinheritPriorityAfterTimeout>
 8005ff2:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f001 fce8 	bl	80079d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006000:	f002 fcbc 	bl	800897c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006004:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006006:	4618      	mov	r0, r3
 8006008:	3738      	adds	r7, #56	@ 0x38
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006014:	b480      	push	{r7}
 8006016:	b085      	sub	sp, #20
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	2b00      	cmp	r3, #0
 8006022:	d006      	beq.n	8006032 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800602e:	60fb      	str	r3, [r7, #12]
 8006030:	e001      	b.n	8006036 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006032:	2300      	movs	r3, #0
 8006034:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006036:	68fb      	ldr	r3, [r7, #12]
	}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b086      	sub	sp, #24
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006058:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10d      	bne.n	800607e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d14d      	bne.n	8006106 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	4618      	mov	r0, r3
 8006070:	f001 fc3e 	bl	80078f0 <xTaskPriorityDisinherit>
 8006074:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	609a      	str	r2, [r3, #8]
 800607c:	e043      	b.n	8006106 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d119      	bne.n	80060b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6858      	ldr	r0, [r3, #4]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	461a      	mov	r2, r3
 800608e:	68b9      	ldr	r1, [r7, #8]
 8006090:	f002 ffd6 	bl	8009040 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	441a      	add	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d32b      	bcc.n	8006106 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	e026      	b.n	8006106 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	68d8      	ldr	r0, [r3, #12]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c0:	461a      	mov	r2, r3
 80060c2:	68b9      	ldr	r1, [r7, #8]
 80060c4:	f002 ffbc 	bl	8009040 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d0:	425b      	negs	r3, r3
 80060d2:	441a      	add	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d207      	bcs.n	80060f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ec:	425b      	negs	r3, r3
 80060ee:	441a      	add	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d105      	bne.n	8006106 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3b01      	subs	r3, #1
 8006104:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800610e:	697b      	ldr	r3, [r7, #20]
}
 8006110:	4618      	mov	r0, r3
 8006112:	3718      	adds	r7, #24
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b082      	sub	sp, #8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006126:	2b00      	cmp	r3, #0
 8006128:	d018      	beq.n	800615c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006132:	441a      	add	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68da      	ldr	r2, [r3, #12]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	429a      	cmp	r2, r3
 8006142:	d303      	bcc.n	800614c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68d9      	ldr	r1, [r3, #12]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006154:	461a      	mov	r2, r3
 8006156:	6838      	ldr	r0, [r7, #0]
 8006158:	f002 ff72 	bl	8009040 <memcpy>
	}
}
 800615c:	bf00      	nop
 800615e:	3708      	adds	r7, #8
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800616c:	f002 fbd4 	bl	8008918 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006176:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006178:	e011      	b.n	800619e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800617e:	2b00      	cmp	r3, #0
 8006180:	d012      	beq.n	80061a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3324      	adds	r3, #36	@ 0x24
 8006186:	4618      	mov	r0, r3
 8006188:	f001 f956 	bl	8007438 <xTaskRemoveFromEventList>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006192:	f001 fa2f 	bl	80075f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006196:	7bfb      	ldrb	r3, [r7, #15]
 8006198:	3b01      	subs	r3, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800619e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	dce9      	bgt.n	800617a <prvUnlockQueue+0x16>
 80061a6:	e000      	b.n	80061aa <prvUnlockQueue+0x46>
					break;
 80061a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	22ff      	movs	r2, #255	@ 0xff
 80061ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80061b2:	f002 fbe3 	bl	800897c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061b6:	f002 fbaf 	bl	8008918 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061c2:	e011      	b.n	80061e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d012      	beq.n	80061f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	3310      	adds	r3, #16
 80061d0:	4618      	mov	r0, r3
 80061d2:	f001 f931 	bl	8007438 <xTaskRemoveFromEventList>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d001      	beq.n	80061e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061dc:	f001 fa0a 	bl	80075f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061e0:	7bbb      	ldrb	r3, [r7, #14]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	dce9      	bgt.n	80061c4 <prvUnlockQueue+0x60>
 80061f0:	e000      	b.n	80061f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	22ff      	movs	r2, #255	@ 0xff
 80061f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80061fc:	f002 fbbe 	bl	800897c <vPortExitCritical>
}
 8006200:	bf00      	nop
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006210:	f002 fb82 	bl	8008918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800621c:	2301      	movs	r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	e001      	b.n	8006226 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006226:	f002 fba9 	bl	800897c <vPortExitCritical>

	return xReturn;
 800622a:	68fb      	ldr	r3, [r7, #12]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800623c:	f002 fb6c 	bl	8008918 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006248:	429a      	cmp	r2, r3
 800624a:	d102      	bne.n	8006252 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800624c:	2301      	movs	r3, #1
 800624e:	60fb      	str	r3, [r7, #12]
 8006250:	e001      	b.n	8006256 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006252:	2300      	movs	r3, #0
 8006254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006256:	f002 fb91 	bl	800897c <vPortExitCritical>

	return xReturn;
 800625a:	68fb      	ldr	r3, [r7, #12]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800626e:	2300      	movs	r3, #0
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	e014      	b.n	800629e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006274:	4a0f      	ldr	r2, [pc, #60]	@ (80062b4 <vQueueAddToRegistry+0x50>)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006280:	490c      	ldr	r1, [pc, #48]	@ (80062b4 <vQueueAddToRegistry+0x50>)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800628a:	4a0a      	ldr	r2, [pc, #40]	@ (80062b4 <vQueueAddToRegistry+0x50>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	00db      	lsls	r3, r3, #3
 8006290:	4413      	add	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006296:	e006      	b.n	80062a6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	3301      	adds	r3, #1
 800629c:	60fb      	str	r3, [r7, #12]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2b07      	cmp	r3, #7
 80062a2:	d9e7      	bls.n	8006274 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20000950 	.word	0x20000950

080062b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062c8:	f002 fb26 	bl	8008918 <vPortEnterCritical>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062d2:	b25b      	sxtb	r3, r3
 80062d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062d8:	d103      	bne.n	80062e2 <vQueueWaitForMessageRestricted+0x2a>
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062e8:	b25b      	sxtb	r3, r3
 80062ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062ee:	d103      	bne.n	80062f8 <vQueueWaitForMessageRestricted+0x40>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062f8:	f002 fb40 	bl	800897c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006300:	2b00      	cmp	r3, #0
 8006302:	d106      	bne.n	8006312 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	3324      	adds	r3, #36	@ 0x24
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	68b9      	ldr	r1, [r7, #8]
 800630c:	4618      	mov	r0, r3
 800630e:	f001 f867 	bl	80073e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f7ff ff26 	bl	8006164 <prvUnlockQueue>
	}
 8006318:	bf00      	nop
 800631a:	3718      	adds	r7, #24
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8006320:	b580      	push	{r7, lr}
 8006322:	b08c      	sub	sp, #48	@ 0x30
 8006324:	af02      	add	r7, sp, #8
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d111      	bne.n	8006356 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8006332:	2301      	movs	r3, #1
 8006334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2b04      	cmp	r3, #4
 800633c:	d81d      	bhi.n	800637a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	61fb      	str	r3, [r7, #28]
}
 8006350:	bf00      	nop
 8006352:	bf00      	nop
 8006354:	e7fd      	b.n	8006352 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d10b      	bne.n	800637a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	61bb      	str	r3, [r7, #24]
}
 8006374:	bf00      	nop
 8006376:	bf00      	nop
 8006378:	e7fd      	b.n	8006376 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	429a      	cmp	r2, r3
 8006380:	d90b      	bls.n	800639a <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8006382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006386:	f383 8811 	msr	BASEPRI, r3
 800638a:	f3bf 8f6f 	isb	sy
 800638e:	f3bf 8f4f 	dsb	sy
 8006392:	617b      	str	r3, [r7, #20]
}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	e7fd      	b.n	8006396 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80063a0:	2301      	movs	r3, #1
 80063a2:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	3324      	adds	r3, #36	@ 0x24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f002 fbd4 	bl	8008b5c <pvPortMalloc>
 80063b4:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80063b6:	6a3b      	ldr	r3, [r7, #32]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00a      	beq.n	80063d2 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80063bc:	6a3b      	ldr	r3, [r7, #32]
 80063be:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80063c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	6a38      	ldr	r0, [r7, #32]
 80063ce:	f000 faee 	bl	80069ae <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80063d2:	6a3b      	ldr	r3, [r7, #32]
	}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3728      	adds	r7, #40	@ 0x28
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	60fb      	str	r3, [r7, #12]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	689a      	ldr	r2, [r3, #8]
 800640a:	693b      	ldr	r3, [r7, #16]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4413      	add	r3, r2
 8006410:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	3b01      	subs	r3, #1
 8006420:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	429a      	cmp	r2, r3
 800642a:	d304      	bcc.n	8006436 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8006436:	697b      	ldr	r3, [r7, #20]
}
 8006438:	4618      	mov	r0, r3
 800643a:	371c      	adds	r7, #28
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b090      	sub	sp, #64	@ 0x40
 8006448:	af02      	add	r7, sp, #8
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
 8006450:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10b      	bne.n	8006478 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	623b      	str	r3, [r7, #32]
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	e7fd      	b.n	8006474 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8006478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647a:	2b00      	cmp	r3, #0
 800647c:	d10b      	bne.n	8006496 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 800647e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006482:	f383 8811 	msr	BASEPRI, r3
 8006486:	f3bf 8f6f 	isb	sy
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	61fb      	str	r3, [r7, #28]
}
 8006490:	bf00      	nop
 8006492:	bf00      	nop
 8006494:	e7fd      	b.n	8006492 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8006496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006498:	7f1b      	ldrb	r3, [r3, #28]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d002      	beq.n	80064a8 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80064a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064a4:	3304      	adds	r3, #4
 80064a6:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80064a8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064aa:	f7ff ff97 	bl	80063dc <xStreamBufferSpacesAvailable>
 80064ae:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80064b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b2:	9300      	str	r3, [sp, #0]
 80064b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	68b9      	ldr	r1, [r7, #8]
 80064ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064bc:	f000 f835 	bl	800652a <prvWriteMessageToBuffer>
 80064c0:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 80064c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02b      	beq.n	8006520 <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80064c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ca:	f000 fa50 	bl	800696e <prvBytesInBuffer>
 80064ce:	4602      	mov	r2, r0
 80064d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d323      	bcc.n	8006520 <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 80064d8:	f3ef 8211 	mrs	r2, BASEPRI
 80064dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e0:	f383 8811 	msr	BASEPRI, r3
 80064e4:	f3bf 8f6f 	isb	sy
 80064e8:	f3bf 8f4f 	dsb	sy
 80064ec:	61ba      	str	r2, [r7, #24]
 80064ee:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064f0:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80064f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d00b      	beq.n	8006514 <xStreamBufferSendFromISR+0xd0>
 80064fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fe:	6918      	ldr	r0, [r3, #16]
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	9300      	str	r3, [sp, #0]
 8006504:	2300      	movs	r3, #0
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	f001 fc1b 	bl	8007d44 <xTaskGenericNotifyFromISR>
 800650e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006510:	2200      	movs	r2, #0
 8006512:	611a      	str	r2, [r3, #16]
 8006514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006516:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	f383 8811 	msr	BASEPRI, r3
}
 800651e:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 8006520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8006522:	4618      	mov	r0, r3
 8006524:	3738      	adds	r7, #56	@ 0x38
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b086      	sub	sp, #24
 800652e:	af00      	add	r7, sp, #0
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	607a      	str	r2, [r7, #4]
 8006536:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800653e:	2300      	movs	r3, #0
 8006540:	617b      	str	r3, [r7, #20]
 8006542:	e01d      	b.n	8006580 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	7f1b      	ldrb	r3, [r3, #28]
 8006548:	f003 0301 	and.w	r3, r3, #1
 800654c:	2b00      	cmp	r3, #0
 800654e:	d108      	bne.n	8006562 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8006550:	2301      	movs	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	4293      	cmp	r3, r2
 800655a:	bf28      	it	cs
 800655c:	4613      	movcs	r3, r2
 800655e:	607b      	str	r3, [r7, #4]
 8006560:	e00e      	b.n	8006580 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	6a3b      	ldr	r3, [r7, #32]
 8006566:	429a      	cmp	r2, r3
 8006568:	d308      	bcc.n	800657c <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 800656a:	2301      	movs	r3, #1
 800656c:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	2204      	movs	r2, #4
 8006572:	4619      	mov	r1, r3
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f000 f908 	bl	800678a <prvWriteBytesToBuffer>
 800657a:	e001      	b.n	8006580 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d007      	beq.n	8006596 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	461a      	mov	r2, r3
 800658a:	68b9      	ldr	r1, [r7, #8]
 800658c:	68f8      	ldr	r0, [r7, #12]
 800658e:	f000 f8fc 	bl	800678a <prvWriteBytesToBuffer>
 8006592:	6138      	str	r0, [r7, #16]
 8006594:	e001      	b.n	800659a <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8006596:	2300      	movs	r3, #0
 8006598:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 800659a:	693b      	ldr	r3, [r7, #16]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3718      	adds	r7, #24
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08e      	sub	sp, #56	@ 0x38
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
 80065b0:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80065b6:	2300      	movs	r3, #0
 80065b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d10b      	bne.n	80065d8 <xStreamBufferReceive+0x34>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	61fb      	str	r3, [r7, #28]
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	e7fd      	b.n	80065d4 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10b      	bne.n	80065f6 <xStreamBufferReceive+0x52>
	__asm volatile
 80065de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e2:	f383 8811 	msr	BASEPRI, r3
 80065e6:	f3bf 8f6f 	isb	sy
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	61bb      	str	r3, [r7, #24]
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	e7fd      	b.n	80065f2 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80065f6:	6a3b      	ldr	r3, [r7, #32]
 80065f8:	7f1b      	ldrb	r3, [r3, #28]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8006602:	2304      	movs	r3, #4
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
 8006606:	e001      	b.n	800660c <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8006608:	2300      	movs	r3, #0
 800660a:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d035      	beq.n	800667e <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8006612:	f002 f981 	bl	8008918 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006616:	6a38      	ldr	r0, [r7, #32]
 8006618:	f000 f9a9 	bl	800696e <prvBytesInBuffer>
 800661c:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800661e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006622:	429a      	cmp	r2, r3
 8006624:	d817      	bhi.n	8006656 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8006626:	2000      	movs	r0, #0
 8006628:	f001 fc72 	bl	8007f10 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <xStreamBufferReceive+0xa8>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	617b      	str	r3, [r7, #20]
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800664c:	f001 f8ba 	bl	80077c4 <xTaskGetCurrentTaskHandle>
 8006650:	4602      	mov	r2, r0
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006656:	f002 f991 	bl	800897c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 800665a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	429a      	cmp	r2, r3
 8006660:	d811      	bhi.n	8006686 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2200      	movs	r2, #0
 8006666:	2100      	movs	r1, #0
 8006668:	2000      	movs	r0, #0
 800666a:	f001 fa49 	bl	8007b00 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	2200      	movs	r2, #0
 8006672:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006674:	6a38      	ldr	r0, [r7, #32]
 8006676:	f000 f97a 	bl	800696e <prvBytesInBuffer>
 800667a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800667c:	e003      	b.n	8006686 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800667e:	6a38      	ldr	r0, [r7, #32]
 8006680:	f000 f975 	bl	800696e <prvBytesInBuffer>
 8006684:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8006686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668a:	429a      	cmp	r2, r3
 800668c:	d91d      	bls.n	80066ca <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800668e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	68b9      	ldr	r1, [r7, #8]
 8006698:	6a38      	ldr	r0, [r7, #32]
 800669a:	f000 f81b 	bl	80066d4 <prvReadMessageFromBuffer>
 800669e:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80066a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d011      	beq.n	80066ca <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80066a6:	f000 fc99 	bl	8006fdc <vTaskSuspendAll>
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d009      	beq.n	80066c6 <xStreamBufferReceive+0x122>
 80066b2:	6a3b      	ldr	r3, [r7, #32]
 80066b4:	6958      	ldr	r0, [r3, #20]
 80066b6:	2300      	movs	r3, #0
 80066b8:	2200      	movs	r2, #0
 80066ba:	2100      	movs	r1, #0
 80066bc:	f001 fa80 	bl	8007bc0 <xTaskGenericNotify>
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	2200      	movs	r2, #0
 80066c4:	615a      	str	r2, [r3, #20]
 80066c6:	f000 fc97 	bl	8006ff8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80066ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	@ 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b088      	sub	sp, #32
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
 80066e0:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d019      	beq.n	800671c <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80066ee:	f107 0110 	add.w	r1, r7, #16
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f000 f8bc 	bl	8006874 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8006700:	683a      	ldr	r2, [r7, #0]
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8006708:	69fa      	ldr	r2, [r7, #28]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	429a      	cmp	r2, r3
 800670e:	d907      	bls.n	8006720 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	e001      	b.n	8006720 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	68b9      	ldr	r1, [r7, #8]
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f000 f8a4 	bl	8006874 <prvReadBytesFromBuffer>
 800672c:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800672e:	697b      	ldr	r3, [r7, #20]
}
 8006730:	4618      	mov	r0, r3
 8006732:	3720      	adds	r7, #32
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <xStreamBufferIsEmpty>:
/*-----------------------------------------------------------*/

BaseType_t xStreamBufferIsEmpty( StreamBufferHandle_t xStreamBuffer )
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	613b      	str	r3, [r7, #16]
BaseType_t xReturn;
size_t xTail;

	configASSERT( pxStreamBuffer );
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <xStreamBufferIsEmpty+0x2a>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	60bb      	str	r3, [r7, #8]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <xStreamBufferIsEmpty+0x26>

	/* True if no bytes are available. */
	xTail = pxStreamBuffer->xTail;
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
	if( pxStreamBuffer->xHead == xTail )
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	429a      	cmp	r2, r3
 8006770:	d102      	bne.n	8006778 <xStreamBufferIsEmpty+0x40>
	{
		xReturn = pdTRUE;
 8006772:	2301      	movs	r3, #1
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e001      	b.n	800677c <xStreamBufferIsEmpty+0x44>
	}
	else
	{
		xReturn = pdFALSE;
 8006778:	2300      	movs	r3, #0
 800677a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800677c:	697b      	ldr	r3, [r7, #20]
}
 800677e:	4618      	mov	r0, r3
 8006780:	371c      	adds	r7, #28
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 800678a:	b580      	push	{r7, lr}
 800678c:	b08a      	sub	sp, #40	@ 0x28
 800678e:	af00      	add	r7, sp, #0
 8006790:	60f8      	str	r0, [r7, #12]
 8006792:	60b9      	str	r1, [r7, #8]
 8006794:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d10b      	bne.n	80067b4 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 800679c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a0:	f383 8811 	msr	BASEPRI, r3
 80067a4:	f3bf 8f6f 	isb	sy
 80067a8:	f3bf 8f4f 	dsb	sy
 80067ac:	61fb      	str	r3, [r7, #28]
}
 80067ae:	bf00      	nop
 80067b0:	bf00      	nop
 80067b2:	e7fd      	b.n	80067b0 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	689a      	ldr	r2, [r3, #8]
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	bf28      	it	cs
 80067c8:	4613      	movcs	r3, r2
 80067ca:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80067cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ce:	6a3b      	ldr	r3, [r7, #32]
 80067d0:	441a      	add	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d90b      	bls.n	80067f2 <prvWriteBytesToBuffer+0x68>
	__asm volatile
 80067da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067de:	f383 8811 	msr	BASEPRI, r3
 80067e2:	f3bf 8f6f 	isb	sy
 80067e6:	f3bf 8f4f 	dsb	sy
 80067ea:	61bb      	str	r3, [r7, #24]
}
 80067ec:	bf00      	nop
 80067ee:	bf00      	nop
 80067f0:	e7fd      	b.n	80067ee <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	699a      	ldr	r2, [r3, #24]
 80067f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067f8:	4413      	add	r3, r2
 80067fa:	6a3a      	ldr	r2, [r7, #32]
 80067fc:	68b9      	ldr	r1, [r7, #8]
 80067fe:	4618      	mov	r0, r3
 8006800:	f002 fc1e 	bl	8009040 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	429a      	cmp	r2, r3
 800680a:	d91d      	bls.n	8006848 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	1ad2      	subs	r2, r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	429a      	cmp	r2, r3
 8006818:	d90b      	bls.n	8006832 <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	617b      	str	r3, [r7, #20]
}
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6998      	ldr	r0, [r3, #24]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	6a3b      	ldr	r3, [r7, #32]
 800683a:	18d1      	adds	r1, r2, r3
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	1ad3      	subs	r3, r2, r3
 8006842:	461a      	mov	r2, r3
 8006844:	f002 fbfc 	bl	8009040 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8006848:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006856:	429a      	cmp	r2, r3
 8006858:	d304      	bcc.n	8006864 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006868:	605a      	str	r2, [r3, #4]

	return xCount;
 800686a:	687b      	ldr	r3, [r7, #4]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3728      	adds	r7, #40	@ 0x28
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b08a      	sub	sp, #40	@ 0x28
 8006878:	af00      	add	r7, sp, #0
 800687a:	60f8      	str	r0, [r7, #12]
 800687c:	60b9      	str	r1, [r7, #8]
 800687e:	607a      	str	r2, [r7, #4]
 8006880:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	4293      	cmp	r3, r2
 8006888:	bf28      	it	cs
 800688a:	4613      	movcs	r3, r2
 800688c:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d067      	beq.n	8006964 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	689a      	ldr	r2, [r3, #8]
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	6a3a      	ldr	r2, [r7, #32]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	bf28      	it	cs
 80068a8:	4613      	movcs	r3, r2
 80068aa:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80068ac:	69fa      	ldr	r2, [r7, #28]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d90b      	bls.n	80068cc <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	61bb      	str	r3, [r7, #24]
}
 80068c6:	bf00      	nop
 80068c8:	bf00      	nop
 80068ca:	e7fd      	b.n	80068c8 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80068cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	441a      	add	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d90b      	bls.n	80068f2 <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	617b      	str	r3, [r7, #20]
}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	e7fd      	b.n	80068ee <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f8:	4413      	add	r3, r2
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	4619      	mov	r1, r3
 80068fe:	68b8      	ldr	r0, [r7, #8]
 8006900:	f002 fb9e 	bl	8009040 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8006904:	6a3a      	ldr	r2, [r7, #32]
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	429a      	cmp	r2, r3
 800690a:	d91a      	bls.n	8006942 <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 800690c:	6a3a      	ldr	r2, [r7, #32]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	429a      	cmp	r2, r3
 8006912:	d90b      	bls.n	800692c <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	613b      	str	r3, [r7, #16]
}
 8006926:	bf00      	nop
 8006928:	bf00      	nop
 800692a:	e7fd      	b.n	8006928 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	18d0      	adds	r0, r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6999      	ldr	r1, [r3, #24]
 8006936:	6a3a      	ldr	r2, [r7, #32]
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	461a      	mov	r2, r3
 800693e:	f002 fb7f 	bl	8009040 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8006942:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	4413      	add	r3, r2
 8006948:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006950:	429a      	cmp	r2, r3
 8006952:	d304      	bcc.n	800695e <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006962:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8006964:	6a3b      	ldr	r3, [r7, #32]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3728      	adds	r7, #40	@ 0x28
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800696e:	b480      	push	{r7}
 8006970:	b085      	sub	sp, #20
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	4413      	add	r3, r2
 8006980:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	429a      	cmp	r2, r3
 8006994:	d304      	bcc.n	80069a0 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80069a0:	68fb      	ldr	r3, [r7, #12]
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr

080069ae <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80069ae:	b580      	push	{r7, lr}
 80069b0:	b086      	sub	sp, #24
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	60f8      	str	r0, [r7, #12]
 80069b6:	60b9      	str	r1, [r7, #8]
 80069b8:	607a      	str	r2, [r7, #4]
 80069ba:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80069bc:	2355      	movs	r3, #85	@ 0x55
 80069be:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6979      	ldr	r1, [r7, #20]
 80069c4:	68b8      	ldr	r0, [r7, #8]
 80069c6:	f002 fab7 	bl	8008f38 <memset>
 80069ca:	4602      	mov	r2, r0
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d00b      	beq.n	80069ea <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	613b      	str	r3, [r7, #16]
}
 80069e4:	bf00      	nop
 80069e6:	bf00      	nop
 80069e8:	e7fd      	b.n	80069e6 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80069ea:	2224      	movs	r2, #36	@ 0x24
 80069ec:	2100      	movs	r1, #0
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f002 faa2 	bl	8008f38 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	687a      	ldr	r2, [r7, #4]
 80069fe:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	683a      	ldr	r2, [r7, #0]
 8006a04:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006a0c:	771a      	strb	r2, [r3, #28]
}
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b08e      	sub	sp, #56	@ 0x38
 8006a1a:	af04      	add	r7, sp, #16
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10b      	bne.n	8006a42 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	623b      	str	r3, [r7, #32]
}
 8006a3c:	bf00      	nop
 8006a3e:	bf00      	nop
 8006a40:	e7fd      	b.n	8006a3e <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	61fb      	str	r3, [r7, #28]
}
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a60:	23a8      	movs	r3, #168	@ 0xa8
 8006a62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2ba8      	cmp	r3, #168	@ 0xa8
 8006a68:	d00b      	beq.n	8006a82 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61bb      	str	r3, [r7, #24]
}
 8006a7c:	bf00      	nop
 8006a7e:	bf00      	nop
 8006a80:	e7fd      	b.n	8006a7e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a82:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01e      	beq.n	8006ac8 <xTaskCreateStatic+0xb2>
 8006a8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d01b      	beq.n	8006ac8 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a92:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a98:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9303      	str	r3, [sp, #12]
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa8:	9302      	str	r3, [sp, #8]
 8006aaa:	f107 0314 	add.w	r3, r7, #20
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	68b9      	ldr	r1, [r7, #8]
 8006aba:	68f8      	ldr	r0, [r7, #12]
 8006abc:	f000 f850 	bl	8006b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ac2:	f000 f8f5 	bl	8006cb0 <prvAddNewTaskToReadyList>
 8006ac6:	e001      	b.n	8006acc <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006acc:	697b      	ldr	r3, [r7, #20]
	}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3728      	adds	r7, #40	@ 0x28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08c      	sub	sp, #48	@ 0x30
 8006ada:	af04      	add	r7, sp, #16
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	603b      	str	r3, [r7, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ae6:	88fb      	ldrh	r3, [r7, #6]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4618      	mov	r0, r3
 8006aec:	f002 f836 	bl	8008b5c <pvPortMalloc>
 8006af0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d00e      	beq.n	8006b16 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006af8:	20a8      	movs	r0, #168	@ 0xa8
 8006afa:	f002 f82f 	bl	8008b5c <pvPortMalloc>
 8006afe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	697a      	ldr	r2, [r7, #20]
 8006b0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b0c:	e005      	b.n	8006b1a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b0e:	6978      	ldr	r0, [r7, #20]
 8006b10:	f002 f8f2 	bl	8008cf8 <vPortFree>
 8006b14:	e001      	b.n	8006b1a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d017      	beq.n	8006b50 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b28:	88fa      	ldrh	r2, [r7, #6]
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	9303      	str	r3, [sp, #12]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	9302      	str	r3, [sp, #8]
 8006b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b34:	9301      	str	r3, [sp, #4]
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f80e 	bl	8006b60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b44:	69f8      	ldr	r0, [r7, #28]
 8006b46:	f000 f8b3 	bl	8006cb0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	61bb      	str	r3, [r7, #24]
 8006b4e:	e002      	b.n	8006b56 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b54:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b56:	69bb      	ldr	r3, [r7, #24]
	}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b088      	sub	sp, #32
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b70:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	461a      	mov	r2, r3
 8006b78:	21a5      	movs	r1, #165	@ 0xa5
 8006b7a:	f002 f9dd 	bl	8008f38 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	4413      	add	r3, r2
 8006b8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	f023 0307 	bic.w	r3, r3, #7
 8006b96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	f003 0307 	and.w	r3, r3, #7
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ba6:	f383 8811 	msr	BASEPRI, r3
 8006baa:	f3bf 8f6f 	isb	sy
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	617b      	str	r3, [r7, #20]
}
 8006bb4:	bf00      	nop
 8006bb6:	bf00      	nop
 8006bb8:	e7fd      	b.n	8006bb6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01f      	beq.n	8006c00 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	61fb      	str	r3, [r7, #28]
 8006bc4:	e012      	b.n	8006bec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	69fb      	ldr	r3, [r7, #28]
 8006bca:	4413      	add	r3, r2
 8006bcc:	7819      	ldrb	r1, [r3, #0]
 8006bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	3334      	adds	r3, #52	@ 0x34
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	69fb      	ldr	r3, [r7, #28]
 8006bde:	4413      	add	r3, r2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d006      	beq.n	8006bf4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	3301      	adds	r3, #1
 8006bea:	61fb      	str	r3, [r7, #28]
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b0f      	cmp	r3, #15
 8006bf0:	d9e9      	bls.n	8006bc6 <prvInitialiseNewTask+0x66>
 8006bf2:	e000      	b.n	8006bf6 <prvInitialiseNewTask+0x96>
			{
				break;
 8006bf4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bfe:	e003      	b.n	8006c08 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	2b37      	cmp	r3, #55	@ 0x37
 8006c0c:	d901      	bls.n	8006c12 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c0e:	2337      	movs	r3, #55	@ 0x37
 8006c10:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c16:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c1c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c20:	2200      	movs	r2, #0
 8006c22:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	3304      	adds	r3, #4
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7fe fc55 	bl	80054d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c30:	3318      	adds	r3, #24
 8006c32:	4618      	mov	r0, r3
 8006c34:	f7fe fc50 	bl	80054d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c40:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c4c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c50:	2200      	movs	r2, #0
 8006c52:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c60:	3354      	adds	r3, #84	@ 0x54
 8006c62:	224c      	movs	r2, #76	@ 0x4c
 8006c64:	2100      	movs	r1, #0
 8006c66:	4618      	mov	r0, r3
 8006c68:	f002 f966 	bl	8008f38 <memset>
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ca4 <prvInitialiseNewTask+0x144>)
 8006c70:	659a      	str	r2, [r3, #88]	@ 0x58
 8006c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c74:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca8 <prvInitialiseNewTask+0x148>)
 8006c76:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7a:	4a0c      	ldr	r2, [pc, #48]	@ (8006cac <prvInitialiseNewTask+0x14c>)
 8006c7c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	69b8      	ldr	r0, [r7, #24]
 8006c84:	f001 fd18 	bl	80086b8 <pxPortInitialiseStack>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c8c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d002      	beq.n	8006c9a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c9a:	bf00      	nop
 8006c9c:	3720      	adds	r7, #32
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	20003ec4 	.word	0x20003ec4
 8006ca8:	20003f2c 	.word	0x20003f2c
 8006cac:	20003f94 	.word	0x20003f94

08006cb0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006cb8:	f001 fe2e 	bl	8008918 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d109      	bne.n	8006ce2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006cce:	4a2a      	ldr	r2, [pc, #168]	@ (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006cd4:	4b27      	ldr	r3, [pc, #156]	@ (8006d74 <prvAddNewTaskToReadyList+0xc4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d110      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006cdc:	f000 fcae 	bl	800763c <prvInitialiseTaskLists>
 8006ce0:	e00d      	b.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ce2:	4b26      	ldr	r3, [pc, #152]	@ (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cea:	4b23      	ldr	r3, [pc, #140]	@ (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d802      	bhi.n	8006cfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cfe:	4b20      	ldr	r3, [pc, #128]	@ (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	3301      	adds	r3, #1
 8006d04:	4a1e      	ldr	r2, [pc, #120]	@ (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d08:	4b1d      	ldr	r3, [pc, #116]	@ (8006d80 <prvAddNewTaskToReadyList+0xd0>)
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d14:	4b1b      	ldr	r3, [pc, #108]	@ (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d903      	bls.n	8006d24 <prvAddNewTaskToReadyList+0x74>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	4a18      	ldr	r2, [pc, #96]	@ (8006d84 <prvAddNewTaskToReadyList+0xd4>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4a15      	ldr	r2, [pc, #84]	@ (8006d88 <prvAddNewTaskToReadyList+0xd8>)
 8006d32:	441a      	add	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fe fbd9 	bl	80054f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d40:	f001 fe1c 	bl	800897c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d44:	4b0d      	ldr	r3, [pc, #52]	@ (8006d7c <prvAddNewTaskToReadyList+0xcc>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00e      	beq.n	8006d6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d78 <prvAddNewTaskToReadyList+0xc8>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d207      	bcs.n	8006d6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d8c <prvAddNewTaskToReadyList+0xdc>)
 8006d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d6a:	bf00      	nop
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	20000e64 	.word	0x20000e64
 8006d78:	20000990 	.word	0x20000990
 8006d7c:	20000e70 	.word	0x20000e70
 8006d80:	20000e80 	.word	0x20000e80
 8006d84:	20000e6c 	.word	0x20000e6c
 8006d88:	20000994 	.word	0x20000994
 8006d8c:	e000ed04 	.word	0xe000ed04

08006d90 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b08a      	sub	sp, #40	@ 0x28
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10b      	bne.n	8006dbc <vTaskDelayUntil+0x2c>
	__asm volatile
 8006da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	617b      	str	r3, [r7, #20]
}
 8006db6:	bf00      	nop
 8006db8:	bf00      	nop
 8006dba:	e7fd      	b.n	8006db8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d10b      	bne.n	8006dda <vTaskDelayUntil+0x4a>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	613b      	str	r3, [r7, #16]
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	e7fd      	b.n	8006dd6 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8006dda:	4b2a      	ldr	r3, [pc, #168]	@ (8006e84 <vTaskDelayUntil+0xf4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00b      	beq.n	8006dfa <vTaskDelayUntil+0x6a>
	__asm volatile
 8006de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de6:	f383 8811 	msr	BASEPRI, r3
 8006dea:	f3bf 8f6f 	isb	sy
 8006dee:	f3bf 8f4f 	dsb	sy
 8006df2:	60fb      	str	r3, [r7, #12]
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop
 8006df8:	e7fd      	b.n	8006df6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8006dfa:	f000 f8ef 	bl	8006fdc <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8006dfe:	4b22      	ldr	r3, [pc, #136]	@ (8006e88 <vTaskDelayUntil+0xf8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	683a      	ldr	r2, [r7, #0]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	6a3a      	ldr	r2, [r7, #32]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d20b      	bcs.n	8006e30 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d211      	bcs.n	8006e46 <vTaskDelayUntil+0xb6>
 8006e22:	69fa      	ldr	r2, [r7, #28]
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d90d      	bls.n	8006e46 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e2e:	e00a      	b.n	8006e46 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	69fa      	ldr	r2, [r7, #28]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d303      	bcc.n	8006e42 <vTaskDelayUntil+0xb2>
 8006e3a:	69fa      	ldr	r2, [r7, #28]
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d901      	bls.n	8006e46 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8006e42:	2301      	movs	r3, #1
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d006      	beq.n	8006e60 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8006e52:	69fa      	ldr	r2, [r7, #28]
 8006e54:	6a3b      	ldr	r3, [r7, #32]
 8006e56:	1ad3      	subs	r3, r2, r3
 8006e58:	2100      	movs	r1, #0
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f87e 	bl	8007f5c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8006e60:	f000 f8ca 	bl	8006ff8 <xTaskResumeAll>
 8006e64:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e66:	69bb      	ldr	r3, [r7, #24]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8006e6c:	4b07      	ldr	r3, [pc, #28]	@ (8006e8c <vTaskDelayUntil+0xfc>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e7c:	bf00      	nop
 8006e7e:	3728      	adds	r7, #40	@ 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000e8c 	.word	0x20000e8c
 8006e88:	20000e68 	.word	0x20000e68
 8006e8c:	e000ed04 	.word	0xe000ed04

08006e90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d018      	beq.n	8006ed4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ea2:	4b14      	ldr	r3, [pc, #80]	@ (8006ef4 <vTaskDelay+0x64>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00b      	beq.n	8006ec2 <vTaskDelay+0x32>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	60bb      	str	r3, [r7, #8]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ec2:	f000 f88b 	bl	8006fdc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006ec6:	2100      	movs	r1, #0
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f001 f847 	bl	8007f5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006ece:	f000 f893 	bl	8006ff8 <xTaskResumeAll>
 8006ed2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d107      	bne.n	8006eea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006eda:	4b07      	ldr	r3, [pc, #28]	@ (8006ef8 <vTaskDelay+0x68>)
 8006edc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000e8c 	.word	0x20000e8c
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08a      	sub	sp, #40	@ 0x28
 8006f00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006f06:	2300      	movs	r3, #0
 8006f08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006f0a:	463a      	mov	r2, r7
 8006f0c:	1d39      	adds	r1, r7, #4
 8006f0e:	f107 0308 	add.w	r3, r7, #8
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fe fa8c 	bl	8005430 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68ba      	ldr	r2, [r7, #8]
 8006f1e:	9202      	str	r2, [sp, #8]
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	2300      	movs	r3, #0
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	2300      	movs	r3, #0
 8006f28:	460a      	mov	r2, r1
 8006f2a:	4924      	ldr	r1, [pc, #144]	@ (8006fbc <vTaskStartScheduler+0xc0>)
 8006f2c:	4824      	ldr	r0, [pc, #144]	@ (8006fc0 <vTaskStartScheduler+0xc4>)
 8006f2e:	f7ff fd72 	bl	8006a16 <xTaskCreateStatic>
 8006f32:	4603      	mov	r3, r0
 8006f34:	4a23      	ldr	r2, [pc, #140]	@ (8006fc4 <vTaskStartScheduler+0xc8>)
 8006f36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006f38:	4b22      	ldr	r3, [pc, #136]	@ (8006fc4 <vTaskStartScheduler+0xc8>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d002      	beq.n	8006f46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006f40:	2301      	movs	r3, #1
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	e001      	b.n	8006f4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d102      	bne.n	8006f56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f50:	f001 f858 	bl	8008004 <xTimerCreateTimerTask>
 8006f54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d11b      	bne.n	8006f94 <vTaskStartScheduler+0x98>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	613b      	str	r3, [r7, #16]
}
 8006f6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f70:	4b15      	ldr	r3, [pc, #84]	@ (8006fc8 <vTaskStartScheduler+0xcc>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	3354      	adds	r3, #84	@ 0x54
 8006f76:	4a15      	ldr	r2, [pc, #84]	@ (8006fcc <vTaskStartScheduler+0xd0>)
 8006f78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f7a:	4b15      	ldr	r3, [pc, #84]	@ (8006fd0 <vTaskStartScheduler+0xd4>)
 8006f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f82:	4b14      	ldr	r3, [pc, #80]	@ (8006fd4 <vTaskStartScheduler+0xd8>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f88:	4b13      	ldr	r3, [pc, #76]	@ (8006fd8 <vTaskStartScheduler+0xdc>)
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f8e:	f001 fc1f 	bl	80087d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f92:	e00f      	b.n	8006fb4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f9a:	d10b      	bne.n	8006fb4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60fb      	str	r3, [r7, #12]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <vTaskStartScheduler+0xb4>
}
 8006fb4:	bf00      	nop
 8006fb6:	3718      	adds	r7, #24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	08009168 	.word	0x08009168
 8006fc0:	0800760d 	.word	0x0800760d
 8006fc4:	20000e88 	.word	0x20000e88
 8006fc8:	20000990 	.word	0x20000990
 8006fcc:	20000018 	.word	0x20000018
 8006fd0:	20000e84 	.word	0x20000e84
 8006fd4:	20000e70 	.word	0x20000e70
 8006fd8:	20000e68 	.word	0x20000e68

08006fdc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006fdc:	b480      	push	{r7}
 8006fde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006fe0:	4b04      	ldr	r3, [pc, #16]	@ (8006ff4 <vTaskSuspendAll+0x18>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	4a03      	ldr	r2, [pc, #12]	@ (8006ff4 <vTaskSuspendAll+0x18>)
 8006fe8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006fea:	bf00      	nop
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr
 8006ff4:	20000e8c 	.word	0x20000e8c

08006ff8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007002:	2300      	movs	r3, #0
 8007004:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007006:	4b42      	ldr	r3, [pc, #264]	@ (8007110 <xTaskResumeAll+0x118>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10b      	bne.n	8007026 <xTaskResumeAll+0x2e>
	__asm volatile
 800700e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007012:	f383 8811 	msr	BASEPRI, r3
 8007016:	f3bf 8f6f 	isb	sy
 800701a:	f3bf 8f4f 	dsb	sy
 800701e:	603b      	str	r3, [r7, #0]
}
 8007020:	bf00      	nop
 8007022:	bf00      	nop
 8007024:	e7fd      	b.n	8007022 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007026:	f001 fc77 	bl	8008918 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800702a:	4b39      	ldr	r3, [pc, #228]	@ (8007110 <xTaskResumeAll+0x118>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	3b01      	subs	r3, #1
 8007030:	4a37      	ldr	r2, [pc, #220]	@ (8007110 <xTaskResumeAll+0x118>)
 8007032:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007034:	4b36      	ldr	r3, [pc, #216]	@ (8007110 <xTaskResumeAll+0x118>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d162      	bne.n	8007102 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800703c:	4b35      	ldr	r3, [pc, #212]	@ (8007114 <xTaskResumeAll+0x11c>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d05e      	beq.n	8007102 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007044:	e02f      	b.n	80070a6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007046:	4b34      	ldr	r3, [pc, #208]	@ (8007118 <xTaskResumeAll+0x120>)
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3318      	adds	r3, #24
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe faaa 	bl	80055ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3304      	adds	r3, #4
 800705c:	4618      	mov	r0, r3
 800705e:	f7fe faa5 	bl	80055ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007066:	4b2d      	ldr	r3, [pc, #180]	@ (800711c <xTaskResumeAll+0x124>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	429a      	cmp	r2, r3
 800706c:	d903      	bls.n	8007076 <xTaskResumeAll+0x7e>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007072:	4a2a      	ldr	r2, [pc, #168]	@ (800711c <xTaskResumeAll+0x124>)
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	4a27      	ldr	r2, [pc, #156]	@ (8007120 <xTaskResumeAll+0x128>)
 8007084:	441a      	add	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	3304      	adds	r3, #4
 800708a:	4619      	mov	r1, r3
 800708c:	4610      	mov	r0, r2
 800708e:	f7fe fa30 	bl	80054f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007096:	4b23      	ldr	r3, [pc, #140]	@ (8007124 <xTaskResumeAll+0x12c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709c:	429a      	cmp	r2, r3
 800709e:	d302      	bcc.n	80070a6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80070a0:	4b21      	ldr	r3, [pc, #132]	@ (8007128 <xTaskResumeAll+0x130>)
 80070a2:	2201      	movs	r2, #1
 80070a4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070a6:	4b1c      	ldr	r3, [pc, #112]	@ (8007118 <xTaskResumeAll+0x120>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1cb      	bne.n	8007046 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070b4:	f000 fb66 	bl	8007784 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070b8:	4b1c      	ldr	r3, [pc, #112]	@ (800712c <xTaskResumeAll+0x134>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070c4:	f000 f846 	bl	8007154 <xTaskIncrementTick>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80070ce:	4b16      	ldr	r3, [pc, #88]	@ (8007128 <xTaskResumeAll+0x130>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1f1      	bne.n	80070c4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80070e0:	4b12      	ldr	r3, [pc, #72]	@ (800712c <xTaskResumeAll+0x134>)
 80070e2:	2200      	movs	r2, #0
 80070e4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80070e6:	4b10      	ldr	r3, [pc, #64]	@ (8007128 <xTaskResumeAll+0x130>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80070ee:	2301      	movs	r3, #1
 80070f0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80070f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007130 <xTaskResumeAll+0x138>)
 80070f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007102:	f001 fc3b 	bl	800897c <vPortExitCritical>

	return xAlreadyYielded;
 8007106:	68bb      	ldr	r3, [r7, #8]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20000e8c 	.word	0x20000e8c
 8007114:	20000e64 	.word	0x20000e64
 8007118:	20000e24 	.word	0x20000e24
 800711c:	20000e6c 	.word	0x20000e6c
 8007120:	20000994 	.word	0x20000994
 8007124:	20000990 	.word	0x20000990
 8007128:	20000e78 	.word	0x20000e78
 800712c:	20000e74 	.word	0x20000e74
 8007130:	e000ed04 	.word	0xe000ed04

08007134 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800713a:	4b05      	ldr	r3, [pc, #20]	@ (8007150 <xTaskGetTickCount+0x1c>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007140:	687b      	ldr	r3, [r7, #4]
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	20000e68 	.word	0x20000e68

08007154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715e:	4b4f      	ldr	r3, [pc, #316]	@ (800729c <xTaskIncrementTick+0x148>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	f040 8090 	bne.w	8007288 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007168:	4b4d      	ldr	r3, [pc, #308]	@ (80072a0 <xTaskIncrementTick+0x14c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007170:	4a4b      	ldr	r2, [pc, #300]	@ (80072a0 <xTaskIncrementTick+0x14c>)
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d121      	bne.n	80071c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800717c:	4b49      	ldr	r3, [pc, #292]	@ (80072a4 <xTaskIncrementTick+0x150>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00b      	beq.n	800719e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	603b      	str	r3, [r7, #0]
}
 8007198:	bf00      	nop
 800719a:	bf00      	nop
 800719c:	e7fd      	b.n	800719a <xTaskIncrementTick+0x46>
 800719e:	4b41      	ldr	r3, [pc, #260]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	4b40      	ldr	r3, [pc, #256]	@ (80072a8 <xTaskIncrementTick+0x154>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a3e      	ldr	r2, [pc, #248]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	4a3e      	ldr	r2, [pc, #248]	@ (80072a8 <xTaskIncrementTick+0x154>)
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	4b3e      	ldr	r3, [pc, #248]	@ (80072ac <xTaskIncrementTick+0x158>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3301      	adds	r3, #1
 80071b8:	4a3c      	ldr	r2, [pc, #240]	@ (80072ac <xTaskIncrementTick+0x158>)
 80071ba:	6013      	str	r3, [r2, #0]
 80071bc:	f000 fae2 	bl	8007784 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071c0:	4b3b      	ldr	r3, [pc, #236]	@ (80072b0 <xTaskIncrementTick+0x15c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	693a      	ldr	r2, [r7, #16]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d349      	bcc.n	800725e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071ca:	4b36      	ldr	r3, [pc, #216]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d104      	bne.n	80071de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071d4:	4b36      	ldr	r3, [pc, #216]	@ (80072b0 <xTaskIncrementTick+0x15c>)
 80071d6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071da:	601a      	str	r2, [r3, #0]
					break;
 80071dc:	e03f      	b.n	800725e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071de:	4b31      	ldr	r3, [pc, #196]	@ (80072a4 <xTaskIncrementTick+0x150>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d203      	bcs.n	80071fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071f6:	4a2e      	ldr	r2, [pc, #184]	@ (80072b0 <xTaskIncrementTick+0x15c>)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071fc:	e02f      	b.n	800725e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	3304      	adds	r3, #4
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe f9d2 	bl	80055ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	3318      	adds	r3, #24
 8007214:	4618      	mov	r0, r3
 8007216:	f7fe f9c9 	bl	80055ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800721e:	4b25      	ldr	r3, [pc, #148]	@ (80072b4 <xTaskIncrementTick+0x160>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	429a      	cmp	r2, r3
 8007224:	d903      	bls.n	800722e <xTaskIncrementTick+0xda>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722a:	4a22      	ldr	r2, [pc, #136]	@ (80072b4 <xTaskIncrementTick+0x160>)
 800722c:	6013      	str	r3, [r2, #0]
 800722e:	68bb      	ldr	r3, [r7, #8]
 8007230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4a1f      	ldr	r2, [pc, #124]	@ (80072b8 <xTaskIncrementTick+0x164>)
 800723c:	441a      	add	r2, r3
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	3304      	adds	r3, #4
 8007242:	4619      	mov	r1, r3
 8007244:	4610      	mov	r0, r2
 8007246:	f7fe f954 	bl	80054f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724e:	4b1b      	ldr	r3, [pc, #108]	@ (80072bc <xTaskIncrementTick+0x168>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	429a      	cmp	r2, r3
 8007256:	d3b8      	bcc.n	80071ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007258:	2301      	movs	r3, #1
 800725a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800725c:	e7b5      	b.n	80071ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800725e:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <xTaskIncrementTick+0x168>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007264:	4914      	ldr	r1, [pc, #80]	@ (80072b8 <xTaskIncrementTick+0x164>)
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	440b      	add	r3, r1
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d901      	bls.n	800727a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007276:	2301      	movs	r3, #1
 8007278:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800727a:	4b11      	ldr	r3, [pc, #68]	@ (80072c0 <xTaskIncrementTick+0x16c>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d007      	beq.n	8007292 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007282:	2301      	movs	r3, #1
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	e004      	b.n	8007292 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007288:	4b0e      	ldr	r3, [pc, #56]	@ (80072c4 <xTaskIncrementTick+0x170>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	4a0d      	ldr	r2, [pc, #52]	@ (80072c4 <xTaskIncrementTick+0x170>)
 8007290:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	20000e8c 	.word	0x20000e8c
 80072a0:	20000e68 	.word	0x20000e68
 80072a4:	20000e1c 	.word	0x20000e1c
 80072a8:	20000e20 	.word	0x20000e20
 80072ac:	20000e7c 	.word	0x20000e7c
 80072b0:	20000e84 	.word	0x20000e84
 80072b4:	20000e6c 	.word	0x20000e6c
 80072b8:	20000994 	.word	0x20000994
 80072bc:	20000990 	.word	0x20000990
 80072c0:	20000e78 	.word	0x20000e78
 80072c4:	20000e74 	.word	0x20000e74

080072c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ce:	4b2b      	ldr	r3, [pc, #172]	@ (800737c <vTaskSwitchContext+0xb4>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007380 <vTaskSwitchContext+0xb8>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072dc:	e047      	b.n	800736e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80072de:	4b28      	ldr	r3, [pc, #160]	@ (8007380 <vTaskSwitchContext+0xb8>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	4b27      	ldr	r3, [pc, #156]	@ (8007384 <vTaskSwitchContext+0xbc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e011      	b.n	8007310 <vTaskSwitchContext+0x48>
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <vTaskSwitchContext+0x42>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	607b      	str	r3, [r7, #4]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <vTaskSwitchContext+0x3e>
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3b01      	subs	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	491d      	ldr	r1, [pc, #116]	@ (8007388 <vTaskSwitchContext+0xc0>)
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	440b      	add	r3, r1
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d0e3      	beq.n	80072ec <vTaskSwitchContext+0x24>
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4a16      	ldr	r2, [pc, #88]	@ (8007388 <vTaskSwitchContext+0xc0>)
 8007330:	4413      	add	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	685a      	ldr	r2, [r3, #4]
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	3308      	adds	r3, #8
 8007346:	429a      	cmp	r2, r3
 8007348:	d104      	bne.n	8007354 <vTaskSwitchContext+0x8c>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	605a      	str	r2, [r3, #4]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	4a0c      	ldr	r2, [pc, #48]	@ (800738c <vTaskSwitchContext+0xc4>)
 800735c:	6013      	str	r3, [r2, #0]
 800735e:	4a09      	ldr	r2, [pc, #36]	@ (8007384 <vTaskSwitchContext+0xbc>)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007364:	4b09      	ldr	r3, [pc, #36]	@ (800738c <vTaskSwitchContext+0xc4>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3354      	adds	r3, #84	@ 0x54
 800736a:	4a09      	ldr	r2, [pc, #36]	@ (8007390 <vTaskSwitchContext+0xc8>)
 800736c:	6013      	str	r3, [r2, #0]
}
 800736e:	bf00      	nop
 8007370:	3714      	adds	r7, #20
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	20000e8c 	.word	0x20000e8c
 8007380:	20000e78 	.word	0x20000e78
 8007384:	20000e6c 	.word	0x20000e6c
 8007388:	20000994 	.word	0x20000994
 800738c:	20000990 	.word	0x20000990
 8007390:	20000018 	.word	0x20000018

08007394 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10b      	bne.n	80073bc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073a8:	f383 8811 	msr	BASEPRI, r3
 80073ac:	f3bf 8f6f 	isb	sy
 80073b0:	f3bf 8f4f 	dsb	sy
 80073b4:	60fb      	str	r3, [r7, #12]
}
 80073b6:	bf00      	nop
 80073b8:	bf00      	nop
 80073ba:	e7fd      	b.n	80073b8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073bc:	4b07      	ldr	r3, [pc, #28]	@ (80073dc <vTaskPlaceOnEventList+0x48>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3318      	adds	r3, #24
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fe f8b8 	bl	800553a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073ca:	2101      	movs	r1, #1
 80073cc:	6838      	ldr	r0, [r7, #0]
 80073ce:	f000 fdc5 	bl	8007f5c <prvAddCurrentTaskToDelayedList>
}
 80073d2:	bf00      	nop
 80073d4:	3710      	adds	r7, #16
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
 80073da:	bf00      	nop
 80073dc:	20000990 	.word	0x20000990

080073e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	60f8      	str	r0, [r7, #12]
 80073e8:	60b9      	str	r1, [r7, #8]
 80073ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80073f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f6:	f383 8811 	msr	BASEPRI, r3
 80073fa:	f3bf 8f6f 	isb	sy
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	617b      	str	r3, [r7, #20]
}
 8007404:	bf00      	nop
 8007406:	bf00      	nop
 8007408:	e7fd      	b.n	8007406 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800740a:	4b0a      	ldr	r3, [pc, #40]	@ (8007434 <vTaskPlaceOnEventListRestricted+0x54>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3318      	adds	r3, #24
 8007410:	4619      	mov	r1, r3
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f7fe f86d 	bl	80054f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800741e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007422:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007424:	6879      	ldr	r1, [r7, #4]
 8007426:	68b8      	ldr	r0, [r7, #8]
 8007428:	f000 fd98 	bl	8007f5c <prvAddCurrentTaskToDelayedList>
	}
 800742c:	bf00      	nop
 800742e:	3718      	adds	r7, #24
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000990 	.word	0x20000990

08007438 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68db      	ldr	r3, [r3, #12]
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10b      	bne.n	8007466 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	60fb      	str	r3, [r7, #12]
}
 8007460:	bf00      	nop
 8007462:	bf00      	nop
 8007464:	e7fd      	b.n	8007462 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	3318      	adds	r3, #24
 800746a:	4618      	mov	r0, r3
 800746c:	f7fe f89e 	bl	80055ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007470:	4b1d      	ldr	r3, [pc, #116]	@ (80074e8 <xTaskRemoveFromEventList+0xb0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d11d      	bne.n	80074b4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	3304      	adds	r3, #4
 800747c:	4618      	mov	r0, r3
 800747e:	f7fe f895 	bl	80055ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007486:	4b19      	ldr	r3, [pc, #100]	@ (80074ec <xTaskRemoveFromEventList+0xb4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	429a      	cmp	r2, r3
 800748c:	d903      	bls.n	8007496 <xTaskRemoveFromEventList+0x5e>
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007492:	4a16      	ldr	r2, [pc, #88]	@ (80074ec <xTaskRemoveFromEventList+0xb4>)
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4a13      	ldr	r2, [pc, #76]	@ (80074f0 <xTaskRemoveFromEventList+0xb8>)
 80074a4:	441a      	add	r2, r3
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	3304      	adds	r3, #4
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f7fe f820 	bl	80054f2 <vListInsertEnd>
 80074b2:	e005      	b.n	80074c0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	3318      	adds	r3, #24
 80074b8:	4619      	mov	r1, r3
 80074ba:	480e      	ldr	r0, [pc, #56]	@ (80074f4 <xTaskRemoveFromEventList+0xbc>)
 80074bc:	f7fe f819 	bl	80054f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c4:	4b0c      	ldr	r3, [pc, #48]	@ (80074f8 <xTaskRemoveFromEventList+0xc0>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d905      	bls.n	80074da <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80074d2:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <xTaskRemoveFromEventList+0xc4>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	e001      	b.n	80074de <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80074da:	2300      	movs	r3, #0
 80074dc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80074de:	697b      	ldr	r3, [r7, #20]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3718      	adds	r7, #24
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	20000e8c 	.word	0x20000e8c
 80074ec:	20000e6c 	.word	0x20000e6c
 80074f0:	20000994 	.word	0x20000994
 80074f4:	20000e24 	.word	0x20000e24
 80074f8:	20000990 	.word	0x20000990
 80074fc:	20000e78 	.word	0x20000e78

08007500 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007508:	4b06      	ldr	r3, [pc, #24]	@ (8007524 <vTaskInternalSetTimeOutState+0x24>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <vTaskInternalSetTimeOutState+0x28>)
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	605a      	str	r2, [r3, #4]
}
 8007518:	bf00      	nop
 800751a:	370c      	adds	r7, #12
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20000e7c 	.word	0x20000e7c
 8007528:	20000e68 	.word	0x20000e68

0800752c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b088      	sub	sp, #32
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10b      	bne.n	8007554 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	613b      	str	r3, [r7, #16]
}
 800754e:	bf00      	nop
 8007550:	bf00      	nop
 8007552:	e7fd      	b.n	8007550 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	60fb      	str	r3, [r7, #12]
}
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007572:	f001 f9d1 	bl	8008918 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007576:	4b1d      	ldr	r3, [pc, #116]	@ (80075ec <xTaskCheckForTimeOut+0xc0>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800758e:	d102      	bne.n	8007596 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e023      	b.n	80075de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	4b15      	ldr	r3, [pc, #84]	@ (80075f0 <xTaskCheckForTimeOut+0xc4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d007      	beq.n	80075b2 <xTaskCheckForTimeOut+0x86>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	69ba      	ldr	r2, [r7, #24]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d302      	bcc.n	80075b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80075ac:	2301      	movs	r3, #1
 80075ae:	61fb      	str	r3, [r7, #28]
 80075b0:	e015      	b.n	80075de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d20b      	bcs.n	80075d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	1ad2      	subs	r2, r2, r3
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff ff99 	bl	8007500 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	61fb      	str	r3, [r7, #28]
 80075d2:	e004      	b.n	80075de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	2200      	movs	r2, #0
 80075d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80075da:	2301      	movs	r3, #1
 80075dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80075de:	f001 f9cd 	bl	800897c <vPortExitCritical>

	return xReturn;
 80075e2:	69fb      	ldr	r3, [r7, #28]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3720      	adds	r7, #32
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000e68 	.word	0x20000e68
 80075f0:	20000e7c 	.word	0x20000e7c

080075f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80075f8:	4b03      	ldr	r3, [pc, #12]	@ (8007608 <vTaskMissedYield+0x14>)
 80075fa:	2201      	movs	r2, #1
 80075fc:	601a      	str	r2, [r3, #0]
}
 80075fe:	bf00      	nop
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr
 8007608:	20000e78 	.word	0x20000e78

0800760c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007614:	f000 f852 	bl	80076bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007618:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <prvIdleTask+0x28>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d9f9      	bls.n	8007614 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007620:	4b05      	ldr	r3, [pc, #20]	@ (8007638 <prvIdleTask+0x2c>)
 8007622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007630:	e7f0      	b.n	8007614 <prvIdleTask+0x8>
 8007632:	bf00      	nop
 8007634:	20000994 	.word	0x20000994
 8007638:	e000ed04 	.word	0xe000ed04

0800763c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007642:	2300      	movs	r3, #0
 8007644:	607b      	str	r3, [r7, #4]
 8007646:	e00c      	b.n	8007662 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	4613      	mov	r3, r2
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	4413      	add	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4a12      	ldr	r2, [pc, #72]	@ (800769c <prvInitialiseTaskLists+0x60>)
 8007654:	4413      	add	r3, r2
 8007656:	4618      	mov	r0, r3
 8007658:	f7fd ff1e 	bl	8005498 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	3301      	adds	r3, #1
 8007660:	607b      	str	r3, [r7, #4]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b37      	cmp	r3, #55	@ 0x37
 8007666:	d9ef      	bls.n	8007648 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007668:	480d      	ldr	r0, [pc, #52]	@ (80076a0 <prvInitialiseTaskLists+0x64>)
 800766a:	f7fd ff15 	bl	8005498 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800766e:	480d      	ldr	r0, [pc, #52]	@ (80076a4 <prvInitialiseTaskLists+0x68>)
 8007670:	f7fd ff12 	bl	8005498 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007674:	480c      	ldr	r0, [pc, #48]	@ (80076a8 <prvInitialiseTaskLists+0x6c>)
 8007676:	f7fd ff0f 	bl	8005498 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800767a:	480c      	ldr	r0, [pc, #48]	@ (80076ac <prvInitialiseTaskLists+0x70>)
 800767c:	f7fd ff0c 	bl	8005498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007680:	480b      	ldr	r0, [pc, #44]	@ (80076b0 <prvInitialiseTaskLists+0x74>)
 8007682:	f7fd ff09 	bl	8005498 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007686:	4b0b      	ldr	r3, [pc, #44]	@ (80076b4 <prvInitialiseTaskLists+0x78>)
 8007688:	4a05      	ldr	r2, [pc, #20]	@ (80076a0 <prvInitialiseTaskLists+0x64>)
 800768a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800768c:	4b0a      	ldr	r3, [pc, #40]	@ (80076b8 <prvInitialiseTaskLists+0x7c>)
 800768e:	4a05      	ldr	r2, [pc, #20]	@ (80076a4 <prvInitialiseTaskLists+0x68>)
 8007690:	601a      	str	r2, [r3, #0]
}
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000994 	.word	0x20000994
 80076a0:	20000df4 	.word	0x20000df4
 80076a4:	20000e08 	.word	0x20000e08
 80076a8:	20000e24 	.word	0x20000e24
 80076ac:	20000e38 	.word	0x20000e38
 80076b0:	20000e50 	.word	0x20000e50
 80076b4:	20000e1c 	.word	0x20000e1c
 80076b8:	20000e20 	.word	0x20000e20

080076bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076c2:	e019      	b.n	80076f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80076c4:	f001 f928 	bl	8008918 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076c8:	4b10      	ldr	r3, [pc, #64]	@ (800770c <prvCheckTasksWaitingTermination+0x50>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	68db      	ldr	r3, [r3, #12]
 80076ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	3304      	adds	r3, #4
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd ff69 	bl	80055ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80076da:	4b0d      	ldr	r3, [pc, #52]	@ (8007710 <prvCheckTasksWaitingTermination+0x54>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3b01      	subs	r3, #1
 80076e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007710 <prvCheckTasksWaitingTermination+0x54>)
 80076e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80076e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007714 <prvCheckTasksWaitingTermination+0x58>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3b01      	subs	r3, #1
 80076ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007714 <prvCheckTasksWaitingTermination+0x58>)
 80076ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80076ee:	f001 f945 	bl	800897c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f810 	bl	8007718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80076f8:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <prvCheckTasksWaitingTermination+0x58>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1e1      	bne.n	80076c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007700:	bf00      	nop
 8007702:	bf00      	nop
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000e38 	.word	0x20000e38
 8007710:	20000e64 	.word	0x20000e64
 8007714:	20000e4c 	.word	0x20000e4c

08007718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	3354      	adds	r3, #84	@ 0x54
 8007724:	4618      	mov	r0, r3
 8007726:	f001 fc0f 	bl	8008f48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007730:	2b00      	cmp	r3, #0
 8007732:	d108      	bne.n	8007746 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007738:	4618      	mov	r0, r3
 800773a:	f001 fadd 	bl	8008cf8 <vPortFree>
				vPortFree( pxTCB );
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 fada 	bl	8008cf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007744:	e019      	b.n	800777a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800774c:	2b01      	cmp	r3, #1
 800774e:	d103      	bne.n	8007758 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fad1 	bl	8008cf8 <vPortFree>
	}
 8007756:	e010      	b.n	800777a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800775e:	2b02      	cmp	r3, #2
 8007760:	d00b      	beq.n	800777a <prvDeleteTCB+0x62>
	__asm volatile
 8007762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007766:	f383 8811 	msr	BASEPRI, r3
 800776a:	f3bf 8f6f 	isb	sy
 800776e:	f3bf 8f4f 	dsb	sy
 8007772:	60fb      	str	r3, [r7, #12]
}
 8007774:	bf00      	nop
 8007776:	bf00      	nop
 8007778:	e7fd      	b.n	8007776 <prvDeleteTCB+0x5e>
	}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007784:	b480      	push	{r7}
 8007786:	b083      	sub	sp, #12
 8007788:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800778a:	4b0c      	ldr	r3, [pc, #48]	@ (80077bc <prvResetNextTaskUnblockTime+0x38>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d104      	bne.n	800779e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007794:	4b0a      	ldr	r3, [pc, #40]	@ (80077c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007796:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800779a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800779c:	e008      	b.n	80077b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779e:	4b07      	ldr	r3, [pc, #28]	@ (80077bc <prvResetNextTaskUnblockTime+0x38>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	4a04      	ldr	r2, [pc, #16]	@ (80077c0 <prvResetNextTaskUnblockTime+0x3c>)
 80077ae:	6013      	str	r3, [r2, #0]
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	20000e1c 	.word	0x20000e1c
 80077c0:	20000e84 	.word	0x20000e84

080077c4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80077ca:	4b05      	ldr	r3, [pc, #20]	@ (80077e0 <xTaskGetCurrentTaskHandle+0x1c>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	607b      	str	r3, [r7, #4]

		return xReturn;
 80077d0:	687b      	ldr	r3, [r7, #4]
	}
 80077d2:	4618      	mov	r0, r3
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000990 	.word	0x20000990

080077e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80077ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007818 <xTaskGetSchedulerState+0x34>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d102      	bne.n	80077f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80077f2:	2301      	movs	r3, #1
 80077f4:	607b      	str	r3, [r7, #4]
 80077f6:	e008      	b.n	800780a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80077f8:	4b08      	ldr	r3, [pc, #32]	@ (800781c <xTaskGetSchedulerState+0x38>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d102      	bne.n	8007806 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007800:	2302      	movs	r3, #2
 8007802:	607b      	str	r3, [r7, #4]
 8007804:	e001      	b.n	800780a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800780a:	687b      	ldr	r3, [r7, #4]
	}
 800780c:	4618      	mov	r0, r3
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	20000e70 	.word	0x20000e70
 800781c:	20000e8c 	.word	0x20000e8c

08007820 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800782c:	2300      	movs	r3, #0
 800782e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d051      	beq.n	80078da <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783a:	4b2a      	ldr	r3, [pc, #168]	@ (80078e4 <xTaskPriorityInherit+0xc4>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007840:	429a      	cmp	r2, r3
 8007842:	d241      	bcs.n	80078c8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	db06      	blt.n	800785a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800784c:	4b25      	ldr	r3, [pc, #148]	@ (80078e4 <xTaskPriorityInherit+0xc4>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007852:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6959      	ldr	r1, [r3, #20]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007862:	4613      	mov	r3, r2
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4a1f      	ldr	r2, [pc, #124]	@ (80078e8 <xTaskPriorityInherit+0xc8>)
 800786c:	4413      	add	r3, r2
 800786e:	4299      	cmp	r1, r3
 8007870:	d122      	bne.n	80078b8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3304      	adds	r3, #4
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fe98 	bl	80055ac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800787c:	4b19      	ldr	r3, [pc, #100]	@ (80078e4 <xTaskPriorityInherit+0xc4>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788a:	4b18      	ldr	r3, [pc, #96]	@ (80078ec <xTaskPriorityInherit+0xcc>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d903      	bls.n	800789a <xTaskPriorityInherit+0x7a>
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007896:	4a15      	ldr	r2, [pc, #84]	@ (80078ec <xTaskPriorityInherit+0xcc>)
 8007898:	6013      	str	r3, [r2, #0]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800789e:	4613      	mov	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	4413      	add	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4a10      	ldr	r2, [pc, #64]	@ (80078e8 <xTaskPriorityInherit+0xc8>)
 80078a8:	441a      	add	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7fd fe1e 	bl	80054f2 <vListInsertEnd>
 80078b6:	e004      	b.n	80078c2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078b8:	4b0a      	ldr	r3, [pc, #40]	@ (80078e4 <xTaskPriorityInherit+0xc4>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80078c2:	2301      	movs	r3, #1
 80078c4:	60fb      	str	r3, [r7, #12]
 80078c6:	e008      	b.n	80078da <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80078cc:	4b05      	ldr	r3, [pc, #20]	@ (80078e4 <xTaskPriorityInherit+0xc4>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d201      	bcs.n	80078da <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80078d6:	2301      	movs	r3, #1
 80078d8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80078da:	68fb      	ldr	r3, [r7, #12]
	}
 80078dc:	4618      	mov	r0, r3
 80078de:	3710      	adds	r7, #16
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bd80      	pop	{r7, pc}
 80078e4:	20000990 	.word	0x20000990
 80078e8:	20000994 	.word	0x20000994
 80078ec:	20000e6c 	.word	0x20000e6c

080078f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d058      	beq.n	80079b8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007906:	4b2f      	ldr	r3, [pc, #188]	@ (80079c4 <xTaskPriorityDisinherit+0xd4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	429a      	cmp	r2, r3
 800790e:	d00b      	beq.n	8007928 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007914:	f383 8811 	msr	BASEPRI, r3
 8007918:	f3bf 8f6f 	isb	sy
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	60fb      	str	r3, [r7, #12]
}
 8007922:	bf00      	nop
 8007924:	bf00      	nop
 8007926:	e7fd      	b.n	8007924 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10b      	bne.n	8007948 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60bb      	str	r3, [r7, #8]
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800794c:	1e5a      	subs	r2, r3, #1
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800795a:	429a      	cmp	r2, r3
 800795c:	d02c      	beq.n	80079b8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007962:	2b00      	cmp	r3, #0
 8007964:	d128      	bne.n	80079b8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	3304      	adds	r3, #4
 800796a:	4618      	mov	r0, r3
 800796c:	f7fd fe1e 	bl	80055ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800797c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007988:	4b0f      	ldr	r3, [pc, #60]	@ (80079c8 <xTaskPriorityDisinherit+0xd8>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	429a      	cmp	r2, r3
 800798e:	d903      	bls.n	8007998 <xTaskPriorityDisinherit+0xa8>
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007994:	4a0c      	ldr	r2, [pc, #48]	@ (80079c8 <xTaskPriorityDisinherit+0xd8>)
 8007996:	6013      	str	r3, [r2, #0]
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800799c:	4613      	mov	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	4413      	add	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4a09      	ldr	r2, [pc, #36]	@ (80079cc <xTaskPriorityDisinherit+0xdc>)
 80079a6:	441a      	add	r2, r3
 80079a8:	693b      	ldr	r3, [r7, #16]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4619      	mov	r1, r3
 80079ae:	4610      	mov	r0, r2
 80079b0:	f7fd fd9f 	bl	80054f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079b4:	2301      	movs	r3, #1
 80079b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079b8:	697b      	ldr	r3, [r7, #20]
	}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3718      	adds	r7, #24
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	20000990 	.word	0x20000990
 80079c8:	20000e6c 	.word	0x20000e6c
 80079cc:	20000994 	.word	0x20000994

080079d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80079de:	2301      	movs	r3, #1
 80079e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d06c      	beq.n	8007ac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d10b      	bne.n	8007a08 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	60fb      	str	r3, [r7, #12]
}
 8007a02:	bf00      	nop
 8007a04:	bf00      	nop
 8007a06:	e7fd      	b.n	8007a04 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a08:	69bb      	ldr	r3, [r7, #24]
 8007a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d902      	bls.n	8007a18 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	61fb      	str	r3, [r7, #28]
 8007a16:	e002      	b.n	8007a1e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a18:	69bb      	ldr	r3, [r7, #24]
 8007a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a1c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a1e:	69bb      	ldr	r3, [r7, #24]
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	69fa      	ldr	r2, [r7, #28]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d04c      	beq.n	8007ac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d147      	bne.n	8007ac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a32:	4b26      	ldr	r3, [pc, #152]	@ (8007acc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	69ba      	ldr	r2, [r7, #24]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d10b      	bne.n	8007a54 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a40:	f383 8811 	msr	BASEPRI, r3
 8007a44:	f3bf 8f6f 	isb	sy
 8007a48:	f3bf 8f4f 	dsb	sy
 8007a4c:	60bb      	str	r3, [r7, #8]
}
 8007a4e:	bf00      	nop
 8007a50:	bf00      	nop
 8007a52:	e7fd      	b.n	8007a50 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a58:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	69fa      	ldr	r2, [r7, #28]
 8007a5e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	699b      	ldr	r3, [r3, #24]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	db04      	blt.n	8007a72 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	6959      	ldr	r1, [r3, #20]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4a13      	ldr	r2, [pc, #76]	@ (8007ad0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007a82:	4413      	add	r3, r2
 8007a84:	4299      	cmp	r1, r3
 8007a86:	d11c      	bne.n	8007ac2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a88:	69bb      	ldr	r3, [r7, #24]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fd fd8d 	bl	80055ac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a96:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d903      	bls.n	8007aa6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aa2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ad4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007aa4:	6013      	str	r3, [r2, #0]
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4a07      	ldr	r2, [pc, #28]	@ (8007ad0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ab4:	441a      	add	r2, r3
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	3304      	adds	r3, #4
 8007aba:	4619      	mov	r1, r3
 8007abc:	4610      	mov	r0, r2
 8007abe:	f7fd fd18 	bl	80054f2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007ac2:	bf00      	nop
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000990 	.word	0x20000990
 8007ad0:	20000994 	.word	0x20000994
 8007ad4:	20000e6c 	.word	0x20000e6c

08007ad8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007ad8:	b480      	push	{r7}
 8007ada:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007adc:	4b07      	ldr	r3, [pc, #28]	@ (8007afc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007ae4:	4b05      	ldr	r3, [pc, #20]	@ (8007afc <pvTaskIncrementMutexHeldCount+0x24>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007aea:	3201      	adds	r2, #1
 8007aec:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007aee:	4b03      	ldr	r3, [pc, #12]	@ (8007afc <pvTaskIncrementMutexHeldCount+0x24>)
 8007af0:	681b      	ldr	r3, [r3, #0]
	}
 8007af2:	4618      	mov	r0, r3
 8007af4:	46bd      	mov	sp, r7
 8007af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afa:	4770      	bx	lr
 8007afc:	20000990 	.word	0x20000990

08007b00 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b086      	sub	sp, #24
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	607a      	str	r2, [r7, #4]
 8007b0c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007b0e:	f000 ff03 	bl	8008918 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b12:	4b29      	ldr	r3, [pc, #164]	@ (8007bb8 <xTaskNotifyWait+0xb8>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d01c      	beq.n	8007b5a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007b20:	4b25      	ldr	r3, [pc, #148]	@ (8007bb8 <xTaskNotifyWait+0xb8>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	43d2      	mvns	r2, r2
 8007b2c:	400a      	ands	r2, r1
 8007b2e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007b32:	4b21      	ldr	r3, [pc, #132]	@ (8007bb8 <xTaskNotifyWait+0xb8>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00b      	beq.n	8007b5a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007b42:	2101      	movs	r1, #1
 8007b44:	6838      	ldr	r0, [r7, #0]
 8007b46:	f000 fa09 	bl	8007f5c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8007bbc <xTaskNotifyWait+0xbc>)
 8007b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007b5a:	f000 ff0f 	bl	800897c <vPortExitCritical>

		taskENTER_CRITICAL();
 8007b5e:	f000 fedb 	bl	8008918 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007b68:	4b13      	ldr	r3, [pc, #76]	@ (8007bb8 <xTaskNotifyWait+0xb8>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8007b74:	4b10      	ldr	r3, [pc, #64]	@ (8007bb8 <xTaskNotifyWait+0xb8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d002      	beq.n	8007b88 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007b82:	2300      	movs	r3, #0
 8007b84:	617b      	str	r3, [r7, #20]
 8007b86:	e00a      	b.n	8007b9e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8007b88:	4b0b      	ldr	r3, [pc, #44]	@ (8007bb8 <xTaskNotifyWait+0xb8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8d3 10a0 	ldr.w	r1, [r3, #160]	@ 0xa0
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	43d2      	mvns	r2, r2
 8007b94:	400a      	ands	r2, r1
 8007b96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
				xReturn = pdTRUE;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007b9e:	4b06      	ldr	r3, [pc, #24]	@ (8007bb8 <xTaskNotifyWait+0xb8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8007ba8:	f000 fee8 	bl	800897c <vPortExitCritical>

		return xReturn;
 8007bac:	697b      	ldr	r3, [r7, #20]
	}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3718      	adds	r7, #24
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	20000990 	.word	0x20000990
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08a      	sub	sp, #40	@ 0x28
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	603b      	str	r3, [r7, #0]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10b      	bne.n	8007bf2 <xTaskGenericNotify+0x32>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	61bb      	str	r3, [r7, #24]
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	e7fd      	b.n	8007bee <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007bf6:	f000 fe8f 	bl	8008918 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d004      	beq.n	8007c0a <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007c00:	6a3b      	ldr	r3, [r7, #32]
 8007c02:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007c10:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	2202      	movs	r2, #2
 8007c16:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	2b04      	cmp	r3, #4
 8007c1e:	d82e      	bhi.n	8007c7e <xTaskGenericNotify+0xbe>
 8007c20:	a201      	add	r2, pc, #4	@ (adr r2, 8007c28 <xTaskGenericNotify+0x68>)
 8007c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c26:	bf00      	nop
 8007c28:	08007ca3 	.word	0x08007ca3
 8007c2c:	08007c3d 	.word	0x08007c3d
 8007c30:	08007c4f 	.word	0x08007c4f
 8007c34:	08007c5f 	.word	0x08007c5f
 8007c38:	08007c69 	.word	0x08007c69
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	6a3b      	ldr	r3, [r7, #32]
 8007c48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007c4c:	e02c      	b.n	8007ca8 <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c54:	1c5a      	adds	r2, r3, #1
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007c5c:	e024      	b.n	8007ca8 <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	68ba      	ldr	r2, [r7, #8]
 8007c62:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007c66:	e01f      	b.n	8007ca8 <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007c68:	7ffb      	ldrb	r3, [r7, #31]
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d004      	beq.n	8007c78 <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007c6e:	6a3b      	ldr	r3, [r7, #32]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007c76:	e017      	b.n	8007ca8 <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8007c7c:	e014      	b.n	8007ca8 <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c88:	d00d      	beq.n	8007ca6 <xTaskGenericNotify+0xe6>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	617b      	str	r3, [r7, #20]
}
 8007c9c:	bf00      	nop
 8007c9e:	bf00      	nop
 8007ca0:	e7fd      	b.n	8007c9e <xTaskGenericNotify+0xde>
					break;
 8007ca2:	bf00      	nop
 8007ca4:	e000      	b.n	8007ca8 <xTaskGenericNotify+0xe8>

					break;
 8007ca6:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007ca8:	7ffb      	ldrb	r3, [r7, #31]
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d13b      	bne.n	8007d26 <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fd fc7a 	bl	80055ac <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8007d34 <xTaskGenericNotify+0x174>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d903      	bls.n	8007ccc <xTaskGenericNotify+0x10c>
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cc8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d34 <xTaskGenericNotify+0x174>)
 8007cca:	6013      	str	r3, [r2, #0]
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4a17      	ldr	r2, [pc, #92]	@ (8007d38 <xTaskGenericNotify+0x178>)
 8007cda:	441a      	add	r2, r3
 8007cdc:	6a3b      	ldr	r3, [r7, #32]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	4610      	mov	r0, r2
 8007ce4:	f7fd fc05 	bl	80054f2 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00b      	beq.n	8007d08 <xTaskGenericNotify+0x148>
	__asm volatile
 8007cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf4:	f383 8811 	msr	BASEPRI, r3
 8007cf8:	f3bf 8f6f 	isb	sy
 8007cfc:	f3bf 8f4f 	dsb	sy
 8007d00:	613b      	str	r3, [r7, #16]
}
 8007d02:	bf00      	nop
 8007d04:	bf00      	nop
 8007d06:	e7fd      	b.n	8007d04 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d08:	6a3b      	ldr	r3, [r7, #32]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d3c <xTaskGenericNotify+0x17c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d907      	bls.n	8007d26 <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007d16:	4b0a      	ldr	r3, [pc, #40]	@ (8007d40 <xTaskGenericNotify+0x180>)
 8007d18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d1c:	601a      	str	r2, [r3, #0]
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007d26:	f000 fe29 	bl	800897c <vPortExitCritical>

		return xReturn;
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3728      	adds	r7, #40	@ 0x28
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	20000e6c 	.word	0x20000e6c
 8007d38:	20000994 	.word	0x20000994
 8007d3c:	20000990 	.word	0x20000990
 8007d40:	e000ed04 	.word	0xe000ed04

08007d44 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b08e      	sub	sp, #56	@ 0x38
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	60f8      	str	r0, [r7, #12]
 8007d4c:	60b9      	str	r1, [r7, #8]
 8007d4e:	603b      	str	r3, [r7, #0]
 8007d50:	4613      	mov	r3, r2
 8007d52:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007d54:	2301      	movs	r3, #1
 8007d56:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10b      	bne.n	8007d76 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d76:	f000 feaf 	bl	8008ad8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 8007d7e:	f3ef 8211 	mrs	r2, BASEPRI
 8007d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	623a      	str	r2, [r7, #32]
 8007d94:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007d96:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d004      	beq.n	8007daa <xTaskGenericNotifyFromISR+0x66>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dac:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007db0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db6:	2202      	movs	r2, #2
 8007db8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			switch( eAction )
 8007dbc:	79fb      	ldrb	r3, [r7, #7]
 8007dbe:	2b04      	cmp	r3, #4
 8007dc0:	d82e      	bhi.n	8007e20 <xTaskGenericNotifyFromISR+0xdc>
 8007dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc8 <xTaskGenericNotifyFromISR+0x84>)
 8007dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc8:	08007e45 	.word	0x08007e45
 8007dcc:	08007ddd 	.word	0x08007ddd
 8007dd0:	08007def 	.word	0x08007def
 8007dd4:	08007dff 	.word	0x08007dff
 8007dd8:	08007e09 	.word	0x08007e09
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dde:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	431a      	orrs	r2, r3
 8007de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007de8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007dec:	e02d      	b.n	8007e4a <xTaskGenericNotifyFromISR+0x106>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007dfc:	e025      	b.n	8007e4a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					break;
 8007e06:	e020      	b.n	8007e4a <xTaskGenericNotifyFromISR+0x106>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007e08:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e0c:	2b02      	cmp	r3, #2
 8007e0e:	d004      	beq.n	8007e1a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007e10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007e18:	e017      	b.n	8007e4a <xTaskGenericNotifyFromISR+0x106>
						xReturn = pdFAIL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007e1e:	e014      	b.n	8007e4a <xTaskGenericNotifyFromISR+0x106>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e2a:	d00d      	beq.n	8007e48 <xTaskGenericNotifyFromISR+0x104>
	__asm volatile
 8007e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e30:	f383 8811 	msr	BASEPRI, r3
 8007e34:	f3bf 8f6f 	isb	sy
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	61bb      	str	r3, [r7, #24]
}
 8007e3e:	bf00      	nop
 8007e40:	bf00      	nop
 8007e42:	e7fd      	b.n	8007e40 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007e44:	bf00      	nop
 8007e46:	e000      	b.n	8007e4a <xTaskGenericNotifyFromISR+0x106>
					break;
 8007e48:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d147      	bne.n	8007ee2 <xTaskGenericNotifyFromISR+0x19e>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00b      	beq.n	8007e72 <xTaskGenericNotifyFromISR+0x12e>
	__asm volatile
 8007e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5e:	f383 8811 	msr	BASEPRI, r3
 8007e62:	f3bf 8f6f 	isb	sy
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	617b      	str	r3, [r7, #20]
}
 8007e6c:	bf00      	nop
 8007e6e:	bf00      	nop
 8007e70:	e7fd      	b.n	8007e6e <xTaskGenericNotifyFromISR+0x12a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e72:	4b21      	ldr	r3, [pc, #132]	@ (8007ef8 <xTaskGenericNotifyFromISR+0x1b4>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d11d      	bne.n	8007eb6 <xTaskGenericNotifyFromISR+0x172>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f7fd fb94 	bl	80055ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e88:	4b1c      	ldr	r3, [pc, #112]	@ (8007efc <xTaskGenericNotifyFromISR+0x1b8>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d903      	bls.n	8007e98 <xTaskGenericNotifyFromISR+0x154>
 8007e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	4a19      	ldr	r2, [pc, #100]	@ (8007efc <xTaskGenericNotifyFromISR+0x1b8>)
 8007e96:	6013      	str	r3, [r2, #0]
 8007e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	4413      	add	r3, r2
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4a16      	ldr	r2, [pc, #88]	@ (8007f00 <xTaskGenericNotifyFromISR+0x1bc>)
 8007ea6:	441a      	add	r2, r3
 8007ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eaa:	3304      	adds	r3, #4
 8007eac:	4619      	mov	r1, r3
 8007eae:	4610      	mov	r0, r2
 8007eb0:	f7fd fb1f 	bl	80054f2 <vListInsertEnd>
 8007eb4:	e005      	b.n	8007ec2 <xTaskGenericNotifyFromISR+0x17e>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb8:	3318      	adds	r3, #24
 8007eba:	4619      	mov	r1, r3
 8007ebc:	4811      	ldr	r0, [pc, #68]	@ (8007f04 <xTaskGenericNotifyFromISR+0x1c0>)
 8007ebe:	f7fd fb18 	bl	80054f2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec6:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <xTaskGenericNotifyFromISR+0x1c4>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d908      	bls.n	8007ee2 <xTaskGenericNotifyFromISR+0x19e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <xTaskGenericNotifyFromISR+0x198>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ed8:	2201      	movs	r2, #1
 8007eda:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007edc:	4b0b      	ldr	r3, [pc, #44]	@ (8007f0c <xTaskGenericNotifyFromISR+0x1c8>)
 8007ede:	2201      	movs	r2, #1
 8007ee0:	601a      	str	r2, [r3, #0]
 8007ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ee4:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f383 8811 	msr	BASEPRI, r3
}
 8007eec:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3738      	adds	r7, #56	@ 0x38
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000e8c 	.word	0x20000e8c
 8007efc:	20000e6c 	.word	0x20000e6c
 8007f00:	20000994 	.word	0x20000994
 8007f04:	20000e24 	.word	0x20000e24
 8007f08:	20000990 	.word	0x20000990
 8007f0c:	20000e78 	.word	0x20000e78

08007f10 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d102      	bne.n	8007f24 <xTaskNotifyStateClear+0x14>
 8007f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f58 <xTaskNotifyStateClear+0x48>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	e000      	b.n	8007f26 <xTaskNotifyStateClear+0x16>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8007f28:	f000 fcf6 	bl	8008918 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	2b02      	cmp	r3, #2
 8007f36:	d106      	bne.n	8007f46 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
				xReturn = pdPASS;
 8007f40:	2301      	movs	r3, #1
 8007f42:	60fb      	str	r3, [r7, #12]
 8007f44:	e001      	b.n	8007f4a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8007f46:	2300      	movs	r3, #0
 8007f48:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8007f4a:	f000 fd17 	bl	800897c <vPortExitCritical>

		return xReturn;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
	}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3710      	adds	r7, #16
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20000990 	.word	0x20000990

08007f5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f66:	4b21      	ldr	r3, [pc, #132]	@ (8007fec <prvAddCurrentTaskToDelayedList+0x90>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f6c:	4b20      	ldr	r3, [pc, #128]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	3304      	adds	r3, #4
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7fd fb1a 	bl	80055ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f7e:	d10a      	bne.n	8007f96 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d007      	beq.n	8007f96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f86:	4b1a      	ldr	r3, [pc, #104]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	4819      	ldr	r0, [pc, #100]	@ (8007ff4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f90:	f7fd faaf 	bl	80054f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f94:	e026      	b.n	8007fe4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f96:	68fa      	ldr	r2, [r7, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f9e:	4b14      	ldr	r3, [pc, #80]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d209      	bcs.n	8007fc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fae:	4b12      	ldr	r3, [pc, #72]	@ (8007ff8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4619      	mov	r1, r3
 8007fba:	4610      	mov	r0, r2
 8007fbc:	f7fd fabd 	bl	800553a <vListInsert>
}
 8007fc0:	e010      	b.n	8007fe4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8007ffc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007fc4:	681a      	ldr	r2, [r3, #0]
 8007fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	3304      	adds	r3, #4
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4610      	mov	r0, r2
 8007fd0:	f7fd fab3 	bl	800553a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	68ba      	ldr	r2, [r7, #8]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d202      	bcs.n	8007fe4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007fde:	4a08      	ldr	r2, [pc, #32]	@ (8008000 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	6013      	str	r3, [r2, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	20000e68 	.word	0x20000e68
 8007ff0:	20000990 	.word	0x20000990
 8007ff4:	20000e50 	.word	0x20000e50
 8007ff8:	20000e20 	.word	0x20000e20
 8007ffc:	20000e1c 	.word	0x20000e1c
 8008000:	20000e84 	.word	0x20000e84

08008004 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	@ 0x28
 8008008:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800800e:	f000 fb13 	bl	8008638 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008012:	4b1d      	ldr	r3, [pc, #116]	@ (8008088 <xTimerCreateTimerTask+0x84>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d021      	beq.n	800805e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800801a:	2300      	movs	r3, #0
 800801c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800801e:	2300      	movs	r3, #0
 8008020:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008022:	1d3a      	adds	r2, r7, #4
 8008024:	f107 0108 	add.w	r1, r7, #8
 8008028:	f107 030c 	add.w	r3, r7, #12
 800802c:	4618      	mov	r0, r3
 800802e:	f7fd fa19 	bl	8005464 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008032:	6879      	ldr	r1, [r7, #4]
 8008034:	68bb      	ldr	r3, [r7, #8]
 8008036:	68fa      	ldr	r2, [r7, #12]
 8008038:	9202      	str	r2, [sp, #8]
 800803a:	9301      	str	r3, [sp, #4]
 800803c:	2302      	movs	r3, #2
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	2300      	movs	r3, #0
 8008042:	460a      	mov	r2, r1
 8008044:	4911      	ldr	r1, [pc, #68]	@ (800808c <xTimerCreateTimerTask+0x88>)
 8008046:	4812      	ldr	r0, [pc, #72]	@ (8008090 <xTimerCreateTimerTask+0x8c>)
 8008048:	f7fe fce5 	bl	8006a16 <xTaskCreateStatic>
 800804c:	4603      	mov	r3, r0
 800804e:	4a11      	ldr	r2, [pc, #68]	@ (8008094 <xTimerCreateTimerTask+0x90>)
 8008050:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008052:	4b10      	ldr	r3, [pc, #64]	@ (8008094 <xTimerCreateTimerTask+0x90>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d001      	beq.n	800805e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800805a:	2301      	movs	r3, #1
 800805c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10b      	bne.n	800807c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	613b      	str	r3, [r7, #16]
}
 8008076:	bf00      	nop
 8008078:	bf00      	nop
 800807a:	e7fd      	b.n	8008078 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800807c:	697b      	ldr	r3, [r7, #20]
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	20000ec0 	.word	0x20000ec0
 800808c:	08009170 	.word	0x08009170
 8008090:	080081d1 	.word	0x080081d1
 8008094:	20000ec4 	.word	0x20000ec4

08008098 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b08a      	sub	sp, #40	@ 0x28
 800809c:	af00      	add	r7, sp, #0
 800809e:	60f8      	str	r0, [r7, #12]
 80080a0:	60b9      	str	r1, [r7, #8]
 80080a2:	607a      	str	r2, [r7, #4]
 80080a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10b      	bne.n	80080c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	623b      	str	r3, [r7, #32]
}
 80080c2:	bf00      	nop
 80080c4:	bf00      	nop
 80080c6:	e7fd      	b.n	80080c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080c8:	4b19      	ldr	r3, [pc, #100]	@ (8008130 <xTimerGenericCommand+0x98>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d02a      	beq.n	8008126 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	2b05      	cmp	r3, #5
 80080e0:	dc18      	bgt.n	8008114 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080e2:	f7ff fb7f 	bl	80077e4 <xTaskGetSchedulerState>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b02      	cmp	r3, #2
 80080ea:	d109      	bne.n	8008100 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080ec:	4b10      	ldr	r3, [pc, #64]	@ (8008130 <xTimerGenericCommand+0x98>)
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	f107 0110 	add.w	r1, r7, #16
 80080f4:	2300      	movs	r3, #0
 80080f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f8:	f7fd fbfa 	bl	80058f0 <xQueueGenericSend>
 80080fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80080fe:	e012      	b.n	8008126 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008100:	4b0b      	ldr	r3, [pc, #44]	@ (8008130 <xTimerGenericCommand+0x98>)
 8008102:	6818      	ldr	r0, [r3, #0]
 8008104:	f107 0110 	add.w	r1, r7, #16
 8008108:	2300      	movs	r3, #0
 800810a:	2200      	movs	r2, #0
 800810c:	f7fd fbf0 	bl	80058f0 <xQueueGenericSend>
 8008110:	6278      	str	r0, [r7, #36]	@ 0x24
 8008112:	e008      	b.n	8008126 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008114:	4b06      	ldr	r3, [pc, #24]	@ (8008130 <xTimerGenericCommand+0x98>)
 8008116:	6818      	ldr	r0, [r3, #0]
 8008118:	f107 0110 	add.w	r1, r7, #16
 800811c:	2300      	movs	r3, #0
 800811e:	683a      	ldr	r2, [r7, #0]
 8008120:	f7fd fce8 	bl	8005af4 <xQueueGenericSendFromISR>
 8008124:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008128:	4618      	mov	r0, r3
 800812a:	3728      	adds	r7, #40	@ 0x28
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	20000ec0 	.word	0x20000ec0

08008134 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b088      	sub	sp, #32
 8008138:	af02      	add	r7, sp, #8
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800813e:	4b23      	ldr	r3, [pc, #140]	@ (80081cc <prvProcessExpiredTimer+0x98>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	3304      	adds	r3, #4
 800814c:	4618      	mov	r0, r3
 800814e:	f7fd fa2d 	bl	80055ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008158:	f003 0304 	and.w	r3, r3, #4
 800815c:	2b00      	cmp	r3, #0
 800815e:	d023      	beq.n	80081a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	699a      	ldr	r2, [r3, #24]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	18d1      	adds	r1, r2, r3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	683a      	ldr	r2, [r7, #0]
 800816c:	6978      	ldr	r0, [r7, #20]
 800816e:	f000 f8d5 	bl	800831c <prvInsertTimerInActiveList>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d020      	beq.n	80081ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008178:	2300      	movs	r3, #0
 800817a:	9300      	str	r3, [sp, #0]
 800817c:	2300      	movs	r3, #0
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	2100      	movs	r1, #0
 8008182:	6978      	ldr	r0, [r7, #20]
 8008184:	f7ff ff88 	bl	8008098 <xTimerGenericCommand>
 8008188:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d114      	bne.n	80081ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	60fb      	str	r3, [r7, #12]
}
 80081a2:	bf00      	nop
 80081a4:	bf00      	nop
 80081a6:	e7fd      	b.n	80081a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081ae:	f023 0301 	bic.w	r3, r3, #1
 80081b2:	b2da      	uxtb	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	6978      	ldr	r0, [r7, #20]
 80081c0:	4798      	blx	r3
}
 80081c2:	bf00      	nop
 80081c4:	3718      	adds	r7, #24
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000eb8 	.word	0x20000eb8

080081d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081d8:	f107 0308 	add.w	r3, r7, #8
 80081dc:	4618      	mov	r0, r3
 80081de:	f000 f859 	bl	8008294 <prvGetNextExpireTime>
 80081e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4619      	mov	r1, r3
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f000 f805 	bl	80081f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081ee:	f000 f8d7 	bl	80083a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081f2:	bf00      	nop
 80081f4:	e7f0      	b.n	80081d8 <prvTimerTask+0x8>
	...

080081f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008202:	f7fe feeb 	bl	8006fdc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008206:	f107 0308 	add.w	r3, r7, #8
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f866 	bl	80082dc <prvSampleTimeNow>
 8008210:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d130      	bne.n	800827a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10a      	bne.n	8008234 <prvProcessTimerOrBlockTask+0x3c>
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	429a      	cmp	r2, r3
 8008224:	d806      	bhi.n	8008234 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008226:	f7fe fee7 	bl	8006ff8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800822a:	68f9      	ldr	r1, [r7, #12]
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f7ff ff81 	bl	8008134 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008232:	e024      	b.n	800827e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d008      	beq.n	800824c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800823a:	4b13      	ldr	r3, [pc, #76]	@ (8008288 <prvProcessTimerOrBlockTask+0x90>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <prvProcessTimerOrBlockTask+0x50>
 8008244:	2301      	movs	r3, #1
 8008246:	e000      	b.n	800824a <prvProcessTimerOrBlockTask+0x52>
 8008248:	2300      	movs	r3, #0
 800824a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800824c:	4b0f      	ldr	r3, [pc, #60]	@ (800828c <prvProcessTimerOrBlockTask+0x94>)
 800824e:	6818      	ldr	r0, [r3, #0]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	683a      	ldr	r2, [r7, #0]
 8008258:	4619      	mov	r1, r3
 800825a:	f7fe f82d 	bl	80062b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800825e:	f7fe fecb 	bl	8006ff8 <xTaskResumeAll>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d10a      	bne.n	800827e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008268:	4b09      	ldr	r3, [pc, #36]	@ (8008290 <prvProcessTimerOrBlockTask+0x98>)
 800826a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800826e:	601a      	str	r2, [r3, #0]
 8008270:	f3bf 8f4f 	dsb	sy
 8008274:	f3bf 8f6f 	isb	sy
}
 8008278:	e001      	b.n	800827e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800827a:	f7fe febd 	bl	8006ff8 <xTaskResumeAll>
}
 800827e:	bf00      	nop
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	20000ebc 	.word	0x20000ebc
 800828c:	20000ec0 	.word	0x20000ec0
 8008290:	e000ed04 	.word	0xe000ed04

08008294 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008294:	b480      	push	{r7}
 8008296:	b085      	sub	sp, #20
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800829c:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <prvGetNextExpireTime+0x44>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d101      	bne.n	80082aa <prvGetNextExpireTime+0x16>
 80082a6:	2201      	movs	r2, #1
 80082a8:	e000      	b.n	80082ac <prvGetNextExpireTime+0x18>
 80082aa:	2200      	movs	r2, #0
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d105      	bne.n	80082c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082b8:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <prvGetNextExpireTime+0x44>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	e001      	b.n	80082c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082c8:	68fb      	ldr	r3, [r7, #12]
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000eb8 	.word	0x20000eb8

080082dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082e4:	f7fe ff26 	bl	8007134 <xTaskGetTickCount>
 80082e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082ea:	4b0b      	ldr	r3, [pc, #44]	@ (8008318 <prvSampleTimeNow+0x3c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d205      	bcs.n	8008300 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082f4:	f000 f93a 	bl	800856c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
 80082fe:	e002      	b.n	8008306 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008306:	4a04      	ldr	r2, [pc, #16]	@ (8008318 <prvSampleTimeNow+0x3c>)
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800830c:	68fb      	ldr	r3, [r7, #12]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20000ec8 	.word	0x20000ec8

0800831c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	60f8      	str	r0, [r7, #12]
 8008324:	60b9      	str	r1, [r7, #8]
 8008326:	607a      	str	r2, [r7, #4]
 8008328:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	429a      	cmp	r2, r3
 8008340:	d812      	bhi.n	8008368 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	1ad2      	subs	r2, r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	429a      	cmp	r2, r3
 800834e:	d302      	bcc.n	8008356 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008350:	2301      	movs	r3, #1
 8008352:	617b      	str	r3, [r7, #20]
 8008354:	e01b      	b.n	800838e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008356:	4b10      	ldr	r3, [pc, #64]	@ (8008398 <prvInsertTimerInActiveList+0x7c>)
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	3304      	adds	r3, #4
 800835e:	4619      	mov	r1, r3
 8008360:	4610      	mov	r0, r2
 8008362:	f7fd f8ea 	bl	800553a <vListInsert>
 8008366:	e012      	b.n	800838e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d206      	bcs.n	800837e <prvInsertTimerInActiveList+0x62>
 8008370:	68ba      	ldr	r2, [r7, #8]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	429a      	cmp	r2, r3
 8008376:	d302      	bcc.n	800837e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008378:	2301      	movs	r3, #1
 800837a:	617b      	str	r3, [r7, #20]
 800837c:	e007      	b.n	800838e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800837e:	4b07      	ldr	r3, [pc, #28]	@ (800839c <prvInsertTimerInActiveList+0x80>)
 8008380:	681a      	ldr	r2, [r3, #0]
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	3304      	adds	r3, #4
 8008386:	4619      	mov	r1, r3
 8008388:	4610      	mov	r0, r2
 800838a:	f7fd f8d6 	bl	800553a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800838e:	697b      	ldr	r3, [r7, #20]
}
 8008390:	4618      	mov	r0, r3
 8008392:	3718      	adds	r7, #24
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}
 8008398:	20000ebc 	.word	0x20000ebc
 800839c:	20000eb8 	.word	0x20000eb8

080083a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b08e      	sub	sp, #56	@ 0x38
 80083a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083a6:	e0ce      	b.n	8008546 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	da19      	bge.n	80083e2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083ae:	1d3b      	adds	r3, r7, #4
 80083b0:	3304      	adds	r3, #4
 80083b2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	61fb      	str	r3, [r7, #28]
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80083d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083d8:	6850      	ldr	r0, [r2, #4]
 80083da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083dc:	6892      	ldr	r2, [r2, #8]
 80083de:	4611      	mov	r1, r2
 80083e0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f2c0 80ae 	blt.w	8008546 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	3304      	adds	r3, #4
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fd f8d6 	bl	80055ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008400:	463b      	mov	r3, r7
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff ff6a 	bl	80082dc <prvSampleTimeNow>
 8008408:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b09      	cmp	r3, #9
 800840e:	f200 8097 	bhi.w	8008540 <prvProcessReceivedCommands+0x1a0>
 8008412:	a201      	add	r2, pc, #4	@ (adr r2, 8008418 <prvProcessReceivedCommands+0x78>)
 8008414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008418:	08008441 	.word	0x08008441
 800841c:	08008441 	.word	0x08008441
 8008420:	08008441 	.word	0x08008441
 8008424:	080084b7 	.word	0x080084b7
 8008428:	080084cb 	.word	0x080084cb
 800842c:	08008517 	.word	0x08008517
 8008430:	08008441 	.word	0x08008441
 8008434:	08008441 	.word	0x08008441
 8008438:	080084b7 	.word	0x080084b7
 800843c:	080084cb 	.word	0x080084cb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008442:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008446:	f043 0301 	orr.w	r3, r3, #1
 800844a:	b2da      	uxtb	r2, r3
 800844c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008452:	68ba      	ldr	r2, [r7, #8]
 8008454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008456:	699b      	ldr	r3, [r3, #24]
 8008458:	18d1      	adds	r1, r2, r3
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800845e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008460:	f7ff ff5c 	bl	800831c <prvInsertTimerInActiveList>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d06c      	beq.n	8008544 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008470:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008478:	f003 0304 	and.w	r3, r3, #4
 800847c:	2b00      	cmp	r3, #0
 800847e:	d061      	beq.n	8008544 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	441a      	add	r2, r3
 8008488:	2300      	movs	r3, #0
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	2300      	movs	r3, #0
 800848e:	2100      	movs	r1, #0
 8008490:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008492:	f7ff fe01 	bl	8008098 <xTimerGenericCommand>
 8008496:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d152      	bne.n	8008544 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	61bb      	str	r3, [r7, #24]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084bc:	f023 0301 	bic.w	r3, r3, #1
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084c8:	e03d      	b.n	8008546 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084d0:	f043 0301 	orr.w	r3, r3, #1
 80084d4:	b2da      	uxtb	r2, r3
 80084d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80084e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d10b      	bne.n	8008502 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80084ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ee:	f383 8811 	msr	BASEPRI, r3
 80084f2:	f3bf 8f6f 	isb	sy
 80084f6:	f3bf 8f4f 	dsb	sy
 80084fa:	617b      	str	r3, [r7, #20]
}
 80084fc:	bf00      	nop
 80084fe:	bf00      	nop
 8008500:	e7fd      	b.n	80084fe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008504:	699a      	ldr	r2, [r3, #24]
 8008506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008508:	18d1      	adds	r1, r2, r3
 800850a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800850c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800850e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008510:	f7ff ff04 	bl	800831c <prvInsertTimerInActiveList>
					break;
 8008514:	e017      	b.n	8008546 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008518:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800851c:	f003 0302 	and.w	r3, r3, #2
 8008520:	2b00      	cmp	r3, #0
 8008522:	d103      	bne.n	800852c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008524:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008526:	f000 fbe7 	bl	8008cf8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800852a:	e00c      	b.n	8008546 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800852c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800852e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008532:	f023 0301 	bic.w	r3, r3, #1
 8008536:	b2da      	uxtb	r2, r3
 8008538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800853a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800853e:	e002      	b.n	8008546 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008540:	bf00      	nop
 8008542:	e000      	b.n	8008546 <prvProcessReceivedCommands+0x1a6>
					break;
 8008544:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008546:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <prvProcessReceivedCommands+0x1c8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	1d39      	adds	r1, r7, #4
 800854c:	2200      	movs	r2, #0
 800854e:	4618      	mov	r0, r3
 8008550:	f7fd fb6e 	bl	8005c30 <xQueueReceive>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	f47f af26 	bne.w	80083a8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	3730      	adds	r7, #48	@ 0x30
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000ec0 	.word	0x20000ec0

0800856c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008572:	e049      	b.n	8008608 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008574:	4b2e      	ldr	r3, [pc, #184]	@ (8008630 <prvSwitchTimerLists+0xc4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800857e:	4b2c      	ldr	r3, [pc, #176]	@ (8008630 <prvSwitchTimerLists+0xc4>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	68db      	ldr	r3, [r3, #12]
 8008584:	68db      	ldr	r3, [r3, #12]
 8008586:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	3304      	adds	r3, #4
 800858c:	4618      	mov	r0, r3
 800858e:	f7fd f80d 	bl	80055ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6a1b      	ldr	r3, [r3, #32]
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085a0:	f003 0304 	and.w	r3, r3, #4
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d02f      	beq.n	8008608 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	699b      	ldr	r3, [r3, #24]
 80085ac:	693a      	ldr	r2, [r7, #16]
 80085ae:	4413      	add	r3, r2
 80085b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	429a      	cmp	r2, r3
 80085b8:	d90e      	bls.n	80085d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085c6:	4b1a      	ldr	r3, [pc, #104]	@ (8008630 <prvSwitchTimerLists+0xc4>)
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	3304      	adds	r3, #4
 80085ce:	4619      	mov	r1, r3
 80085d0:	4610      	mov	r0, r2
 80085d2:	f7fc ffb2 	bl	800553a <vListInsert>
 80085d6:	e017      	b.n	8008608 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085d8:	2300      	movs	r3, #0
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	2300      	movs	r3, #0
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	2100      	movs	r1, #0
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f7ff fd58 	bl	8008098 <xTimerGenericCommand>
 80085e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d10b      	bne.n	8008608 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80085f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f4:	f383 8811 	msr	BASEPRI, r3
 80085f8:	f3bf 8f6f 	isb	sy
 80085fc:	f3bf 8f4f 	dsb	sy
 8008600:	603b      	str	r3, [r7, #0]
}
 8008602:	bf00      	nop
 8008604:	bf00      	nop
 8008606:	e7fd      	b.n	8008604 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008608:	4b09      	ldr	r3, [pc, #36]	@ (8008630 <prvSwitchTimerLists+0xc4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1b0      	bne.n	8008574 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008612:	4b07      	ldr	r3, [pc, #28]	@ (8008630 <prvSwitchTimerLists+0xc4>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008618:	4b06      	ldr	r3, [pc, #24]	@ (8008634 <prvSwitchTimerLists+0xc8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a04      	ldr	r2, [pc, #16]	@ (8008630 <prvSwitchTimerLists+0xc4>)
 800861e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008620:	4a04      	ldr	r2, [pc, #16]	@ (8008634 <prvSwitchTimerLists+0xc8>)
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	6013      	str	r3, [r2, #0]
}
 8008626:	bf00      	nop
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000eb8 	.word	0x20000eb8
 8008634:	20000ebc 	.word	0x20000ebc

08008638 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800863e:	f000 f96b 	bl	8008918 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008642:	4b15      	ldr	r3, [pc, #84]	@ (8008698 <prvCheckForValidListAndQueue+0x60>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d120      	bne.n	800868c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800864a:	4814      	ldr	r0, [pc, #80]	@ (800869c <prvCheckForValidListAndQueue+0x64>)
 800864c:	f7fc ff24 	bl	8005498 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008650:	4813      	ldr	r0, [pc, #76]	@ (80086a0 <prvCheckForValidListAndQueue+0x68>)
 8008652:	f7fc ff21 	bl	8005498 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008656:	4b13      	ldr	r3, [pc, #76]	@ (80086a4 <prvCheckForValidListAndQueue+0x6c>)
 8008658:	4a10      	ldr	r2, [pc, #64]	@ (800869c <prvCheckForValidListAndQueue+0x64>)
 800865a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800865c:	4b12      	ldr	r3, [pc, #72]	@ (80086a8 <prvCheckForValidListAndQueue+0x70>)
 800865e:	4a10      	ldr	r2, [pc, #64]	@ (80086a0 <prvCheckForValidListAndQueue+0x68>)
 8008660:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008662:	2300      	movs	r3, #0
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	4b11      	ldr	r3, [pc, #68]	@ (80086ac <prvCheckForValidListAndQueue+0x74>)
 8008668:	4a11      	ldr	r2, [pc, #68]	@ (80086b0 <prvCheckForValidListAndQueue+0x78>)
 800866a:	2110      	movs	r1, #16
 800866c:	200a      	movs	r0, #10
 800866e:	f7fd f831 	bl	80056d4 <xQueueGenericCreateStatic>
 8008672:	4603      	mov	r3, r0
 8008674:	4a08      	ldr	r2, [pc, #32]	@ (8008698 <prvCheckForValidListAndQueue+0x60>)
 8008676:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008678:	4b07      	ldr	r3, [pc, #28]	@ (8008698 <prvCheckForValidListAndQueue+0x60>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d005      	beq.n	800868c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008680:	4b05      	ldr	r3, [pc, #20]	@ (8008698 <prvCheckForValidListAndQueue+0x60>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	490b      	ldr	r1, [pc, #44]	@ (80086b4 <prvCheckForValidListAndQueue+0x7c>)
 8008686:	4618      	mov	r0, r3
 8008688:	f7fd fdec 	bl	8006264 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800868c:	f000 f976 	bl	800897c <vPortExitCritical>
}
 8008690:	bf00      	nop
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20000ec0 	.word	0x20000ec0
 800869c:	20000e90 	.word	0x20000e90
 80086a0:	20000ea4 	.word	0x20000ea4
 80086a4:	20000eb8 	.word	0x20000eb8
 80086a8:	20000ebc 	.word	0x20000ebc
 80086ac:	20000f6c 	.word	0x20000f6c
 80086b0:	20000ecc 	.word	0x20000ecc
 80086b4:	08009178 	.word	0x08009178

080086b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3b04      	subs	r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80086d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	3b04      	subs	r3, #4
 80086d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	f023 0201 	bic.w	r2, r3, #1
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	3b04      	subs	r3, #4
 80086e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80086e8:	4a0c      	ldr	r2, [pc, #48]	@ (800871c <pxPortInitialiseStack+0x64>)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3b14      	subs	r3, #20
 80086f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	3b04      	subs	r3, #4
 80086fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f06f 0202 	mvn.w	r2, #2
 8008706:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	3b20      	subs	r3, #32
 800870c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800870e:	68fb      	ldr	r3, [r7, #12]
}
 8008710:	4618      	mov	r0, r3
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	08008721 	.word	0x08008721

08008720 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800872a:	4b13      	ldr	r3, [pc, #76]	@ (8008778 <prvTaskExitError+0x58>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008732:	d00b      	beq.n	800874c <prvTaskExitError+0x2c>
	__asm volatile
 8008734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008738:	f383 8811 	msr	BASEPRI, r3
 800873c:	f3bf 8f6f 	isb	sy
 8008740:	f3bf 8f4f 	dsb	sy
 8008744:	60fb      	str	r3, [r7, #12]
}
 8008746:	bf00      	nop
 8008748:	bf00      	nop
 800874a:	e7fd      	b.n	8008748 <prvTaskExitError+0x28>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	60bb      	str	r3, [r7, #8]
}
 800875e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008760:	bf00      	nop
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0fc      	beq.n	8008762 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	20000014 	.word	0x20000014
 800877c:	00000000 	.word	0x00000000

08008780 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008780:	4b07      	ldr	r3, [pc, #28]	@ (80087a0 <pxCurrentTCBConst2>)
 8008782:	6819      	ldr	r1, [r3, #0]
 8008784:	6808      	ldr	r0, [r1, #0]
 8008786:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800878a:	f380 8809 	msr	PSP, r0
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f04f 0000 	mov.w	r0, #0
 8008796:	f380 8811 	msr	BASEPRI, r0
 800879a:	4770      	bx	lr
 800879c:	f3af 8000 	nop.w

080087a0 <pxCurrentTCBConst2>:
 80087a0:	20000990 	.word	0x20000990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop

080087a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80087a8:	4808      	ldr	r0, [pc, #32]	@ (80087cc <prvPortStartFirstTask+0x24>)
 80087aa:	6800      	ldr	r0, [r0, #0]
 80087ac:	6800      	ldr	r0, [r0, #0]
 80087ae:	f380 8808 	msr	MSP, r0
 80087b2:	f04f 0000 	mov.w	r0, #0
 80087b6:	f380 8814 	msr	CONTROL, r0
 80087ba:	b662      	cpsie	i
 80087bc:	b661      	cpsie	f
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	f3bf 8f6f 	isb	sy
 80087c6:	df00      	svc	0
 80087c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80087ca:	bf00      	nop
 80087cc:	e000ed08 	.word	0xe000ed08

080087d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80087d6:	4b47      	ldr	r3, [pc, #284]	@ (80088f4 <xPortStartScheduler+0x124>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a47      	ldr	r2, [pc, #284]	@ (80088f8 <xPortStartScheduler+0x128>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d10b      	bne.n	80087f8 <xPortStartScheduler+0x28>
	__asm volatile
 80087e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e4:	f383 8811 	msr	BASEPRI, r3
 80087e8:	f3bf 8f6f 	isb	sy
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	613b      	str	r3, [r7, #16]
}
 80087f2:	bf00      	nop
 80087f4:	bf00      	nop
 80087f6:	e7fd      	b.n	80087f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80087f8:	4b3e      	ldr	r3, [pc, #248]	@ (80088f4 <xPortStartScheduler+0x124>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a3f      	ldr	r2, [pc, #252]	@ (80088fc <xPortStartScheduler+0x12c>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d10b      	bne.n	800881a <xPortStartScheduler+0x4a>
	__asm volatile
 8008802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008806:	f383 8811 	msr	BASEPRI, r3
 800880a:	f3bf 8f6f 	isb	sy
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	60fb      	str	r3, [r7, #12]
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop
 8008818:	e7fd      	b.n	8008816 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800881a:	4b39      	ldr	r3, [pc, #228]	@ (8008900 <xPortStartScheduler+0x130>)
 800881c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	781b      	ldrb	r3, [r3, #0]
 8008822:	b2db      	uxtb	r3, r3
 8008824:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	22ff      	movs	r2, #255	@ 0xff
 800882a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	b2db      	uxtb	r3, r3
 8008832:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008834:	78fb      	ldrb	r3, [r7, #3]
 8008836:	b2db      	uxtb	r3, r3
 8008838:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800883c:	b2da      	uxtb	r2, r3
 800883e:	4b31      	ldr	r3, [pc, #196]	@ (8008904 <xPortStartScheduler+0x134>)
 8008840:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008842:	4b31      	ldr	r3, [pc, #196]	@ (8008908 <xPortStartScheduler+0x138>)
 8008844:	2207      	movs	r2, #7
 8008846:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008848:	e009      	b.n	800885e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800884a:	4b2f      	ldr	r3, [pc, #188]	@ (8008908 <xPortStartScheduler+0x138>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3b01      	subs	r3, #1
 8008850:	4a2d      	ldr	r2, [pc, #180]	@ (8008908 <xPortStartScheduler+0x138>)
 8008852:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008854:	78fb      	ldrb	r3, [r7, #3]
 8008856:	b2db      	uxtb	r3, r3
 8008858:	005b      	lsls	r3, r3, #1
 800885a:	b2db      	uxtb	r3, r3
 800885c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008866:	2b80      	cmp	r3, #128	@ 0x80
 8008868:	d0ef      	beq.n	800884a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800886a:	4b27      	ldr	r3, [pc, #156]	@ (8008908 <xPortStartScheduler+0x138>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f1c3 0307 	rsb	r3, r3, #7
 8008872:	2b04      	cmp	r3, #4
 8008874:	d00b      	beq.n	800888e <xPortStartScheduler+0xbe>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	60bb      	str	r3, [r7, #8]
}
 8008888:	bf00      	nop
 800888a:	bf00      	nop
 800888c:	e7fd      	b.n	800888a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800888e:	4b1e      	ldr	r3, [pc, #120]	@ (8008908 <xPortStartScheduler+0x138>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	021b      	lsls	r3, r3, #8
 8008894:	4a1c      	ldr	r2, [pc, #112]	@ (8008908 <xPortStartScheduler+0x138>)
 8008896:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008898:	4b1b      	ldr	r3, [pc, #108]	@ (8008908 <xPortStartScheduler+0x138>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088a0:	4a19      	ldr	r2, [pc, #100]	@ (8008908 <xPortStartScheduler+0x138>)
 80088a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	b2da      	uxtb	r2, r3
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80088ac:	4b17      	ldr	r3, [pc, #92]	@ (800890c <xPortStartScheduler+0x13c>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a16      	ldr	r2, [pc, #88]	@ (800890c <xPortStartScheduler+0x13c>)
 80088b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80088b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80088b8:	4b14      	ldr	r3, [pc, #80]	@ (800890c <xPortStartScheduler+0x13c>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a13      	ldr	r2, [pc, #76]	@ (800890c <xPortStartScheduler+0x13c>)
 80088be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80088c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80088c4:	f000 f8da 	bl	8008a7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80088c8:	4b11      	ldr	r3, [pc, #68]	@ (8008910 <xPortStartScheduler+0x140>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80088ce:	f000 f8f9 	bl	8008ac4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80088d2:	4b10      	ldr	r3, [pc, #64]	@ (8008914 <xPortStartScheduler+0x144>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008914 <xPortStartScheduler+0x144>)
 80088d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80088dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80088de:	f7ff ff63 	bl	80087a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80088e2:	f7fe fcf1 	bl	80072c8 <vTaskSwitchContext>
	prvTaskExitError();
 80088e6:	f7ff ff1b 	bl	8008720 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3718      	adds	r7, #24
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	e000ed00 	.word	0xe000ed00
 80088f8:	410fc271 	.word	0x410fc271
 80088fc:	410fc270 	.word	0x410fc270
 8008900:	e000e400 	.word	0xe000e400
 8008904:	20000fbc 	.word	0x20000fbc
 8008908:	20000fc0 	.word	0x20000fc0
 800890c:	e000ed20 	.word	0xe000ed20
 8008910:	20000014 	.word	0x20000014
 8008914:	e000ef34 	.word	0xe000ef34

08008918 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008932:	4b10      	ldr	r3, [pc, #64]	@ (8008974 <vPortEnterCritical+0x5c>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3301      	adds	r3, #1
 8008938:	4a0e      	ldr	r2, [pc, #56]	@ (8008974 <vPortEnterCritical+0x5c>)
 800893a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800893c:	4b0d      	ldr	r3, [pc, #52]	@ (8008974 <vPortEnterCritical+0x5c>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d110      	bne.n	8008966 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008944:	4b0c      	ldr	r3, [pc, #48]	@ (8008978 <vPortEnterCritical+0x60>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00b      	beq.n	8008966 <vPortEnterCritical+0x4e>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	603b      	str	r3, [r7, #0]
}
 8008960:	bf00      	nop
 8008962:	bf00      	nop
 8008964:	e7fd      	b.n	8008962 <vPortEnterCritical+0x4a>
	}
}
 8008966:	bf00      	nop
 8008968:	370c      	adds	r7, #12
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr
 8008972:	bf00      	nop
 8008974:	20000014 	.word	0x20000014
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008982:	4b12      	ldr	r3, [pc, #72]	@ (80089cc <vPortExitCritical+0x50>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10b      	bne.n	80089a2 <vPortExitCritical+0x26>
	__asm volatile
 800898a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898e:	f383 8811 	msr	BASEPRI, r3
 8008992:	f3bf 8f6f 	isb	sy
 8008996:	f3bf 8f4f 	dsb	sy
 800899a:	607b      	str	r3, [r7, #4]
}
 800899c:	bf00      	nop
 800899e:	bf00      	nop
 80089a0:	e7fd      	b.n	800899e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80089a2:	4b0a      	ldr	r3, [pc, #40]	@ (80089cc <vPortExitCritical+0x50>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	4a08      	ldr	r2, [pc, #32]	@ (80089cc <vPortExitCritical+0x50>)
 80089aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80089ac:	4b07      	ldr	r3, [pc, #28]	@ (80089cc <vPortExitCritical+0x50>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d105      	bne.n	80089c0 <vPortExitCritical+0x44>
 80089b4:	2300      	movs	r3, #0
 80089b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	f383 8811 	msr	BASEPRI, r3
}
 80089be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	20000014 	.word	0x20000014

080089d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80089d0:	f3ef 8009 	mrs	r0, PSP
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	4b15      	ldr	r3, [pc, #84]	@ (8008a30 <pxCurrentTCBConst>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	f01e 0f10 	tst.w	lr, #16
 80089e0:	bf08      	it	eq
 80089e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80089e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	6010      	str	r0, [r2, #0]
 80089ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80089f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80089f4:	f380 8811 	msr	BASEPRI, r0
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	f3bf 8f6f 	isb	sy
 8008a00:	f7fe fc62 	bl	80072c8 <vTaskSwitchContext>
 8008a04:	f04f 0000 	mov.w	r0, #0
 8008a08:	f380 8811 	msr	BASEPRI, r0
 8008a0c:	bc09      	pop	{r0, r3}
 8008a0e:	6819      	ldr	r1, [r3, #0]
 8008a10:	6808      	ldr	r0, [r1, #0]
 8008a12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a16:	f01e 0f10 	tst.w	lr, #16
 8008a1a:	bf08      	it	eq
 8008a1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a20:	f380 8809 	msr	PSP, r0
 8008a24:	f3bf 8f6f 	isb	sy
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop
 8008a2c:	f3af 8000 	nop.w

08008a30 <pxCurrentTCBConst>:
 8008a30:	20000990 	.word	0x20000990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008a34:	bf00      	nop
 8008a36:	bf00      	nop

08008a38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	b082      	sub	sp, #8
 8008a3c:	af00      	add	r7, sp, #0
	__asm volatile
 8008a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a42:	f383 8811 	msr	BASEPRI, r3
 8008a46:	f3bf 8f6f 	isb	sy
 8008a4a:	f3bf 8f4f 	dsb	sy
 8008a4e:	607b      	str	r3, [r7, #4]
}
 8008a50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008a52:	f7fe fb7f 	bl	8007154 <xTaskIncrementTick>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a5c:	4b06      	ldr	r3, [pc, #24]	@ (8008a78 <xPortSysTickHandler+0x40>)
 8008a5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	f383 8811 	msr	BASEPRI, r3
}
 8008a6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008a70:	bf00      	nop
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	e000ed04 	.word	0xe000ed04

08008a7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a80:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <vPortSetupTimerInterrupt+0x34>)
 8008a82:	2200      	movs	r2, #0
 8008a84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a86:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab4 <vPortSetupTimerInterrupt+0x38>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008ab8 <vPortSetupTimerInterrupt+0x3c>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a0a      	ldr	r2, [pc, #40]	@ (8008abc <vPortSetupTimerInterrupt+0x40>)
 8008a92:	fba2 2303 	umull	r2, r3, r2, r3
 8008a96:	099b      	lsrs	r3, r3, #6
 8008a98:	4a09      	ldr	r2, [pc, #36]	@ (8008ac0 <vPortSetupTimerInterrupt+0x44>)
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a9e:	4b04      	ldr	r3, [pc, #16]	@ (8008ab0 <vPortSetupTimerInterrupt+0x34>)
 8008aa0:	2207      	movs	r2, #7
 8008aa2:	601a      	str	r2, [r3, #0]
}
 8008aa4:	bf00      	nop
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr
 8008aae:	bf00      	nop
 8008ab0:	e000e010 	.word	0xe000e010
 8008ab4:	e000e018 	.word	0xe000e018
 8008ab8:	20000008 	.word	0x20000008
 8008abc:	10624dd3 	.word	0x10624dd3
 8008ac0:	e000e014 	.word	0xe000e014

08008ac4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008ac4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008ad4 <vPortEnableVFP+0x10>
 8008ac8:	6801      	ldr	r1, [r0, #0]
 8008aca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008ace:	6001      	str	r1, [r0, #0]
 8008ad0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008ad2:	bf00      	nop
 8008ad4:	e000ed88 	.word	0xe000ed88

08008ad8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008ad8:	b480      	push	{r7}
 8008ada:	b085      	sub	sp, #20
 8008adc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008ade:	f3ef 8305 	mrs	r3, IPSR
 8008ae2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b0f      	cmp	r3, #15
 8008ae8:	d915      	bls.n	8008b16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008aea:	4a18      	ldr	r2, [pc, #96]	@ (8008b4c <vPortValidateInterruptPriority+0x74>)
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	4413      	add	r3, r2
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008af4:	4b16      	ldr	r3, [pc, #88]	@ (8008b50 <vPortValidateInterruptPriority+0x78>)
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	7afa      	ldrb	r2, [r7, #11]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d20b      	bcs.n	8008b16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	607b      	str	r3, [r7, #4]
}
 8008b10:	bf00      	nop
 8008b12:	bf00      	nop
 8008b14:	e7fd      	b.n	8008b12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b16:	4b0f      	ldr	r3, [pc, #60]	@ (8008b54 <vPortValidateInterruptPriority+0x7c>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b1e:	4b0e      	ldr	r3, [pc, #56]	@ (8008b58 <vPortValidateInterruptPriority+0x80>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d90b      	bls.n	8008b3e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b2a:	f383 8811 	msr	BASEPRI, r3
 8008b2e:	f3bf 8f6f 	isb	sy
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	603b      	str	r3, [r7, #0]
}
 8008b38:	bf00      	nop
 8008b3a:	bf00      	nop
 8008b3c:	e7fd      	b.n	8008b3a <vPortValidateInterruptPriority+0x62>
	}
 8008b3e:	bf00      	nop
 8008b40:	3714      	adds	r7, #20
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr
 8008b4a:	bf00      	nop
 8008b4c:	e000e3f0 	.word	0xe000e3f0
 8008b50:	20000fbc 	.word	0x20000fbc
 8008b54:	e000ed0c 	.word	0xe000ed0c
 8008b58:	20000fc0 	.word	0x20000fc0

08008b5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b08a      	sub	sp, #40	@ 0x28
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008b64:	2300      	movs	r3, #0
 8008b66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008b68:	f7fe fa38 	bl	8006fdc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008b6c:	4b5c      	ldr	r3, [pc, #368]	@ (8008ce0 <pvPortMalloc+0x184>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008b74:	f000 f924 	bl	8008dc0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008b78:	4b5a      	ldr	r3, [pc, #360]	@ (8008ce4 <pvPortMalloc+0x188>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4013      	ands	r3, r2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f040 8095 	bne.w	8008cb0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d01e      	beq.n	8008bca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b8c:	2208      	movs	r2, #8
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	4413      	add	r3, r2
 8008b92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f003 0307 	and.w	r3, r3, #7
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d015      	beq.n	8008bca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f023 0307 	bic.w	r3, r3, #7
 8008ba4:	3308      	adds	r3, #8
 8008ba6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f003 0307 	and.w	r3, r3, #7
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d00b      	beq.n	8008bca <pvPortMalloc+0x6e>
	__asm volatile
 8008bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb6:	f383 8811 	msr	BASEPRI, r3
 8008bba:	f3bf 8f6f 	isb	sy
 8008bbe:	f3bf 8f4f 	dsb	sy
 8008bc2:	617b      	str	r3, [r7, #20]
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop
 8008bc8:	e7fd      	b.n	8008bc6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d06f      	beq.n	8008cb0 <pvPortMalloc+0x154>
 8008bd0:	4b45      	ldr	r3, [pc, #276]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	687a      	ldr	r2, [r7, #4]
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	d86a      	bhi.n	8008cb0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008bda:	4b44      	ldr	r3, [pc, #272]	@ (8008cec <pvPortMalloc+0x190>)
 8008bdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008bde:	4b43      	ldr	r3, [pc, #268]	@ (8008cec <pvPortMalloc+0x190>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008be4:	e004      	b.n	8008bf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	687a      	ldr	r2, [r7, #4]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d903      	bls.n	8008c02 <pvPortMalloc+0xa6>
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d1f1      	bne.n	8008be6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c02:	4b37      	ldr	r3, [pc, #220]	@ (8008ce0 <pvPortMalloc+0x184>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d051      	beq.n	8008cb0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c0c:	6a3b      	ldr	r3, [r7, #32]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	2208      	movs	r2, #8
 8008c12:	4413      	add	r3, r2
 8008c14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c18:	681a      	ldr	r2, [r3, #0]
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	1ad2      	subs	r2, r2, r3
 8008c26:	2308      	movs	r3, #8
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d920      	bls.n	8008c70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	f003 0307 	and.w	r3, r3, #7
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <pvPortMalloc+0xfc>
	__asm volatile
 8008c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c44:	f383 8811 	msr	BASEPRI, r3
 8008c48:	f3bf 8f6f 	isb	sy
 8008c4c:	f3bf 8f4f 	dsb	sy
 8008c50:	613b      	str	r3, [r7, #16]
}
 8008c52:	bf00      	nop
 8008c54:	bf00      	nop
 8008c56:	e7fd      	b.n	8008c54 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5a:	685a      	ldr	r2, [r3, #4]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008c6a:	69b8      	ldr	r0, [r7, #24]
 8008c6c:	f000 f90a 	bl	8008e84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008c70:	4b1d      	ldr	r3, [pc, #116]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	4a1b      	ldr	r2, [pc, #108]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	4b1b      	ldr	r3, [pc, #108]	@ (8008cf0 <pvPortMalloc+0x194>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d203      	bcs.n	8008c92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c8a:	4b17      	ldr	r3, [pc, #92]	@ (8008ce8 <pvPortMalloc+0x18c>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a18      	ldr	r2, [pc, #96]	@ (8008cf0 <pvPortMalloc+0x194>)
 8008c90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c94:	685a      	ldr	r2, [r3, #4]
 8008c96:	4b13      	ldr	r3, [pc, #76]	@ (8008ce4 <pvPortMalloc+0x188>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ca6:	4b13      	ldr	r3, [pc, #76]	@ (8008cf4 <pvPortMalloc+0x198>)
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	3301      	adds	r3, #1
 8008cac:	4a11      	ldr	r2, [pc, #68]	@ (8008cf4 <pvPortMalloc+0x198>)
 8008cae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cb0:	f7fe f9a2 	bl	8006ff8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cb4:	69fb      	ldr	r3, [r7, #28]
 8008cb6:	f003 0307 	and.w	r3, r3, #7
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00b      	beq.n	8008cd6 <pvPortMalloc+0x17a>
	__asm volatile
 8008cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	60fb      	str	r3, [r7, #12]
}
 8008cd0:	bf00      	nop
 8008cd2:	bf00      	nop
 8008cd4:	e7fd      	b.n	8008cd2 <pvPortMalloc+0x176>
	return pvReturn;
 8008cd6:	69fb      	ldr	r3, [r7, #28]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3728      	adds	r7, #40	@ 0x28
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20003eac 	.word	0x20003eac
 8008ce4:	20003ec0 	.word	0x20003ec0
 8008ce8:	20003eb0 	.word	0x20003eb0
 8008cec:	20003ea4 	.word	0x20003ea4
 8008cf0:	20003eb4 	.word	0x20003eb4
 8008cf4:	20003eb8 	.word	0x20003eb8

08008cf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b086      	sub	sp, #24
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d04f      	beq.n	8008daa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d0a:	2308      	movs	r3, #8
 8008d0c:	425b      	negs	r3, r3
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	4413      	add	r3, r2
 8008d12:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	685a      	ldr	r2, [r3, #4]
 8008d1c:	4b25      	ldr	r3, [pc, #148]	@ (8008db4 <vPortFree+0xbc>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4013      	ands	r3, r2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d10b      	bne.n	8008d3e <vPortFree+0x46>
	__asm volatile
 8008d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2a:	f383 8811 	msr	BASEPRI, r3
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f3bf 8f4f 	dsb	sy
 8008d36:	60fb      	str	r3, [r7, #12]
}
 8008d38:	bf00      	nop
 8008d3a:	bf00      	nop
 8008d3c:	e7fd      	b.n	8008d3a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00b      	beq.n	8008d5e <vPortFree+0x66>
	__asm volatile
 8008d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d4a:	f383 8811 	msr	BASEPRI, r3
 8008d4e:	f3bf 8f6f 	isb	sy
 8008d52:	f3bf 8f4f 	dsb	sy
 8008d56:	60bb      	str	r3, [r7, #8]
}
 8008d58:	bf00      	nop
 8008d5a:	bf00      	nop
 8008d5c:	e7fd      	b.n	8008d5a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	685a      	ldr	r2, [r3, #4]
 8008d62:	4b14      	ldr	r3, [pc, #80]	@ (8008db4 <vPortFree+0xbc>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d01e      	beq.n	8008daa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d11a      	bne.n	8008daa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	685a      	ldr	r2, [r3, #4]
 8008d78:	4b0e      	ldr	r3, [pc, #56]	@ (8008db4 <vPortFree+0xbc>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	401a      	ands	r2, r3
 8008d80:	693b      	ldr	r3, [r7, #16]
 8008d82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d84:	f7fe f92a 	bl	8006fdc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <vPortFree+0xc0>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4413      	add	r3, r2
 8008d92:	4a09      	ldr	r2, [pc, #36]	@ (8008db8 <vPortFree+0xc0>)
 8008d94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d96:	6938      	ldr	r0, [r7, #16]
 8008d98:	f000 f874 	bl	8008e84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d9c:	4b07      	ldr	r3, [pc, #28]	@ (8008dbc <vPortFree+0xc4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	4a06      	ldr	r2, [pc, #24]	@ (8008dbc <vPortFree+0xc4>)
 8008da4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008da6:	f7fe f927 	bl	8006ff8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008daa:	bf00      	nop
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20003ec0 	.word	0x20003ec0
 8008db8:	20003eb0 	.word	0x20003eb0
 8008dbc:	20003ebc 	.word	0x20003ebc

08008dc0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dc6:	f642 63e0 	movw	r3, #12000	@ 0x2ee0
 8008dca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dcc:	4b27      	ldr	r3, [pc, #156]	@ (8008e6c <prvHeapInit+0xac>)
 8008dce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f003 0307 	and.w	r3, r3, #7
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00c      	beq.n	8008df4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	3307      	adds	r3, #7
 8008dde:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 0307 	bic.w	r3, r3, #7
 8008de6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008de8:	68ba      	ldr	r2, [r7, #8]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	4a1f      	ldr	r2, [pc, #124]	@ (8008e6c <prvHeapInit+0xac>)
 8008df0:	4413      	add	r3, r2
 8008df2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008df8:	4a1d      	ldr	r2, [pc, #116]	@ (8008e70 <prvHeapInit+0xb0>)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008dfe:	4b1c      	ldr	r3, [pc, #112]	@ (8008e70 <prvHeapInit+0xb0>)
 8008e00:	2200      	movs	r2, #0
 8008e02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	4413      	add	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e0c:	2208      	movs	r2, #8
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	1a9b      	subs	r3, r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f023 0307 	bic.w	r3, r3, #7
 8008e1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	4a15      	ldr	r2, [pc, #84]	@ (8008e74 <prvHeapInit+0xb4>)
 8008e20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e22:	4b14      	ldr	r3, [pc, #80]	@ (8008e74 <prvHeapInit+0xb4>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2200      	movs	r2, #0
 8008e28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e2a:	4b12      	ldr	r3, [pc, #72]	@ (8008e74 <prvHeapInit+0xb4>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	68fa      	ldr	r2, [r7, #12]
 8008e3a:	1ad2      	subs	r2, r2, r3
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e40:	4b0c      	ldr	r3, [pc, #48]	@ (8008e74 <prvHeapInit+0xb4>)
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	4a0a      	ldr	r2, [pc, #40]	@ (8008e78 <prvHeapInit+0xb8>)
 8008e4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	685b      	ldr	r3, [r3, #4]
 8008e54:	4a09      	ldr	r2, [pc, #36]	@ (8008e7c <prvHeapInit+0xbc>)
 8008e56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e58:	4b09      	ldr	r3, [pc, #36]	@ (8008e80 <prvHeapInit+0xc0>)
 8008e5a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008e5e:	601a      	str	r2, [r3, #0]
}
 8008e60:	bf00      	nop
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	20000fc4 	.word	0x20000fc4
 8008e70:	20003ea4 	.word	0x20003ea4
 8008e74:	20003eac 	.word	0x20003eac
 8008e78:	20003eb4 	.word	0x20003eb4
 8008e7c:	20003eb0 	.word	0x20003eb0
 8008e80:	20003ec0 	.word	0x20003ec0

08008e84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e8c:	4b28      	ldr	r3, [pc, #160]	@ (8008f30 <prvInsertBlockIntoFreeList+0xac>)
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	e002      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x14>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d8f7      	bhi.n	8008e92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	4413      	add	r3, r2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d108      	bne.n	8008ec6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	441a      	add	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	441a      	add	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d118      	bne.n	8008f0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b15      	ldr	r3, [pc, #84]	@ (8008f34 <prvInsertBlockIntoFreeList+0xb0>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d00d      	beq.n	8008f02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	441a      	add	r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e008      	b.n	8008f14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f02:	4b0c      	ldr	r3, [pc, #48]	@ (8008f34 <prvInsertBlockIntoFreeList+0xb0>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	e003      	b.n	8008f14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d002      	beq.n	8008f22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f22:	bf00      	nop
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	20003ea4 	.word	0x20003ea4
 8008f34:	20003eac 	.word	0x20003eac

08008f38 <memset>:
 8008f38:	4402      	add	r2, r0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d100      	bne.n	8008f42 <memset+0xa>
 8008f40:	4770      	bx	lr
 8008f42:	f803 1b01 	strb.w	r1, [r3], #1
 8008f46:	e7f9      	b.n	8008f3c <memset+0x4>

08008f48 <_reclaim_reent>:
 8008f48:	4b29      	ldr	r3, [pc, #164]	@ (8008ff0 <_reclaim_reent+0xa8>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4283      	cmp	r3, r0
 8008f4e:	b570      	push	{r4, r5, r6, lr}
 8008f50:	4604      	mov	r4, r0
 8008f52:	d04b      	beq.n	8008fec <_reclaim_reent+0xa4>
 8008f54:	69c3      	ldr	r3, [r0, #28]
 8008f56:	b1ab      	cbz	r3, 8008f84 <_reclaim_reent+0x3c>
 8008f58:	68db      	ldr	r3, [r3, #12]
 8008f5a:	b16b      	cbz	r3, 8008f78 <_reclaim_reent+0x30>
 8008f5c:	2500      	movs	r5, #0
 8008f5e:	69e3      	ldr	r3, [r4, #28]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	5959      	ldr	r1, [r3, r5]
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d13b      	bne.n	8008fe0 <_reclaim_reent+0x98>
 8008f68:	3504      	adds	r5, #4
 8008f6a:	2d80      	cmp	r5, #128	@ 0x80
 8008f6c:	d1f7      	bne.n	8008f5e <_reclaim_reent+0x16>
 8008f6e:	69e3      	ldr	r3, [r4, #28]
 8008f70:	4620      	mov	r0, r4
 8008f72:	68d9      	ldr	r1, [r3, #12]
 8008f74:	f000 f872 	bl	800905c <_free_r>
 8008f78:	69e3      	ldr	r3, [r4, #28]
 8008f7a:	6819      	ldr	r1, [r3, #0]
 8008f7c:	b111      	cbz	r1, 8008f84 <_reclaim_reent+0x3c>
 8008f7e:	4620      	mov	r0, r4
 8008f80:	f000 f86c 	bl	800905c <_free_r>
 8008f84:	6961      	ldr	r1, [r4, #20]
 8008f86:	b111      	cbz	r1, 8008f8e <_reclaim_reent+0x46>
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 f867 	bl	800905c <_free_r>
 8008f8e:	69e1      	ldr	r1, [r4, #28]
 8008f90:	b111      	cbz	r1, 8008f98 <_reclaim_reent+0x50>
 8008f92:	4620      	mov	r0, r4
 8008f94:	f000 f862 	bl	800905c <_free_r>
 8008f98:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008f9a:	b111      	cbz	r1, 8008fa2 <_reclaim_reent+0x5a>
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f000 f85d 	bl	800905c <_free_r>
 8008fa2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fa4:	b111      	cbz	r1, 8008fac <_reclaim_reent+0x64>
 8008fa6:	4620      	mov	r0, r4
 8008fa8:	f000 f858 	bl	800905c <_free_r>
 8008fac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008fae:	b111      	cbz	r1, 8008fb6 <_reclaim_reent+0x6e>
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	f000 f853 	bl	800905c <_free_r>
 8008fb6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008fb8:	b111      	cbz	r1, 8008fc0 <_reclaim_reent+0x78>
 8008fba:	4620      	mov	r0, r4
 8008fbc:	f000 f84e 	bl	800905c <_free_r>
 8008fc0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008fc2:	b111      	cbz	r1, 8008fca <_reclaim_reent+0x82>
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f000 f849 	bl	800905c <_free_r>
 8008fca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008fcc:	b111      	cbz	r1, 8008fd4 <_reclaim_reent+0x8c>
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 f844 	bl	800905c <_free_r>
 8008fd4:	6a23      	ldr	r3, [r4, #32]
 8008fd6:	b14b      	cbz	r3, 8008fec <_reclaim_reent+0xa4>
 8008fd8:	4620      	mov	r0, r4
 8008fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008fde:	4718      	bx	r3
 8008fe0:	680e      	ldr	r6, [r1, #0]
 8008fe2:	4620      	mov	r0, r4
 8008fe4:	f000 f83a 	bl	800905c <_free_r>
 8008fe8:	4631      	mov	r1, r6
 8008fea:	e7bb      	b.n	8008f64 <_reclaim_reent+0x1c>
 8008fec:	bd70      	pop	{r4, r5, r6, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000018 	.word	0x20000018

08008ff4 <__libc_init_array>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	4d0d      	ldr	r5, [pc, #52]	@ (800902c <__libc_init_array+0x38>)
 8008ff8:	4c0d      	ldr	r4, [pc, #52]	@ (8009030 <__libc_init_array+0x3c>)
 8008ffa:	1b64      	subs	r4, r4, r5
 8008ffc:	10a4      	asrs	r4, r4, #2
 8008ffe:	2600      	movs	r6, #0
 8009000:	42a6      	cmp	r6, r4
 8009002:	d109      	bne.n	8009018 <__libc_init_array+0x24>
 8009004:	4d0b      	ldr	r5, [pc, #44]	@ (8009034 <__libc_init_array+0x40>)
 8009006:	4c0c      	ldr	r4, [pc, #48]	@ (8009038 <__libc_init_array+0x44>)
 8009008:	f000 f87e 	bl	8009108 <_init>
 800900c:	1b64      	subs	r4, r4, r5
 800900e:	10a4      	asrs	r4, r4, #2
 8009010:	2600      	movs	r6, #0
 8009012:	42a6      	cmp	r6, r4
 8009014:	d105      	bne.n	8009022 <__libc_init_array+0x2e>
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	f855 3b04 	ldr.w	r3, [r5], #4
 800901c:	4798      	blx	r3
 800901e:	3601      	adds	r6, #1
 8009020:	e7ee      	b.n	8009000 <__libc_init_array+0xc>
 8009022:	f855 3b04 	ldr.w	r3, [r5], #4
 8009026:	4798      	blx	r3
 8009028:	3601      	adds	r6, #1
 800902a:	e7f2      	b.n	8009012 <__libc_init_array+0x1e>
 800902c:	08009284 	.word	0x08009284
 8009030:	08009284 	.word	0x08009284
 8009034:	08009284 	.word	0x08009284
 8009038:	08009288 	.word	0x08009288

0800903c <__retarget_lock_acquire_recursive>:
 800903c:	4770      	bx	lr

0800903e <__retarget_lock_release_recursive>:
 800903e:	4770      	bx	lr

08009040 <memcpy>:
 8009040:	440a      	add	r2, r1
 8009042:	4291      	cmp	r1, r2
 8009044:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009048:	d100      	bne.n	800904c <memcpy+0xc>
 800904a:	4770      	bx	lr
 800904c:	b510      	push	{r4, lr}
 800904e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009052:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009056:	4291      	cmp	r1, r2
 8009058:	d1f9      	bne.n	800904e <memcpy+0xe>
 800905a:	bd10      	pop	{r4, pc}

0800905c <_free_r>:
 800905c:	b538      	push	{r3, r4, r5, lr}
 800905e:	4605      	mov	r5, r0
 8009060:	2900      	cmp	r1, #0
 8009062:	d041      	beq.n	80090e8 <_free_r+0x8c>
 8009064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009068:	1f0c      	subs	r4, r1, #4
 800906a:	2b00      	cmp	r3, #0
 800906c:	bfb8      	it	lt
 800906e:	18e4      	addlt	r4, r4, r3
 8009070:	f000 f83e 	bl	80090f0 <__malloc_lock>
 8009074:	4a1d      	ldr	r2, [pc, #116]	@ (80090ec <_free_r+0x90>)
 8009076:	6813      	ldr	r3, [r2, #0]
 8009078:	b933      	cbnz	r3, 8009088 <_free_r+0x2c>
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	6014      	str	r4, [r2, #0]
 800907e:	4628      	mov	r0, r5
 8009080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009084:	f000 b83a 	b.w	80090fc <__malloc_unlock>
 8009088:	42a3      	cmp	r3, r4
 800908a:	d908      	bls.n	800909e <_free_r+0x42>
 800908c:	6820      	ldr	r0, [r4, #0]
 800908e:	1821      	adds	r1, r4, r0
 8009090:	428b      	cmp	r3, r1
 8009092:	bf01      	itttt	eq
 8009094:	6819      	ldreq	r1, [r3, #0]
 8009096:	685b      	ldreq	r3, [r3, #4]
 8009098:	1809      	addeq	r1, r1, r0
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	e7ed      	b.n	800907a <_free_r+0x1e>
 800909e:	461a      	mov	r2, r3
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	b10b      	cbz	r3, 80090a8 <_free_r+0x4c>
 80090a4:	42a3      	cmp	r3, r4
 80090a6:	d9fa      	bls.n	800909e <_free_r+0x42>
 80090a8:	6811      	ldr	r1, [r2, #0]
 80090aa:	1850      	adds	r0, r2, r1
 80090ac:	42a0      	cmp	r0, r4
 80090ae:	d10b      	bne.n	80090c8 <_free_r+0x6c>
 80090b0:	6820      	ldr	r0, [r4, #0]
 80090b2:	4401      	add	r1, r0
 80090b4:	1850      	adds	r0, r2, r1
 80090b6:	4283      	cmp	r3, r0
 80090b8:	6011      	str	r1, [r2, #0]
 80090ba:	d1e0      	bne.n	800907e <_free_r+0x22>
 80090bc:	6818      	ldr	r0, [r3, #0]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	6053      	str	r3, [r2, #4]
 80090c2:	4408      	add	r0, r1
 80090c4:	6010      	str	r0, [r2, #0]
 80090c6:	e7da      	b.n	800907e <_free_r+0x22>
 80090c8:	d902      	bls.n	80090d0 <_free_r+0x74>
 80090ca:	230c      	movs	r3, #12
 80090cc:	602b      	str	r3, [r5, #0]
 80090ce:	e7d6      	b.n	800907e <_free_r+0x22>
 80090d0:	6820      	ldr	r0, [r4, #0]
 80090d2:	1821      	adds	r1, r4, r0
 80090d4:	428b      	cmp	r3, r1
 80090d6:	bf04      	itt	eq
 80090d8:	6819      	ldreq	r1, [r3, #0]
 80090da:	685b      	ldreq	r3, [r3, #4]
 80090dc:	6063      	str	r3, [r4, #4]
 80090de:	bf04      	itt	eq
 80090e0:	1809      	addeq	r1, r1, r0
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	6054      	str	r4, [r2, #4]
 80090e6:	e7ca      	b.n	800907e <_free_r+0x22>
 80090e8:	bd38      	pop	{r3, r4, r5, pc}
 80090ea:	bf00      	nop
 80090ec:	20004000 	.word	0x20004000

080090f0 <__malloc_lock>:
 80090f0:	4801      	ldr	r0, [pc, #4]	@ (80090f8 <__malloc_lock+0x8>)
 80090f2:	f7ff bfa3 	b.w	800903c <__retarget_lock_acquire_recursive>
 80090f6:	bf00      	nop
 80090f8:	20003ffc 	.word	0x20003ffc

080090fc <__malloc_unlock>:
 80090fc:	4801      	ldr	r0, [pc, #4]	@ (8009104 <__malloc_unlock+0x8>)
 80090fe:	f7ff bf9e 	b.w	800903e <__retarget_lock_release_recursive>
 8009102:	bf00      	nop
 8009104:	20003ffc 	.word	0x20003ffc

08009108 <_init>:
 8009108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800910a:	bf00      	nop
 800910c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800910e:	bc08      	pop	{r3}
 8009110:	469e      	mov	lr, r3
 8009112:	4770      	bx	lr

08009114 <_fini>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr
